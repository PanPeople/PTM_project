
PTMv1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a184  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b80  0800a298  0800a298  0001a298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ae18  0800ae18  00020254  2**0
                  CONTENTS
  4 .ARM          00000000  0800ae18  0800ae18  00020254  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ae18  0800ae18  00020254  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ae18  0800ae18  0001ae18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ae1c  0800ae1c  0001ae1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000254  20000000  0800ae20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a08  20000254  0800b074  00020254  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000c5c  0800b074  00020c5c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020254  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001553a  00000000  00000000  0002027d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031da  00000000  00000000  000357b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012d0  00000000  00000000  00038998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011a0  00000000  00000000  00039c68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a48f  00000000  00000000  0003ae08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000163be  00000000  00000000  00055297  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090ce7  00000000  00000000  0006b655  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fc33c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006284  00000000  00000000  000fc390  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000254 	.word	0x20000254
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a27c 	.word	0x0800a27c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000258 	.word	0x20000258
 800014c:	0800a27c 	.word	0x0800a27c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__aeabi_f2uiz>:
 8000fe4:	0042      	lsls	r2, r0, #1
 8000fe6:	d20e      	bcs.n	8001006 <__aeabi_f2uiz+0x22>
 8000fe8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fec:	d30b      	bcc.n	8001006 <__aeabi_f2uiz+0x22>
 8000fee:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000ff2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000ff6:	d409      	bmi.n	800100c <__aeabi_f2uiz+0x28>
 8000ff8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000ffc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001000:	fa23 f002 	lsr.w	r0, r3, r2
 8001004:	4770      	bx	lr
 8001006:	f04f 0000 	mov.w	r0, #0
 800100a:	4770      	bx	lr
 800100c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001010:	d101      	bne.n	8001016 <__aeabi_f2uiz+0x32>
 8001012:	0242      	lsls	r2, r0, #9
 8001014:	d102      	bne.n	800101c <__aeabi_f2uiz+0x38>
 8001016:	f04f 30ff 	mov.w	r0, #4294967295
 800101a:	4770      	bx	lr
 800101c:	f04f 0000 	mov.w	r0, #0
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <MS5837_init>:
I2C_HandleTypeDef *HI2C;

void  MS5837_calculate();
uint8_t  MS5837_crc4(uint16_t *n_prom);

uint8_t MS5837_init(I2C_HandleTypeDef *hi2c) {
 8001024:	b580      	push	{r7, lr}
 8001026:	b086      	sub	sp, #24
 8001028:	af02      	add	r7, sp, #8
 800102a:	6078      	str	r0, [r7, #4]

	HI2C = hi2c;
 800102c:	4a2d      	ldr	r2, [pc, #180]	; (80010e4 <MS5837_init+0xc0>)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6013      	str	r3, [r2, #0]
	// Reset the MS5837, per datasheet
	HAL_I2C_Master_Transmit(HI2C, MS5837_ADDR, &MS5837_RESET, 1, 500);
 8001032:	4b2c      	ldr	r3, [pc, #176]	; (80010e4 <MS5837_init+0xc0>)
 8001034:	6818      	ldr	r0, [r3, #0]
 8001036:	23ec      	movs	r3, #236	; 0xec
 8001038:	b299      	uxth	r1, r3
 800103a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800103e:	9300      	str	r3, [sp, #0]
 8001040:	2301      	movs	r3, #1
 8001042:	4a29      	ldr	r2, [pc, #164]	; (80010e8 <MS5837_init+0xc4>)
 8001044:	f002 fc28 	bl	8003898 <HAL_I2C_Master_Transmit>
//	Wire.beginTransmission(MS5837_ADDR);
//	Wire.write(MS5837_RESET);
//	Wire.endTransmission();

	// Wait for reset to complete
	HAL_Delay(10);
 8001048:	200a      	movs	r0, #10
 800104a:	f001 ff49 	bl	8002ee0 <HAL_Delay>

	uint8_t doopa;

	// Read calibration values and CRC
	for ( uint8_t i = 0 ; i < 8 ; i++ )
 800104e:	2300      	movs	r3, #0
 8001050:	73fb      	strb	r3, [r7, #15]
 8001052:	e02f      	b.n	80010b4 <MS5837_init+0x90>
	{
		doopa = MS5837_PROM_READ+i*2;
 8001054:	7bfb      	ldrb	r3, [r7, #15]
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	b2db      	uxtb	r3, r3
 800105a:	22a0      	movs	r2, #160	; 0xa0
 800105c:	4413      	add	r3, r2
 800105e:	b2db      	uxtb	r3, r3
 8001060:	733b      	strb	r3, [r7, #12]
		HAL_I2C_Master_Transmit(HI2C, MS5837_ADDR, &doopa, 1, 500);
 8001062:	4b20      	ldr	r3, [pc, #128]	; (80010e4 <MS5837_init+0xc0>)
 8001064:	6818      	ldr	r0, [r3, #0]
 8001066:	23ec      	movs	r3, #236	; 0xec
 8001068:	b299      	uxth	r1, r3
 800106a:	f107 020c 	add.w	r2, r7, #12
 800106e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001072:	9300      	str	r3, [sp, #0]
 8001074:	2301      	movs	r3, #1
 8001076:	f002 fc0f 	bl	8003898 <HAL_I2C_Master_Transmit>
//		Wire.beginTransmission(MS5837_ADDR);
//		Wire.write(MS5837_PROM_READ+i*2);
//		Wire.endTransmission();

		uint8_t ret[2]={};
 800107a:	2300      	movs	r3, #0
 800107c:	813b      	strh	r3, [r7, #8]
		HAL_I2C_Master_Receive(HI2C, MS5837_ADDR, ret, 2, 500);
 800107e:	4b19      	ldr	r3, [pc, #100]	; (80010e4 <MS5837_init+0xc0>)
 8001080:	6818      	ldr	r0, [r3, #0]
 8001082:	23ec      	movs	r3, #236	; 0xec
 8001084:	b299      	uxth	r1, r3
 8001086:	f107 0208 	add.w	r2, r7, #8
 800108a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800108e:	9300      	str	r3, [sp, #0]
 8001090:	2302      	movs	r3, #2
 8001092:	f002 fcff 	bl	8003a94 <HAL_I2C_Master_Receive>
		C[i]=(ret[0]<<8)|ret[1];
 8001096:	7a3b      	ldrb	r3, [r7, #8]
 8001098:	021b      	lsls	r3, r3, #8
 800109a:	b21a      	sxth	r2, r3
 800109c:	7a7b      	ldrb	r3, [r7, #9]
 800109e:	b21b      	sxth	r3, r3
 80010a0:	4313      	orrs	r3, r2
 80010a2:	b21a      	sxth	r2, r3
 80010a4:	7bfb      	ldrb	r3, [r7, #15]
 80010a6:	b291      	uxth	r1, r2
 80010a8:	4a10      	ldr	r2, [pc, #64]	; (80010ec <MS5837_init+0xc8>)
 80010aa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for ( uint8_t i = 0 ; i < 8 ; i++ )
 80010ae:	7bfb      	ldrb	r3, [r7, #15]
 80010b0:	3301      	adds	r3, #1
 80010b2:	73fb      	strb	r3, [r7, #15]
 80010b4:	7bfb      	ldrb	r3, [r7, #15]
 80010b6:	2b07      	cmp	r3, #7
 80010b8:	d9cc      	bls.n	8001054 <MS5837_init+0x30>
//		Wire.requestFrom(MS5837_ADDR,2);
//		C[i] = (Wire.read() << 8) | Wire.read();
	}

	// Verify that data is correct with CRC
	uint8_t crcRead = C[0] >> 12;
 80010ba:	4b0c      	ldr	r3, [pc, #48]	; (80010ec <MS5837_init+0xc8>)
 80010bc:	881b      	ldrh	r3, [r3, #0]
 80010be:	0b1b      	lsrs	r3, r3, #12
 80010c0:	b29b      	uxth	r3, r3
 80010c2:	73bb      	strb	r3, [r7, #14]
	uint8_t crcCalculated = MS5837_crc4(C);
 80010c4:	4809      	ldr	r0, [pc, #36]	; (80010ec <MS5837_init+0xc8>)
 80010c6:	f000 fd41 	bl	8001b4c <MS5837_crc4>
 80010ca:	4603      	mov	r3, r0
 80010cc:	737b      	strb	r3, [r7, #13]

	if ( crcCalculated == crcRead ) {
 80010ce:	7b7a      	ldrb	r2, [r7, #13]
 80010d0:	7bbb      	ldrb	r3, [r7, #14]
 80010d2:	429a      	cmp	r2, r3
 80010d4:	d101      	bne.n	80010da <MS5837_init+0xb6>
		return TRUE; // Initialization success
 80010d6:	2301      	movs	r3, #1
 80010d8:	e000      	b.n	80010dc <MS5837_init+0xb8>
	}

	return FALSE; // CRC fail
 80010da:	2300      	movs	r3, #0
}
 80010dc:	4618      	mov	r0, r3
 80010de:	3710      	adds	r7, #16
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	20000284 	.word	0x20000284
 80010e8:	0800a404 	.word	0x0800a404
 80010ec:	2000028c 	.word	0x2000028c

080010f0 <MS5837_read>:

void MS5837_setFluidDensity(float density) {
	fluidDensity = density;
}

void MS5837_read() {
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af02      	add	r7, sp, #8
	// Request D1 conversion
	HAL_I2C_Master_Transmit(HI2C, MS5837_ADDR, &MS5837_CONVERT_D1_8192, 1, 500);
 80010f6:	4b37      	ldr	r3, [pc, #220]	; (80011d4 <MS5837_read+0xe4>)
 80010f8:	6818      	ldr	r0, [r3, #0]
 80010fa:	23ec      	movs	r3, #236	; 0xec
 80010fc:	b299      	uxth	r1, r3
 80010fe:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001102:	9300      	str	r3, [sp, #0]
 8001104:	2301      	movs	r3, #1
 8001106:	4a34      	ldr	r2, [pc, #208]	; (80011d8 <MS5837_read+0xe8>)
 8001108:	f002 fbc6 	bl	8003898 <HAL_I2C_Master_Transmit>

//	Wire.beginTransmission(MS5837_ADDR);
//	Wire.write(MS5837_CONVERT_D1_8192);
//	Wire.endTransmission();

	HAL_Delay(20); // Max conversion time per datasheet
 800110c:	2014      	movs	r0, #20
 800110e:	f001 fee7 	bl	8002ee0 <HAL_Delay>

//	HAL_I2C_M

	HAL_I2C_Master_Transmit(HI2C, MS5837_ADDR, &MS5837_ADC_READ, 1, 500);
 8001112:	4b30      	ldr	r3, [pc, #192]	; (80011d4 <MS5837_read+0xe4>)
 8001114:	6818      	ldr	r0, [r3, #0]
 8001116:	23ec      	movs	r3, #236	; 0xec
 8001118:	b299      	uxth	r1, r3
 800111a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800111e:	9300      	str	r3, [sp, #0]
 8001120:	2301      	movs	r3, #1
 8001122:	4a2e      	ldr	r2, [pc, #184]	; (80011dc <MS5837_read+0xec>)
 8001124:	f002 fbb8 	bl	8003898 <HAL_I2C_Master_Transmit>
//	Wire.write(MS5837_ADC_READ);
//	Wire.endTransmission();


//	D1 = 0;
	uint8_t ret[3]={};
 8001128:	4b2d      	ldr	r3, [pc, #180]	; (80011e0 <MS5837_read+0xf0>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	713b      	strb	r3, [r7, #4]
 800112e:	1d7b      	adds	r3, r7, #5
 8001130:	2200      	movs	r2, #0
 8001132:	801a      	strh	r2, [r3, #0]
	HAL_I2C_Master_Receive(HI2C, MS5837_ADDR, ret, 3, 500);
 8001134:	4b27      	ldr	r3, [pc, #156]	; (80011d4 <MS5837_read+0xe4>)
 8001136:	6818      	ldr	r0, [r3, #0]
 8001138:	23ec      	movs	r3, #236	; 0xec
 800113a:	b299      	uxth	r1, r3
 800113c:	1d3a      	adds	r2, r7, #4
 800113e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001142:	9300      	str	r3, [sp, #0]
 8001144:	2303      	movs	r3, #3
 8001146:	f002 fca5 	bl	8003a94 <HAL_I2C_Master_Receive>
	D1=(ret[0]<<16)|(ret[1]<<8)|(ret[2]);
 800114a:	793b      	ldrb	r3, [r7, #4]
 800114c:	041a      	lsls	r2, r3, #16
 800114e:	797b      	ldrb	r3, [r7, #5]
 8001150:	021b      	lsls	r3, r3, #8
 8001152:	4313      	orrs	r3, r2
 8001154:	79ba      	ldrb	r2, [r7, #6]
 8001156:	4313      	orrs	r3, r2
 8001158:	461a      	mov	r2, r3
 800115a:	4b22      	ldr	r3, [pc, #136]	; (80011e4 <MS5837_read+0xf4>)
 800115c:	601a      	str	r2, [r3, #0]
//	D1 = Wire.read();
//	D1 = (D1 << 8) | Wire.read();
//	D1 = (D1 << 8) | Wire.read();

	// Request D2 conversion
	HAL_I2C_Master_Transmit(HI2C, MS5837_ADDR, &MS5837_CONVERT_D2_8192, 1, 500);
 800115e:	4b1d      	ldr	r3, [pc, #116]	; (80011d4 <MS5837_read+0xe4>)
 8001160:	6818      	ldr	r0, [r3, #0]
 8001162:	23ec      	movs	r3, #236	; 0xec
 8001164:	b299      	uxth	r1, r3
 8001166:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800116a:	9300      	str	r3, [sp, #0]
 800116c:	2301      	movs	r3, #1
 800116e:	4a1e      	ldr	r2, [pc, #120]	; (80011e8 <MS5837_read+0xf8>)
 8001170:	f002 fb92 	bl	8003898 <HAL_I2C_Master_Transmit>
//	Wire.beginTransmission(MS5837_ADDR);
//	Wire.write(MS5837_CONVERT_D2_8192);
//	Wire.endTransmission();

	HAL_Delay(20); // Max conversion time per datasheet
 8001174:	2014      	movs	r0, #20
 8001176:	f001 feb3 	bl	8002ee0 <HAL_Delay>

	HAL_I2C_Master_Transmit(HI2C, MS5837_ADDR, &MS5837_ADC_READ, 1, 500);
 800117a:	4b16      	ldr	r3, [pc, #88]	; (80011d4 <MS5837_read+0xe4>)
 800117c:	6818      	ldr	r0, [r3, #0]
 800117e:	23ec      	movs	r3, #236	; 0xec
 8001180:	b299      	uxth	r1, r3
 8001182:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001186:	9300      	str	r3, [sp, #0]
 8001188:	2301      	movs	r3, #1
 800118a:	4a14      	ldr	r2, [pc, #80]	; (80011dc <MS5837_read+0xec>)
 800118c:	f002 fb84 	bl	8003898 <HAL_I2C_Master_Transmit>
//	Wire.write(MS5837_ADC_READ);
//	Wire.endTransmission();

//	D2=0;
//	HAL_I2C_Master_Receive(HI2C, MS5837_ADDR, (uint8_t *)&D2, 3, 500);
	ret[0]=0;
 8001190:	2300      	movs	r3, #0
 8001192:	713b      	strb	r3, [r7, #4]
	ret[1]=0;
 8001194:	2300      	movs	r3, #0
 8001196:	717b      	strb	r3, [r7, #5]
	ret[2]=0;
 8001198:	2300      	movs	r3, #0
 800119a:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Master_Receive(HI2C, MS5837_ADDR, ret, 3, 500);
 800119c:	4b0d      	ldr	r3, [pc, #52]	; (80011d4 <MS5837_read+0xe4>)
 800119e:	6818      	ldr	r0, [r3, #0]
 80011a0:	23ec      	movs	r3, #236	; 0xec
 80011a2:	b299      	uxth	r1, r3
 80011a4:	1d3a      	adds	r2, r7, #4
 80011a6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80011aa:	9300      	str	r3, [sp, #0]
 80011ac:	2303      	movs	r3, #3
 80011ae:	f002 fc71 	bl	8003a94 <HAL_I2C_Master_Receive>
	D2=(ret[0]<<16)|(ret[1]<<8)|(ret[2]);
 80011b2:	793b      	ldrb	r3, [r7, #4]
 80011b4:	041a      	lsls	r2, r3, #16
 80011b6:	797b      	ldrb	r3, [r7, #5]
 80011b8:	021b      	lsls	r3, r3, #8
 80011ba:	4313      	orrs	r3, r2
 80011bc:	79ba      	ldrb	r2, [r7, #6]
 80011be:	4313      	orrs	r3, r2
 80011c0:	461a      	mov	r2, r3
 80011c2:	4b0a      	ldr	r3, [pc, #40]	; (80011ec <MS5837_read+0xfc>)
 80011c4:	601a      	str	r2, [r3, #0]
//	D2 = 0;
//	D2 = Wire.read();
//	D2 = (D2 << 8) | Wire.read();
//	D2 = (D2 << 8) | Wire.read();

	MS5837_calculate();
 80011c6:	f000 f813 	bl	80011f0 <MS5837_calculate>
}
 80011ca:	bf00      	nop
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	20000284 	.word	0x20000284
 80011d8:	0800a406 	.word	0x0800a406
 80011dc:	0800a405 	.word	0x0800a405
 80011e0:	0800a298 	.word	0x0800a298
 80011e4:	200002a0 	.word	0x200002a0
 80011e8:	0800a407 	.word	0x0800a407
 80011ec:	2000029c 	.word	0x2000029c

080011f0 <MS5837_calculate>:

void MS5837_calculate() {
 80011f0:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80011f4:	b0a6      	sub	sp, #152	; 0x98
 80011f6:	af00      	add	r7, sp, #0
	// Given C1-C6 and D1, D2, calculated TEMP and P
	// Do conversion first and then second order temp compensation

	int32_t dT = 0;
 80011f8:	2300      	movs	r3, #0
 80011fa:	67bb      	str	r3, [r7, #120]	; 0x78
	int64_t SENS = 0;
 80011fc:	f04f 0200 	mov.w	r2, #0
 8001200:	f04f 0300 	mov.w	r3, #0
 8001204:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
	int64_t OFF = 0;
 8001208:	f04f 0200 	mov.w	r2, #0
 800120c:	f04f 0300 	mov.w	r3, #0
 8001210:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
	int32_t SENSi = 0;
 8001214:	2300      	movs	r3, #0
 8001216:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	int32_t OFFi = 0;
 800121a:	2300      	movs	r3, #0
 800121c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	int32_t Ti = 0;
 8001220:	2300      	movs	r3, #0
 8001222:	67fb      	str	r3, [r7, #124]	; 0x7c
	int64_t OFF2 = 0;
 8001224:	f04f 0200 	mov.w	r2, #0
 8001228:	f04f 0300 	mov.w	r3, #0
 800122c:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
	int64_t SENS2 = 0;
 8001230:	f04f 0200 	mov.w	r2, #0
 8001234:	f04f 0300 	mov.w	r3, #0
 8001238:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68

	// Terms called
	dT = D2-(uint32_t)(C[5])*256l;
 800123c:	4b66      	ldr	r3, [pc, #408]	; (80013d8 <MS5837_calculate+0x1e8>)
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	4b66      	ldr	r3, [pc, #408]	; (80013dc <MS5837_calculate+0x1ec>)
 8001242:	895b      	ldrh	r3, [r3, #10]
 8001244:	021b      	lsls	r3, r3, #8
 8001246:	1ad3      	subs	r3, r2, r3
 8001248:	67bb      	str	r3, [r7, #120]	; 0x78
	if ( _model == MS5837_02BA ) {
 800124a:	4b65      	ldr	r3, [pc, #404]	; (80013e0 <MS5837_calculate+0x1f0>)
 800124c:	781a      	ldrb	r2, [r3, #0]
 800124e:	2300      	movs	r3, #0
 8001250:	429a      	cmp	r2, r3
 8001252:	f040 80cd 	bne.w	80013f0 <MS5837_calculate+0x200>
		SENS = (int64_t)(C[1])*65536l+((int64_t)(C[3])*dT)/128l;
 8001256:	4b61      	ldr	r3, [pc, #388]	; (80013dc <MS5837_calculate+0x1ec>)
 8001258:	885b      	ldrh	r3, [r3, #2]
 800125a:	b29a      	uxth	r2, r3
 800125c:	f04f 0300 	mov.w	r3, #0
 8001260:	f04f 0800 	mov.w	r8, #0
 8001264:	f04f 0900 	mov.w	r9, #0
 8001268:	ea4f 4903 	mov.w	r9, r3, lsl #16
 800126c:	ea49 4912 	orr.w	r9, r9, r2, lsr #16
 8001270:	ea4f 4802 	mov.w	r8, r2, lsl #16
 8001274:	4b59      	ldr	r3, [pc, #356]	; (80013dc <MS5837_calculate+0x1ec>)
 8001276:	88db      	ldrh	r3, [r3, #6]
 8001278:	b298      	uxth	r0, r3
 800127a:	f04f 0100 	mov.w	r1, #0
 800127e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001280:	461a      	mov	r2, r3
 8001282:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001286:	fb02 f501 	mul.w	r5, r2, r1
 800128a:	fb00 f403 	mul.w	r4, r0, r3
 800128e:	442c      	add	r4, r5
 8001290:	fba0 2302 	umull	r2, r3, r0, r2
 8001294:	18e1      	adds	r1, r4, r3
 8001296:	460b      	mov	r3, r1
 8001298:	2a00      	cmp	r2, #0
 800129a:	f173 0100 	sbcs.w	r1, r3, #0
 800129e:	da02      	bge.n	80012a6 <MS5837_calculate+0xb6>
 80012a0:	327f      	adds	r2, #127	; 0x7f
 80012a2:	f143 0300 	adc.w	r3, r3, #0
 80012a6:	f04f 0000 	mov.w	r0, #0
 80012aa:	f04f 0100 	mov.w	r1, #0
 80012ae:	09d0      	lsrs	r0, r2, #7
 80012b0:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
 80012b4:	11d9      	asrs	r1, r3, #7
 80012b6:	4602      	mov	r2, r0
 80012b8:	460b      	mov	r3, r1
 80012ba:	eb18 0102 	adds.w	r1, r8, r2
 80012be:	6339      	str	r1, [r7, #48]	; 0x30
 80012c0:	eb49 0303 	adc.w	r3, r9, r3
 80012c4:	637b      	str	r3, [r7, #52]	; 0x34
 80012c6:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80012ca:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
		OFF = (int64_t)(C[2])*131072l+((int64_t)(C[4])*dT)/64l;
 80012ce:	4b43      	ldr	r3, [pc, #268]	; (80013dc <MS5837_calculate+0x1ec>)
 80012d0:	889b      	ldrh	r3, [r3, #4]
 80012d2:	b29a      	uxth	r2, r3
 80012d4:	f04f 0300 	mov.w	r3, #0
 80012d8:	f04f 0800 	mov.w	r8, #0
 80012dc:	f04f 0900 	mov.w	r9, #0
 80012e0:	ea4f 4943 	mov.w	r9, r3, lsl #17
 80012e4:	ea49 39d2 	orr.w	r9, r9, r2, lsr #15
 80012e8:	ea4f 4842 	mov.w	r8, r2, lsl #17
 80012ec:	4b3b      	ldr	r3, [pc, #236]	; (80013dc <MS5837_calculate+0x1ec>)
 80012ee:	891b      	ldrh	r3, [r3, #8]
 80012f0:	b298      	uxth	r0, r3
 80012f2:	f04f 0100 	mov.w	r1, #0
 80012f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80012f8:	461a      	mov	r2, r3
 80012fa:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80012fe:	fb02 f501 	mul.w	r5, r2, r1
 8001302:	fb00 f403 	mul.w	r4, r0, r3
 8001306:	442c      	add	r4, r5
 8001308:	fba0 2302 	umull	r2, r3, r0, r2
 800130c:	18e1      	adds	r1, r4, r3
 800130e:	460b      	mov	r3, r1
 8001310:	2a00      	cmp	r2, #0
 8001312:	f173 0100 	sbcs.w	r1, r3, #0
 8001316:	da02      	bge.n	800131e <MS5837_calculate+0x12e>
 8001318:	323f      	adds	r2, #63	; 0x3f
 800131a:	f143 0300 	adc.w	r3, r3, #0
 800131e:	f04f 0000 	mov.w	r0, #0
 8001322:	f04f 0100 	mov.w	r1, #0
 8001326:	0990      	lsrs	r0, r2, #6
 8001328:	ea40 6083 	orr.w	r0, r0, r3, lsl #26
 800132c:	1199      	asrs	r1, r3, #6
 800132e:	4602      	mov	r2, r0
 8001330:	460b      	mov	r3, r1
 8001332:	eb18 0102 	adds.w	r1, r8, r2
 8001336:	62b9      	str	r1, [r7, #40]	; 0x28
 8001338:	eb49 0303 	adc.w	r3, r9, r3
 800133c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800133e:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001342:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
		P = (D1*SENS/(2097152l)-OFF)/(32768l);
 8001346:	4b27      	ldr	r3, [pc, #156]	; (80013e4 <MS5837_calculate+0x1f4>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	461a      	mov	r2, r3
 800134c:	f04f 0300 	mov.w	r3, #0
 8001350:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8001354:	fb03 f001 	mul.w	r0, r3, r1
 8001358:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 800135c:	fb02 f101 	mul.w	r1, r2, r1
 8001360:	4408      	add	r0, r1
 8001362:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8001366:	fba1 2302 	umull	r2, r3, r1, r2
 800136a:	18c1      	adds	r1, r0, r3
 800136c:	460b      	mov	r3, r1
 800136e:	4610      	mov	r0, r2
 8001370:	4619      	mov	r1, r3
 8001372:	2800      	cmp	r0, #0
 8001374:	f171 0300 	sbcs.w	r3, r1, #0
 8001378:	da05      	bge.n	8001386 <MS5837_calculate+0x196>
 800137a:	4a1b      	ldr	r2, [pc, #108]	; (80013e8 <MS5837_calculate+0x1f8>)
 800137c:	f04f 0300 	mov.w	r3, #0
 8001380:	1880      	adds	r0, r0, r2
 8001382:	eb43 0101 	adc.w	r1, r3, r1
 8001386:	f04f 0200 	mov.w	r2, #0
 800138a:	f04f 0300 	mov.w	r3, #0
 800138e:	0d42      	lsrs	r2, r0, #21
 8001390:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 8001394:	154b      	asrs	r3, r1, #21
 8001396:	4610      	mov	r0, r2
 8001398:	4619      	mov	r1, r3
 800139a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800139e:	1a84      	subs	r4, r0, r2
 80013a0:	663c      	str	r4, [r7, #96]	; 0x60
 80013a2:	eb61 0303 	sbc.w	r3, r1, r3
 80013a6:	667b      	str	r3, [r7, #100]	; 0x64
 80013a8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80013ac:	2800      	cmp	r0, #0
 80013ae:	f171 0300 	sbcs.w	r3, r1, #0
 80013b2:	da06      	bge.n	80013c2 <MS5837_calculate+0x1d2>
 80013b4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80013b8:	f04f 0300 	mov.w	r3, #0
 80013bc:	1880      	adds	r0, r0, r2
 80013be:	eb43 0101 	adc.w	r1, r3, r1
 80013c2:	f04f 0200 	mov.w	r2, #0
 80013c6:	f04f 0300 	mov.w	r3, #0
 80013ca:	0bc2      	lsrs	r2, r0, #15
 80013cc:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
 80013d0:	13cb      	asrs	r3, r1, #15
 80013d2:	4b06      	ldr	r3, [pc, #24]	; (80013ec <MS5837_calculate+0x1fc>)
 80013d4:	601a      	str	r2, [r3, #0]
 80013d6:	e0c7      	b.n	8001568 <MS5837_calculate+0x378>
 80013d8:	2000029c 	.word	0x2000029c
 80013dc:	2000028c 	.word	0x2000028c
 80013e0:	20000280 	.word	0x20000280
 80013e4:	200002a0 	.word	0x200002a0
 80013e8:	001fffff 	.word	0x001fffff
 80013ec:	200002a4 	.word	0x200002a4
	} else {
		SENS = (int64_t)(C[1])*32768l+((int64_t)(C[3])*dT)/256l;
 80013f0:	4bac      	ldr	r3, [pc, #688]	; (80016a4 <MS5837_calculate+0x4b4>)
 80013f2:	885b      	ldrh	r3, [r3, #2]
 80013f4:	b29a      	uxth	r2, r3
 80013f6:	f04f 0300 	mov.w	r3, #0
 80013fa:	f04f 0800 	mov.w	r8, #0
 80013fe:	f04f 0900 	mov.w	r9, #0
 8001402:	ea4f 39c3 	mov.w	r9, r3, lsl #15
 8001406:	ea49 4952 	orr.w	r9, r9, r2, lsr #17
 800140a:	ea4f 38c2 	mov.w	r8, r2, lsl #15
 800140e:	4ba5      	ldr	r3, [pc, #660]	; (80016a4 <MS5837_calculate+0x4b4>)
 8001410:	88db      	ldrh	r3, [r3, #6]
 8001412:	b298      	uxth	r0, r3
 8001414:	f04f 0100 	mov.w	r1, #0
 8001418:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800141a:	461a      	mov	r2, r3
 800141c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001420:	fb02 f501 	mul.w	r5, r2, r1
 8001424:	fb00 f403 	mul.w	r4, r0, r3
 8001428:	442c      	add	r4, r5
 800142a:	fba0 2302 	umull	r2, r3, r0, r2
 800142e:	18e1      	adds	r1, r4, r3
 8001430:	460b      	mov	r3, r1
 8001432:	2a00      	cmp	r2, #0
 8001434:	f173 0100 	sbcs.w	r1, r3, #0
 8001438:	da02      	bge.n	8001440 <MS5837_calculate+0x250>
 800143a:	32ff      	adds	r2, #255	; 0xff
 800143c:	f143 0300 	adc.w	r3, r3, #0
 8001440:	f04f 0000 	mov.w	r0, #0
 8001444:	f04f 0100 	mov.w	r1, #0
 8001448:	0a10      	lsrs	r0, r2, #8
 800144a:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800144e:	1219      	asrs	r1, r3, #8
 8001450:	4602      	mov	r2, r0
 8001452:	460b      	mov	r3, r1
 8001454:	eb18 0a02 	adds.w	sl, r8, r2
 8001458:	eb49 0b03 	adc.w	fp, r9, r3
 800145c:	e9c7 ab24 	strd	sl, fp, [r7, #144]	; 0x90
		OFF = (int64_t)(C[2])*65536l+((int64_t)(C[4])*dT)/128l;
 8001460:	4b90      	ldr	r3, [pc, #576]	; (80016a4 <MS5837_calculate+0x4b4>)
 8001462:	889b      	ldrh	r3, [r3, #4]
 8001464:	b29a      	uxth	r2, r3
 8001466:	f04f 0300 	mov.w	r3, #0
 800146a:	f04f 0800 	mov.w	r8, #0
 800146e:	f04f 0900 	mov.w	r9, #0
 8001472:	ea4f 4903 	mov.w	r9, r3, lsl #16
 8001476:	ea49 4912 	orr.w	r9, r9, r2, lsr #16
 800147a:	ea4f 4802 	mov.w	r8, r2, lsl #16
 800147e:	4b89      	ldr	r3, [pc, #548]	; (80016a4 <MS5837_calculate+0x4b4>)
 8001480:	891b      	ldrh	r3, [r3, #8]
 8001482:	b298      	uxth	r0, r3
 8001484:	f04f 0100 	mov.w	r1, #0
 8001488:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800148a:	461a      	mov	r2, r3
 800148c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001490:	fb02 f501 	mul.w	r5, r2, r1
 8001494:	fb00 f403 	mul.w	r4, r0, r3
 8001498:	442c      	add	r4, r5
 800149a:	fba0 2302 	umull	r2, r3, r0, r2
 800149e:	18e1      	adds	r1, r4, r3
 80014a0:	460b      	mov	r3, r1
 80014a2:	2a00      	cmp	r2, #0
 80014a4:	f173 0100 	sbcs.w	r1, r3, #0
 80014a8:	da02      	bge.n	80014b0 <MS5837_calculate+0x2c0>
 80014aa:	327f      	adds	r2, #127	; 0x7f
 80014ac:	f143 0300 	adc.w	r3, r3, #0
 80014b0:	f04f 0000 	mov.w	r0, #0
 80014b4:	f04f 0100 	mov.w	r1, #0
 80014b8:	09d0      	lsrs	r0, r2, #7
 80014ba:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
 80014be:	11d9      	asrs	r1, r3, #7
 80014c0:	4602      	mov	r2, r0
 80014c2:	460b      	mov	r3, r1
 80014c4:	eb18 0102 	adds.w	r1, r8, r2
 80014c8:	6239      	str	r1, [r7, #32]
 80014ca:	eb49 0303 	adc.w	r3, r9, r3
 80014ce:	627b      	str	r3, [r7, #36]	; 0x24
 80014d0:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80014d4:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
		P = (D1*SENS/(2097152l)-OFF)/(8192l);
 80014d8:	4b73      	ldr	r3, [pc, #460]	; (80016a8 <MS5837_calculate+0x4b8>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	461a      	mov	r2, r3
 80014de:	f04f 0300 	mov.w	r3, #0
 80014e2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80014e6:	fb03 f001 	mul.w	r0, r3, r1
 80014ea:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 80014ee:	fb02 f101 	mul.w	r1, r2, r1
 80014f2:	4408      	add	r0, r1
 80014f4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80014f8:	fba1 2302 	umull	r2, r3, r1, r2
 80014fc:	18c1      	adds	r1, r0, r3
 80014fe:	460b      	mov	r3, r1
 8001500:	4610      	mov	r0, r2
 8001502:	4619      	mov	r1, r3
 8001504:	2800      	cmp	r0, #0
 8001506:	f171 0300 	sbcs.w	r3, r1, #0
 800150a:	da05      	bge.n	8001518 <MS5837_calculate+0x328>
 800150c:	4a67      	ldr	r2, [pc, #412]	; (80016ac <MS5837_calculate+0x4bc>)
 800150e:	f04f 0300 	mov.w	r3, #0
 8001512:	1880      	adds	r0, r0, r2
 8001514:	eb43 0101 	adc.w	r1, r3, r1
 8001518:	f04f 0200 	mov.w	r2, #0
 800151c:	f04f 0300 	mov.w	r3, #0
 8001520:	0d42      	lsrs	r2, r0, #21
 8001522:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 8001526:	154b      	asrs	r3, r1, #21
 8001528:	4610      	mov	r0, r2
 800152a:	4619      	mov	r1, r3
 800152c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001530:	1a84      	subs	r4, r0, r2
 8001532:	65bc      	str	r4, [r7, #88]	; 0x58
 8001534:	eb61 0303 	sbc.w	r3, r1, r3
 8001538:	65fb      	str	r3, [r7, #92]	; 0x5c
 800153a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800153e:	2800      	cmp	r0, #0
 8001540:	f171 0300 	sbcs.w	r3, r1, #0
 8001544:	da06      	bge.n	8001554 <MS5837_calculate+0x364>
 8001546:	f641 72ff 	movw	r2, #8191	; 0x1fff
 800154a:	f04f 0300 	mov.w	r3, #0
 800154e:	1880      	adds	r0, r0, r2
 8001550:	eb43 0101 	adc.w	r1, r3, r1
 8001554:	f04f 0200 	mov.w	r2, #0
 8001558:	f04f 0300 	mov.w	r3, #0
 800155c:	0b42      	lsrs	r2, r0, #13
 800155e:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8001562:	134b      	asrs	r3, r1, #13
 8001564:	4b52      	ldr	r3, [pc, #328]	; (80016b0 <MS5837_calculate+0x4c0>)
 8001566:	601a      	str	r2, [r3, #0]
	}

	// Temp conversion
	TEMP = 2000l+(int64_t)(dT)*C[6]/8388608LL;
 8001568:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800156a:	4618      	mov	r0, r3
 800156c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001570:	4b4c      	ldr	r3, [pc, #304]	; (80016a4 <MS5837_calculate+0x4b4>)
 8001572:	899b      	ldrh	r3, [r3, #12]
 8001574:	b29a      	uxth	r2, r3
 8001576:	f04f 0300 	mov.w	r3, #0
 800157a:	fb02 f501 	mul.w	r5, r2, r1
 800157e:	fb00 f403 	mul.w	r4, r0, r3
 8001582:	442c      	add	r4, r5
 8001584:	fba0 2302 	umull	r2, r3, r0, r2
 8001588:	18e1      	adds	r1, r4, r3
 800158a:	460b      	mov	r3, r1
 800158c:	4610      	mov	r0, r2
 800158e:	4619      	mov	r1, r3
 8001590:	2800      	cmp	r0, #0
 8001592:	f171 0300 	sbcs.w	r3, r1, #0
 8001596:	da05      	bge.n	80015a4 <MS5837_calculate+0x3b4>
 8001598:	4a46      	ldr	r2, [pc, #280]	; (80016b4 <MS5837_calculate+0x4c4>)
 800159a:	f04f 0300 	mov.w	r3, #0
 800159e:	1880      	adds	r0, r0, r2
 80015a0:	eb43 0101 	adc.w	r1, r3, r1
 80015a4:	f04f 0200 	mov.w	r2, #0
 80015a8:	f04f 0300 	mov.w	r3, #0
 80015ac:	0dc2      	lsrs	r2, r0, #23
 80015ae:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 80015b2:	15cb      	asrs	r3, r1, #23
 80015b4:	4613      	mov	r3, r2
 80015b6:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80015ba:	461a      	mov	r2, r3
 80015bc:	4b3e      	ldr	r3, [pc, #248]	; (80016b8 <MS5837_calculate+0x4c8>)
 80015be:	601a      	str	r2, [r3, #0]

	//Second order compensation
	if ( _model == MS5837_02BA ) {
 80015c0:	4b3e      	ldr	r3, [pc, #248]	; (80016bc <MS5837_calculate+0x4cc>)
 80015c2:	781a      	ldrb	r2, [r3, #0]
 80015c4:	2300      	movs	r3, #0
 80015c6:	429a      	cmp	r2, r3
 80015c8:	d17a      	bne.n	80016c0 <MS5837_calculate+0x4d0>
		if((TEMP/100)<20){         //Low temp
 80015ca:	4b3b      	ldr	r3, [pc, #236]	; (80016b8 <MS5837_calculate+0x4c8>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80015d2:	f280 8129 	bge.w	8001828 <MS5837_calculate+0x638>
			Ti = (11*(int64_t)(dT)*(int64_t)(dT))/(34359738368LL);
 80015d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80015d8:	4618      	mov	r0, r3
 80015da:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80015de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80015e0:	461a      	mov	r2, r3
 80015e2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80015e6:	fb02 f501 	mul.w	r5, r2, r1
 80015ea:	fb00 f403 	mul.w	r4, r0, r3
 80015ee:	192e      	adds	r6, r5, r4
 80015f0:	fba0 4502 	umull	r4, r5, r0, r2
 80015f4:	1973      	adds	r3, r6, r5
 80015f6:	461d      	mov	r5, r3
 80015f8:	4622      	mov	r2, r4
 80015fa:	462b      	mov	r3, r5
 80015fc:	1891      	adds	r1, r2, r2
 80015fe:	61b9      	str	r1, [r7, #24]
 8001600:	415b      	adcs	r3, r3
 8001602:	61fb      	str	r3, [r7, #28]
 8001604:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001608:	1912      	adds	r2, r2, r4
 800160a:	eb45 0303 	adc.w	r3, r5, r3
 800160e:	f04f 0000 	mov.w	r0, #0
 8001612:	f04f 0100 	mov.w	r1, #0
 8001616:	0099      	lsls	r1, r3, #2
 8001618:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800161c:	0090      	lsls	r0, r2, #2
 800161e:	4602      	mov	r2, r0
 8001620:	460b      	mov	r3, r1
 8001622:	1b11      	subs	r1, r2, r4
 8001624:	6539      	str	r1, [r7, #80]	; 0x50
 8001626:	eb63 0305 	sbc.w	r3, r3, r5
 800162a:	657b      	str	r3, [r7, #84]	; 0x54
 800162c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001630:	2a00      	cmp	r2, #0
 8001632:	f173 0100 	sbcs.w	r1, r3, #0
 8001636:	da03      	bge.n	8001640 <MS5837_calculate+0x450>
 8001638:	f112 32ff 	adds.w	r2, r2, #4294967295
 800163c:	f143 0307 	adc.w	r3, r3, #7
 8001640:	f04f 0000 	mov.w	r0, #0
 8001644:	f04f 0100 	mov.w	r1, #0
 8001648:	10d8      	asrs	r0, r3, #3
 800164a:	17d9      	asrs	r1, r3, #31
 800164c:	4602      	mov	r2, r0
 800164e:	460b      	mov	r3, r1
 8001650:	4613      	mov	r3, r2
 8001652:	67fb      	str	r3, [r7, #124]	; 0x7c
			OFFi = (31*(TEMP-2000)*(TEMP-2000))/8;
 8001654:	4b18      	ldr	r3, [pc, #96]	; (80016b8 <MS5837_calculate+0x4c8>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 800165c:	4a16      	ldr	r2, [pc, #88]	; (80016b8 <MS5837_calculate+0x4c8>)
 800165e:	6812      	ldr	r2, [r2, #0]
 8001660:	f5a2 62fa 	sub.w	r2, r2, #2000	; 0x7d0
 8001664:	fb02 f203 	mul.w	r2, r2, r3
 8001668:	4613      	mov	r3, r2
 800166a:	015b      	lsls	r3, r3, #5
 800166c:	1a9b      	subs	r3, r3, r2
 800166e:	2b00      	cmp	r3, #0
 8001670:	da00      	bge.n	8001674 <MS5837_calculate+0x484>
 8001672:	3307      	adds	r3, #7
 8001674:	10db      	asrs	r3, r3, #3
 8001676:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			SENSi = (63*(TEMP-2000)*(TEMP-2000))/32;
 800167a:	4b0f      	ldr	r3, [pc, #60]	; (80016b8 <MS5837_calculate+0x4c8>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 8001682:	4a0d      	ldr	r2, [pc, #52]	; (80016b8 <MS5837_calculate+0x4c8>)
 8001684:	6812      	ldr	r2, [r2, #0]
 8001686:	f5a2 62fa 	sub.w	r2, r2, #2000	; 0x7d0
 800168a:	fb02 f203 	mul.w	r2, r2, r3
 800168e:	4613      	mov	r3, r2
 8001690:	019b      	lsls	r3, r3, #6
 8001692:	1a9b      	subs	r3, r3, r2
 8001694:	2b00      	cmp	r3, #0
 8001696:	da00      	bge.n	800169a <MS5837_calculate+0x4aa>
 8001698:	331f      	adds	r3, #31
 800169a:	115b      	asrs	r3, r3, #5
 800169c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80016a0:	e0c2      	b.n	8001828 <MS5837_calculate+0x638>
 80016a2:	bf00      	nop
 80016a4:	2000028c 	.word	0x2000028c
 80016a8:	200002a0 	.word	0x200002a0
 80016ac:	001fffff 	.word	0x001fffff
 80016b0:	200002a4 	.word	0x200002a4
 80016b4:	007fffff 	.word	0x007fffff
 80016b8:	20000288 	.word	0x20000288
 80016bc:	20000280 	.word	0x20000280
		}
	} else {
		if((TEMP/100)<20){         //Low temp
 80016c0:	4bb5      	ldr	r3, [pc, #724]	; (8001998 <MS5837_calculate+0x7a8>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80016c8:	da7d      	bge.n	80017c6 <MS5837_calculate+0x5d6>
			Ti = (3*(int64_t)(dT)*(int64_t)(dT))/(8589934592LL);
 80016ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80016cc:	4618      	mov	r0, r3
 80016ce:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80016d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80016d4:	461a      	mov	r2, r3
 80016d6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80016da:	fb02 f501 	mul.w	r5, r2, r1
 80016de:	fb00 f403 	mul.w	r4, r0, r3
 80016e2:	442c      	add	r4, r5
 80016e4:	fba0 0102 	umull	r0, r1, r0, r2
 80016e8:	1863      	adds	r3, r4, r1
 80016ea:	4619      	mov	r1, r3
 80016ec:	4602      	mov	r2, r0
 80016ee:	460b      	mov	r3, r1
 80016f0:	1894      	adds	r4, r2, r2
 80016f2:	613c      	str	r4, [r7, #16]
 80016f4:	415b      	adcs	r3, r3
 80016f6:	617b      	str	r3, [r7, #20]
 80016f8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80016fc:	1814      	adds	r4, r2, r0
 80016fe:	64bc      	str	r4, [r7, #72]	; 0x48
 8001700:	414b      	adcs	r3, r1
 8001702:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001704:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001708:	2a00      	cmp	r2, #0
 800170a:	f173 0100 	sbcs.w	r1, r3, #0
 800170e:	da03      	bge.n	8001718 <MS5837_calculate+0x528>
 8001710:	f112 32ff 	adds.w	r2, r2, #4294967295
 8001714:	f143 0301 	adc.w	r3, r3, #1
 8001718:	f04f 0000 	mov.w	r0, #0
 800171c:	f04f 0100 	mov.w	r1, #0
 8001720:	1058      	asrs	r0, r3, #1
 8001722:	17d9      	asrs	r1, r3, #31
 8001724:	4602      	mov	r2, r0
 8001726:	460b      	mov	r3, r1
 8001728:	4613      	mov	r3, r2
 800172a:	67fb      	str	r3, [r7, #124]	; 0x7c
			OFFi = (3*(TEMP-2000)*(TEMP-2000))/2;
 800172c:	4b9a      	ldr	r3, [pc, #616]	; (8001998 <MS5837_calculate+0x7a8>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 8001734:	4a98      	ldr	r2, [pc, #608]	; (8001998 <MS5837_calculate+0x7a8>)
 8001736:	6812      	ldr	r2, [r2, #0]
 8001738:	f5a2 62fa 	sub.w	r2, r2, #2000	; 0x7d0
 800173c:	fb02 f203 	mul.w	r2, r2, r3
 8001740:	4613      	mov	r3, r2
 8001742:	005b      	lsls	r3, r3, #1
 8001744:	4413      	add	r3, r2
 8001746:	0fda      	lsrs	r2, r3, #31
 8001748:	4413      	add	r3, r2
 800174a:	105b      	asrs	r3, r3, #1
 800174c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			SENSi = (5*(TEMP-2000)*(TEMP-2000))/8;
 8001750:	4b91      	ldr	r3, [pc, #580]	; (8001998 <MS5837_calculate+0x7a8>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 8001758:	4a8f      	ldr	r2, [pc, #572]	; (8001998 <MS5837_calculate+0x7a8>)
 800175a:	6812      	ldr	r2, [r2, #0]
 800175c:	f5a2 62fa 	sub.w	r2, r2, #2000	; 0x7d0
 8001760:	fb02 f203 	mul.w	r2, r2, r3
 8001764:	4613      	mov	r3, r2
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	4413      	add	r3, r2
 800176a:	2b00      	cmp	r3, #0
 800176c:	da00      	bge.n	8001770 <MS5837_calculate+0x580>
 800176e:	3307      	adds	r3, #7
 8001770:	10db      	asrs	r3, r3, #3
 8001772:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			if((TEMP/100)<-15){    //Very low temp
 8001776:	4b88      	ldr	r3, [pc, #544]	; (8001998 <MS5837_calculate+0x7a8>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f513 6fc8 	cmn.w	r3, #1600	; 0x640
 800177e:	dc53      	bgt.n	8001828 <MS5837_calculate+0x638>
				OFFi = OFFi+7*(TEMP+1500l)*(TEMP+1500l);
 8001780:	4b85      	ldr	r3, [pc, #532]	; (8001998 <MS5837_calculate+0x7a8>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 8001788:	4a83      	ldr	r2, [pc, #524]	; (8001998 <MS5837_calculate+0x7a8>)
 800178a:	6812      	ldr	r2, [r2, #0]
 800178c:	f202 52dc 	addw	r2, r2, #1500	; 0x5dc
 8001790:	fb02 f203 	mul.w	r2, r2, r3
 8001794:	4613      	mov	r3, r2
 8001796:	00db      	lsls	r3, r3, #3
 8001798:	1a9b      	subs	r3, r3, r2
 800179a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800179e:	4413      	add	r3, r2
 80017a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
				SENSi = SENSi+4*(TEMP+1500l)*(TEMP+1500l);
 80017a4:	4b7c      	ldr	r3, [pc, #496]	; (8001998 <MS5837_calculate+0x7a8>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 80017ac:	4a7a      	ldr	r2, [pc, #488]	; (8001998 <MS5837_calculate+0x7a8>)
 80017ae:	6812      	ldr	r2, [r2, #0]
 80017b0:	f202 52dc 	addw	r2, r2, #1500	; 0x5dc
 80017b4:	fb02 f303 	mul.w	r3, r2, r3
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80017be:	4413      	add	r3, r2
 80017c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80017c4:	e030      	b.n	8001828 <MS5837_calculate+0x638>
			}
		}
		else if((TEMP/100)>=20){    //High temp
 80017c6:	4b74      	ldr	r3, [pc, #464]	; (8001998 <MS5837_calculate+0x7a8>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80017ce:	db2b      	blt.n	8001828 <MS5837_calculate+0x638>
			Ti = 2*(dT*dT)/(137438953472LL);
 80017d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80017d2:	fb03 f303 	mul.w	r3, r3, r3
 80017d6:	005b      	lsls	r3, r3, #1
 80017d8:	461a      	mov	r2, r3
 80017da:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80017de:	2a00      	cmp	r2, #0
 80017e0:	f173 0100 	sbcs.w	r1, r3, #0
 80017e4:	da03      	bge.n	80017ee <MS5837_calculate+0x5fe>
 80017e6:	f112 32ff 	adds.w	r2, r2, #4294967295
 80017ea:	f143 031f 	adc.w	r3, r3, #31
 80017ee:	f04f 0000 	mov.w	r0, #0
 80017f2:	f04f 0100 	mov.w	r1, #0
 80017f6:	1158      	asrs	r0, r3, #5
 80017f8:	17d9      	asrs	r1, r3, #31
 80017fa:	4602      	mov	r2, r0
 80017fc:	460b      	mov	r3, r1
 80017fe:	4613      	mov	r3, r2
 8001800:	67fb      	str	r3, [r7, #124]	; 0x7c
			OFFi = (1*(TEMP-2000)*(TEMP-2000))/16;
 8001802:	4b65      	ldr	r3, [pc, #404]	; (8001998 <MS5837_calculate+0x7a8>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 800180a:	4a63      	ldr	r2, [pc, #396]	; (8001998 <MS5837_calculate+0x7a8>)
 800180c:	6812      	ldr	r2, [r2, #0]
 800180e:	f5a2 62fa 	sub.w	r2, r2, #2000	; 0x7d0
 8001812:	fb02 f303 	mul.w	r3, r2, r3
 8001816:	2b00      	cmp	r3, #0
 8001818:	da00      	bge.n	800181c <MS5837_calculate+0x62c>
 800181a:	330f      	adds	r3, #15
 800181c:	111b      	asrs	r3, r3, #4
 800181e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			SENSi = 0;
 8001822:	2300      	movs	r3, #0
 8001824:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		}
	}

	OFF2 = OFF-OFFi;           //Calculate pressure and temp second order
 8001828:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800182c:	461a      	mov	r2, r3
 800182e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001832:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8001836:	1a84      	subs	r4, r0, r2
 8001838:	60bc      	str	r4, [r7, #8]
 800183a:	eb61 0303 	sbc.w	r3, r1, r3
 800183e:	60fb      	str	r3, [r7, #12]
 8001840:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001844:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
	SENS2 = SENS-SENSi;
 8001848:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800184c:	461a      	mov	r2, r3
 800184e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001852:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8001856:	1a84      	subs	r4, r0, r2
 8001858:	603c      	str	r4, [r7, #0]
 800185a:	eb61 0303 	sbc.w	r3, r1, r3
 800185e:	607b      	str	r3, [r7, #4]
 8001860:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001864:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68

	TEMP = (TEMP-Ti);
 8001868:	4b4b      	ldr	r3, [pc, #300]	; (8001998 <MS5837_calculate+0x7a8>)
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	4a49      	ldr	r2, [pc, #292]	; (8001998 <MS5837_calculate+0x7a8>)
 8001872:	6013      	str	r3, [r2, #0]

	if ( _model == MS5837_02BA ) {
 8001874:	4b49      	ldr	r3, [pc, #292]	; (800199c <MS5837_calculate+0x7ac>)
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	2200      	movs	r2, #0
 800187a:	4293      	cmp	r3, r2
 800187c:	d143      	bne.n	8001906 <MS5837_calculate+0x716>
		P = (((D1*SENS2)/2097152l-OFF2)/32768l);
 800187e:	4b48      	ldr	r3, [pc, #288]	; (80019a0 <MS5837_calculate+0x7b0>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	461a      	mov	r2, r3
 8001884:	f04f 0300 	mov.w	r3, #0
 8001888:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800188a:	fb03 f001 	mul.w	r0, r3, r1
 800188e:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001890:	fb02 f101 	mul.w	r1, r2, r1
 8001894:	4401      	add	r1, r0
 8001896:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8001898:	fba0 2302 	umull	r2, r3, r0, r2
 800189c:	4419      	add	r1, r3
 800189e:	460b      	mov	r3, r1
 80018a0:	2a00      	cmp	r2, #0
 80018a2:	f173 0100 	sbcs.w	r1, r3, #0
 80018a6:	da05      	bge.n	80018b4 <MS5837_calculate+0x6c4>
 80018a8:	483e      	ldr	r0, [pc, #248]	; (80019a4 <MS5837_calculate+0x7b4>)
 80018aa:	f04f 0100 	mov.w	r1, #0
 80018ae:	1812      	adds	r2, r2, r0
 80018b0:	eb41 0303 	adc.w	r3, r1, r3
 80018b4:	f04f 0000 	mov.w	r0, #0
 80018b8:	f04f 0100 	mov.w	r1, #0
 80018bc:	0d50      	lsrs	r0, r2, #21
 80018be:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 80018c2:	1559      	asrs	r1, r3, #21
 80018c4:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80018c8:	1a84      	subs	r4, r0, r2
 80018ca:	643c      	str	r4, [r7, #64]	; 0x40
 80018cc:	eb61 0303 	sbc.w	r3, r1, r3
 80018d0:	647b      	str	r3, [r7, #68]	; 0x44
 80018d2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80018d6:	2a00      	cmp	r2, #0
 80018d8:	f173 0100 	sbcs.w	r1, r3, #0
 80018dc:	da06      	bge.n	80018ec <MS5837_calculate+0x6fc>
 80018de:	f647 70ff 	movw	r0, #32767	; 0x7fff
 80018e2:	f04f 0100 	mov.w	r1, #0
 80018e6:	1812      	adds	r2, r2, r0
 80018e8:	eb41 0303 	adc.w	r3, r1, r3
 80018ec:	f04f 0000 	mov.w	r0, #0
 80018f0:	f04f 0100 	mov.w	r1, #0
 80018f4:	0bd0      	lsrs	r0, r2, #15
 80018f6:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
 80018fa:	13d9      	asrs	r1, r3, #15
 80018fc:	4602      	mov	r2, r0
 80018fe:	460b      	mov	r3, r1
 8001900:	4b29      	ldr	r3, [pc, #164]	; (80019a8 <MS5837_calculate+0x7b8>)
 8001902:	601a      	str	r2, [r3, #0]
	} else {
		P = (((D1*SENS2)/2097152l-OFF2)/8192l);
	}
}
 8001904:	e042      	b.n	800198c <MS5837_calculate+0x79c>
		P = (((D1*SENS2)/2097152l-OFF2)/8192l);
 8001906:	4b26      	ldr	r3, [pc, #152]	; (80019a0 <MS5837_calculate+0x7b0>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	461a      	mov	r2, r3
 800190c:	f04f 0300 	mov.w	r3, #0
 8001910:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001912:	fb03 f001 	mul.w	r0, r3, r1
 8001916:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001918:	fb02 f101 	mul.w	r1, r2, r1
 800191c:	4401      	add	r1, r0
 800191e:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8001920:	fba0 2302 	umull	r2, r3, r0, r2
 8001924:	4419      	add	r1, r3
 8001926:	460b      	mov	r3, r1
 8001928:	2a00      	cmp	r2, #0
 800192a:	f173 0100 	sbcs.w	r1, r3, #0
 800192e:	da05      	bge.n	800193c <MS5837_calculate+0x74c>
 8001930:	481c      	ldr	r0, [pc, #112]	; (80019a4 <MS5837_calculate+0x7b4>)
 8001932:	f04f 0100 	mov.w	r1, #0
 8001936:	1812      	adds	r2, r2, r0
 8001938:	eb41 0303 	adc.w	r3, r1, r3
 800193c:	f04f 0000 	mov.w	r0, #0
 8001940:	f04f 0100 	mov.w	r1, #0
 8001944:	0d50      	lsrs	r0, r2, #21
 8001946:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 800194a:	1559      	asrs	r1, r3, #21
 800194c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001950:	1a84      	subs	r4, r0, r2
 8001952:	63bc      	str	r4, [r7, #56]	; 0x38
 8001954:	eb61 0303 	sbc.w	r3, r1, r3
 8001958:	63fb      	str	r3, [r7, #60]	; 0x3c
 800195a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800195e:	2a00      	cmp	r2, #0
 8001960:	f173 0100 	sbcs.w	r1, r3, #0
 8001964:	da06      	bge.n	8001974 <MS5837_calculate+0x784>
 8001966:	f641 70ff 	movw	r0, #8191	; 0x1fff
 800196a:	f04f 0100 	mov.w	r1, #0
 800196e:	1812      	adds	r2, r2, r0
 8001970:	eb41 0303 	adc.w	r3, r1, r3
 8001974:	f04f 0000 	mov.w	r0, #0
 8001978:	f04f 0100 	mov.w	r1, #0
 800197c:	0b50      	lsrs	r0, r2, #13
 800197e:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001982:	1359      	asrs	r1, r3, #13
 8001984:	4602      	mov	r2, r0
 8001986:	460b      	mov	r3, r1
 8001988:	4b07      	ldr	r3, [pc, #28]	; (80019a8 <MS5837_calculate+0x7b8>)
 800198a:	601a      	str	r2, [r3, #0]
}
 800198c:	bf00      	nop
 800198e:	3798      	adds	r7, #152	; 0x98
 8001990:	46bd      	mov	sp, r7
 8001992:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001996:	4770      	bx	lr
 8001998:	20000288 	.word	0x20000288
 800199c:	20000280 	.word	0x20000280
 80019a0:	200002a0 	.word	0x200002a0
 80019a4:	001fffff 	.word	0x001fffff
 80019a8:	200002a4 	.word	0x200002a4

080019ac <MS5837_pressure>:

float MS5837_pressure(float conversion) {
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
    if ( _model == MS5837_02BA ) {
 80019b4:	4b14      	ldr	r3, [pc, #80]	; (8001a08 <MS5837_pressure+0x5c>)
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	2200      	movs	r2, #0
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d110      	bne.n	80019e0 <MS5837_pressure+0x34>
        return P*conversion/100.0f;
 80019be:	4b13      	ldr	r3, [pc, #76]	; (8001a0c <MS5837_pressure+0x60>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7ff f96a 	bl	8000c9c <__aeabi_i2f>
 80019c8:	4603      	mov	r3, r0
 80019ca:	6879      	ldr	r1, [r7, #4]
 80019cc:	4618      	mov	r0, r3
 80019ce:	f7ff f9b9 	bl	8000d44 <__aeabi_fmul>
 80019d2:	4603      	mov	r3, r0
 80019d4:	490e      	ldr	r1, [pc, #56]	; (8001a10 <MS5837_pressure+0x64>)
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7ff fa68 	bl	8000eac <__aeabi_fdiv>
 80019dc:	4603      	mov	r3, r0
 80019de:	e00f      	b.n	8001a00 <MS5837_pressure+0x54>
    }
    else {
        return P*conversion/10.0f;
 80019e0:	4b0a      	ldr	r3, [pc, #40]	; (8001a0c <MS5837_pressure+0x60>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7ff f959 	bl	8000c9c <__aeabi_i2f>
 80019ea:	4603      	mov	r3, r0
 80019ec:	6879      	ldr	r1, [r7, #4]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7ff f9a8 	bl	8000d44 <__aeabi_fmul>
 80019f4:	4603      	mov	r3, r0
 80019f6:	4907      	ldr	r1, [pc, #28]	; (8001a14 <MS5837_pressure+0x68>)
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff fa57 	bl	8000eac <__aeabi_fdiv>
 80019fe:	4603      	mov	r3, r0
    }
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3708      	adds	r7, #8
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	20000280 	.word	0x20000280
 8001a0c:	200002a4 	.word	0x200002a4
 8001a10:	42c80000 	.word	0x42c80000
 8001a14:	41200000 	.word	0x41200000

08001a18 <MS5837_temperature>:

float MS5837_temperature() {
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
	return TEMP/100.0f;
 8001a1c:	4b06      	ldr	r3, [pc, #24]	; (8001a38 <MS5837_temperature+0x20>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7ff f93b 	bl	8000c9c <__aeabi_i2f>
 8001a26:	4603      	mov	r3, r0
 8001a28:	4904      	ldr	r1, [pc, #16]	; (8001a3c <MS5837_temperature+0x24>)
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f7ff fa3e 	bl	8000eac <__aeabi_fdiv>
 8001a30:	4603      	mov	r3, r0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	20000288 	.word	0x20000288
 8001a3c:	42c80000 	.word	0x42c80000

08001a40 <MS5837_depth>:

float MS5837_depth() {
 8001a40:	b5b0      	push	{r4, r5, r7, lr}
 8001a42:	af00      	add	r7, sp, #0
	return ( MS5837_pressure(MS5837_Pa)-101300)/(fluidDensity*9.80665);
 8001a44:	4b16      	ldr	r3, [pc, #88]	; (8001aa0 <MS5837_depth+0x60>)
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7ff ffb0 	bl	80019ac <MS5837_pressure>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	4915      	ldr	r1, [pc, #84]	; (8001aa4 <MS5837_depth+0x64>)
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7ff f86d 	bl	8000b30 <__aeabi_fsub>
 8001a56:	4603      	mov	r3, r0
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7fe fce5 	bl	8000428 <__aeabi_f2d>
 8001a5e:	4604      	mov	r4, r0
 8001a60:	460d      	mov	r5, r1
 8001a62:	4b11      	ldr	r3, [pc, #68]	; (8001aa8 <MS5837_depth+0x68>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7fe fcde 	bl	8000428 <__aeabi_f2d>
 8001a6c:	a30a      	add	r3, pc, #40	; (adr r3, 8001a98 <MS5837_depth+0x58>)
 8001a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a72:	f7fe fd31 	bl	80004d8 <__aeabi_dmul>
 8001a76:	4602      	mov	r2, r0
 8001a78:	460b      	mov	r3, r1
 8001a7a:	4620      	mov	r0, r4
 8001a7c:	4629      	mov	r1, r5
 8001a7e:	f7fe fe55 	bl	800072c <__aeabi_ddiv>
 8001a82:	4602      	mov	r2, r0
 8001a84:	460b      	mov	r3, r1
 8001a86:	4610      	mov	r0, r2
 8001a88:	4619      	mov	r1, r3
 8001a8a:	f7fe fffd 	bl	8000a88 <__aeabi_d2f>
 8001a8e:	4603      	mov	r3, r0
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	bdb0      	pop	{r4, r5, r7, pc}
 8001a94:	f3af 8000 	nop.w
 8001a98:	3a92a305 	.word	0x3a92a305
 8001a9c:	40239d01 	.word	0x40239d01
 8001aa0:	42c80000 	.word	0x42c80000
 8001aa4:	47c5da00 	.word	0x47c5da00
 8001aa8:	20000000 	.word	0x20000000
 8001aac:	00000000 	.word	0x00000000

08001ab0 <MS5837_altitude>:

float MS5837_altitude() {
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
	return (1-pow(( MS5837_pressure(MS5837_mbar)/1013.25),.190284))*145366.45*.3048;
 8001ab4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7ff ff77 	bl	80019ac <MS5837_pressure>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7fe fcb1 	bl	8000428 <__aeabi_f2d>
 8001ac6:	a318      	add	r3, pc, #96	; (adr r3, 8001b28 <MS5837_altitude+0x78>)
 8001ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001acc:	f7fe fe2e 	bl	800072c <__aeabi_ddiv>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	4610      	mov	r0, r2
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	a315      	add	r3, pc, #84	; (adr r3, 8001b30 <MS5837_altitude+0x80>)
 8001ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ade:	f007 fc3d 	bl	800935c <pow>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	f04f 0000 	mov.w	r0, #0
 8001aea:	4917      	ldr	r1, [pc, #92]	; (8001b48 <MS5837_altitude+0x98>)
 8001aec:	f7fe fb3c 	bl	8000168 <__aeabi_dsub>
 8001af0:	4602      	mov	r2, r0
 8001af2:	460b      	mov	r3, r1
 8001af4:	4610      	mov	r0, r2
 8001af6:	4619      	mov	r1, r3
 8001af8:	a30f      	add	r3, pc, #60	; (adr r3, 8001b38 <MS5837_altitude+0x88>)
 8001afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001afe:	f7fe fceb 	bl	80004d8 <__aeabi_dmul>
 8001b02:	4602      	mov	r2, r0
 8001b04:	460b      	mov	r3, r1
 8001b06:	4610      	mov	r0, r2
 8001b08:	4619      	mov	r1, r3
 8001b0a:	a30d      	add	r3, pc, #52	; (adr r3, 8001b40 <MS5837_altitude+0x90>)
 8001b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b10:	f7fe fce2 	bl	80004d8 <__aeabi_dmul>
 8001b14:	4602      	mov	r2, r0
 8001b16:	460b      	mov	r3, r1
 8001b18:	4610      	mov	r0, r2
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	f7fe ffb4 	bl	8000a88 <__aeabi_d2f>
 8001b20:	4603      	mov	r3, r0
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	00000000 	.word	0x00000000
 8001b2c:	408faa00 	.word	0x408faa00
 8001b30:	e279dd3c 	.word	0xe279dd3c
 8001b34:	3fc85b39 	.word	0x3fc85b39
 8001b38:	9999999a 	.word	0x9999999a
 8001b3c:	4101beb3 	.word	0x4101beb3
 8001b40:	dbf487fd 	.word	0xdbf487fd
 8001b44:	3fd381d7 	.word	0x3fd381d7
 8001b48:	3ff00000 	.word	0x3ff00000

08001b4c <MS5837_crc4>:


uint8_t MS5837_crc4(uint16_t *n_prom) {
 8001b4c:	b480      	push	{r7}
 8001b4e:	b085      	sub	sp, #20
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
	uint16_t n_rem = 0;
 8001b54:	2300      	movs	r3, #0
 8001b56:	81fb      	strh	r3, [r7, #14]

	n_prom[0] = ((n_prom[0]) & 0x0FFF);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	881b      	ldrh	r3, [r3, #0]
 8001b5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b60:	b29a      	uxth	r2, r3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	801a      	strh	r2, [r3, #0]
	n_prom[7] = 0;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	330e      	adds	r3, #14
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	801a      	strh	r2, [r3, #0]

	for ( uint8_t i = 0 ; i < 16; i++ ) {
 8001b6e:	2300      	movs	r3, #0
 8001b70:	737b      	strb	r3, [r7, #13]
 8001b72:	e03c      	b.n	8001bee <MS5837_crc4+0xa2>
		if ( i%2 == 1 ) {
 8001b74:	7b7b      	ldrb	r3, [r7, #13]
 8001b76:	f003 0301 	and.w	r3, r3, #1
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d00f      	beq.n	8001ba0 <MS5837_crc4+0x54>
			n_rem ^= (uint16_t)((n_prom[i>>1]) & 0x00FF);
 8001b80:	7b7b      	ldrb	r3, [r7, #13]
 8001b82:	085b      	lsrs	r3, r3, #1
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	005b      	lsls	r3, r3, #1
 8001b88:	687a      	ldr	r2, [r7, #4]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	881b      	ldrh	r3, [r3, #0]
 8001b8e:	b21b      	sxth	r3, r3
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	b21a      	sxth	r2, r3
 8001b94:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001b98:	4053      	eors	r3, r2
 8001b9a:	b21b      	sxth	r3, r3
 8001b9c:	81fb      	strh	r3, [r7, #14]
 8001b9e:	e00b      	b.n	8001bb8 <MS5837_crc4+0x6c>
		} else {
			n_rem ^= (uint16_t)(n_prom[i>>1] >> 8);
 8001ba0:	7b7b      	ldrb	r3, [r7, #13]
 8001ba2:	085b      	lsrs	r3, r3, #1
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	005b      	lsls	r3, r3, #1
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	4413      	add	r3, r2
 8001bac:	881b      	ldrh	r3, [r3, #0]
 8001bae:	0a1b      	lsrs	r3, r3, #8
 8001bb0:	b29a      	uxth	r2, r3
 8001bb2:	89fb      	ldrh	r3, [r7, #14]
 8001bb4:	4053      	eors	r3, r2
 8001bb6:	81fb      	strh	r3, [r7, #14]
		}
		for ( uint8_t n_bit = 8 ; n_bit > 0 ; n_bit-- ) {
 8001bb8:	2308      	movs	r3, #8
 8001bba:	733b      	strb	r3, [r7, #12]
 8001bbc:	e011      	b.n	8001be2 <MS5837_crc4+0x96>
			if ( n_rem & 0x8000 ) {
 8001bbe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	da07      	bge.n	8001bd6 <MS5837_crc4+0x8a>
				n_rem = (n_rem << 1) ^ 0x3000;
 8001bc6:	89fb      	ldrh	r3, [r7, #14]
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	b21b      	sxth	r3, r3
 8001bcc:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001bd0:	b21b      	sxth	r3, r3
 8001bd2:	81fb      	strh	r3, [r7, #14]
 8001bd4:	e002      	b.n	8001bdc <MS5837_crc4+0x90>
			} else {
				n_rem = (n_rem << 1);
 8001bd6:	89fb      	ldrh	r3, [r7, #14]
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	81fb      	strh	r3, [r7, #14]
		for ( uint8_t n_bit = 8 ; n_bit > 0 ; n_bit-- ) {
 8001bdc:	7b3b      	ldrb	r3, [r7, #12]
 8001bde:	3b01      	subs	r3, #1
 8001be0:	733b      	strb	r3, [r7, #12]
 8001be2:	7b3b      	ldrb	r3, [r7, #12]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d1ea      	bne.n	8001bbe <MS5837_crc4+0x72>
	for ( uint8_t i = 0 ; i < 16; i++ ) {
 8001be8:	7b7b      	ldrb	r3, [r7, #13]
 8001bea:	3301      	adds	r3, #1
 8001bec:	737b      	strb	r3, [r7, #13]
 8001bee:	7b7b      	ldrb	r3, [r7, #13]
 8001bf0:	2b0f      	cmp	r3, #15
 8001bf2:	d9bf      	bls.n	8001b74 <MS5837_crc4+0x28>
			}
		}
	}

	n_rem = ((n_rem >> 12) & 0x000F);
 8001bf4:	89fb      	ldrh	r3, [r7, #14]
 8001bf6:	0b1b      	lsrs	r3, r3, #12
 8001bf8:	81fb      	strh	r3, [r7, #14]

	return n_rem ^ 0x00;
 8001bfa:	89fb      	ldrh	r3, [r7, #14]
 8001bfc:	b2db      	uxtb	r3, r3
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3714      	adds	r7, #20
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bc80      	pop	{r7}
 8001c06:	4770      	bx	lr

08001c08 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b088      	sub	sp, #32
 8001c0c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c0e:	f107 0310 	add.w	r3, r7, #16
 8001c12:	2200      	movs	r2, #0
 8001c14:	601a      	str	r2, [r3, #0]
 8001c16:	605a      	str	r2, [r3, #4]
 8001c18:	609a      	str	r2, [r3, #8]
 8001c1a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c1c:	4b37      	ldr	r3, [pc, #220]	; (8001cfc <MX_GPIO_Init+0xf4>)
 8001c1e:	699b      	ldr	r3, [r3, #24]
 8001c20:	4a36      	ldr	r2, [pc, #216]	; (8001cfc <MX_GPIO_Init+0xf4>)
 8001c22:	f043 0310 	orr.w	r3, r3, #16
 8001c26:	6193      	str	r3, [r2, #24]
 8001c28:	4b34      	ldr	r3, [pc, #208]	; (8001cfc <MX_GPIO_Init+0xf4>)
 8001c2a:	699b      	ldr	r3, [r3, #24]
 8001c2c:	f003 0310 	and.w	r3, r3, #16
 8001c30:	60fb      	str	r3, [r7, #12]
 8001c32:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c34:	4b31      	ldr	r3, [pc, #196]	; (8001cfc <MX_GPIO_Init+0xf4>)
 8001c36:	699b      	ldr	r3, [r3, #24]
 8001c38:	4a30      	ldr	r2, [pc, #192]	; (8001cfc <MX_GPIO_Init+0xf4>)
 8001c3a:	f043 0320 	orr.w	r3, r3, #32
 8001c3e:	6193      	str	r3, [r2, #24]
 8001c40:	4b2e      	ldr	r3, [pc, #184]	; (8001cfc <MX_GPIO_Init+0xf4>)
 8001c42:	699b      	ldr	r3, [r3, #24]
 8001c44:	f003 0320 	and.w	r3, r3, #32
 8001c48:	60bb      	str	r3, [r7, #8]
 8001c4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c4c:	4b2b      	ldr	r3, [pc, #172]	; (8001cfc <MX_GPIO_Init+0xf4>)
 8001c4e:	699b      	ldr	r3, [r3, #24]
 8001c50:	4a2a      	ldr	r2, [pc, #168]	; (8001cfc <MX_GPIO_Init+0xf4>)
 8001c52:	f043 0304 	orr.w	r3, r3, #4
 8001c56:	6193      	str	r3, [r2, #24]
 8001c58:	4b28      	ldr	r3, [pc, #160]	; (8001cfc <MX_GPIO_Init+0xf4>)
 8001c5a:	699b      	ldr	r3, [r3, #24]
 8001c5c:	f003 0304 	and.w	r3, r3, #4
 8001c60:	607b      	str	r3, [r7, #4]
 8001c62:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c64:	4b25      	ldr	r3, [pc, #148]	; (8001cfc <MX_GPIO_Init+0xf4>)
 8001c66:	699b      	ldr	r3, [r3, #24]
 8001c68:	4a24      	ldr	r2, [pc, #144]	; (8001cfc <MX_GPIO_Init+0xf4>)
 8001c6a:	f043 0308 	orr.w	r3, r3, #8
 8001c6e:	6193      	str	r3, [r2, #24]
 8001c70:	4b22      	ldr	r3, [pc, #136]	; (8001cfc <MX_GPIO_Init+0xf4>)
 8001c72:	699b      	ldr	r3, [r3, #24]
 8001c74:	f003 0308 	and.w	r3, r3, #8
 8001c78:	603b      	str	r3, [r7, #0]
 8001c7a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c82:	481f      	ldr	r0, [pc, #124]	; (8001d00 <MX_GPIO_Init+0xf8>)
 8001c84:	f001 fc92 	bl	80035ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8001c88:	2200      	movs	r2, #0
 8001c8a:	2140      	movs	r1, #64	; 0x40
 8001c8c:	481d      	ldr	r0, [pc, #116]	; (8001d04 <MX_GPIO_Init+0xfc>)
 8001c8e:	f001 fc8d 	bl	80035ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RST_Pin|DC_Pin, GPIO_PIN_RESET);
 8001c92:	2200      	movs	r2, #0
 8001c94:	2103      	movs	r1, #3
 8001c96:	481c      	ldr	r0, [pc, #112]	; (8001d08 <MX_GPIO_Init+0x100>)
 8001c98:	f001 fc88 	bl	80035ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8001c9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ca0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001caa:	2302      	movs	r3, #2
 8001cac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8001cae:	f107 0310 	add.w	r3, r7, #16
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	4812      	ldr	r0, [pc, #72]	; (8001d00 <MX_GPIO_Init+0xf8>)
 8001cb6:	f001 faf5 	bl	80032a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_Pin;
 8001cba:	2340      	movs	r3, #64	; 0x40
 8001cbc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8001cca:	f107 0310 	add.w	r3, r7, #16
 8001cce:	4619      	mov	r1, r3
 8001cd0:	480c      	ldr	r0, [pc, #48]	; (8001d04 <MX_GPIO_Init+0xfc>)
 8001cd2:	f001 fae7 	bl	80032a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = RST_Pin|DC_Pin;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ce6:	f107 0310 	add.w	r3, r7, #16
 8001cea:	4619      	mov	r1, r3
 8001cec:	4806      	ldr	r0, [pc, #24]	; (8001d08 <MX_GPIO_Init+0x100>)
 8001cee:	f001 fad9 	bl	80032a4 <HAL_GPIO_Init>

}
 8001cf2:	bf00      	nop
 8001cf4:	3720      	adds	r7, #32
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	40021000 	.word	0x40021000
 8001d00:	40011000 	.word	0x40011000
 8001d04:	40010800 	.word	0x40010800
 8001d08:	40010c00 	.word	0x40010c00

08001d0c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001d10:	4b12      	ldr	r3, [pc, #72]	; (8001d5c <MX_I2C1_Init+0x50>)
 8001d12:	4a13      	ldr	r2, [pc, #76]	; (8001d60 <MX_I2C1_Init+0x54>)
 8001d14:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001d16:	4b11      	ldr	r3, [pc, #68]	; (8001d5c <MX_I2C1_Init+0x50>)
 8001d18:	4a12      	ldr	r2, [pc, #72]	; (8001d64 <MX_I2C1_Init+0x58>)
 8001d1a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d1c:	4b0f      	ldr	r3, [pc, #60]	; (8001d5c <MX_I2C1_Init+0x50>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001d22:	4b0e      	ldr	r3, [pc, #56]	; (8001d5c <MX_I2C1_Init+0x50>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d28:	4b0c      	ldr	r3, [pc, #48]	; (8001d5c <MX_I2C1_Init+0x50>)
 8001d2a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d2e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d30:	4b0a      	ldr	r3, [pc, #40]	; (8001d5c <MX_I2C1_Init+0x50>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001d36:	4b09      	ldr	r3, [pc, #36]	; (8001d5c <MX_I2C1_Init+0x50>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d3c:	4b07      	ldr	r3, [pc, #28]	; (8001d5c <MX_I2C1_Init+0x50>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d42:	4b06      	ldr	r3, [pc, #24]	; (8001d5c <MX_I2C1_Init+0x50>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d48:	4804      	ldr	r0, [pc, #16]	; (8001d5c <MX_I2C1_Init+0x50>)
 8001d4a:	f001 fc61 	bl	8003610 <HAL_I2C_Init>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d001      	beq.n	8001d58 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001d54:	f000 fda2 	bl	800289c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001d58:	bf00      	nop
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	200002a8 	.word	0x200002a8
 8001d60:	40005400 	.word	0x40005400
 8001d64:	000186a0 	.word	0x000186a0

08001d68 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b088      	sub	sp, #32
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d70:	f107 0310 	add.w	r3, r7, #16
 8001d74:	2200      	movs	r2, #0
 8001d76:	601a      	str	r2, [r3, #0]
 8001d78:	605a      	str	r2, [r3, #4]
 8001d7a:	609a      	str	r2, [r3, #8]
 8001d7c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a15      	ldr	r2, [pc, #84]	; (8001dd8 <HAL_I2C_MspInit+0x70>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d123      	bne.n	8001dd0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d88:	4b14      	ldr	r3, [pc, #80]	; (8001ddc <HAL_I2C_MspInit+0x74>)
 8001d8a:	699b      	ldr	r3, [r3, #24]
 8001d8c:	4a13      	ldr	r2, [pc, #76]	; (8001ddc <HAL_I2C_MspInit+0x74>)
 8001d8e:	f043 0308 	orr.w	r3, r3, #8
 8001d92:	6193      	str	r3, [r2, #24]
 8001d94:	4b11      	ldr	r3, [pc, #68]	; (8001ddc <HAL_I2C_MspInit+0x74>)
 8001d96:	699b      	ldr	r3, [r3, #24]
 8001d98:	f003 0308 	and.w	r3, r3, #8
 8001d9c:	60fb      	str	r3, [r7, #12]
 8001d9e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001da0:	23c0      	movs	r3, #192	; 0xc0
 8001da2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001da4:	2312      	movs	r3, #18
 8001da6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001da8:	2303      	movs	r3, #3
 8001daa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dac:	f107 0310 	add.w	r3, r7, #16
 8001db0:	4619      	mov	r1, r3
 8001db2:	480b      	ldr	r0, [pc, #44]	; (8001de0 <HAL_I2C_MspInit+0x78>)
 8001db4:	f001 fa76 	bl	80032a4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001db8:	4b08      	ldr	r3, [pc, #32]	; (8001ddc <HAL_I2C_MspInit+0x74>)
 8001dba:	69db      	ldr	r3, [r3, #28]
 8001dbc:	4a07      	ldr	r2, [pc, #28]	; (8001ddc <HAL_I2C_MspInit+0x74>)
 8001dbe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001dc2:	61d3      	str	r3, [r2, #28]
 8001dc4:	4b05      	ldr	r3, [pc, #20]	; (8001ddc <HAL_I2C_MspInit+0x74>)
 8001dc6:	69db      	ldr	r3, [r3, #28]
 8001dc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dcc:	60bb      	str	r3, [r7, #8]
 8001dce:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001dd0:	bf00      	nop
 8001dd2:	3720      	adds	r7, #32
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	40005400 	.word	0x40005400
 8001ddc:	40021000 	.word	0x40021000
 8001de0:	40010c00 	.word	0x40010c00

08001de4 <LCD_Initialize>:

#include "main.h"
#include "lcd_5110.h"


void LCD_Initialize(SPI_HandleTypeDef *spi){
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);
 8001dec:	2200      	movs	r2, #0
 8001dee:	2101      	movs	r1, #1
 8001df0:	4813      	ldr	r0, [pc, #76]	; (8001e40 <LCD_Initialize+0x5c>)
 8001df2:	f001 fbdb 	bl	80035ac <HAL_GPIO_WritePin>
	HAL_Delay(1);//only needed once xD
 8001df6:	2001      	movs	r0, #1
 8001df8:	f001 f872 	bl	8002ee0 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	2101      	movs	r1, #1
 8001e00:	480f      	ldr	r0, [pc, #60]	; (8001e40 <LCD_Initialize+0x5c>)
 8001e02:	f001 fbd3 	bl	80035ac <HAL_GPIO_WritePin>

    LCD_Command(spi, 0x21);
 8001e06:	2121      	movs	r1, #33	; 0x21
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	f000 f81b 	bl	8001e44 <LCD_Command>
    LCD_Command(spi,0xB1);
 8001e0e:	21b1      	movs	r1, #177	; 0xb1
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f000 f817 	bl	8001e44 <LCD_Command>
    LCD_Command(spi, 0x04);
 8001e16:	2104      	movs	r1, #4
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f000 f813 	bl	8001e44 <LCD_Command>
    LCD_Command(spi, 0x14);
 8001e1e:	2114      	movs	r1, #20
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f000 f80f 	bl	8001e44 <LCD_Command>
    //LCD_Command(0x80 | 0x2f);
    LCD_Command(spi, 0x20);
 8001e26:	2120      	movs	r1, #32
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f000 f80b 	bl	8001e44 <LCD_Command>
    LCD_Command(spi, 0x0C);
 8001e2e:	210c      	movs	r1, #12
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f000 f807 	bl	8001e44 <LCD_Command>
//	LCD_Command(0x14);
//	LCD_Command(0x80 | 0x2f); //Ustawienie kontrastu
//	LCD_Command(0x20);
//	LCD_Command(0x0c);

}
 8001e36:	bf00      	nop
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	40010c00 	.word	0x40010c00

08001e44 <LCD_Command>:

void LCD_Command(SPI_HandleTypeDef* spi,uint8_t cmd){
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	70fb      	strb	r3, [r7, #3]

	HAL_GPIO_WritePin(LCD_CE_PORT, LCD_CE_PIN, GPIO_PIN_RESET);
 8001e50:	2200      	movs	r2, #0
 8001e52:	2140      	movs	r1, #64	; 0x40
 8001e54:	480e      	ldr	r0, [pc, #56]	; (8001e90 <LCD_Command+0x4c>)
 8001e56:	f001 fba9 	bl	80035ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, LCD_C);
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	2102      	movs	r1, #2
 8001e5e:	480d      	ldr	r0, [pc, #52]	; (8001e94 <LCD_Command+0x50>)
 8001e60:	f001 fba4 	bl	80035ac <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(spi, &cmd, 1, HAL_MAX_DELAY);
 8001e64:	1cf9      	adds	r1, r7, #3
 8001e66:	f04f 33ff 	mov.w	r3, #4294967295
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	f003 f83b 	bl	8004ee8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CE_PORT, LCD_CE_PIN, GPIO_PIN_SET);
 8001e72:	2201      	movs	r2, #1
 8001e74:	2140      	movs	r1, #64	; 0x40
 8001e76:	4806      	ldr	r0, [pc, #24]	; (8001e90 <LCD_Command+0x4c>)
 8001e78:	f001 fb98 	bl	80035ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	2102      	movs	r1, #2
 8001e80:	4804      	ldr	r0, [pc, #16]	; (8001e94 <LCD_Command+0x50>)
 8001e82:	f001 fb93 	bl	80035ac <HAL_GPIO_WritePin>

}
 8001e86:	bf00      	nop
 8001e88:	3708      	adds	r7, #8
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	40010800 	.word	0x40010800
 8001e94:	40010c00 	.word	0x40010c00

08001e98 <LCD_Data>:

void LCD_Data(SPI_HandleTypeDef *spi,uint8_t* cmd){
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, LCD_D);
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	2102      	movs	r1, #2
 8001ea6:	480c      	ldr	r0, [pc, #48]	; (8001ed8 <LCD_Data+0x40>)
 8001ea8:	f001 fb80 	bl	80035ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CE_PORT, LCD_CE_PIN, GPIO_PIN_RESET);
 8001eac:	2200      	movs	r2, #0
 8001eae:	2140      	movs	r1, #64	; 0x40
 8001eb0:	480a      	ldr	r0, [pc, #40]	; (8001edc <LCD_Data+0x44>)
 8001eb2:	f001 fb7b 	bl	80035ac <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(spi, cmd, LCD_X*LCD_Y/8, HAL_MAX_DELAY);
 8001eb6:	f04f 33ff 	mov.w	r3, #4294967295
 8001eba:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8001ebe:	6839      	ldr	r1, [r7, #0]
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	f003 f811 	bl	8004ee8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CE_PORT, LCD_CE_PIN, GPIO_PIN_SET);
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	2140      	movs	r1, #64	; 0x40
 8001eca:	4804      	ldr	r0, [pc, #16]	; (8001edc <LCD_Data+0x44>)
 8001ecc:	f001 fb6e 	bl	80035ac <HAL_GPIO_WritePin>

}
 8001ed0:	bf00      	nop
 8001ed2:	3708      	adds	r7, #8
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	40010c00 	.word	0x40010c00
 8001edc:	40010800 	.word	0x40010800

08001ee0 <LCD_draw_pixel>:
		LCD_Data_Byte(spi , tmp);
	}


}
void LCD_draw_pixel(uint8_t buffer[],uint8_t x, uint8_t y){
 8001ee0:	b480      	push	{r7}
 8001ee2:	b085      	sub	sp, #20
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	460b      	mov	r3, r1
 8001eea:	70fb      	strb	r3, [r7, #3]
 8001eec:	4613      	mov	r3, r2
 8001eee:	70bb      	strb	r3, [r7, #2]


    if (x >= LCD_X){
 8001ef0:	78fb      	ldrb	r3, [r7, #3]
 8001ef2:	2b53      	cmp	r3, #83	; 0x53
 8001ef4:	d901      	bls.n	8001efa <LCD_draw_pixel+0x1a>
    	x = LCD_X-1;
 8001ef6:	2353      	movs	r3, #83	; 0x53
 8001ef8:	70fb      	strb	r3, [r7, #3]

    if (y < 0){
    	y = 0;
    }

    if (y >= LCD_Y){
 8001efa:	78bb      	ldrb	r3, [r7, #2]
 8001efc:	2b2f      	cmp	r3, #47	; 0x2f
 8001efe:	d901      	bls.n	8001f04 <LCD_draw_pixel+0x24>
    	y = LCD_Y-1;
 8001f00:	232f      	movs	r3, #47	; 0x2f
 8001f02:	70bb      	strb	r3, [r7, #2]
    }



    uint16_t i = (uint16_t)(y/8)*LCD_X + x;
 8001f04:	78bb      	ldrb	r3, [r7, #2]
 8001f06:	08db      	lsrs	r3, r3, #3
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	b29b      	uxth	r3, r3
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	0052      	lsls	r2, r2, #1
 8001f10:	4413      	add	r3, r2
 8001f12:	461a      	mov	r2, r3
 8001f14:	00d2      	lsls	r2, r2, #3
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	b29a      	uxth	r2, r3
 8001f1c:	78fb      	ldrb	r3, [r7, #3]
 8001f1e:	b29b      	uxth	r3, r3
 8001f20:	4413      	add	r3, r2
 8001f22:	81fb      	strh	r3, [r7, #14]

    uint16_t bit_counter = y%8;
 8001f24:	78bb      	ldrb	r3, [r7, #2]
 8001f26:	b29b      	uxth	r3, r3
 8001f28:	f003 0307 	and.w	r3, r3, #7
 8001f2c:	81bb      	strh	r3, [r7, #12]
    uint16_t bit_value = buffer[i];
 8001f2e:	89fb      	ldrh	r3, [r7, #14]
 8001f30:	687a      	ldr	r2, [r7, #4]
 8001f32:	4413      	add	r3, r2
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	817b      	strh	r3, [r7, #10]
    bit_value |= (1<< bit_counter);
 8001f38:	89bb      	ldrh	r3, [r7, #12]
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f40:	b21a      	sxth	r2, r3
 8001f42:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	b21b      	sxth	r3, r3
 8001f4a:	817b      	strh	r3, [r7, #10]

    buffer[i]=(bit_value);
 8001f4c:	89fb      	ldrh	r3, [r7, #14]
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	4413      	add	r3, r2
 8001f52:	897a      	ldrh	r2, [r7, #10]
 8001f54:	b2d2      	uxtb	r2, r2
 8001f56:	701a      	strb	r2, [r3, #0]


}
 8001f58:	bf00      	nop
 8001f5a:	3714      	adds	r7, #20
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bc80      	pop	{r7}
 8001f60:	4770      	bx	lr

08001f62 <LCD_Clear_Buffer>:



void LCD_Clear_Buffer(uint8_t buffer[]){
 8001f62:	b480      	push	{r7}
 8001f64:	b085      	sub	sp, #20
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	6078      	str	r0, [r7, #4]

	for(uint16_t i = 0; i < (LCD_X*LCD_Y/8); i ++){
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	81fb      	strh	r3, [r7, #14]
 8001f6e:	e007      	b.n	8001f80 <LCD_Clear_Buffer+0x1e>
		buffer[i]= 0x00;
 8001f70:	89fb      	ldrh	r3, [r7, #14]
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	4413      	add	r3, r2
 8001f76:	2200      	movs	r2, #0
 8001f78:	701a      	strb	r2, [r3, #0]
	for(uint16_t i = 0; i < (LCD_X*LCD_Y/8); i ++){
 8001f7a:	89fb      	ldrh	r3, [r7, #14]
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	81fb      	strh	r3, [r7, #14]
 8001f80:	89fb      	ldrh	r3, [r7, #14]
 8001f82:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 8001f86:	d3f3      	bcc.n	8001f70 <LCD_Clear_Buffer+0xe>
	}
}
 8001f88:	bf00      	nop
 8001f8a:	bf00      	nop
 8001f8c:	3714      	adds	r7, #20
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bc80      	pop	{r7}
 8001f92:	4770      	bx	lr

08001f94 <lcd_draw_text>:


void lcd_draw_text(int row, int col, const char* text,uint8_t buffer[])
{
 8001f94:	b480      	push	{r7}
 8001f96:	b089      	sub	sp, #36	; 0x24
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	60f8      	str	r0, [r7, #12]
 8001f9c:	60b9      	str	r1, [r7, #8]
 8001f9e:	607a      	str	r2, [r7, #4]
 8001fa0:	603b      	str	r3, [r7, #0]
	int i;
	uint8_t* pbuf = &buffer[row * 84 + col];
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2254      	movs	r2, #84	; 0x54
 8001fa6:	fb02 f203 	mul.w	r2, r2, r3
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	4413      	add	r3, r2
 8001fae:	461a      	mov	r2, r3
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	4413      	add	r3, r2
 8001fb4:	61bb      	str	r3, [r7, #24]
	while ((*text) && (pbuf < &buffer[LCD_X*LCD_Y/8 - 6])) {
 8001fb6:	e023      	b.n	8002000 <lcd_draw_text+0x6c>
		int ch = *text++;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	1c5a      	adds	r2, r3, #1
 8001fbc:	607a      	str	r2, [r7, #4]
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	613b      	str	r3, [r7, #16]
		const uint8_t* font = &font_ASCII[ch - ' '][0];
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	f1a3 0220 	sub.w	r2, r3, #32
 8001fc8:	4613      	mov	r3, r2
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	4413      	add	r3, r2
 8001fce:	4a14      	ldr	r2, [pc, #80]	; (8002020 <lcd_draw_text+0x8c>)
 8001fd0:	4413      	add	r3, r2
 8001fd2:	617b      	str	r3, [r7, #20]
		for (i = 0; i < 5; i++) {
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	61fb      	str	r3, [r7, #28]
 8001fd8:	e00a      	b.n	8001ff0 <lcd_draw_text+0x5c>
			*pbuf++ = *font++;
 8001fda:	697a      	ldr	r2, [r7, #20]
 8001fdc:	1c53      	adds	r3, r2, #1
 8001fde:	617b      	str	r3, [r7, #20]
 8001fe0:	69bb      	ldr	r3, [r7, #24]
 8001fe2:	1c59      	adds	r1, r3, #1
 8001fe4:	61b9      	str	r1, [r7, #24]
 8001fe6:	7812      	ldrb	r2, [r2, #0]
 8001fe8:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 5; i++) {
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	3301      	adds	r3, #1
 8001fee:	61fb      	str	r3, [r7, #28]
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	2b04      	cmp	r3, #4
 8001ff4:	ddf1      	ble.n	8001fda <lcd_draw_text+0x46>
		}
		*pbuf++ = 0;
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	1c5a      	adds	r2, r3, #1
 8001ffa:	61ba      	str	r2, [r7, #24]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	701a      	strb	r2, [r3, #0]
	while ((*text) && (pbuf < &buffer[LCD_X*LCD_Y/8 - 6])) {
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d005      	beq.n	8002014 <lcd_draw_text+0x80>
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	f503 73f9 	add.w	r3, r3, #498	; 0x1f2
 800200e:	69ba      	ldr	r2, [r7, #24]
 8002010:	429a      	cmp	r2, r3
 8002012:	d3d1      	bcc.n	8001fb8 <lcd_draw_text+0x24>
	}
}
 8002014:	bf00      	nop
 8002016:	3724      	adds	r7, #36	; 0x24
 8002018:	46bd      	mov	sp, r7
 800201a:	bc80      	pop	{r7}
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	0800a600 	.word	0x0800a600

08002024 <lcd_init>:




void lcd_init(struct lcd_disp * lcd)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b084      	sub	sp, #16
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0;
 800202c:	2300      	movs	r3, #0
 800202e:	73fb      	strb	r3, [r7, #15]
	/* set backlight */
	if(lcd->bl)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <lcd_init+0x1a>
	{
		xpin = BL_PIN;
 800203a:	2308      	movs	r3, #8
 800203c:	73fb      	strb	r3, [r7, #15]
	}

	/* init sequence */
	HAL_Delay(40);
 800203e:	2028      	movs	r0, #40	; 0x28
 8002040:	f000 ff4e 	bl	8002ee0 <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	7bfa      	ldrb	r2, [r7, #15]
 800204a:	2130      	movs	r1, #48	; 0x30
 800204c:	4618      	mov	r0, r3
 800204e:	f000 f82f 	bl	80020b0 <lcd_write>
	HAL_Delay(5);
 8002052:	2005      	movs	r0, #5
 8002054:	f000 ff44 	bl	8002ee0 <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	7bfa      	ldrb	r2, [r7, #15]
 800205e:	2130      	movs	r1, #48	; 0x30
 8002060:	4618      	mov	r0, r3
 8002062:	f000 f825 	bl	80020b0 <lcd_write>
	HAL_Delay(1);
 8002066:	2001      	movs	r0, #1
 8002068:	f000 ff3a 	bl	8002ee0 <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	7bfa      	ldrb	r2, [r7, #15]
 8002072:	2130      	movs	r1, #48	; 0x30
 8002074:	4618      	mov	r0, r3
 8002076:	f000 f81b 	bl	80020b0 <lcd_write>

	/* set 4-bit mode */
	lcd_write(lcd->addr, INIT_4_BIT_MODE, xpin);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	7bfa      	ldrb	r2, [r7, #15]
 8002080:	2102      	movs	r1, #2
 8002082:	4618      	mov	r0, r3
 8002084:	f000 f814 	bl	80020b0 <lcd_write>
	HAL_Delay(5);
 8002088:	2005      	movs	r0, #5
 800208a:	f000 ff29 	bl	8002ee0 <HAL_Delay>

	/* set cursor mode */
	lcd_write(lcd->addr, UNDERLINE_OFF_BLINK_OFF, xpin);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	7bfa      	ldrb	r2, [r7, #15]
 8002094:	210c      	movs	r1, #12
 8002096:	4618      	mov	r0, r3
 8002098:	f000 f80a 	bl	80020b0 <lcd_write>
	HAL_Delay(5);
 800209c:	2005      	movs	r0, #5
 800209e:	f000 ff1f 	bl	8002ee0 <HAL_Delay>

	/* clear */
	lcd_clear(lcd);
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f000 f8fb 	bl	800229e <lcd_clear>

}
 80020a8:	bf00      	nop
 80020aa:	3710      	adds	r7, #16
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}

080020b0 <lcd_write>:

void lcd_write(uint8_t addr, uint8_t data, uint8_t xpin)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b086      	sub	sp, #24
 80020b4:	af02      	add	r7, sp, #8
 80020b6:	4603      	mov	r3, r0
 80020b8:	71fb      	strb	r3, [r7, #7]
 80020ba:	460b      	mov	r3, r1
 80020bc:	71bb      	strb	r3, [r7, #6]
 80020be:	4613      	mov	r3, r2
 80020c0:	717b      	strb	r3, [r7, #5]
	uint8_t tx_data[4];

	/* split data */
	tx_data[0] = (data & 0xF0) | EN_PIN | xpin;
 80020c2:	79bb      	ldrb	r3, [r7, #6]
 80020c4:	f023 030f 	bic.w	r3, r3, #15
 80020c8:	b2da      	uxtb	r2, r3
 80020ca:	797b      	ldrb	r3, [r7, #5]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	f043 0304 	orr.w	r3, r3, #4
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	733b      	strb	r3, [r7, #12]
	tx_data[1] = (data & 0xF0) | xpin;
 80020d8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80020dc:	f023 030f 	bic.w	r3, r3, #15
 80020e0:	b25a      	sxtb	r2, r3
 80020e2:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	b25b      	sxtb	r3, r3
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	737b      	strb	r3, [r7, #13]
	tx_data[2] = (data << 4) | EN_PIN | xpin;
 80020ee:	79bb      	ldrb	r3, [r7, #6]
 80020f0:	011b      	lsls	r3, r3, #4
 80020f2:	b2da      	uxtb	r2, r3
 80020f4:	797b      	ldrb	r3, [r7, #5]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	f043 0304 	orr.w	r3, r3, #4
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	73bb      	strb	r3, [r7, #14]
	tx_data[3] = (data << 4) | xpin;
 8002102:	79bb      	ldrb	r3, [r7, #6]
 8002104:	011b      	lsls	r3, r3, #4
 8002106:	b25a      	sxtb	r2, r3
 8002108:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800210c:	4313      	orrs	r3, r2
 800210e:	b25b      	sxtb	r3, r3
 8002110:	b2db      	uxtb	r3, r3
 8002112:	73fb      	strb	r3, [r7, #15]

	/* send data via i2c */
	HAL_I2C_Master_Transmit(&HI2C_DEF, addr, tx_data, 4, 100);
 8002114:	79fb      	ldrb	r3, [r7, #7]
 8002116:	b299      	uxth	r1, r3
 8002118:	f107 020c 	add.w	r2, r7, #12
 800211c:	2364      	movs	r3, #100	; 0x64
 800211e:	9300      	str	r3, [sp, #0]
 8002120:	2304      	movs	r3, #4
 8002122:	4805      	ldr	r0, [pc, #20]	; (8002138 <lcd_write+0x88>)
 8002124:	f001 fbb8 	bl	8003898 <HAL_I2C_Master_Transmit>

	HAL_Delay(1);
 8002128:	2001      	movs	r0, #1
 800212a:	f000 fed9 	bl	8002ee0 <HAL_Delay>
}
 800212e:	bf00      	nop
 8002130:	3710      	adds	r7, #16
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	200002a8 	.word	0x200002a8

0800213c <lcd_display>:

void lcd_display(struct lcd_disp * lcd)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0, i = 0;
 8002144:	2300      	movs	r3, #0
 8002146:	73fb      	strb	r3, [r7, #15]
 8002148:	2300      	movs	r3, #0
 800214a:	73bb      	strb	r3, [r7, #14]
	char ch;

	/* set backlight */
	if(lcd->bl)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8002152:	2b00      	cmp	r3, #0
 8002154:	d001      	beq.n	800215a <lcd_display+0x1e>
	{
		xpin = BL_PIN;
 8002156:	2308      	movs	r3, #8
 8002158:	73fb      	strb	r3, [r7, #15]
	}

	lcd_clear(lcd);
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f000 f89f 	bl	800229e <lcd_clear>

	/* send first line data */
	lcd_write(lcd->addr, FIRST_CHAR_LINE_1, xpin);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	7bfa      	ldrb	r2, [r7, #15]
 8002166:	2180      	movs	r1, #128	; 0x80
 8002168:	4618      	mov	r0, r3
 800216a:	f7ff ffa1 	bl	80020b0 <lcd_write>
	while(lcd->f_line[i])
 800216e:	e015      	b.n	800219c <lcd_display+0x60>
	{
		if (ch < 9)
 8002170:	7b7b      	ldrb	r3, [r7, #13]
 8002172:	2b08      	cmp	r3, #8
 8002174:	d802      	bhi.n	800217c <lcd_display+0x40>
		{
			ch--;
 8002176:	7b7b      	ldrb	r3, [r7, #13]
 8002178:	3b01      	subs	r3, #1
 800217a:	737b      	strb	r3, [r7, #13]
		}
		lcd_write(lcd->addr, lcd->f_line[i], (xpin | RS_PIN));
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	7818      	ldrb	r0, [r3, #0]
 8002180:	7bbb      	ldrb	r3, [r7, #14]
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	4413      	add	r3, r2
 8002186:	7859      	ldrb	r1, [r3, #1]
 8002188:	7bfb      	ldrb	r3, [r7, #15]
 800218a:	f043 0301 	orr.w	r3, r3, #1
 800218e:	b2db      	uxtb	r3, r3
 8002190:	461a      	mov	r2, r3
 8002192:	f7ff ff8d 	bl	80020b0 <lcd_write>
		i++;
 8002196:	7bbb      	ldrb	r3, [r7, #14]
 8002198:	3301      	adds	r3, #1
 800219a:	73bb      	strb	r3, [r7, #14]
	while(lcd->f_line[i])
 800219c:	7bbb      	ldrb	r3, [r7, #14]
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	4413      	add	r3, r2
 80021a2:	785b      	ldrb	r3, [r3, #1]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d1e3      	bne.n	8002170 <lcd_display+0x34>
	}

	/* send second line data */
	i = 0;
 80021a8:	2300      	movs	r3, #0
 80021aa:	73bb      	strb	r3, [r7, #14]
	lcd_write(lcd->addr, FIRST_CHAR_LINE_2, xpin);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	7bfa      	ldrb	r2, [r7, #15]
 80021b2:	21c0      	movs	r1, #192	; 0xc0
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7ff ff7b 	bl	80020b0 <lcd_write>
	while(lcd->s_line[i])
 80021ba:	e015      	b.n	80021e8 <lcd_display+0xac>
	{
		if (ch < 9)
 80021bc:	7b7b      	ldrb	r3, [r7, #13]
 80021be:	2b08      	cmp	r3, #8
 80021c0:	d802      	bhi.n	80021c8 <lcd_display+0x8c>
		{
			ch--;
 80021c2:	7b7b      	ldrb	r3, [r7, #13]
 80021c4:	3b01      	subs	r3, #1
 80021c6:	737b      	strb	r3, [r7, #13]
		}
		lcd_write(lcd->addr, lcd->s_line[i], (xpin | RS_PIN));
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	7818      	ldrb	r0, [r3, #0]
 80021cc:	7bbb      	ldrb	r3, [r7, #14]
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	4413      	add	r3, r2
 80021d2:	7d99      	ldrb	r1, [r3, #22]
 80021d4:	7bfb      	ldrb	r3, [r7, #15]
 80021d6:	f043 0301 	orr.w	r3, r3, #1
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	461a      	mov	r2, r3
 80021de:	f7ff ff67 	bl	80020b0 <lcd_write>
		i++;
 80021e2:	7bbb      	ldrb	r3, [r7, #14]
 80021e4:	3301      	adds	r3, #1
 80021e6:	73bb      	strb	r3, [r7, #14]
	while(lcd->s_line[i])
 80021e8:	7bbb      	ldrb	r3, [r7, #14]
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	4413      	add	r3, r2
 80021ee:	7d9b      	ldrb	r3, [r3, #22]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d1e3      	bne.n	80021bc <lcd_display+0x80>
	}

	/* send first line data */
	i = 0;
 80021f4:	2300      	movs	r3, #0
 80021f6:	73bb      	strb	r3, [r7, #14]
	lcd_write(lcd->addr, FIRST_CHAR_LINE_3, xpin);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	7bfa      	ldrb	r2, [r7, #15]
 80021fe:	2194      	movs	r1, #148	; 0x94
 8002200:	4618      	mov	r0, r3
 8002202:	f7ff ff55 	bl	80020b0 <lcd_write>
	while(lcd->t_line[i])
 8002206:	e016      	b.n	8002236 <lcd_display+0xfa>
	{
		if (ch < 9)
 8002208:	7b7b      	ldrb	r3, [r7, #13]
 800220a:	2b08      	cmp	r3, #8
 800220c:	d802      	bhi.n	8002214 <lcd_display+0xd8>
		{
			ch--;
 800220e:	7b7b      	ldrb	r3, [r7, #13]
 8002210:	3b01      	subs	r3, #1
 8002212:	737b      	strb	r3, [r7, #13]
		}
		lcd_write(lcd->addr, lcd->t_line[i], (xpin | RS_PIN));
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	7818      	ldrb	r0, [r3, #0]
 8002218:	7bbb      	ldrb	r3, [r7, #14]
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	4413      	add	r3, r2
 800221e:	f893 102b 	ldrb.w	r1, [r3, #43]	; 0x2b
 8002222:	7bfb      	ldrb	r3, [r7, #15]
 8002224:	f043 0301 	orr.w	r3, r3, #1
 8002228:	b2db      	uxtb	r3, r3
 800222a:	461a      	mov	r2, r3
 800222c:	f7ff ff40 	bl	80020b0 <lcd_write>
		i++;
 8002230:	7bbb      	ldrb	r3, [r7, #14]
 8002232:	3301      	adds	r3, #1
 8002234:	73bb      	strb	r3, [r7, #14]
	while(lcd->t_line[i])
 8002236:	7bbb      	ldrb	r3, [r7, #14]
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	4413      	add	r3, r2
 800223c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8002240:	2b00      	cmp	r3, #0
 8002242:	d1e1      	bne.n	8002208 <lcd_display+0xcc>
	}

	/* send second line data */
	i = 0;
 8002244:	2300      	movs	r3, #0
 8002246:	73bb      	strb	r3, [r7, #14]
	lcd_write(lcd->addr, FIRST_CHAR_LINE_4, xpin);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	7bfa      	ldrb	r2, [r7, #15]
 800224e:	21d4      	movs	r1, #212	; 0xd4
 8002250:	4618      	mov	r0, r3
 8002252:	f7ff ff2d 	bl	80020b0 <lcd_write>
	while(lcd->l_line[i])
 8002256:	e016      	b.n	8002286 <lcd_display+0x14a>
	{
		if (ch < 9)
 8002258:	7b7b      	ldrb	r3, [r7, #13]
 800225a:	2b08      	cmp	r3, #8
 800225c:	d802      	bhi.n	8002264 <lcd_display+0x128>
		{
			ch--;
 800225e:	7b7b      	ldrb	r3, [r7, #13]
 8002260:	3b01      	subs	r3, #1
 8002262:	737b      	strb	r3, [r7, #13]
		}
		lcd_write(lcd->addr, lcd->l_line[i], (xpin | RS_PIN));
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	7818      	ldrb	r0, [r3, #0]
 8002268:	7bbb      	ldrb	r3, [r7, #14]
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	4413      	add	r3, r2
 800226e:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
 8002272:	7bfb      	ldrb	r3, [r7, #15]
 8002274:	f043 0301 	orr.w	r3, r3, #1
 8002278:	b2db      	uxtb	r3, r3
 800227a:	461a      	mov	r2, r3
 800227c:	f7ff ff18 	bl	80020b0 <lcd_write>
		i++;
 8002280:	7bbb      	ldrb	r3, [r7, #14]
 8002282:	3301      	adds	r3, #1
 8002284:	73bb      	strb	r3, [r7, #14]
	while(lcd->l_line[i])
 8002286:	7bbb      	ldrb	r3, [r7, #14]
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	4413      	add	r3, r2
 800228c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002290:	2b00      	cmp	r3, #0
 8002292:	d1e1      	bne.n	8002258 <lcd_display+0x11c>
	}


}
 8002294:	bf00      	nop
 8002296:	bf00      	nop
 8002298:	3710      	adds	r7, #16
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}

0800229e <lcd_clear>:

void lcd_clear(struct lcd_disp * lcd)
{
 800229e:	b580      	push	{r7, lr}
 80022a0:	b084      	sub	sp, #16
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0;
 80022a6:	2300      	movs	r3, #0
 80022a8:	73fb      	strb	r3, [r7, #15]

	/* set backlight */
	if(lcd->bl)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d001      	beq.n	80022b8 <lcd_clear+0x1a>
	{
		xpin = BL_PIN;
 80022b4:	2308      	movs	r3, #8
 80022b6:	73fb      	strb	r3, [r7, #15]
	}

	/* clear display */
	lcd_write(lcd->addr, CLEAR_LCD, xpin);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	7bfa      	ldrb	r2, [r7, #15]
 80022be:	2101      	movs	r1, #1
 80022c0:	4618      	mov	r0, r3
 80022c2:	f7ff fef5 	bl	80020b0 <lcd_write>
	HAL_Delay(2);
 80022c6:	2002      	movs	r0, #2
 80022c8:	f000 fe0a 	bl	8002ee0 <HAL_Delay>
}
 80022cc:	bf00      	nop
 80022ce:	3710      	adds	r7, #16
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}

080022d4 <__io_putchar>:
void SystemClock_Config(void);
static void MX_NVIC_Init(void);

//print to UART
int __io_putchar(int ch)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, 1000);
 80022dc:	1d39      	adds	r1, r7, #4
 80022de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022e2:	2201      	movs	r2, #1
 80022e4:	4803      	ldr	r0, [pc, #12]	; (80022f4 <__io_putchar+0x20>)
 80022e6:	f003 fc28 	bl	8005b3a <HAL_UART_Transmit>
	return ch;
 80022ea:	687b      	ldr	r3, [r7, #4]
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3708      	adds	r7, #8
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	20000c04 	.word	0x20000c04

080022f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b088      	sub	sp, #32
 80022fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	//cls buffer
	LCD_Clear_Buffer(buffer);
 80022fe:	488a      	ldr	r0, [pc, #552]	; (8002528 <main+0x230>)
 8002300:	f7ff fe2f 	bl	8001f62 <LCD_Clear_Buffer>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002304:	f000 fd8a 	bl	8002e1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002308:	f000 fa08 	bl	800271c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800230c:	f7ff fc7c 	bl	8001c08 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002310:	f7ff fcfc 	bl	8001d0c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8002314:	f000 fcde 	bl	8002cd4 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8002318:	f000 fac6 	bl	80028a8 <MX_SPI1_Init>
  MX_TIM1_Init();
 800231c:	f000 fc6c 	bl	8002bf8 <MX_TIM1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8002320:	f000 fa40 	bl	80027a4 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  //time start & init
  HAL_TIM_Base_Start_IT(&htim1);
 8002324:	4881      	ldr	r0, [pc, #516]	; (800252c <main+0x234>)
 8002326:	f003 f811 	bl	800534c <HAL_TIM_Base_Start_IT>

     LCD_Initialize(&hspi1);
 800232a:	4881      	ldr	r0, [pc, #516]	; (8002530 <main+0x238>)
 800232c:	f7ff fd5a 	bl	8001de4 <LCD_Initialize>


  //buffor for LCD_5510 startup screen

     for (uint16_t i = 0; i< LCD_X*LCD_Y/8 ; i++){
 8002330:	2300      	movs	r3, #0
 8002332:	83fb      	strh	r3, [r7, #30]
 8002334:	e008      	b.n	8002348 <main+0x50>
   	  buffer[i] = logo[i];
 8002336:	8bfa      	ldrh	r2, [r7, #30]
 8002338:	8bfb      	ldrh	r3, [r7, #30]
 800233a:	497e      	ldr	r1, [pc, #504]	; (8002534 <main+0x23c>)
 800233c:	5c89      	ldrb	r1, [r1, r2]
 800233e:	4a7a      	ldr	r2, [pc, #488]	; (8002528 <main+0x230>)
 8002340:	54d1      	strb	r1, [r2, r3]
     for (uint16_t i = 0; i< LCD_X*LCD_Y/8 ; i++){
 8002342:	8bfb      	ldrh	r3, [r7, #30]
 8002344:	3301      	adds	r3, #1
 8002346:	83fb      	strh	r3, [r7, #30]
 8002348:	8bfb      	ldrh	r3, [r7, #30]
 800234a:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 800234e:	d3f2      	bcc.n	8002336 <main+0x3e>
     }

     lcd_draw_text(0, 60, "v0.9", buffer);
 8002350:	4b75      	ldr	r3, [pc, #468]	; (8002528 <main+0x230>)
 8002352:	4a79      	ldr	r2, [pc, #484]	; (8002538 <main+0x240>)
 8002354:	213c      	movs	r1, #60	; 0x3c
 8002356:	2000      	movs	r0, #0
 8002358:	f7ff fe1c 	bl	8001f94 <lcd_draw_text>


  //push to display form buffer

     LCD_Data(&hspi1, buffer);
 800235c:	4972      	ldr	r1, [pc, #456]	; (8002528 <main+0x230>)
 800235e:	4874      	ldr	r0, [pc, #464]	; (8002530 <main+0x238>)
 8002360:	f7ff fd9a 	bl	8001e98 <LCD_Data>

     HAL_Delay(1000);
 8002364:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002368:	f000 fdba 	bl	8002ee0 <HAL_Delay>

     uint8_t r = 20; //high of submarine visualization
 800236c:	2314      	movs	r3, #20
 800236e:	743b      	strb	r3, [r7, #16]


   //some wierd shit, badapple
     for (uint16_t i = 0; i< LCD_X*LCD_Y/8 ; i++){
 8002370:	2300      	movs	r3, #0
 8002372:	83bb      	strh	r3, [r7, #28]
 8002374:	e008      	b.n	8002388 <main+0x90>
   	  buffer[i] = template[i];
 8002376:	8bba      	ldrh	r2, [r7, #28]
 8002378:	8bbb      	ldrh	r3, [r7, #28]
 800237a:	4970      	ldr	r1, [pc, #448]	; (800253c <main+0x244>)
 800237c:	5c89      	ldrb	r1, [r1, r2]
 800237e:	4a6a      	ldr	r2, [pc, #424]	; (8002528 <main+0x230>)
 8002380:	54d1      	strb	r1, [r2, r3]
     for (uint16_t i = 0; i< LCD_X*LCD_Y/8 ; i++){
 8002382:	8bbb      	ldrh	r3, [r7, #28]
 8002384:	3301      	adds	r3, #1
 8002386:	83bb      	strh	r3, [r7, #28]
 8002388:	8bbb      	ldrh	r3, [r7, #28]
 800238a:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 800238e:	d3f2      	bcc.n	8002376 <main+0x7e>
     }



  //BAR02 init
  int a = 0;
 8002390:	2300      	movs	r3, #0
 8002392:	61bb      	str	r3, [r7, #24]
  MS5837_init(&hi2c1);
 8002394:	486a      	ldr	r0, [pc, #424]	; (8002540 <main+0x248>)
 8002396:	f7fe fe45 	bl	8001024 <MS5837_init>


  if(HAL_I2C_Init(&hi2c1) == HAL_OK) {
 800239a:	4869      	ldr	r0, [pc, #420]	; (8002540 <main+0x248>)
 800239c:	f001 f938 	bl	8003610 <HAL_I2C_Init>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d102      	bne.n	80023ac <main+0xb4>
  	  printf("\n\r HAL_OK INIT\n\r\n\r");
 80023a6:	4867      	ldr	r0, [pc, #412]	; (8002544 <main+0x24c>)
 80023a8:	f004 fd88 	bl	8006ebc <iprintf>
    }

  while (!MS5837_init) {
 80023ac:	bf00      	nop
  	      }



  //getting one character in the interrupt mode
  HAL_UART_Receive_IT(&huart1, &sign, 1);
 80023ae:	2201      	movs	r2, #1
 80023b0:	4965      	ldr	r1, [pc, #404]	; (8002548 <main+0x250>)
 80023b2:	4866      	ldr	r0, [pc, #408]	; (800254c <main+0x254>)
 80023b4:	f003 fc97 	bl	8005ce6 <HAL_UART_Receive_IT>

  disp.addr = (0x27 << 1);
 80023b8:	4b65      	ldr	r3, [pc, #404]	; (8002550 <main+0x258>)
 80023ba:	224e      	movs	r2, #78	; 0x4e
 80023bc:	701a      	strb	r2, [r3, #0]
  disp.bl = true;
 80023be:	4b64      	ldr	r3, [pc, #400]	; (8002550 <main+0x258>)
 80023c0:	2201      	movs	r2, #1
 80023c2:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
  lcd_init(&disp);
 80023c6:	4862      	ldr	r0, [pc, #392]	; (8002550 <main+0x258>)
 80023c8:	f7ff fe2c 	bl	8002024 <lcd_init>
  sprintf((char*)disp.f_line, "First line of text");
 80023cc:	4961      	ldr	r1, [pc, #388]	; (8002554 <main+0x25c>)
 80023ce:	4862      	ldr	r0, [pc, #392]	; (8002558 <main+0x260>)
 80023d0:	f004 fd8c 	bl	8006eec <siprintf>
  sprintf((char*)disp.s_line, "Second line of text");
 80023d4:	4961      	ldr	r1, [pc, #388]	; (800255c <main+0x264>)
 80023d6:	4862      	ldr	r0, [pc, #392]	; (8002560 <main+0x268>)
 80023d8:	f004 fd88 	bl	8006eec <siprintf>
  sprintf((char*)disp.t_line, "Third line of text");
 80023dc:	4961      	ldr	r1, [pc, #388]	; (8002564 <main+0x26c>)
 80023de:	4862      	ldr	r0, [pc, #392]	; (8002568 <main+0x270>)
 80023e0:	f004 fd84 	bl	8006eec <siprintf>
  sprintf((char*)disp.l_line, "Last line of text");
 80023e4:	4961      	ldr	r1, [pc, #388]	; (800256c <main+0x274>)
 80023e6:	4862      	ldr	r0, [pc, #392]	; (8002570 <main+0x278>)
 80023e8:	f004 fd80 	bl	8006eec <siprintf>
  HAL_Delay(500);
 80023ec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80023f0:	f000 fd76 	bl	8002ee0 <HAL_Delay>
  	  lcd_display(&disp);
 80023f4:	4856      	ldr	r0, [pc, #344]	; (8002550 <main+0x258>)
 80023f6:	f7ff fea1 	bl	800213c <lcd_display>


  sprintf((char*)disp.f_line, "*");
 80023fa:	495e      	ldr	r1, [pc, #376]	; (8002574 <main+0x27c>)
 80023fc:	4856      	ldr	r0, [pc, #344]	; (8002558 <main+0x260>)
 80023fe:	f004 fd75 	bl	8006eec <siprintf>
  HAL_Delay(500);
 8002402:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002406:	f000 fd6b 	bl	8002ee0 <HAL_Delay>
  	  lcd_display(&disp);
 800240a:	4851      	ldr	r0, [pc, #324]	; (8002550 <main+0x258>)
 800240c:	f7ff fe96 	bl	800213c <lcd_display>

  sprintf((char*)disp.s_line, "**");
 8002410:	4959      	ldr	r1, [pc, #356]	; (8002578 <main+0x280>)
 8002412:	4853      	ldr	r0, [pc, #332]	; (8002560 <main+0x268>)
 8002414:	f004 fd6a 	bl	8006eec <siprintf>
  HAL_Delay(500);
 8002418:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800241c:	f000 fd60 	bl	8002ee0 <HAL_Delay>
  	  lcd_display(&disp);
 8002420:	484b      	ldr	r0, [pc, #300]	; (8002550 <main+0x258>)
 8002422:	f7ff fe8b 	bl	800213c <lcd_display>

  sprintf((char*)disp.t_line, "***");
 8002426:	4955      	ldr	r1, [pc, #340]	; (800257c <main+0x284>)
 8002428:	484f      	ldr	r0, [pc, #316]	; (8002568 <main+0x270>)
 800242a:	f004 fd5f 	bl	8006eec <siprintf>
  HAL_Delay(500);
 800242e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002432:	f000 fd55 	bl	8002ee0 <HAL_Delay>
  	  lcd_display(&disp);
 8002436:	4846      	ldr	r0, [pc, #280]	; (8002550 <main+0x258>)
 8002438:	f7ff fe80 	bl	800213c <lcd_display>

  sprintf((char*)disp.l_line, "****");
 800243c:	4950      	ldr	r1, [pc, #320]	; (8002580 <main+0x288>)
 800243e:	484c      	ldr	r0, [pc, #304]	; (8002570 <main+0x278>)
 8002440:	f004 fd54 	bl	8006eec <siprintf>
  HAL_Delay(500);
 8002444:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002448:	f000 fd4a 	bl	8002ee0 <HAL_Delay>
  	  lcd_display(&disp);
 800244c:	4840      	ldr	r0, [pc, #256]	; (8002550 <main+0x258>)
 800244e:	f7ff fe75 	bl	800213c <lcd_display>



	sprintf((char*)disp.f_line, " ");
 8002452:	494c      	ldr	r1, [pc, #304]	; (8002584 <main+0x28c>)
 8002454:	4840      	ldr	r0, [pc, #256]	; (8002558 <main+0x260>)
 8002456:	f004 fd49 	bl	8006eec <siprintf>
	sprintf((char*)disp.s_line, " ");
 800245a:	494a      	ldr	r1, [pc, #296]	; (8002584 <main+0x28c>)
 800245c:	4840      	ldr	r0, [pc, #256]	; (8002560 <main+0x268>)
 800245e:	f004 fd45 	bl	8006eec <siprintf>
	sprintf((char*)disp.t_line, " ");
 8002462:	4948      	ldr	r1, [pc, #288]	; (8002584 <main+0x28c>)
 8002464:	4840      	ldr	r0, [pc, #256]	; (8002568 <main+0x270>)
 8002466:	f004 fd41 	bl	8006eec <siprintf>
	sprintf((char*)disp.l_line, "     KN ROBOCIK");
 800246a:	4947      	ldr	r1, [pc, #284]	; (8002588 <main+0x290>)
 800246c:	4840      	ldr	r0, [pc, #256]	; (8002570 <main+0x278>)
 800246e:	f004 fd3d 	bl	8006eec <siprintf>
	HAL_Delay(1500);
 8002472:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8002476:	f000 fd33 	bl	8002ee0 <HAL_Delay>
		lcd_display(&disp);
 800247a:	4835      	ldr	r0, [pc, #212]	; (8002550 <main+0x258>)
 800247c:	f7ff fe5e 	bl	800213c <lcd_display>





	  if(flag[1] == 0){
 8002480:	4b42      	ldr	r3, [pc, #264]	; (800258c <main+0x294>)
 8002482:	785b      	ldrb	r3, [r3, #1]
 8002484:	2b00      	cmp	r3, #0
 8002486:	f040 80c6 	bne.w	8002616 <main+0x31e>


	  		  flag[0] = 0;
 800248a:	4b40      	ldr	r3, [pc, #256]	; (800258c <main+0x294>)
 800248c:	2200      	movs	r2, #0
 800248e:	701a      	strb	r2, [r3, #0]

	  			for(uint16_t i = 0; i < (LCD_X*LCD_Y/8); i ++){
 8002490:	2300      	movs	r3, #0
 8002492:	82fb      	strh	r3, [r7, #22]
 8002494:	e006      	b.n	80024a4 <main+0x1ac>
	  				buffer[i]= 0x00;
 8002496:	8afb      	ldrh	r3, [r7, #22]
 8002498:	4a23      	ldr	r2, [pc, #140]	; (8002528 <main+0x230>)
 800249a:	2100      	movs	r1, #0
 800249c:	54d1      	strb	r1, [r2, r3]
	  			for(uint16_t i = 0; i < (LCD_X*LCD_Y/8); i ++){
 800249e:	8afb      	ldrh	r3, [r7, #22]
 80024a0:	3301      	adds	r3, #1
 80024a2:	82fb      	strh	r3, [r7, #22]
 80024a4:	8afb      	ldrh	r3, [r7, #22]
 80024a6:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 80024aa:	d3f4      	bcc.n	8002496 <main+0x19e>
	  			}

	  			  for (uint16_t i = 0; i< LCD_X*LCD_Y/8 ; i++){
 80024ac:	2300      	movs	r3, #0
 80024ae:	82bb      	strh	r3, [r7, #20]
 80024b0:	e008      	b.n	80024c4 <main+0x1cc>
	  				  buffer[i] = template[i];
 80024b2:	8aba      	ldrh	r2, [r7, #20]
 80024b4:	8abb      	ldrh	r3, [r7, #20]
 80024b6:	4921      	ldr	r1, [pc, #132]	; (800253c <main+0x244>)
 80024b8:	5c89      	ldrb	r1, [r1, r2]
 80024ba:	4a1b      	ldr	r2, [pc, #108]	; (8002528 <main+0x230>)
 80024bc:	54d1      	strb	r1, [r2, r3]
	  			  for (uint16_t i = 0; i< LCD_X*LCD_Y/8 ; i++){
 80024be:	8abb      	ldrh	r3, [r7, #20]
 80024c0:	3301      	adds	r3, #1
 80024c2:	82bb      	strh	r3, [r7, #20]
 80024c4:	8abb      	ldrh	r3, [r7, #20]
 80024c6:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 80024ca:	d3f2      	bcc.n	80024b2 <main+0x1ba>
	  			  }

	  			for(uint8_t x = 0 ; x < LCD_X ; x++ ){
 80024cc:	2300      	movs	r3, #0
 80024ce:	74fb      	strb	r3, [r7, #19]
 80024d0:	e00e      	b.n	80024f0 <main+0x1f8>
	  			  LCD_draw_pixel(buffer,x, 0);
 80024d2:	7cfb      	ldrb	r3, [r7, #19]
 80024d4:	2200      	movs	r2, #0
 80024d6:	4619      	mov	r1, r3
 80024d8:	4813      	ldr	r0, [pc, #76]	; (8002528 <main+0x230>)
 80024da:	f7ff fd01 	bl	8001ee0 <LCD_draw_pixel>
	  			  LCD_draw_pixel(buffer,x, LCD_Y);
 80024de:	7cfb      	ldrb	r3, [r7, #19]
 80024e0:	2230      	movs	r2, #48	; 0x30
 80024e2:	4619      	mov	r1, r3
 80024e4:	4810      	ldr	r0, [pc, #64]	; (8002528 <main+0x230>)
 80024e6:	f7ff fcfb 	bl	8001ee0 <LCD_draw_pixel>
	  			for(uint8_t x = 0 ; x < LCD_X ; x++ ){
 80024ea:	7cfb      	ldrb	r3, [r7, #19]
 80024ec:	3301      	adds	r3, #1
 80024ee:	74fb      	strb	r3, [r7, #19]
 80024f0:	7cfb      	ldrb	r3, [r7, #19]
 80024f2:	2b53      	cmp	r3, #83	; 0x53
 80024f4:	d9ed      	bls.n	80024d2 <main+0x1da>
	  			}


	  			for(uint8_t y = 0 ; y < LCD_X ; y++ ){
 80024f6:	2300      	movs	r3, #0
 80024f8:	74bb      	strb	r3, [r7, #18]
 80024fa:	e00e      	b.n	800251a <main+0x222>
	  			  LCD_draw_pixel(buffer,0, y);
 80024fc:	7cbb      	ldrb	r3, [r7, #18]
 80024fe:	461a      	mov	r2, r3
 8002500:	2100      	movs	r1, #0
 8002502:	4809      	ldr	r0, [pc, #36]	; (8002528 <main+0x230>)
 8002504:	f7ff fcec 	bl	8001ee0 <LCD_draw_pixel>
	  			  LCD_draw_pixel(buffer,LCD_X, y);
 8002508:	7cbb      	ldrb	r3, [r7, #18]
 800250a:	461a      	mov	r2, r3
 800250c:	2154      	movs	r1, #84	; 0x54
 800250e:	4806      	ldr	r0, [pc, #24]	; (8002528 <main+0x230>)
 8002510:	f7ff fce6 	bl	8001ee0 <LCD_draw_pixel>
	  			for(uint8_t y = 0 ; y < LCD_X ; y++ ){
 8002514:	7cbb      	ldrb	r3, [r7, #18]
 8002516:	3301      	adds	r3, #1
 8002518:	74bb      	strb	r3, [r7, #18]
 800251a:	7cbb      	ldrb	r3, [r7, #18]
 800251c:	2b53      	cmp	r3, #83	; 0x53
 800251e:	d9ed      	bls.n	80024fc <main+0x204>
	  			}



	  			for(uint8_t i = 0; i< 54 ; i ++){
 8002520:	2300      	movs	r3, #0
 8002522:	747b      	strb	r3, [r7, #17]
 8002524:	e049      	b.n	80025ba <main+0x2c2>
 8002526:	bf00      	nop
 8002528:	2000032c 	.word	0x2000032c
 800252c:	20000bbc 	.word	0x20000bbc
 8002530:	20000b64 	.word	0x20000b64
 8002534:	0800a408 	.word	0x0800a408
 8002538:	0800a29c 	.word	0x0800a29c
 800253c:	0800a7e0 	.word	0x0800a7e0
 8002540:	200002a8 	.word	0x200002a8
 8002544:	0800a2a4 	.word	0x0800a2a4
 8002548:	200002fc 	.word	0x200002fc
 800254c:	20000c04 	.word	0x20000c04
 8002550:	20000b0c 	.word	0x20000b0c
 8002554:	0800a2b8 	.word	0x0800a2b8
 8002558:	20000b0d 	.word	0x20000b0d
 800255c:	0800a2cc 	.word	0x0800a2cc
 8002560:	20000b22 	.word	0x20000b22
 8002564:	0800a2e0 	.word	0x0800a2e0
 8002568:	20000b37 	.word	0x20000b37
 800256c:	0800a2f4 	.word	0x0800a2f4
 8002570:	20000b4c 	.word	0x20000b4c
 8002574:	0800a308 	.word	0x0800a308
 8002578:	0800a30c 	.word	0x0800a30c
 800257c:	0800a310 	.word	0x0800a310
 8002580:	0800a314 	.word	0x0800a314
 8002584:	0800a31c 	.word	0x0800a31c
 8002588:	0800a320 	.word	0x0800a320
 800258c:	20000270 	.word	0x20000270
	  				LCD_draw_pixel(buffer,dron[i][0]+ 11 , dron[i][1]+r);
 8002590:	7c7b      	ldrb	r3, [r7, #17]
 8002592:	4a52      	ldr	r2, [pc, #328]	; (80026dc <main+0x3e4>)
 8002594:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8002598:	330b      	adds	r3, #11
 800259a:	b2d9      	uxtb	r1, r3
 800259c:	7c7b      	ldrb	r3, [r7, #17]
 800259e:	4a4f      	ldr	r2, [pc, #316]	; (80026dc <main+0x3e4>)
 80025a0:	005b      	lsls	r3, r3, #1
 80025a2:	4413      	add	r3, r2
 80025a4:	785a      	ldrb	r2, [r3, #1]
 80025a6:	7c3b      	ldrb	r3, [r7, #16]
 80025a8:	4413      	add	r3, r2
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	461a      	mov	r2, r3
 80025ae:	484c      	ldr	r0, [pc, #304]	; (80026e0 <main+0x3e8>)
 80025b0:	f7ff fc96 	bl	8001ee0 <LCD_draw_pixel>
	  			for(uint8_t i = 0; i< 54 ; i ++){
 80025b4:	7c7b      	ldrb	r3, [r7, #17]
 80025b6:	3301      	adds	r3, #1
 80025b8:	747b      	strb	r3, [r7, #17]
 80025ba:	7c7b      	ldrb	r3, [r7, #17]
 80025bc:	2b35      	cmp	r3, #53	; 0x35
 80025be:	d9e7      	bls.n	8002590 <main+0x298>
	  			}

	  			  lcd_draw_text(1, 25, "Preasure:", buffer);
 80025c0:	4b47      	ldr	r3, [pc, #284]	; (80026e0 <main+0x3e8>)
 80025c2:	4a48      	ldr	r2, [pc, #288]	; (80026e4 <main+0x3ec>)
 80025c4:	2119      	movs	r1, #25
 80025c6:	2001      	movs	r0, #1
 80025c8:	f7ff fce4 	bl	8001f94 <lcd_draw_text>
	  			  char tmp[16];
	  			  sprintf(tmp, "%d hPa", preasure);
 80025cc:	4b46      	ldr	r3, [pc, #280]	; (80026e8 <main+0x3f0>)
 80025ce:	881b      	ldrh	r3, [r3, #0]
 80025d0:	461a      	mov	r2, r3
 80025d2:	463b      	mov	r3, r7
 80025d4:	4945      	ldr	r1, [pc, #276]	; (80026ec <main+0x3f4>)
 80025d6:	4618      	mov	r0, r3
 80025d8:	f004 fc88 	bl	8006eec <siprintf>
	  			  lcd_draw_text(2, 25,tmp, buffer);
 80025dc:	463a      	mov	r2, r7
 80025de:	4b40      	ldr	r3, [pc, #256]	; (80026e0 <main+0x3e8>)
 80025e0:	2119      	movs	r1, #25
 80025e2:	2002      	movs	r0, #2
 80025e4:	f7ff fcd6 	bl	8001f94 <lcd_draw_text>
	  			  lcd_draw_text(3, 25, "Depth:", buffer);
 80025e8:	4b3d      	ldr	r3, [pc, #244]	; (80026e0 <main+0x3e8>)
 80025ea:	4a41      	ldr	r2, [pc, #260]	; (80026f0 <main+0x3f8>)
 80025ec:	2119      	movs	r1, #25
 80025ee:	2003      	movs	r0, #3
 80025f0:	f7ff fcd0 	bl	8001f94 <lcd_draw_text>
	  			  sprintf(tmp, "%d m", depth);
 80025f4:	4b3f      	ldr	r3, [pc, #252]	; (80026f4 <main+0x3fc>)
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	461a      	mov	r2, r3
 80025fa:	463b      	mov	r3, r7
 80025fc:	493e      	ldr	r1, [pc, #248]	; (80026f8 <main+0x400>)
 80025fe:	4618      	mov	r0, r3
 8002600:	f004 fc74 	bl	8006eec <siprintf>
	  			  lcd_draw_text(4, 25,tmp, buffer);
 8002604:	463a      	mov	r2, r7
 8002606:	4b36      	ldr	r3, [pc, #216]	; (80026e0 <main+0x3e8>)
 8002608:	2119      	movs	r1, #25
 800260a:	2004      	movs	r0, #4
 800260c:	f7ff fcc2 	bl	8001f94 <lcd_draw_text>


	  	  	  flag[1]=1;
 8002610:	4b3a      	ldr	r3, [pc, #232]	; (80026fc <main+0x404>)
 8002612:	2201      	movs	r2, #1
 8002614:	705a      	strb	r2, [r3, #1]

	  	  }



	  	  if(flag[0] == 1 && flag[1]== 1) {
 8002616:	4b39      	ldr	r3, [pc, #228]	; (80026fc <main+0x404>)
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	2b01      	cmp	r3, #1
 800261c:	d10f      	bne.n	800263e <main+0x346>
 800261e:	4b37      	ldr	r3, [pc, #220]	; (80026fc <main+0x404>)
 8002620:	785b      	ldrb	r3, [r3, #1]
 8002622:	2b01      	cmp	r3, #1
 8002624:	d10b      	bne.n	800263e <main+0x346>
	  		  LCD_Data(&hspi1, buffer);
 8002626:	492e      	ldr	r1, [pc, #184]	; (80026e0 <main+0x3e8>)
 8002628:	4835      	ldr	r0, [pc, #212]	; (8002700 <main+0x408>)
 800262a:	f7ff fc35 	bl	8001e98 <LCD_Data>
	  		    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800262e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002632:	4834      	ldr	r0, [pc, #208]	; (8002704 <main+0x40c>)
 8002634:	f000 ffd2 	bl	80035dc <HAL_GPIO_TogglePin>
	  		  flag[1] = 0;
 8002638:	4b30      	ldr	r3, [pc, #192]	; (80026fc <main+0x404>)
 800263a:	2200      	movs	r2, #0
 800263c:	705a      	strb	r2, [r3, #1]
	  	  }




	  a++;
 800263e:	69bb      	ldr	r3, [r7, #24]
 8002640:	3301      	adds	r3, #1
 8002642:	61bb      	str	r3, [r7, #24]
	 	  MS5837_read();
 8002644:	f7fe fd54 	bl	80010f0 <MS5837_read>


	 	  depth = MS5837_depth();
 8002648:	f7ff f9fa 	bl	8001a40 <MS5837_depth>
 800264c:	4603      	mov	r3, r0
 800264e:	4618      	mov	r0, r3
 8002650:	f7fe fcc8 	bl	8000fe4 <__aeabi_f2uiz>
 8002654:	4603      	mov	r3, r0
 8002656:	b2da      	uxtb	r2, r3
 8002658:	4b26      	ldr	r3, [pc, #152]	; (80026f4 <main+0x3fc>)
 800265a:	701a      	strb	r2, [r3, #0]
	 	  preasure = MS5837_pressure(1);
 800265c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002660:	f7ff f9a4 	bl	80019ac <MS5837_pressure>
 8002664:	4603      	mov	r3, r0
 8002666:	4618      	mov	r0, r3
 8002668:	f7fe fcbc 	bl	8000fe4 <__aeabi_f2uiz>
 800266c:	4603      	mov	r3, r0
 800266e:	b29a      	uxth	r2, r3
 8002670:	4b1d      	ldr	r3, [pc, #116]	; (80026e8 <main+0x3f0>)
 8002672:	801a      	strh	r2, [r3, #0]


	  	  printf("Nr: %i \n\r",a);
 8002674:	69b9      	ldr	r1, [r7, #24]
 8002676:	4824      	ldr	r0, [pc, #144]	; (8002708 <main+0x410>)
 8002678:	f004 fc20 	bl	8006ebc <iprintf>

	  	   printf("Pressure: %i mbar \n\r",preasure);
 800267c:	4b1a      	ldr	r3, [pc, #104]	; (80026e8 <main+0x3f0>)
 800267e:	881b      	ldrh	r3, [r3, #0]
 8002680:	4619      	mov	r1, r3
 8002682:	4822      	ldr	r0, [pc, #136]	; (800270c <main+0x414>)
 8002684:	f004 fc1a 	bl	8006ebc <iprintf>

	  	   printf("Temperature: %4.3f deg C \n\r",MS5837_temperature());
 8002688:	f7ff f9c6 	bl	8001a18 <MS5837_temperature>
 800268c:	4603      	mov	r3, r0
 800268e:	4618      	mov	r0, r3
 8002690:	f7fd feca 	bl	8000428 <__aeabi_f2d>
 8002694:	4602      	mov	r2, r0
 8002696:	460b      	mov	r3, r1
 8002698:	481d      	ldr	r0, [pc, #116]	; (8002710 <main+0x418>)
 800269a:	f004 fc0f 	bl	8006ebc <iprintf>

	  	   printf("Depth: %i m \n\r",depth);
 800269e:	4b15      	ldr	r3, [pc, #84]	; (80026f4 <main+0x3fc>)
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	4619      	mov	r1, r3
 80026a4:	481b      	ldr	r0, [pc, #108]	; (8002714 <main+0x41c>)
 80026a6:	f004 fc09 	bl	8006ebc <iprintf>

	  	   printf("Altitude: %4.3f above mean sea level \n\r\n\r",MS5837_altitude());
 80026aa:	f7ff fa01 	bl	8001ab0 <MS5837_altitude>
 80026ae:	4603      	mov	r3, r0
 80026b0:	4618      	mov	r0, r3
 80026b2:	f7fd feb9 	bl	8000428 <__aeabi_f2d>
 80026b6:	4602      	mov	r2, r0
 80026b8:	460b      	mov	r3, r1
 80026ba:	4817      	ldr	r0, [pc, #92]	; (8002718 <main+0x420>)
 80026bc:	f004 fbfe 	bl	8006ebc <iprintf>


	  	 	  HAL_Delay(1000);
 80026c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80026c4:	f000 fc0c 	bl	8002ee0 <HAL_Delay>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

// LED blinking
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13); //LD1_Pin
 80026c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80026cc:	480d      	ldr	r0, [pc, #52]	; (8002704 <main+0x40c>)
 80026ce:	f000 ff85 	bl	80035dc <HAL_GPIO_TogglePin>

	  HAL_Delay(500);
 80026d2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80026d6:	f000 fc03 	bl	8002ee0 <HAL_Delay>
	  if(flag[1] == 0){
 80026da:	e6d1      	b.n	8002480 <main+0x188>
 80026dc:	20000004 	.word	0x20000004
 80026e0:	2000032c 	.word	0x2000032c
 80026e4:	0800a330 	.word	0x0800a330
 80026e8:	20000072 	.word	0x20000072
 80026ec:	0800a33c 	.word	0x0800a33c
 80026f0:	0800a344 	.word	0x0800a344
 80026f4:	20000070 	.word	0x20000070
 80026f8:	0800a34c 	.word	0x0800a34c
 80026fc:	20000270 	.word	0x20000270
 8002700:	20000b64 	.word	0x20000b64
 8002704:	40011000 	.word	0x40011000
 8002708:	0800a354 	.word	0x0800a354
 800270c:	0800a360 	.word	0x0800a360
 8002710:	0800a378 	.word	0x0800a378
 8002714:	0800a394 	.word	0x0800a394
 8002718:	0800a3a4 	.word	0x0800a3a4

0800271c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b090      	sub	sp, #64	; 0x40
 8002720:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002722:	f107 0318 	add.w	r3, r7, #24
 8002726:	2228      	movs	r2, #40	; 0x28
 8002728:	2100      	movs	r1, #0
 800272a:	4618      	mov	r0, r3
 800272c:	f003 ff5e 	bl	80065ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002730:	1d3b      	adds	r3, r7, #4
 8002732:	2200      	movs	r2, #0
 8002734:	601a      	str	r2, [r3, #0]
 8002736:	605a      	str	r2, [r3, #4]
 8002738:	609a      	str	r2, [r3, #8]
 800273a:	60da      	str	r2, [r3, #12]
 800273c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800273e:	2301      	movs	r3, #1
 8002740:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002742:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002746:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002748:	2300      	movs	r3, #0
 800274a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800274c:	2301      	movs	r3, #1
 800274e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002750:	2302      	movs	r3, #2
 8002752:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002754:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002758:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 800275a:	2300      	movs	r3, #0
 800275c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800275e:	f107 0318 	add.w	r3, r7, #24
 8002762:	4618      	mov	r0, r3
 8002764:	f001 ff22 	bl	80045ac <HAL_RCC_OscConfig>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d001      	beq.n	8002772 <SystemClock_Config+0x56>
  {
    Error_Handler();
 800276e:	f000 f895 	bl	800289c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002772:	230f      	movs	r3, #15
 8002774:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002776:	2302      	movs	r3, #2
 8002778:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800277a:	2380      	movs	r3, #128	; 0x80
 800277c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800277e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002782:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002784:	2300      	movs	r3, #0
 8002786:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002788:	1d3b      	adds	r3, r7, #4
 800278a:	2100      	movs	r1, #0
 800278c:	4618      	mov	r0, r3
 800278e:	f002 f98d 	bl	8004aac <HAL_RCC_ClockConfig>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d001      	beq.n	800279c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8002798:	f000 f880 	bl	800289c <Error_Handler>
  }
}
 800279c:	bf00      	nop
 800279e:	3740      	adds	r7, #64	; 0x40
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	af00      	add	r7, sp, #0
  /* TIM1_UP_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80027a8:	2200      	movs	r2, #0
 80027aa:	2100      	movs	r1, #0
 80027ac:	2019      	movs	r0, #25
 80027ae:	f000 fc92 	bl	80030d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80027b2:	2019      	movs	r0, #25
 80027b4:	f000 fcab 	bl	800310e <HAL_NVIC_EnableIRQ>
}
 80027b8:	bf00      	nop
 80027ba:	bd80      	pop	{r7, pc}

080027bc <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN 4 */


// don't do

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM1){
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a05      	ldr	r2, [pc, #20]	; (80027e0 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d102      	bne.n	80027d4 <HAL_TIM_PeriodElapsedCallback+0x18>

		flag[0] = 1;
 80027ce:	4b05      	ldr	r3, [pc, #20]	; (80027e4 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80027d0:	2201      	movs	r2, #1
 80027d2:	701a      	strb	r2, [r3, #0]
	}

}
 80027d4:	bf00      	nop
 80027d6:	370c      	adds	r7, #12
 80027d8:	46bd      	mov	sp, r7
 80027da:	bc80      	pop	{r7}
 80027dc:	4770      	bx	lr
 80027de:	bf00      	nop
 80027e0:	40012c00 	.word	0x40012c00
 80027e4:	20000270 	.word	0x20000270

080027e8 <HAL_UART_RxCpltCallback>:


// UART communications fun and play

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
	{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) //check for UART1
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a20      	ldr	r2, [pc, #128]	; (8002878 <HAL_UART_RxCpltCallback+0x90>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d139      	bne.n	800286e <HAL_UART_RxCpltCallback+0x86>
		{
		if(sign == 'D')
 80027fa:	4b20      	ldr	r3, [pc, #128]	; (800287c <HAL_UART_RxCpltCallback+0x94>)
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	2b44      	cmp	r3, #68	; 0x44
 8002800:	d10e      	bne.n	8002820 <HAL_UART_RxCpltCallback+0x38>
			{
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8002802:	2201      	movs	r2, #1
 8002804:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002808:	481d      	ldr	r0, [pc, #116]	; (8002880 <HAL_UART_RxCpltCallback+0x98>)
 800280a:	f000 fecf 	bl	80035ac <HAL_GPIO_WritePin>
				msg_length = sprintf(message, "LED ON\n\r");
 800280e:	491d      	ldr	r1, [pc, #116]	; (8002884 <HAL_UART_RxCpltCallback+0x9c>)
 8002810:	481d      	ldr	r0, [pc, #116]	; (8002888 <HAL_UART_RxCpltCallback+0xa0>)
 8002812:	f004 fb6b 	bl	8006eec <siprintf>
 8002816:	4603      	mov	r3, r0
 8002818:	b29a      	uxth	r2, r3
 800281a:	4b1c      	ldr	r3, [pc, #112]	; (800288c <HAL_UART_RxCpltCallback+0xa4>)
 800281c:	801a      	strh	r2, [r3, #0]
 800281e:	e01a      	b.n	8002856 <HAL_UART_RxCpltCallback+0x6e>
			}
		else if (sign == 'K')
 8002820:	4b16      	ldr	r3, [pc, #88]	; (800287c <HAL_UART_RxCpltCallback+0x94>)
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	2b4b      	cmp	r3, #75	; 0x4b
 8002826:	d10e      	bne.n	8002846 <HAL_UART_RxCpltCallback+0x5e>
			{
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002828:	2200      	movs	r2, #0
 800282a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800282e:	4814      	ldr	r0, [pc, #80]	; (8002880 <HAL_UART_RxCpltCallback+0x98>)
 8002830:	f000 febc 	bl	80035ac <HAL_GPIO_WritePin>
				msg_length = sprintf(message, "LED OFF\n\r");
 8002834:	4916      	ldr	r1, [pc, #88]	; (8002890 <HAL_UART_RxCpltCallback+0xa8>)
 8002836:	4814      	ldr	r0, [pc, #80]	; (8002888 <HAL_UART_RxCpltCallback+0xa0>)
 8002838:	f004 fb58 	bl	8006eec <siprintf>
 800283c:	4603      	mov	r3, r0
 800283e:	b29a      	uxth	r2, r3
 8002840:	4b12      	ldr	r3, [pc, #72]	; (800288c <HAL_UART_RxCpltCallback+0xa4>)
 8002842:	801a      	strh	r2, [r3, #0]
 8002844:	e007      	b.n	8002856 <HAL_UART_RxCpltCallback+0x6e>
			}
		else
			{
				msg_length = sprintf(message, "BAD SIGN\n\r");
 8002846:	4913      	ldr	r1, [pc, #76]	; (8002894 <HAL_UART_RxCpltCallback+0xac>)
 8002848:	480f      	ldr	r0, [pc, #60]	; (8002888 <HAL_UART_RxCpltCallback+0xa0>)
 800284a:	f004 fb4f 	bl	8006eec <siprintf>
 800284e:	4603      	mov	r3, r0
 8002850:	b29a      	uxth	r2, r3
 8002852:	4b0e      	ldr	r3, [pc, #56]	; (800288c <HAL_UART_RxCpltCallback+0xa4>)
 8002854:	801a      	strh	r2, [r3, #0]
			}
		HAL_UART_Transmit_IT(&huart1, message, msg_length); //wait for next sign
 8002856:	4b0d      	ldr	r3, [pc, #52]	; (800288c <HAL_UART_RxCpltCallback+0xa4>)
 8002858:	881b      	ldrh	r3, [r3, #0]
 800285a:	461a      	mov	r2, r3
 800285c:	490a      	ldr	r1, [pc, #40]	; (8002888 <HAL_UART_RxCpltCallback+0xa0>)
 800285e:	480e      	ldr	r0, [pc, #56]	; (8002898 <HAL_UART_RxCpltCallback+0xb0>)
 8002860:	f003 f9fd 	bl	8005c5e <HAL_UART_Transmit_IT>
		HAL_UART_Receive_IT(&huart1, &sign, 1); //wait for next sign
 8002864:	2201      	movs	r2, #1
 8002866:	4905      	ldr	r1, [pc, #20]	; (800287c <HAL_UART_RxCpltCallback+0x94>)
 8002868:	480b      	ldr	r0, [pc, #44]	; (8002898 <HAL_UART_RxCpltCallback+0xb0>)
 800286a:	f003 fa3c 	bl	8005ce6 <HAL_UART_Receive_IT>
		}
	}
 800286e:	bf00      	nop
 8002870:	3708      	adds	r7, #8
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	40013800 	.word	0x40013800
 800287c:	200002fc 	.word	0x200002fc
 8002880:	40011000 	.word	0x40011000
 8002884:	0800a3d0 	.word	0x0800a3d0
 8002888:	20000314 	.word	0x20000314
 800288c:	20000328 	.word	0x20000328
 8002890:	0800a3dc 	.word	0x0800a3dc
 8002894:	0800a3e8 	.word	0x0800a3e8
 8002898:	20000c04 	.word	0x20000c04

0800289c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80028a0:	b672      	cpsid	i
}
 80028a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80028a4:	e7fe      	b.n	80028a4 <Error_Handler+0x8>
	...

080028a8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80028ac:	4b17      	ldr	r3, [pc, #92]	; (800290c <MX_SPI1_Init+0x64>)
 80028ae:	4a18      	ldr	r2, [pc, #96]	; (8002910 <MX_SPI1_Init+0x68>)
 80028b0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80028b2:	4b16      	ldr	r3, [pc, #88]	; (800290c <MX_SPI1_Init+0x64>)
 80028b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80028b8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80028ba:	4b14      	ldr	r3, [pc, #80]	; (800290c <MX_SPI1_Init+0x64>)
 80028bc:	2200      	movs	r2, #0
 80028be:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80028c0:	4b12      	ldr	r3, [pc, #72]	; (800290c <MX_SPI1_Init+0x64>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80028c6:	4b11      	ldr	r3, [pc, #68]	; (800290c <MX_SPI1_Init+0x64>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80028cc:	4b0f      	ldr	r3, [pc, #60]	; (800290c <MX_SPI1_Init+0x64>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80028d2:	4b0e      	ldr	r3, [pc, #56]	; (800290c <MX_SPI1_Init+0x64>)
 80028d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028d8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80028da:	4b0c      	ldr	r3, [pc, #48]	; (800290c <MX_SPI1_Init+0x64>)
 80028dc:	2210      	movs	r2, #16
 80028de:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80028e0:	4b0a      	ldr	r3, [pc, #40]	; (800290c <MX_SPI1_Init+0x64>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80028e6:	4b09      	ldr	r3, [pc, #36]	; (800290c <MX_SPI1_Init+0x64>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028ec:	4b07      	ldr	r3, [pc, #28]	; (800290c <MX_SPI1_Init+0x64>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80028f2:	4b06      	ldr	r3, [pc, #24]	; (800290c <MX_SPI1_Init+0x64>)
 80028f4:	220a      	movs	r2, #10
 80028f6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80028f8:	4804      	ldr	r0, [pc, #16]	; (800290c <MX_SPI1_Init+0x64>)
 80028fa:	f002 fa71 	bl	8004de0 <HAL_SPI_Init>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d001      	beq.n	8002908 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002904:	f7ff ffca 	bl	800289c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002908:	bf00      	nop
 800290a:	bd80      	pop	{r7, pc}
 800290c:	20000b64 	.word	0x20000b64
 8002910:	40013000 	.word	0x40013000

08002914 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b088      	sub	sp, #32
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800291c:	f107 0310 	add.w	r3, r7, #16
 8002920:	2200      	movs	r2, #0
 8002922:	601a      	str	r2, [r3, #0]
 8002924:	605a      	str	r2, [r3, #4]
 8002926:	609a      	str	r2, [r3, #8]
 8002928:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a15      	ldr	r2, [pc, #84]	; (8002984 <HAL_SPI_MspInit+0x70>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d123      	bne.n	800297c <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002934:	4b14      	ldr	r3, [pc, #80]	; (8002988 <HAL_SPI_MspInit+0x74>)
 8002936:	699b      	ldr	r3, [r3, #24]
 8002938:	4a13      	ldr	r2, [pc, #76]	; (8002988 <HAL_SPI_MspInit+0x74>)
 800293a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800293e:	6193      	str	r3, [r2, #24]
 8002940:	4b11      	ldr	r3, [pc, #68]	; (8002988 <HAL_SPI_MspInit+0x74>)
 8002942:	699b      	ldr	r3, [r3, #24]
 8002944:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002948:	60fb      	str	r3, [r7, #12]
 800294a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800294c:	4b0e      	ldr	r3, [pc, #56]	; (8002988 <HAL_SPI_MspInit+0x74>)
 800294e:	699b      	ldr	r3, [r3, #24]
 8002950:	4a0d      	ldr	r2, [pc, #52]	; (8002988 <HAL_SPI_MspInit+0x74>)
 8002952:	f043 0304 	orr.w	r3, r3, #4
 8002956:	6193      	str	r3, [r2, #24]
 8002958:	4b0b      	ldr	r3, [pc, #44]	; (8002988 <HAL_SPI_MspInit+0x74>)
 800295a:	699b      	ldr	r3, [r3, #24]
 800295c:	f003 0304 	and.w	r3, r3, #4
 8002960:	60bb      	str	r3, [r7, #8]
 8002962:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002964:	23a0      	movs	r3, #160	; 0xa0
 8002966:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002968:	2302      	movs	r3, #2
 800296a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800296c:	2303      	movs	r3, #3
 800296e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002970:	f107 0310 	add.w	r3, r7, #16
 8002974:	4619      	mov	r1, r3
 8002976:	4805      	ldr	r0, [pc, #20]	; (800298c <HAL_SPI_MspInit+0x78>)
 8002978:	f000 fc94 	bl	80032a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800297c:	bf00      	nop
 800297e:	3720      	adds	r7, #32
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}
 8002984:	40013000 	.word	0x40013000
 8002988:	40021000 	.word	0x40021000
 800298c:	40010800 	.word	0x40010800

08002990 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002990:	b480      	push	{r7}
 8002992:	b085      	sub	sp, #20
 8002994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002996:	4b15      	ldr	r3, [pc, #84]	; (80029ec <HAL_MspInit+0x5c>)
 8002998:	699b      	ldr	r3, [r3, #24]
 800299a:	4a14      	ldr	r2, [pc, #80]	; (80029ec <HAL_MspInit+0x5c>)
 800299c:	f043 0301 	orr.w	r3, r3, #1
 80029a0:	6193      	str	r3, [r2, #24]
 80029a2:	4b12      	ldr	r3, [pc, #72]	; (80029ec <HAL_MspInit+0x5c>)
 80029a4:	699b      	ldr	r3, [r3, #24]
 80029a6:	f003 0301 	and.w	r3, r3, #1
 80029aa:	60bb      	str	r3, [r7, #8]
 80029ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029ae:	4b0f      	ldr	r3, [pc, #60]	; (80029ec <HAL_MspInit+0x5c>)
 80029b0:	69db      	ldr	r3, [r3, #28]
 80029b2:	4a0e      	ldr	r2, [pc, #56]	; (80029ec <HAL_MspInit+0x5c>)
 80029b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029b8:	61d3      	str	r3, [r2, #28]
 80029ba:	4b0c      	ldr	r3, [pc, #48]	; (80029ec <HAL_MspInit+0x5c>)
 80029bc:	69db      	ldr	r3, [r3, #28]
 80029be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029c2:	607b      	str	r3, [r7, #4]
 80029c4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80029c6:	4b0a      	ldr	r3, [pc, #40]	; (80029f0 <HAL_MspInit+0x60>)
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	60fb      	str	r3, [r7, #12]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80029d2:	60fb      	str	r3, [r7, #12]
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80029da:	60fb      	str	r3, [r7, #12]
 80029dc:	4a04      	ldr	r2, [pc, #16]	; (80029f0 <HAL_MspInit+0x60>)
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029e2:	bf00      	nop
 80029e4:	3714      	adds	r7, #20
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bc80      	pop	{r7}
 80029ea:	4770      	bx	lr
 80029ec:	40021000 	.word	0x40021000
 80029f0:	40010000 	.word	0x40010000

080029f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029f4:	b480      	push	{r7}
 80029f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80029f8:	e7fe      	b.n	80029f8 <NMI_Handler+0x4>

080029fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029fa:	b480      	push	{r7}
 80029fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029fe:	e7fe      	b.n	80029fe <HardFault_Handler+0x4>

08002a00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a00:	b480      	push	{r7}
 8002a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a04:	e7fe      	b.n	8002a04 <MemManage_Handler+0x4>

08002a06 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a06:	b480      	push	{r7}
 8002a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a0a:	e7fe      	b.n	8002a0a <BusFault_Handler+0x4>

08002a0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a10:	e7fe      	b.n	8002a10 <UsageFault_Handler+0x4>

08002a12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a12:	b480      	push	{r7}
 8002a14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a16:	bf00      	nop
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bc80      	pop	{r7}
 8002a1c:	4770      	bx	lr

08002a1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a1e:	b480      	push	{r7}
 8002a20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a22:	bf00      	nop
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bc80      	pop	{r7}
 8002a28:	4770      	bx	lr

08002a2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a2a:	b480      	push	{r7}
 8002a2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a2e:	bf00      	nop
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bc80      	pop	{r7}
 8002a34:	4770      	bx	lr

08002a36 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a36:	b580      	push	{r7, lr}
 8002a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a3a:	f000 fa35 	bl	8002ea8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a3e:	bf00      	nop
 8002a40:	bd80      	pop	{r7, pc}
	...

08002a44 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002a48:	4802      	ldr	r0, [pc, #8]	; (8002a54 <TIM1_UP_IRQHandler+0x10>)
 8002a4a:	f002 fcd1 	bl	80053f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002a4e:	bf00      	nop
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	20000bbc 	.word	0x20000bbc

08002a58 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002a5c:	4802      	ldr	r0, [pc, #8]	; (8002a68 <USART1_IRQHandler+0x10>)
 8002a5e:	f003 f973 	bl	8005d48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002a62:	bf00      	nop
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	20000c04 	.word	0x20000c04

08002a6c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	af00      	add	r7, sp, #0
	return 1;
 8002a70:	2301      	movs	r3, #1
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bc80      	pop	{r7}
 8002a78:	4770      	bx	lr

08002a7a <_kill>:

int _kill(int pid, int sig)
{
 8002a7a:	b580      	push	{r7, lr}
 8002a7c:	b082      	sub	sp, #8
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	6078      	str	r0, [r7, #4]
 8002a82:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002a84:	f003 fd88 	bl	8006598 <__errno>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2216      	movs	r2, #22
 8002a8c:	601a      	str	r2, [r3, #0]
	return -1;
 8002a8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3708      	adds	r7, #8
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}

08002a9a <_exit>:

void _exit (int status)
{
 8002a9a:	b580      	push	{r7, lr}
 8002a9c:	b082      	sub	sp, #8
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002aa2:	f04f 31ff 	mov.w	r1, #4294967295
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f7ff ffe7 	bl	8002a7a <_kill>
	while (1) {}		/* Make sure we hang here */
 8002aac:	e7fe      	b.n	8002aac <_exit+0x12>

08002aae <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002aae:	b580      	push	{r7, lr}
 8002ab0:	b086      	sub	sp, #24
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	60f8      	str	r0, [r7, #12]
 8002ab6:	60b9      	str	r1, [r7, #8]
 8002ab8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002aba:	2300      	movs	r3, #0
 8002abc:	617b      	str	r3, [r7, #20]
 8002abe:	e00a      	b.n	8002ad6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002ac0:	f3af 8000 	nop.w
 8002ac4:	4601      	mov	r1, r0
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	1c5a      	adds	r2, r3, #1
 8002aca:	60ba      	str	r2, [r7, #8]
 8002acc:	b2ca      	uxtb	r2, r1
 8002ace:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	3301      	adds	r3, #1
 8002ad4:	617b      	str	r3, [r7, #20]
 8002ad6:	697a      	ldr	r2, [r7, #20]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	429a      	cmp	r2, r3
 8002adc:	dbf0      	blt.n	8002ac0 <_read+0x12>
	}

return len;
 8002ade:	687b      	ldr	r3, [r7, #4]
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3718      	adds	r7, #24
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}

08002ae8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b086      	sub	sp, #24
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	60f8      	str	r0, [r7, #12]
 8002af0:	60b9      	str	r1, [r7, #8]
 8002af2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002af4:	2300      	movs	r3, #0
 8002af6:	617b      	str	r3, [r7, #20]
 8002af8:	e009      	b.n	8002b0e <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	1c5a      	adds	r2, r3, #1
 8002afe:	60ba      	str	r2, [r7, #8]
 8002b00:	781b      	ldrb	r3, [r3, #0]
 8002b02:	4618      	mov	r0, r3
 8002b04:	f7ff fbe6 	bl	80022d4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	617b      	str	r3, [r7, #20]
 8002b0e:	697a      	ldr	r2, [r7, #20]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	429a      	cmp	r2, r3
 8002b14:	dbf1      	blt.n	8002afa <_write+0x12>
	}
	return len;
 8002b16:	687b      	ldr	r3, [r7, #4]
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3718      	adds	r7, #24
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}

08002b20 <_close>:

int _close(int file)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b083      	sub	sp, #12
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
	return -1;
 8002b28:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	370c      	adds	r7, #12
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bc80      	pop	{r7}
 8002b34:	4770      	bx	lr

08002b36 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b36:	b480      	push	{r7}
 8002b38:	b083      	sub	sp, #12
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
 8002b3e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b46:	605a      	str	r2, [r3, #4]
	return 0;
 8002b48:	2300      	movs	r3, #0
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	370c      	adds	r7, #12
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bc80      	pop	{r7}
 8002b52:	4770      	bx	lr

08002b54 <_isatty>:

int _isatty(int file)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
	return 1;
 8002b5c:	2301      	movs	r3, #1
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	370c      	adds	r7, #12
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bc80      	pop	{r7}
 8002b66:	4770      	bx	lr

08002b68 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b085      	sub	sp, #20
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	60b9      	str	r1, [r7, #8]
 8002b72:	607a      	str	r2, [r7, #4]
	return 0;
 8002b74:	2300      	movs	r3, #0
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3714      	adds	r7, #20
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bc80      	pop	{r7}
 8002b7e:	4770      	bx	lr

08002b80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b086      	sub	sp, #24
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b88:	4a14      	ldr	r2, [pc, #80]	; (8002bdc <_sbrk+0x5c>)
 8002b8a:	4b15      	ldr	r3, [pc, #84]	; (8002be0 <_sbrk+0x60>)
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b94:	4b13      	ldr	r3, [pc, #76]	; (8002be4 <_sbrk+0x64>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d102      	bne.n	8002ba2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b9c:	4b11      	ldr	r3, [pc, #68]	; (8002be4 <_sbrk+0x64>)
 8002b9e:	4a12      	ldr	r2, [pc, #72]	; (8002be8 <_sbrk+0x68>)
 8002ba0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ba2:	4b10      	ldr	r3, [pc, #64]	; (8002be4 <_sbrk+0x64>)
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4413      	add	r3, r2
 8002baa:	693a      	ldr	r2, [r7, #16]
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d207      	bcs.n	8002bc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002bb0:	f003 fcf2 	bl	8006598 <__errno>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	220c      	movs	r2, #12
 8002bb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002bba:	f04f 33ff 	mov.w	r3, #4294967295
 8002bbe:	e009      	b.n	8002bd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002bc0:	4b08      	ldr	r3, [pc, #32]	; (8002be4 <_sbrk+0x64>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002bc6:	4b07      	ldr	r3, [pc, #28]	; (8002be4 <_sbrk+0x64>)
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4413      	add	r3, r2
 8002bce:	4a05      	ldr	r2, [pc, #20]	; (8002be4 <_sbrk+0x64>)
 8002bd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3718      	adds	r7, #24
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	20005000 	.word	0x20005000
 8002be0:	00000400 	.word	0x00000400
 8002be4:	20000274 	.word	0x20000274
 8002be8:	20000c60 	.word	0x20000c60

08002bec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002bec:	b480      	push	{r7}
 8002bee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002bf0:	bf00      	nop
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bc80      	pop	{r7}
 8002bf6:	4770      	bx	lr

08002bf8 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b086      	sub	sp, #24
 8002bfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002bfe:	f107 0308 	add.w	r3, r7, #8
 8002c02:	2200      	movs	r2, #0
 8002c04:	601a      	str	r2, [r3, #0]
 8002c06:	605a      	str	r2, [r3, #4]
 8002c08:	609a      	str	r2, [r3, #8]
 8002c0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c0c:	463b      	mov	r3, r7
 8002c0e:	2200      	movs	r2, #0
 8002c10:	601a      	str	r2, [r3, #0]
 8002c12:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002c14:	4b1e      	ldr	r3, [pc, #120]	; (8002c90 <MX_TIM1_Init+0x98>)
 8002c16:	4a1f      	ldr	r2, [pc, #124]	; (8002c94 <MX_TIM1_Init+0x9c>)
 8002c18:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8000-1;
 8002c1a:	4b1d      	ldr	r3, [pc, #116]	; (8002c90 <MX_TIM1_Init+0x98>)
 8002c1c:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8002c20:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c22:	4b1b      	ldr	r3, [pc, #108]	; (8002c90 <MX_TIM1_Init+0x98>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8002c28:	4b19      	ldr	r3, [pc, #100]	; (8002c90 <MX_TIM1_Init+0x98>)
 8002c2a:	2263      	movs	r2, #99	; 0x63
 8002c2c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c2e:	4b18      	ldr	r3, [pc, #96]	; (8002c90 <MX_TIM1_Init+0x98>)
 8002c30:	2200      	movs	r2, #0
 8002c32:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002c34:	4b16      	ldr	r3, [pc, #88]	; (8002c90 <MX_TIM1_Init+0x98>)
 8002c36:	2200      	movs	r2, #0
 8002c38:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c3a:	4b15      	ldr	r3, [pc, #84]	; (8002c90 <MX_TIM1_Init+0x98>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002c40:	4813      	ldr	r0, [pc, #76]	; (8002c90 <MX_TIM1_Init+0x98>)
 8002c42:	f002 fb33 	bl	80052ac <HAL_TIM_Base_Init>
 8002c46:	4603      	mov	r3, r0
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d001      	beq.n	8002c50 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002c4c:	f7ff fe26 	bl	800289c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c54:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002c56:	f107 0308 	add.w	r3, r7, #8
 8002c5a:	4619      	mov	r1, r3
 8002c5c:	480c      	ldr	r0, [pc, #48]	; (8002c90 <MX_TIM1_Init+0x98>)
 8002c5e:	f002 fccf 	bl	8005600 <HAL_TIM_ConfigClockSource>
 8002c62:	4603      	mov	r3, r0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d001      	beq.n	8002c6c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002c68:	f7ff fe18 	bl	800289c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c70:	2300      	movs	r3, #0
 8002c72:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002c74:	463b      	mov	r3, r7
 8002c76:	4619      	mov	r1, r3
 8002c78:	4805      	ldr	r0, [pc, #20]	; (8002c90 <MX_TIM1_Init+0x98>)
 8002c7a:	f002 fea1 	bl	80059c0 <HAL_TIMEx_MasterConfigSynchronization>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d001      	beq.n	8002c88 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002c84:	f7ff fe0a 	bl	800289c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002c88:	bf00      	nop
 8002c8a:	3718      	adds	r7, #24
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	20000bbc 	.word	0x20000bbc
 8002c94:	40012c00 	.word	0x40012c00

08002c98 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b085      	sub	sp, #20
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a09      	ldr	r2, [pc, #36]	; (8002ccc <HAL_TIM_Base_MspInit+0x34>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d10b      	bne.n	8002cc2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002caa:	4b09      	ldr	r3, [pc, #36]	; (8002cd0 <HAL_TIM_Base_MspInit+0x38>)
 8002cac:	699b      	ldr	r3, [r3, #24]
 8002cae:	4a08      	ldr	r2, [pc, #32]	; (8002cd0 <HAL_TIM_Base_MspInit+0x38>)
 8002cb0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002cb4:	6193      	str	r3, [r2, #24]
 8002cb6:	4b06      	ldr	r3, [pc, #24]	; (8002cd0 <HAL_TIM_Base_MspInit+0x38>)
 8002cb8:	699b      	ldr	r3, [r3, #24]
 8002cba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cbe:	60fb      	str	r3, [r7, #12]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002cc2:	bf00      	nop
 8002cc4:	3714      	adds	r7, #20
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bc80      	pop	{r7}
 8002cca:	4770      	bx	lr
 8002ccc:	40012c00 	.word	0x40012c00
 8002cd0:	40021000 	.word	0x40021000

08002cd4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002cd8:	4b11      	ldr	r3, [pc, #68]	; (8002d20 <MX_USART1_UART_Init+0x4c>)
 8002cda:	4a12      	ldr	r2, [pc, #72]	; (8002d24 <MX_USART1_UART_Init+0x50>)
 8002cdc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002cde:	4b10      	ldr	r3, [pc, #64]	; (8002d20 <MX_USART1_UART_Init+0x4c>)
 8002ce0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002ce4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002ce6:	4b0e      	ldr	r3, [pc, #56]	; (8002d20 <MX_USART1_UART_Init+0x4c>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002cec:	4b0c      	ldr	r3, [pc, #48]	; (8002d20 <MX_USART1_UART_Init+0x4c>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002cf2:	4b0b      	ldr	r3, [pc, #44]	; (8002d20 <MX_USART1_UART_Init+0x4c>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002cf8:	4b09      	ldr	r3, [pc, #36]	; (8002d20 <MX_USART1_UART_Init+0x4c>)
 8002cfa:	220c      	movs	r2, #12
 8002cfc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cfe:	4b08      	ldr	r3, [pc, #32]	; (8002d20 <MX_USART1_UART_Init+0x4c>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d04:	4b06      	ldr	r3, [pc, #24]	; (8002d20 <MX_USART1_UART_Init+0x4c>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002d0a:	4805      	ldr	r0, [pc, #20]	; (8002d20 <MX_USART1_UART_Init+0x4c>)
 8002d0c:	f002 fec8 	bl	8005aa0 <HAL_UART_Init>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d001      	beq.n	8002d1a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002d16:	f7ff fdc1 	bl	800289c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002d1a:	bf00      	nop
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	20000c04 	.word	0x20000c04
 8002d24:	40013800 	.word	0x40013800

08002d28 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b088      	sub	sp, #32
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d30:	f107 0310 	add.w	r3, r7, #16
 8002d34:	2200      	movs	r2, #0
 8002d36:	601a      	str	r2, [r3, #0]
 8002d38:	605a      	str	r2, [r3, #4]
 8002d3a:	609a      	str	r2, [r3, #8]
 8002d3c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a20      	ldr	r2, [pc, #128]	; (8002dc4 <HAL_UART_MspInit+0x9c>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d139      	bne.n	8002dbc <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002d48:	4b1f      	ldr	r3, [pc, #124]	; (8002dc8 <HAL_UART_MspInit+0xa0>)
 8002d4a:	699b      	ldr	r3, [r3, #24]
 8002d4c:	4a1e      	ldr	r2, [pc, #120]	; (8002dc8 <HAL_UART_MspInit+0xa0>)
 8002d4e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d52:	6193      	str	r3, [r2, #24]
 8002d54:	4b1c      	ldr	r3, [pc, #112]	; (8002dc8 <HAL_UART_MspInit+0xa0>)
 8002d56:	699b      	ldr	r3, [r3, #24]
 8002d58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d5c:	60fb      	str	r3, [r7, #12]
 8002d5e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d60:	4b19      	ldr	r3, [pc, #100]	; (8002dc8 <HAL_UART_MspInit+0xa0>)
 8002d62:	699b      	ldr	r3, [r3, #24]
 8002d64:	4a18      	ldr	r2, [pc, #96]	; (8002dc8 <HAL_UART_MspInit+0xa0>)
 8002d66:	f043 0304 	orr.w	r3, r3, #4
 8002d6a:	6193      	str	r3, [r2, #24]
 8002d6c:	4b16      	ldr	r3, [pc, #88]	; (8002dc8 <HAL_UART_MspInit+0xa0>)
 8002d6e:	699b      	ldr	r3, [r3, #24]
 8002d70:	f003 0304 	and.w	r3, r3, #4
 8002d74:	60bb      	str	r3, [r7, #8]
 8002d76:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA8     ------> USART1_CK
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002d78:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002d7c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d7e:	2302      	movs	r3, #2
 8002d80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d82:	2303      	movs	r3, #3
 8002d84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d86:	f107 0310 	add.w	r3, r7, #16
 8002d8a:	4619      	mov	r1, r3
 8002d8c:	480f      	ldr	r0, [pc, #60]	; (8002dcc <HAL_UART_MspInit+0xa4>)
 8002d8e:	f000 fa89 	bl	80032a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002d92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d96:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002da0:	f107 0310 	add.w	r3, r7, #16
 8002da4:	4619      	mov	r1, r3
 8002da6:	4809      	ldr	r0, [pc, #36]	; (8002dcc <HAL_UART_MspInit+0xa4>)
 8002da8:	f000 fa7c 	bl	80032a4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002dac:	2200      	movs	r2, #0
 8002dae:	2100      	movs	r1, #0
 8002db0:	2025      	movs	r0, #37	; 0x25
 8002db2:	f000 f990 	bl	80030d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002db6:	2025      	movs	r0, #37	; 0x25
 8002db8:	f000 f9a9 	bl	800310e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002dbc:	bf00      	nop
 8002dbe:	3720      	adds	r7, #32
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	40013800 	.word	0x40013800
 8002dc8:	40021000 	.word	0x40021000
 8002dcc:	40010800 	.word	0x40010800

08002dd0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002dd0:	480c      	ldr	r0, [pc, #48]	; (8002e04 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002dd2:	490d      	ldr	r1, [pc, #52]	; (8002e08 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002dd4:	4a0d      	ldr	r2, [pc, #52]	; (8002e0c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002dd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002dd8:	e002      	b.n	8002de0 <LoopCopyDataInit>

08002dda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002dda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ddc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002dde:	3304      	adds	r3, #4

08002de0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002de0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002de2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002de4:	d3f9      	bcc.n	8002dda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002de6:	4a0a      	ldr	r2, [pc, #40]	; (8002e10 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002de8:	4c0a      	ldr	r4, [pc, #40]	; (8002e14 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002dea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002dec:	e001      	b.n	8002df2 <LoopFillZerobss>

08002dee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002dee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002df0:	3204      	adds	r2, #4

08002df2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002df2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002df4:	d3fb      	bcc.n	8002dee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002df6:	f7ff fef9 	bl	8002bec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002dfa:	f003 fbd3 	bl	80065a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002dfe:	f7ff fa7b 	bl	80022f8 <main>
  bx lr
 8002e02:	4770      	bx	lr
  ldr r0, =_sdata
 8002e04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e08:	20000254 	.word	0x20000254
  ldr r2, =_sidata
 8002e0c:	0800ae20 	.word	0x0800ae20
  ldr r2, =_sbss
 8002e10:	20000254 	.word	0x20000254
  ldr r4, =_ebss
 8002e14:	20000c5c 	.word	0x20000c5c

08002e18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002e18:	e7fe      	b.n	8002e18 <ADC1_2_IRQHandler>
	...

08002e1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e20:	4b08      	ldr	r3, [pc, #32]	; (8002e44 <HAL_Init+0x28>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a07      	ldr	r2, [pc, #28]	; (8002e44 <HAL_Init+0x28>)
 8002e26:	f043 0310 	orr.w	r3, r3, #16
 8002e2a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e2c:	2003      	movs	r0, #3
 8002e2e:	f000 f947 	bl	80030c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e32:	2000      	movs	r0, #0
 8002e34:	f000 f808 	bl	8002e48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e38:	f7ff fdaa 	bl	8002990 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	40022000 	.word	0x40022000

08002e48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e50:	4b12      	ldr	r3, [pc, #72]	; (8002e9c <HAL_InitTick+0x54>)
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	4b12      	ldr	r3, [pc, #72]	; (8002ea0 <HAL_InitTick+0x58>)
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	4619      	mov	r1, r3
 8002e5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e62:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e66:	4618      	mov	r0, r3
 8002e68:	f000 f95f 	bl	800312a <HAL_SYSTICK_Config>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d001      	beq.n	8002e76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e00e      	b.n	8002e94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2b0f      	cmp	r3, #15
 8002e7a:	d80a      	bhi.n	8002e92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	6879      	ldr	r1, [r7, #4]
 8002e80:	f04f 30ff 	mov.w	r0, #4294967295
 8002e84:	f000 f927 	bl	80030d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e88:	4a06      	ldr	r2, [pc, #24]	; (8002ea4 <HAL_InitTick+0x5c>)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	e000      	b.n	8002e94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3708      	adds	r7, #8
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	20000074 	.word	0x20000074
 8002ea0:	2000007c 	.word	0x2000007c
 8002ea4:	20000078 	.word	0x20000078

08002ea8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002eac:	4b05      	ldr	r3, [pc, #20]	; (8002ec4 <HAL_IncTick+0x1c>)
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	4b05      	ldr	r3, [pc, #20]	; (8002ec8 <HAL_IncTick+0x20>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4413      	add	r3, r2
 8002eb8:	4a03      	ldr	r2, [pc, #12]	; (8002ec8 <HAL_IncTick+0x20>)
 8002eba:	6013      	str	r3, [r2, #0]
}
 8002ebc:	bf00      	nop
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bc80      	pop	{r7}
 8002ec2:	4770      	bx	lr
 8002ec4:	2000007c 	.word	0x2000007c
 8002ec8:	20000c48 	.word	0x20000c48

08002ecc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	af00      	add	r7, sp, #0
  return uwTick;
 8002ed0:	4b02      	ldr	r3, [pc, #8]	; (8002edc <HAL_GetTick+0x10>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bc80      	pop	{r7}
 8002eda:	4770      	bx	lr
 8002edc:	20000c48 	.word	0x20000c48

08002ee0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ee8:	f7ff fff0 	bl	8002ecc <HAL_GetTick>
 8002eec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ef8:	d005      	beq.n	8002f06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002efa:	4b0a      	ldr	r3, [pc, #40]	; (8002f24 <HAL_Delay+0x44>)
 8002efc:	781b      	ldrb	r3, [r3, #0]
 8002efe:	461a      	mov	r2, r3
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	4413      	add	r3, r2
 8002f04:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002f06:	bf00      	nop
 8002f08:	f7ff ffe0 	bl	8002ecc <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	68fa      	ldr	r2, [r7, #12]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d8f7      	bhi.n	8002f08 <HAL_Delay+0x28>
  {
  }
}
 8002f18:	bf00      	nop
 8002f1a:	bf00      	nop
 8002f1c:	3710      	adds	r7, #16
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	2000007c 	.word	0x2000007c

08002f28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b085      	sub	sp, #20
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f003 0307 	and.w	r3, r3, #7
 8002f36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f38:	4b0c      	ldr	r3, [pc, #48]	; (8002f6c <__NVIC_SetPriorityGrouping+0x44>)
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f3e:	68ba      	ldr	r2, [r7, #8]
 8002f40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f44:	4013      	ands	r3, r2
 8002f46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f5a:	4a04      	ldr	r2, [pc, #16]	; (8002f6c <__NVIC_SetPriorityGrouping+0x44>)
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	60d3      	str	r3, [r2, #12]
}
 8002f60:	bf00      	nop
 8002f62:	3714      	adds	r7, #20
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bc80      	pop	{r7}
 8002f68:	4770      	bx	lr
 8002f6a:	bf00      	nop
 8002f6c:	e000ed00 	.word	0xe000ed00

08002f70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f70:	b480      	push	{r7}
 8002f72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f74:	4b04      	ldr	r3, [pc, #16]	; (8002f88 <__NVIC_GetPriorityGrouping+0x18>)
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	0a1b      	lsrs	r3, r3, #8
 8002f7a:	f003 0307 	and.w	r3, r3, #7
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bc80      	pop	{r7}
 8002f84:	4770      	bx	lr
 8002f86:	bf00      	nop
 8002f88:	e000ed00 	.word	0xe000ed00

08002f8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	4603      	mov	r3, r0
 8002f94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	db0b      	blt.n	8002fb6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f9e:	79fb      	ldrb	r3, [r7, #7]
 8002fa0:	f003 021f 	and.w	r2, r3, #31
 8002fa4:	4906      	ldr	r1, [pc, #24]	; (8002fc0 <__NVIC_EnableIRQ+0x34>)
 8002fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002faa:	095b      	lsrs	r3, r3, #5
 8002fac:	2001      	movs	r0, #1
 8002fae:	fa00 f202 	lsl.w	r2, r0, r2
 8002fb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002fb6:	bf00      	nop
 8002fb8:	370c      	adds	r7, #12
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bc80      	pop	{r7}
 8002fbe:	4770      	bx	lr
 8002fc0:	e000e100 	.word	0xe000e100

08002fc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	4603      	mov	r3, r0
 8002fcc:	6039      	str	r1, [r7, #0]
 8002fce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	db0a      	blt.n	8002fee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	b2da      	uxtb	r2, r3
 8002fdc:	490c      	ldr	r1, [pc, #48]	; (8003010 <__NVIC_SetPriority+0x4c>)
 8002fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fe2:	0112      	lsls	r2, r2, #4
 8002fe4:	b2d2      	uxtb	r2, r2
 8002fe6:	440b      	add	r3, r1
 8002fe8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fec:	e00a      	b.n	8003004 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	b2da      	uxtb	r2, r3
 8002ff2:	4908      	ldr	r1, [pc, #32]	; (8003014 <__NVIC_SetPriority+0x50>)
 8002ff4:	79fb      	ldrb	r3, [r7, #7]
 8002ff6:	f003 030f 	and.w	r3, r3, #15
 8002ffa:	3b04      	subs	r3, #4
 8002ffc:	0112      	lsls	r2, r2, #4
 8002ffe:	b2d2      	uxtb	r2, r2
 8003000:	440b      	add	r3, r1
 8003002:	761a      	strb	r2, [r3, #24]
}
 8003004:	bf00      	nop
 8003006:	370c      	adds	r7, #12
 8003008:	46bd      	mov	sp, r7
 800300a:	bc80      	pop	{r7}
 800300c:	4770      	bx	lr
 800300e:	bf00      	nop
 8003010:	e000e100 	.word	0xe000e100
 8003014:	e000ed00 	.word	0xe000ed00

08003018 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003018:	b480      	push	{r7}
 800301a:	b089      	sub	sp, #36	; 0x24
 800301c:	af00      	add	r7, sp, #0
 800301e:	60f8      	str	r0, [r7, #12]
 8003020:	60b9      	str	r1, [r7, #8]
 8003022:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f003 0307 	and.w	r3, r3, #7
 800302a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	f1c3 0307 	rsb	r3, r3, #7
 8003032:	2b04      	cmp	r3, #4
 8003034:	bf28      	it	cs
 8003036:	2304      	movcs	r3, #4
 8003038:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	3304      	adds	r3, #4
 800303e:	2b06      	cmp	r3, #6
 8003040:	d902      	bls.n	8003048 <NVIC_EncodePriority+0x30>
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	3b03      	subs	r3, #3
 8003046:	e000      	b.n	800304a <NVIC_EncodePriority+0x32>
 8003048:	2300      	movs	r3, #0
 800304a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800304c:	f04f 32ff 	mov.w	r2, #4294967295
 8003050:	69bb      	ldr	r3, [r7, #24]
 8003052:	fa02 f303 	lsl.w	r3, r2, r3
 8003056:	43da      	mvns	r2, r3
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	401a      	ands	r2, r3
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003060:	f04f 31ff 	mov.w	r1, #4294967295
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	fa01 f303 	lsl.w	r3, r1, r3
 800306a:	43d9      	mvns	r1, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003070:	4313      	orrs	r3, r2
         );
}
 8003072:	4618      	mov	r0, r3
 8003074:	3724      	adds	r7, #36	; 0x24
 8003076:	46bd      	mov	sp, r7
 8003078:	bc80      	pop	{r7}
 800307a:	4770      	bx	lr

0800307c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b082      	sub	sp, #8
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	3b01      	subs	r3, #1
 8003088:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800308c:	d301      	bcc.n	8003092 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800308e:	2301      	movs	r3, #1
 8003090:	e00f      	b.n	80030b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003092:	4a0a      	ldr	r2, [pc, #40]	; (80030bc <SysTick_Config+0x40>)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	3b01      	subs	r3, #1
 8003098:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800309a:	210f      	movs	r1, #15
 800309c:	f04f 30ff 	mov.w	r0, #4294967295
 80030a0:	f7ff ff90 	bl	8002fc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030a4:	4b05      	ldr	r3, [pc, #20]	; (80030bc <SysTick_Config+0x40>)
 80030a6:	2200      	movs	r2, #0
 80030a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030aa:	4b04      	ldr	r3, [pc, #16]	; (80030bc <SysTick_Config+0x40>)
 80030ac:	2207      	movs	r2, #7
 80030ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030b0:	2300      	movs	r3, #0
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3708      	adds	r7, #8
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop
 80030bc:	e000e010 	.word	0xe000e010

080030c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b082      	sub	sp, #8
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	f7ff ff2d 	bl	8002f28 <__NVIC_SetPriorityGrouping>
}
 80030ce:	bf00      	nop
 80030d0:	3708      	adds	r7, #8
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}

080030d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80030d6:	b580      	push	{r7, lr}
 80030d8:	b086      	sub	sp, #24
 80030da:	af00      	add	r7, sp, #0
 80030dc:	4603      	mov	r3, r0
 80030de:	60b9      	str	r1, [r7, #8]
 80030e0:	607a      	str	r2, [r7, #4]
 80030e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80030e4:	2300      	movs	r3, #0
 80030e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030e8:	f7ff ff42 	bl	8002f70 <__NVIC_GetPriorityGrouping>
 80030ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	68b9      	ldr	r1, [r7, #8]
 80030f2:	6978      	ldr	r0, [r7, #20]
 80030f4:	f7ff ff90 	bl	8003018 <NVIC_EncodePriority>
 80030f8:	4602      	mov	r2, r0
 80030fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030fe:	4611      	mov	r1, r2
 8003100:	4618      	mov	r0, r3
 8003102:	f7ff ff5f 	bl	8002fc4 <__NVIC_SetPriority>
}
 8003106:	bf00      	nop
 8003108:	3718      	adds	r7, #24
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}

0800310e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800310e:	b580      	push	{r7, lr}
 8003110:	b082      	sub	sp, #8
 8003112:	af00      	add	r7, sp, #0
 8003114:	4603      	mov	r3, r0
 8003116:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003118:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800311c:	4618      	mov	r0, r3
 800311e:	f7ff ff35 	bl	8002f8c <__NVIC_EnableIRQ>
}
 8003122:	bf00      	nop
 8003124:	3708      	adds	r7, #8
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}

0800312a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800312a:	b580      	push	{r7, lr}
 800312c:	b082      	sub	sp, #8
 800312e:	af00      	add	r7, sp, #0
 8003130:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f7ff ffa2 	bl	800307c <SysTick_Config>
 8003138:	4603      	mov	r3, r0
}
 800313a:	4618      	mov	r0, r3
 800313c:	3708      	adds	r7, #8
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}

08003142 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003142:	b480      	push	{r7}
 8003144:	b085      	sub	sp, #20
 8003146:	af00      	add	r7, sp, #0
 8003148:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800314a:	2300      	movs	r3, #0
 800314c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003154:	2b02      	cmp	r3, #2
 8003156:	d008      	beq.n	800316a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2204      	movs	r2, #4
 800315c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e020      	b.n	80031ac <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f022 020e 	bic.w	r2, r2, #14
 8003178:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f022 0201 	bic.w	r2, r2, #1
 8003188:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003192:	2101      	movs	r1, #1
 8003194:	fa01 f202 	lsl.w	r2, r1, r2
 8003198:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2201      	movs	r2, #1
 800319e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2200      	movs	r2, #0
 80031a6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80031aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3714      	adds	r7, #20
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bc80      	pop	{r7}
 80031b4:	4770      	bx	lr
	...

080031b8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b084      	sub	sp, #16
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031c0:	2300      	movs	r3, #0
 80031c2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d005      	beq.n	80031da <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2204      	movs	r2, #4
 80031d2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	73fb      	strb	r3, [r7, #15]
 80031d8:	e051      	b.n	800327e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f022 020e 	bic.w	r2, r2, #14
 80031e8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f022 0201 	bic.w	r2, r2, #1
 80031f8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a22      	ldr	r2, [pc, #136]	; (8003288 <HAL_DMA_Abort_IT+0xd0>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d029      	beq.n	8003258 <HAL_DMA_Abort_IT+0xa0>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a20      	ldr	r2, [pc, #128]	; (800328c <HAL_DMA_Abort_IT+0xd4>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d022      	beq.n	8003254 <HAL_DMA_Abort_IT+0x9c>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a1f      	ldr	r2, [pc, #124]	; (8003290 <HAL_DMA_Abort_IT+0xd8>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d01a      	beq.n	800324e <HAL_DMA_Abort_IT+0x96>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a1d      	ldr	r2, [pc, #116]	; (8003294 <HAL_DMA_Abort_IT+0xdc>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d012      	beq.n	8003248 <HAL_DMA_Abort_IT+0x90>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a1c      	ldr	r2, [pc, #112]	; (8003298 <HAL_DMA_Abort_IT+0xe0>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d00a      	beq.n	8003242 <HAL_DMA_Abort_IT+0x8a>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a1a      	ldr	r2, [pc, #104]	; (800329c <HAL_DMA_Abort_IT+0xe4>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d102      	bne.n	800323c <HAL_DMA_Abort_IT+0x84>
 8003236:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800323a:	e00e      	b.n	800325a <HAL_DMA_Abort_IT+0xa2>
 800323c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003240:	e00b      	b.n	800325a <HAL_DMA_Abort_IT+0xa2>
 8003242:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003246:	e008      	b.n	800325a <HAL_DMA_Abort_IT+0xa2>
 8003248:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800324c:	e005      	b.n	800325a <HAL_DMA_Abort_IT+0xa2>
 800324e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003252:	e002      	b.n	800325a <HAL_DMA_Abort_IT+0xa2>
 8003254:	2310      	movs	r3, #16
 8003256:	e000      	b.n	800325a <HAL_DMA_Abort_IT+0xa2>
 8003258:	2301      	movs	r3, #1
 800325a:	4a11      	ldr	r2, [pc, #68]	; (80032a0 <HAL_DMA_Abort_IT+0xe8>)
 800325c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2201      	movs	r2, #1
 8003262:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2200      	movs	r2, #0
 800326a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003272:	2b00      	cmp	r3, #0
 8003274:	d003      	beq.n	800327e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	4798      	blx	r3
    } 
  }
  return status;
 800327e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003280:	4618      	mov	r0, r3
 8003282:	3710      	adds	r7, #16
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}
 8003288:	40020008 	.word	0x40020008
 800328c:	4002001c 	.word	0x4002001c
 8003290:	40020030 	.word	0x40020030
 8003294:	40020044 	.word	0x40020044
 8003298:	40020058 	.word	0x40020058
 800329c:	4002006c 	.word	0x4002006c
 80032a0:	40020000 	.word	0x40020000

080032a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b08b      	sub	sp, #44	; 0x2c
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80032ae:	2300      	movs	r3, #0
 80032b0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80032b2:	2300      	movs	r3, #0
 80032b4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032b6:	e169      	b.n	800358c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80032b8:	2201      	movs	r2, #1
 80032ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032bc:	fa02 f303 	lsl.w	r3, r2, r3
 80032c0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	69fa      	ldr	r2, [r7, #28]
 80032c8:	4013      	ands	r3, r2
 80032ca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80032cc:	69ba      	ldr	r2, [r7, #24]
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	429a      	cmp	r2, r3
 80032d2:	f040 8158 	bne.w	8003586 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	4a9a      	ldr	r2, [pc, #616]	; (8003544 <HAL_GPIO_Init+0x2a0>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d05e      	beq.n	800339e <HAL_GPIO_Init+0xfa>
 80032e0:	4a98      	ldr	r2, [pc, #608]	; (8003544 <HAL_GPIO_Init+0x2a0>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d875      	bhi.n	80033d2 <HAL_GPIO_Init+0x12e>
 80032e6:	4a98      	ldr	r2, [pc, #608]	; (8003548 <HAL_GPIO_Init+0x2a4>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d058      	beq.n	800339e <HAL_GPIO_Init+0xfa>
 80032ec:	4a96      	ldr	r2, [pc, #600]	; (8003548 <HAL_GPIO_Init+0x2a4>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d86f      	bhi.n	80033d2 <HAL_GPIO_Init+0x12e>
 80032f2:	4a96      	ldr	r2, [pc, #600]	; (800354c <HAL_GPIO_Init+0x2a8>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d052      	beq.n	800339e <HAL_GPIO_Init+0xfa>
 80032f8:	4a94      	ldr	r2, [pc, #592]	; (800354c <HAL_GPIO_Init+0x2a8>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d869      	bhi.n	80033d2 <HAL_GPIO_Init+0x12e>
 80032fe:	4a94      	ldr	r2, [pc, #592]	; (8003550 <HAL_GPIO_Init+0x2ac>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d04c      	beq.n	800339e <HAL_GPIO_Init+0xfa>
 8003304:	4a92      	ldr	r2, [pc, #584]	; (8003550 <HAL_GPIO_Init+0x2ac>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d863      	bhi.n	80033d2 <HAL_GPIO_Init+0x12e>
 800330a:	4a92      	ldr	r2, [pc, #584]	; (8003554 <HAL_GPIO_Init+0x2b0>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d046      	beq.n	800339e <HAL_GPIO_Init+0xfa>
 8003310:	4a90      	ldr	r2, [pc, #576]	; (8003554 <HAL_GPIO_Init+0x2b0>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d85d      	bhi.n	80033d2 <HAL_GPIO_Init+0x12e>
 8003316:	2b12      	cmp	r3, #18
 8003318:	d82a      	bhi.n	8003370 <HAL_GPIO_Init+0xcc>
 800331a:	2b12      	cmp	r3, #18
 800331c:	d859      	bhi.n	80033d2 <HAL_GPIO_Init+0x12e>
 800331e:	a201      	add	r2, pc, #4	; (adr r2, 8003324 <HAL_GPIO_Init+0x80>)
 8003320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003324:	0800339f 	.word	0x0800339f
 8003328:	08003379 	.word	0x08003379
 800332c:	0800338b 	.word	0x0800338b
 8003330:	080033cd 	.word	0x080033cd
 8003334:	080033d3 	.word	0x080033d3
 8003338:	080033d3 	.word	0x080033d3
 800333c:	080033d3 	.word	0x080033d3
 8003340:	080033d3 	.word	0x080033d3
 8003344:	080033d3 	.word	0x080033d3
 8003348:	080033d3 	.word	0x080033d3
 800334c:	080033d3 	.word	0x080033d3
 8003350:	080033d3 	.word	0x080033d3
 8003354:	080033d3 	.word	0x080033d3
 8003358:	080033d3 	.word	0x080033d3
 800335c:	080033d3 	.word	0x080033d3
 8003360:	080033d3 	.word	0x080033d3
 8003364:	080033d3 	.word	0x080033d3
 8003368:	08003381 	.word	0x08003381
 800336c:	08003395 	.word	0x08003395
 8003370:	4a79      	ldr	r2, [pc, #484]	; (8003558 <HAL_GPIO_Init+0x2b4>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d013      	beq.n	800339e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003376:	e02c      	b.n	80033d2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	623b      	str	r3, [r7, #32]
          break;
 800337e:	e029      	b.n	80033d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	3304      	adds	r3, #4
 8003386:	623b      	str	r3, [r7, #32]
          break;
 8003388:	e024      	b.n	80033d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	68db      	ldr	r3, [r3, #12]
 800338e:	3308      	adds	r3, #8
 8003390:	623b      	str	r3, [r7, #32]
          break;
 8003392:	e01f      	b.n	80033d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	330c      	adds	r3, #12
 800339a:	623b      	str	r3, [r7, #32]
          break;
 800339c:	e01a      	b.n	80033d4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d102      	bne.n	80033ac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80033a6:	2304      	movs	r3, #4
 80033a8:	623b      	str	r3, [r7, #32]
          break;
 80033aa:	e013      	b.n	80033d4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d105      	bne.n	80033c0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80033b4:	2308      	movs	r3, #8
 80033b6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	69fa      	ldr	r2, [r7, #28]
 80033bc:	611a      	str	r2, [r3, #16]
          break;
 80033be:	e009      	b.n	80033d4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80033c0:	2308      	movs	r3, #8
 80033c2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	69fa      	ldr	r2, [r7, #28]
 80033c8:	615a      	str	r2, [r3, #20]
          break;
 80033ca:	e003      	b.n	80033d4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80033cc:	2300      	movs	r3, #0
 80033ce:	623b      	str	r3, [r7, #32]
          break;
 80033d0:	e000      	b.n	80033d4 <HAL_GPIO_Init+0x130>
          break;
 80033d2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80033d4:	69bb      	ldr	r3, [r7, #24]
 80033d6:	2bff      	cmp	r3, #255	; 0xff
 80033d8:	d801      	bhi.n	80033de <HAL_GPIO_Init+0x13a>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	e001      	b.n	80033e2 <HAL_GPIO_Init+0x13e>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	3304      	adds	r3, #4
 80033e2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80033e4:	69bb      	ldr	r3, [r7, #24]
 80033e6:	2bff      	cmp	r3, #255	; 0xff
 80033e8:	d802      	bhi.n	80033f0 <HAL_GPIO_Init+0x14c>
 80033ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	e002      	b.n	80033f6 <HAL_GPIO_Init+0x152>
 80033f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f2:	3b08      	subs	r3, #8
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	210f      	movs	r1, #15
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	fa01 f303 	lsl.w	r3, r1, r3
 8003404:	43db      	mvns	r3, r3
 8003406:	401a      	ands	r2, r3
 8003408:	6a39      	ldr	r1, [r7, #32]
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	fa01 f303 	lsl.w	r3, r1, r3
 8003410:	431a      	orrs	r2, r3
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800341e:	2b00      	cmp	r3, #0
 8003420:	f000 80b1 	beq.w	8003586 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003424:	4b4d      	ldr	r3, [pc, #308]	; (800355c <HAL_GPIO_Init+0x2b8>)
 8003426:	699b      	ldr	r3, [r3, #24]
 8003428:	4a4c      	ldr	r2, [pc, #304]	; (800355c <HAL_GPIO_Init+0x2b8>)
 800342a:	f043 0301 	orr.w	r3, r3, #1
 800342e:	6193      	str	r3, [r2, #24]
 8003430:	4b4a      	ldr	r3, [pc, #296]	; (800355c <HAL_GPIO_Init+0x2b8>)
 8003432:	699b      	ldr	r3, [r3, #24]
 8003434:	f003 0301 	and.w	r3, r3, #1
 8003438:	60bb      	str	r3, [r7, #8]
 800343a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800343c:	4a48      	ldr	r2, [pc, #288]	; (8003560 <HAL_GPIO_Init+0x2bc>)
 800343e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003440:	089b      	lsrs	r3, r3, #2
 8003442:	3302      	adds	r3, #2
 8003444:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003448:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800344a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344c:	f003 0303 	and.w	r3, r3, #3
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	220f      	movs	r2, #15
 8003454:	fa02 f303 	lsl.w	r3, r2, r3
 8003458:	43db      	mvns	r3, r3
 800345a:	68fa      	ldr	r2, [r7, #12]
 800345c:	4013      	ands	r3, r2
 800345e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	4a40      	ldr	r2, [pc, #256]	; (8003564 <HAL_GPIO_Init+0x2c0>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d013      	beq.n	8003490 <HAL_GPIO_Init+0x1ec>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	4a3f      	ldr	r2, [pc, #252]	; (8003568 <HAL_GPIO_Init+0x2c4>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d00d      	beq.n	800348c <HAL_GPIO_Init+0x1e8>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	4a3e      	ldr	r2, [pc, #248]	; (800356c <HAL_GPIO_Init+0x2c8>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d007      	beq.n	8003488 <HAL_GPIO_Init+0x1e4>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	4a3d      	ldr	r2, [pc, #244]	; (8003570 <HAL_GPIO_Init+0x2cc>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d101      	bne.n	8003484 <HAL_GPIO_Init+0x1e0>
 8003480:	2303      	movs	r3, #3
 8003482:	e006      	b.n	8003492 <HAL_GPIO_Init+0x1ee>
 8003484:	2304      	movs	r3, #4
 8003486:	e004      	b.n	8003492 <HAL_GPIO_Init+0x1ee>
 8003488:	2302      	movs	r3, #2
 800348a:	e002      	b.n	8003492 <HAL_GPIO_Init+0x1ee>
 800348c:	2301      	movs	r3, #1
 800348e:	e000      	b.n	8003492 <HAL_GPIO_Init+0x1ee>
 8003490:	2300      	movs	r3, #0
 8003492:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003494:	f002 0203 	and.w	r2, r2, #3
 8003498:	0092      	lsls	r2, r2, #2
 800349a:	4093      	lsls	r3, r2
 800349c:	68fa      	ldr	r2, [r7, #12]
 800349e:	4313      	orrs	r3, r2
 80034a0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80034a2:	492f      	ldr	r1, [pc, #188]	; (8003560 <HAL_GPIO_Init+0x2bc>)
 80034a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a6:	089b      	lsrs	r3, r3, #2
 80034a8:	3302      	adds	r3, #2
 80034aa:	68fa      	ldr	r2, [r7, #12]
 80034ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d006      	beq.n	80034ca <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80034bc:	4b2d      	ldr	r3, [pc, #180]	; (8003574 <HAL_GPIO_Init+0x2d0>)
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	492c      	ldr	r1, [pc, #176]	; (8003574 <HAL_GPIO_Init+0x2d0>)
 80034c2:	69bb      	ldr	r3, [r7, #24]
 80034c4:	4313      	orrs	r3, r2
 80034c6:	600b      	str	r3, [r1, #0]
 80034c8:	e006      	b.n	80034d8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80034ca:	4b2a      	ldr	r3, [pc, #168]	; (8003574 <HAL_GPIO_Init+0x2d0>)
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	69bb      	ldr	r3, [r7, #24]
 80034d0:	43db      	mvns	r3, r3
 80034d2:	4928      	ldr	r1, [pc, #160]	; (8003574 <HAL_GPIO_Init+0x2d0>)
 80034d4:	4013      	ands	r3, r2
 80034d6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d006      	beq.n	80034f2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80034e4:	4b23      	ldr	r3, [pc, #140]	; (8003574 <HAL_GPIO_Init+0x2d0>)
 80034e6:	685a      	ldr	r2, [r3, #4]
 80034e8:	4922      	ldr	r1, [pc, #136]	; (8003574 <HAL_GPIO_Init+0x2d0>)
 80034ea:	69bb      	ldr	r3, [r7, #24]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	604b      	str	r3, [r1, #4]
 80034f0:	e006      	b.n	8003500 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80034f2:	4b20      	ldr	r3, [pc, #128]	; (8003574 <HAL_GPIO_Init+0x2d0>)
 80034f4:	685a      	ldr	r2, [r3, #4]
 80034f6:	69bb      	ldr	r3, [r7, #24]
 80034f8:	43db      	mvns	r3, r3
 80034fa:	491e      	ldr	r1, [pc, #120]	; (8003574 <HAL_GPIO_Init+0x2d0>)
 80034fc:	4013      	ands	r3, r2
 80034fe:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003508:	2b00      	cmp	r3, #0
 800350a:	d006      	beq.n	800351a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800350c:	4b19      	ldr	r3, [pc, #100]	; (8003574 <HAL_GPIO_Init+0x2d0>)
 800350e:	689a      	ldr	r2, [r3, #8]
 8003510:	4918      	ldr	r1, [pc, #96]	; (8003574 <HAL_GPIO_Init+0x2d0>)
 8003512:	69bb      	ldr	r3, [r7, #24]
 8003514:	4313      	orrs	r3, r2
 8003516:	608b      	str	r3, [r1, #8]
 8003518:	e006      	b.n	8003528 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800351a:	4b16      	ldr	r3, [pc, #88]	; (8003574 <HAL_GPIO_Init+0x2d0>)
 800351c:	689a      	ldr	r2, [r3, #8]
 800351e:	69bb      	ldr	r3, [r7, #24]
 8003520:	43db      	mvns	r3, r3
 8003522:	4914      	ldr	r1, [pc, #80]	; (8003574 <HAL_GPIO_Init+0x2d0>)
 8003524:	4013      	ands	r3, r2
 8003526:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003530:	2b00      	cmp	r3, #0
 8003532:	d021      	beq.n	8003578 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003534:	4b0f      	ldr	r3, [pc, #60]	; (8003574 <HAL_GPIO_Init+0x2d0>)
 8003536:	68da      	ldr	r2, [r3, #12]
 8003538:	490e      	ldr	r1, [pc, #56]	; (8003574 <HAL_GPIO_Init+0x2d0>)
 800353a:	69bb      	ldr	r3, [r7, #24]
 800353c:	4313      	orrs	r3, r2
 800353e:	60cb      	str	r3, [r1, #12]
 8003540:	e021      	b.n	8003586 <HAL_GPIO_Init+0x2e2>
 8003542:	bf00      	nop
 8003544:	10320000 	.word	0x10320000
 8003548:	10310000 	.word	0x10310000
 800354c:	10220000 	.word	0x10220000
 8003550:	10210000 	.word	0x10210000
 8003554:	10120000 	.word	0x10120000
 8003558:	10110000 	.word	0x10110000
 800355c:	40021000 	.word	0x40021000
 8003560:	40010000 	.word	0x40010000
 8003564:	40010800 	.word	0x40010800
 8003568:	40010c00 	.word	0x40010c00
 800356c:	40011000 	.word	0x40011000
 8003570:	40011400 	.word	0x40011400
 8003574:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003578:	4b0b      	ldr	r3, [pc, #44]	; (80035a8 <HAL_GPIO_Init+0x304>)
 800357a:	68da      	ldr	r2, [r3, #12]
 800357c:	69bb      	ldr	r3, [r7, #24]
 800357e:	43db      	mvns	r3, r3
 8003580:	4909      	ldr	r1, [pc, #36]	; (80035a8 <HAL_GPIO_Init+0x304>)
 8003582:	4013      	ands	r3, r2
 8003584:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003588:	3301      	adds	r3, #1
 800358a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003592:	fa22 f303 	lsr.w	r3, r2, r3
 8003596:	2b00      	cmp	r3, #0
 8003598:	f47f ae8e 	bne.w	80032b8 <HAL_GPIO_Init+0x14>
  }
}
 800359c:	bf00      	nop
 800359e:	bf00      	nop
 80035a0:	372c      	adds	r7, #44	; 0x2c
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bc80      	pop	{r7}
 80035a6:	4770      	bx	lr
 80035a8:	40010400 	.word	0x40010400

080035ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b083      	sub	sp, #12
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	460b      	mov	r3, r1
 80035b6:	807b      	strh	r3, [r7, #2]
 80035b8:	4613      	mov	r3, r2
 80035ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80035bc:	787b      	ldrb	r3, [r7, #1]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d003      	beq.n	80035ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80035c2:	887a      	ldrh	r2, [r7, #2]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80035c8:	e003      	b.n	80035d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80035ca:	887b      	ldrh	r3, [r7, #2]
 80035cc:	041a      	lsls	r2, r3, #16
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	611a      	str	r2, [r3, #16]
}
 80035d2:	bf00      	nop
 80035d4:	370c      	adds	r7, #12
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bc80      	pop	{r7}
 80035da:	4770      	bx	lr

080035dc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80035dc:	b480      	push	{r7}
 80035de:	b085      	sub	sp, #20
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	460b      	mov	r3, r1
 80035e6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80035ee:	887a      	ldrh	r2, [r7, #2]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	4013      	ands	r3, r2
 80035f4:	041a      	lsls	r2, r3, #16
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	43d9      	mvns	r1, r3
 80035fa:	887b      	ldrh	r3, [r7, #2]
 80035fc:	400b      	ands	r3, r1
 80035fe:	431a      	orrs	r2, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	611a      	str	r2, [r3, #16]
}
 8003604:	bf00      	nop
 8003606:	3714      	adds	r7, #20
 8003608:	46bd      	mov	sp, r7
 800360a:	bc80      	pop	{r7}
 800360c:	4770      	bx	lr
	...

08003610 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b084      	sub	sp, #16
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d101      	bne.n	8003622 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e12b      	b.n	800387a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003628:	b2db      	uxtb	r3, r3
 800362a:	2b00      	cmp	r3, #0
 800362c:	d106      	bne.n	800363c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f7fe fb96 	bl	8001d68 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2224      	movs	r2, #36	; 0x24
 8003640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f022 0201 	bic.w	r2, r2, #1
 8003652:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003662:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003672:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003674:	f001 fb6e 	bl	8004d54 <HAL_RCC_GetPCLK1Freq>
 8003678:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	4a81      	ldr	r2, [pc, #516]	; (8003884 <HAL_I2C_Init+0x274>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d807      	bhi.n	8003694 <HAL_I2C_Init+0x84>
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	4a80      	ldr	r2, [pc, #512]	; (8003888 <HAL_I2C_Init+0x278>)
 8003688:	4293      	cmp	r3, r2
 800368a:	bf94      	ite	ls
 800368c:	2301      	movls	r3, #1
 800368e:	2300      	movhi	r3, #0
 8003690:	b2db      	uxtb	r3, r3
 8003692:	e006      	b.n	80036a2 <HAL_I2C_Init+0x92>
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	4a7d      	ldr	r2, [pc, #500]	; (800388c <HAL_I2C_Init+0x27c>)
 8003698:	4293      	cmp	r3, r2
 800369a:	bf94      	ite	ls
 800369c:	2301      	movls	r3, #1
 800369e:	2300      	movhi	r3, #0
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d001      	beq.n	80036aa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e0e7      	b.n	800387a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	4a78      	ldr	r2, [pc, #480]	; (8003890 <HAL_I2C_Init+0x280>)
 80036ae:	fba2 2303 	umull	r2, r3, r2, r3
 80036b2:	0c9b      	lsrs	r3, r3, #18
 80036b4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	68ba      	ldr	r2, [r7, #8]
 80036c6:	430a      	orrs	r2, r1
 80036c8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	6a1b      	ldr	r3, [r3, #32]
 80036d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	4a6a      	ldr	r2, [pc, #424]	; (8003884 <HAL_I2C_Init+0x274>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d802      	bhi.n	80036e4 <HAL_I2C_Init+0xd4>
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	3301      	adds	r3, #1
 80036e2:	e009      	b.n	80036f8 <HAL_I2C_Init+0xe8>
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80036ea:	fb02 f303 	mul.w	r3, r2, r3
 80036ee:	4a69      	ldr	r2, [pc, #420]	; (8003894 <HAL_I2C_Init+0x284>)
 80036f0:	fba2 2303 	umull	r2, r3, r2, r3
 80036f4:	099b      	lsrs	r3, r3, #6
 80036f6:	3301      	adds	r3, #1
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	6812      	ldr	r2, [r2, #0]
 80036fc:	430b      	orrs	r3, r1
 80036fe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	69db      	ldr	r3, [r3, #28]
 8003706:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800370a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	495c      	ldr	r1, [pc, #368]	; (8003884 <HAL_I2C_Init+0x274>)
 8003714:	428b      	cmp	r3, r1
 8003716:	d819      	bhi.n	800374c <HAL_I2C_Init+0x13c>
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	1e59      	subs	r1, r3, #1
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	005b      	lsls	r3, r3, #1
 8003722:	fbb1 f3f3 	udiv	r3, r1, r3
 8003726:	1c59      	adds	r1, r3, #1
 8003728:	f640 73fc 	movw	r3, #4092	; 0xffc
 800372c:	400b      	ands	r3, r1
 800372e:	2b00      	cmp	r3, #0
 8003730:	d00a      	beq.n	8003748 <HAL_I2C_Init+0x138>
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	1e59      	subs	r1, r3, #1
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	005b      	lsls	r3, r3, #1
 800373c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003740:	3301      	adds	r3, #1
 8003742:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003746:	e051      	b.n	80037ec <HAL_I2C_Init+0x1dc>
 8003748:	2304      	movs	r3, #4
 800374a:	e04f      	b.n	80037ec <HAL_I2C_Init+0x1dc>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d111      	bne.n	8003778 <HAL_I2C_Init+0x168>
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	1e58      	subs	r0, r3, #1
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6859      	ldr	r1, [r3, #4]
 800375c:	460b      	mov	r3, r1
 800375e:	005b      	lsls	r3, r3, #1
 8003760:	440b      	add	r3, r1
 8003762:	fbb0 f3f3 	udiv	r3, r0, r3
 8003766:	3301      	adds	r3, #1
 8003768:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800376c:	2b00      	cmp	r3, #0
 800376e:	bf0c      	ite	eq
 8003770:	2301      	moveq	r3, #1
 8003772:	2300      	movne	r3, #0
 8003774:	b2db      	uxtb	r3, r3
 8003776:	e012      	b.n	800379e <HAL_I2C_Init+0x18e>
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	1e58      	subs	r0, r3, #1
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6859      	ldr	r1, [r3, #4]
 8003780:	460b      	mov	r3, r1
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	440b      	add	r3, r1
 8003786:	0099      	lsls	r1, r3, #2
 8003788:	440b      	add	r3, r1
 800378a:	fbb0 f3f3 	udiv	r3, r0, r3
 800378e:	3301      	adds	r3, #1
 8003790:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003794:	2b00      	cmp	r3, #0
 8003796:	bf0c      	ite	eq
 8003798:	2301      	moveq	r3, #1
 800379a:	2300      	movne	r3, #0
 800379c:	b2db      	uxtb	r3, r3
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d001      	beq.n	80037a6 <HAL_I2C_Init+0x196>
 80037a2:	2301      	movs	r3, #1
 80037a4:	e022      	b.n	80037ec <HAL_I2C_Init+0x1dc>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d10e      	bne.n	80037cc <HAL_I2C_Init+0x1bc>
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	1e58      	subs	r0, r3, #1
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6859      	ldr	r1, [r3, #4]
 80037b6:	460b      	mov	r3, r1
 80037b8:	005b      	lsls	r3, r3, #1
 80037ba:	440b      	add	r3, r1
 80037bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80037c0:	3301      	adds	r3, #1
 80037c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037ca:	e00f      	b.n	80037ec <HAL_I2C_Init+0x1dc>
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	1e58      	subs	r0, r3, #1
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6859      	ldr	r1, [r3, #4]
 80037d4:	460b      	mov	r3, r1
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	440b      	add	r3, r1
 80037da:	0099      	lsls	r1, r3, #2
 80037dc:	440b      	add	r3, r1
 80037de:	fbb0 f3f3 	udiv	r3, r0, r3
 80037e2:	3301      	adds	r3, #1
 80037e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80037ec:	6879      	ldr	r1, [r7, #4]
 80037ee:	6809      	ldr	r1, [r1, #0]
 80037f0:	4313      	orrs	r3, r2
 80037f2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	69da      	ldr	r2, [r3, #28]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6a1b      	ldr	r3, [r3, #32]
 8003806:	431a      	orrs	r2, r3
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	430a      	orrs	r2, r1
 800380e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800381a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	6911      	ldr	r1, [r2, #16]
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	68d2      	ldr	r2, [r2, #12]
 8003826:	4311      	orrs	r1, r2
 8003828:	687a      	ldr	r2, [r7, #4]
 800382a:	6812      	ldr	r2, [r2, #0]
 800382c:	430b      	orrs	r3, r1
 800382e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	695a      	ldr	r2, [r3, #20]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	699b      	ldr	r3, [r3, #24]
 8003842:	431a      	orrs	r2, r3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	430a      	orrs	r2, r1
 800384a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f042 0201 	orr.w	r2, r2, #1
 800385a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2200      	movs	r2, #0
 8003860:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2220      	movs	r2, #32
 8003866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2200      	movs	r2, #0
 800386e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2200      	movs	r2, #0
 8003874:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003878:	2300      	movs	r3, #0
}
 800387a:	4618      	mov	r0, r3
 800387c:	3710      	adds	r7, #16
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	000186a0 	.word	0x000186a0
 8003888:	001e847f 	.word	0x001e847f
 800388c:	003d08ff 	.word	0x003d08ff
 8003890:	431bde83 	.word	0x431bde83
 8003894:	10624dd3 	.word	0x10624dd3

08003898 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b088      	sub	sp, #32
 800389c:	af02      	add	r7, sp, #8
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	607a      	str	r2, [r7, #4]
 80038a2:	461a      	mov	r2, r3
 80038a4:	460b      	mov	r3, r1
 80038a6:	817b      	strh	r3, [r7, #10]
 80038a8:	4613      	mov	r3, r2
 80038aa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80038ac:	f7ff fb0e 	bl	8002ecc <HAL_GetTick>
 80038b0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	2b20      	cmp	r3, #32
 80038bc:	f040 80e0 	bne.w	8003a80 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	9300      	str	r3, [sp, #0]
 80038c4:	2319      	movs	r3, #25
 80038c6:	2201      	movs	r2, #1
 80038c8:	4970      	ldr	r1, [pc, #448]	; (8003a8c <HAL_I2C_Master_Transmit+0x1f4>)
 80038ca:	68f8      	ldr	r0, [r7, #12]
 80038cc:	f000 fc92 	bl	80041f4 <I2C_WaitOnFlagUntilTimeout>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d001      	beq.n	80038da <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80038d6:	2302      	movs	r3, #2
 80038d8:	e0d3      	b.n	8003a82 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d101      	bne.n	80038e8 <HAL_I2C_Master_Transmit+0x50>
 80038e4:	2302      	movs	r3, #2
 80038e6:	e0cc      	b.n	8003a82 <HAL_I2C_Master_Transmit+0x1ea>
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2201      	movs	r2, #1
 80038ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0301 	and.w	r3, r3, #1
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d007      	beq.n	800390e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f042 0201 	orr.w	r2, r2, #1
 800390c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800391c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2221      	movs	r2, #33	; 0x21
 8003922:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2210      	movs	r2, #16
 800392a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2200      	movs	r2, #0
 8003932:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	893a      	ldrh	r2, [r7, #8]
 800393e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003944:	b29a      	uxth	r2, r3
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	4a50      	ldr	r2, [pc, #320]	; (8003a90 <HAL_I2C_Master_Transmit+0x1f8>)
 800394e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003950:	8979      	ldrh	r1, [r7, #10]
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	6a3a      	ldr	r2, [r7, #32]
 8003956:	68f8      	ldr	r0, [r7, #12]
 8003958:	f000 fafc 	bl	8003f54 <I2C_MasterRequestWrite>
 800395c:	4603      	mov	r3, r0
 800395e:	2b00      	cmp	r3, #0
 8003960:	d001      	beq.n	8003966 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e08d      	b.n	8003a82 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003966:	2300      	movs	r3, #0
 8003968:	613b      	str	r3, [r7, #16]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	695b      	ldr	r3, [r3, #20]
 8003970:	613b      	str	r3, [r7, #16]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	699b      	ldr	r3, [r3, #24]
 8003978:	613b      	str	r3, [r7, #16]
 800397a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800397c:	e066      	b.n	8003a4c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800397e:	697a      	ldr	r2, [r7, #20]
 8003980:	6a39      	ldr	r1, [r7, #32]
 8003982:	68f8      	ldr	r0, [r7, #12]
 8003984:	f000 fd0c 	bl	80043a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003988:	4603      	mov	r3, r0
 800398a:	2b00      	cmp	r3, #0
 800398c:	d00d      	beq.n	80039aa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003992:	2b04      	cmp	r3, #4
 8003994:	d107      	bne.n	80039a6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039a4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e06b      	b.n	8003a82 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ae:	781a      	ldrb	r2, [r3, #0]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ba:	1c5a      	adds	r2, r3, #1
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	3b01      	subs	r3, #1
 80039c8:	b29a      	uxth	r2, r3
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039d2:	3b01      	subs	r3, #1
 80039d4:	b29a      	uxth	r2, r3
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	695b      	ldr	r3, [r3, #20]
 80039e0:	f003 0304 	and.w	r3, r3, #4
 80039e4:	2b04      	cmp	r3, #4
 80039e6:	d11b      	bne.n	8003a20 <HAL_I2C_Master_Transmit+0x188>
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d017      	beq.n	8003a20 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f4:	781a      	ldrb	r2, [r3, #0]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a00:	1c5a      	adds	r2, r3, #1
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	3b01      	subs	r3, #1
 8003a0e:	b29a      	uxth	r2, r3
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a18:	3b01      	subs	r3, #1
 8003a1a:	b29a      	uxth	r2, r3
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a20:	697a      	ldr	r2, [r7, #20]
 8003a22:	6a39      	ldr	r1, [r7, #32]
 8003a24:	68f8      	ldr	r0, [r7, #12]
 8003a26:	f000 fcfc 	bl	8004422 <I2C_WaitOnBTFFlagUntilTimeout>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d00d      	beq.n	8003a4c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a34:	2b04      	cmp	r3, #4
 8003a36:	d107      	bne.n	8003a48 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a46:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e01a      	b.n	8003a82 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d194      	bne.n	800397e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2220      	movs	r2, #32
 8003a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	e000      	b.n	8003a82 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003a80:	2302      	movs	r3, #2
  }
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3718      	adds	r7, #24
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	00100002 	.word	0x00100002
 8003a90:	ffff0000 	.word	0xffff0000

08003a94 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b08c      	sub	sp, #48	; 0x30
 8003a98:	af02      	add	r7, sp, #8
 8003a9a:	60f8      	str	r0, [r7, #12]
 8003a9c:	607a      	str	r2, [r7, #4]
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	460b      	mov	r3, r1
 8003aa2:	817b      	strh	r3, [r7, #10]
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003aac:	f7ff fa0e 	bl	8002ecc <HAL_GetTick>
 8003ab0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	2b20      	cmp	r3, #32
 8003abc:	f040 823f 	bne.w	8003f3e <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac2:	9300      	str	r3, [sp, #0]
 8003ac4:	2319      	movs	r3, #25
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	497f      	ldr	r1, [pc, #508]	; (8003cc8 <HAL_I2C_Master_Receive+0x234>)
 8003aca:	68f8      	ldr	r0, [r7, #12]
 8003acc:	f000 fb92 	bl	80041f4 <I2C_WaitOnFlagUntilTimeout>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d001      	beq.n	8003ada <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8003ad6:	2302      	movs	r3, #2
 8003ad8:	e232      	b.n	8003f40 <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d101      	bne.n	8003ae8 <HAL_I2C_Master_Receive+0x54>
 8003ae4:	2302      	movs	r3, #2
 8003ae6:	e22b      	b.n	8003f40 <HAL_I2C_Master_Receive+0x4ac>
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 0301 	and.w	r3, r3, #1
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d007      	beq.n	8003b0e <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f042 0201 	orr.w	r2, r2, #1
 8003b0c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b1c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2222      	movs	r2, #34	; 0x22
 8003b22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2210      	movs	r2, #16
 8003b2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2200      	movs	r2, #0
 8003b32:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	893a      	ldrh	r2, [r7, #8]
 8003b3e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b44:	b29a      	uxth	r2, r3
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	4a5f      	ldr	r2, [pc, #380]	; (8003ccc <HAL_I2C_Master_Receive+0x238>)
 8003b4e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003b50:	8979      	ldrh	r1, [r7, #10]
 8003b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b56:	68f8      	ldr	r0, [r7, #12]
 8003b58:	f000 fa7e 	bl	8004058 <I2C_MasterRequestRead>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d001      	beq.n	8003b66 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e1ec      	b.n	8003f40 <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d113      	bne.n	8003b96 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b6e:	2300      	movs	r3, #0
 8003b70:	61fb      	str	r3, [r7, #28]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	695b      	ldr	r3, [r3, #20]
 8003b78:	61fb      	str	r3, [r7, #28]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	699b      	ldr	r3, [r3, #24]
 8003b80:	61fb      	str	r3, [r7, #28]
 8003b82:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b92:	601a      	str	r2, [r3, #0]
 8003b94:	e1c0      	b.n	8003f18 <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d11e      	bne.n	8003bdc <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bac:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003bae:	b672      	cpsid	i
}
 8003bb0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	61bb      	str	r3, [r7, #24]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	695b      	ldr	r3, [r3, #20]
 8003bbc:	61bb      	str	r3, [r7, #24]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	699b      	ldr	r3, [r3, #24]
 8003bc4:	61bb      	str	r3, [r7, #24]
 8003bc6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bd6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003bd8:	b662      	cpsie	i
}
 8003bda:	e035      	b.n	8003c48 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003be0:	2b02      	cmp	r3, #2
 8003be2:	d11e      	bne.n	8003c22 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bf2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003bf4:	b672      	cpsid	i
}
 8003bf6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	617b      	str	r3, [r7, #20]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	695b      	ldr	r3, [r3, #20]
 8003c02:	617b      	str	r3, [r7, #20]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	699b      	ldr	r3, [r3, #24]
 8003c0a:	617b      	str	r3, [r7, #20]
 8003c0c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c1c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003c1e:	b662      	cpsie	i
}
 8003c20:	e012      	b.n	8003c48 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003c30:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c32:	2300      	movs	r3, #0
 8003c34:	613b      	str	r3, [r7, #16]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	695b      	ldr	r3, [r3, #20]
 8003c3c:	613b      	str	r3, [r7, #16]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	699b      	ldr	r3, [r3, #24]
 8003c44:	613b      	str	r3, [r7, #16]
 8003c46:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003c48:	e166      	b.n	8003f18 <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c4e:	2b03      	cmp	r3, #3
 8003c50:	f200 811f 	bhi.w	8003e92 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d123      	bne.n	8003ca4 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c5e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003c60:	68f8      	ldr	r0, [r7, #12]
 8003c62:	f000 fc1f 	bl	80044a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c66:	4603      	mov	r3, r0
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d001      	beq.n	8003c70 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e167      	b.n	8003f40 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	691a      	ldr	r2, [r3, #16]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c7a:	b2d2      	uxtb	r2, r2
 8003c7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c82:	1c5a      	adds	r2, r3, #1
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c8c:	3b01      	subs	r3, #1
 8003c8e:	b29a      	uxth	r2, r3
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c98:	b29b      	uxth	r3, r3
 8003c9a:	3b01      	subs	r3, #1
 8003c9c:	b29a      	uxth	r2, r3
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003ca2:	e139      	b.n	8003f18 <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	d152      	bne.n	8003d52 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cae:	9300      	str	r3, [sp, #0]
 8003cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	4906      	ldr	r1, [pc, #24]	; (8003cd0 <HAL_I2C_Master_Receive+0x23c>)
 8003cb6:	68f8      	ldr	r0, [r7, #12]
 8003cb8:	f000 fa9c 	bl	80041f4 <I2C_WaitOnFlagUntilTimeout>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d008      	beq.n	8003cd4 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e13c      	b.n	8003f40 <HAL_I2C_Master_Receive+0x4ac>
 8003cc6:	bf00      	nop
 8003cc8:	00100002 	.word	0x00100002
 8003ccc:	ffff0000 	.word	0xffff0000
 8003cd0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003cd4:	b672      	cpsid	i
}
 8003cd6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ce6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	691a      	ldr	r2, [r3, #16]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf2:	b2d2      	uxtb	r2, r2
 8003cf4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfa:	1c5a      	adds	r2, r3, #1
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d04:	3b01      	subs	r3, #1
 8003d06:	b29a      	uxth	r2, r3
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d10:	b29b      	uxth	r3, r3
 8003d12:	3b01      	subs	r3, #1
 8003d14:	b29a      	uxth	r2, r3
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003d1a:	b662      	cpsie	i
}
 8003d1c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	691a      	ldr	r2, [r3, #16]
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d28:	b2d2      	uxtb	r2, r2
 8003d2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d30:	1c5a      	adds	r2, r3, #1
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d3a:	3b01      	subs	r3, #1
 8003d3c:	b29a      	uxth	r2, r3
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	3b01      	subs	r3, #1
 8003d4a:	b29a      	uxth	r2, r3
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003d50:	e0e2      	b.n	8003f18 <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d54:	9300      	str	r3, [sp, #0]
 8003d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d58:	2200      	movs	r2, #0
 8003d5a:	497b      	ldr	r1, [pc, #492]	; (8003f48 <HAL_I2C_Master_Receive+0x4b4>)
 8003d5c:	68f8      	ldr	r0, [r7, #12]
 8003d5e:	f000 fa49 	bl	80041f4 <I2C_WaitOnFlagUntilTimeout>
 8003d62:	4603      	mov	r3, r0
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d001      	beq.n	8003d6c <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e0e9      	b.n	8003f40 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d7a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003d7c:	b672      	cpsid	i
}
 8003d7e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	691a      	ldr	r2, [r3, #16]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8a:	b2d2      	uxtb	r2, r2
 8003d8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d92:	1c5a      	adds	r2, r3, #1
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d9c:	3b01      	subs	r3, #1
 8003d9e:	b29a      	uxth	r2, r3
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	3b01      	subs	r3, #1
 8003dac:	b29a      	uxth	r2, r3
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003db2:	4b66      	ldr	r3, [pc, #408]	; (8003f4c <HAL_I2C_Master_Receive+0x4b8>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	08db      	lsrs	r3, r3, #3
 8003db8:	4a65      	ldr	r2, [pc, #404]	; (8003f50 <HAL_I2C_Master_Receive+0x4bc>)
 8003dba:	fba2 2303 	umull	r2, r3, r2, r3
 8003dbe:	0a1a      	lsrs	r2, r3, #8
 8003dc0:	4613      	mov	r3, r2
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	4413      	add	r3, r2
 8003dc6:	00da      	lsls	r2, r3, #3
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003dcc:	6a3b      	ldr	r3, [r7, #32]
 8003dce:	3b01      	subs	r3, #1
 8003dd0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003dd2:	6a3b      	ldr	r3, [r7, #32]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d118      	bne.n	8003e0a <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2220      	movs	r2, #32
 8003de2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2200      	movs	r2, #0
 8003dea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df2:	f043 0220 	orr.w	r2, r3, #32
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003dfa:	b662      	cpsie	i
}
 8003dfc:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2200      	movs	r2, #0
 8003e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e09a      	b.n	8003f40 <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	695b      	ldr	r3, [r3, #20]
 8003e10:	f003 0304 	and.w	r3, r3, #4
 8003e14:	2b04      	cmp	r3, #4
 8003e16:	d1d9      	bne.n	8003dcc <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e26:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	691a      	ldr	r2, [r3, #16]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e32:	b2d2      	uxtb	r2, r2
 8003e34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3a:	1c5a      	adds	r2, r3, #1
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e44:	3b01      	subs	r3, #1
 8003e46:	b29a      	uxth	r2, r3
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	3b01      	subs	r3, #1
 8003e54:	b29a      	uxth	r2, r3
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003e5a:	b662      	cpsie	i
}
 8003e5c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	691a      	ldr	r2, [r3, #16]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e68:	b2d2      	uxtb	r2, r2
 8003e6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e70:	1c5a      	adds	r2, r3, #1
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e7a:	3b01      	subs	r3, #1
 8003e7c:	b29a      	uxth	r2, r3
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	3b01      	subs	r3, #1
 8003e8a:	b29a      	uxth	r2, r3
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003e90:	e042      	b.n	8003f18 <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e94:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e96:	68f8      	ldr	r0, [r7, #12]
 8003e98:	f000 fb04 	bl	80044a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d001      	beq.n	8003ea6 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e04c      	b.n	8003f40 <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	691a      	ldr	r2, [r3, #16]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb0:	b2d2      	uxtb	r2, r2
 8003eb2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb8:	1c5a      	adds	r2, r3, #1
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ec2:	3b01      	subs	r3, #1
 8003ec4:	b29a      	uxth	r2, r3
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ece:	b29b      	uxth	r3, r3
 8003ed0:	3b01      	subs	r3, #1
 8003ed2:	b29a      	uxth	r2, r3
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	695b      	ldr	r3, [r3, #20]
 8003ede:	f003 0304 	and.w	r3, r3, #4
 8003ee2:	2b04      	cmp	r3, #4
 8003ee4:	d118      	bne.n	8003f18 <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	691a      	ldr	r2, [r3, #16]
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef0:	b2d2      	uxtb	r2, r2
 8003ef2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef8:	1c5a      	adds	r2, r3, #1
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f02:	3b01      	subs	r3, #1
 8003f04:	b29a      	uxth	r2, r3
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	3b01      	subs	r3, #1
 8003f12:	b29a      	uxth	r2, r3
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	f47f ae94 	bne.w	8003c4a <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2220      	movs	r2, #32
 8003f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	e000      	b.n	8003f40 <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 8003f3e:	2302      	movs	r3, #2
  }
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	3728      	adds	r7, #40	; 0x28
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}
 8003f48:	00010004 	.word	0x00010004
 8003f4c:	20000074 	.word	0x20000074
 8003f50:	14f8b589 	.word	0x14f8b589

08003f54 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b088      	sub	sp, #32
 8003f58:	af02      	add	r7, sp, #8
 8003f5a:	60f8      	str	r0, [r7, #12]
 8003f5c:	607a      	str	r2, [r7, #4]
 8003f5e:	603b      	str	r3, [r7, #0]
 8003f60:	460b      	mov	r3, r1
 8003f62:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f68:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	2b08      	cmp	r3, #8
 8003f6e:	d006      	beq.n	8003f7e <I2C_MasterRequestWrite+0x2a>
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d003      	beq.n	8003f7e <I2C_MasterRequestWrite+0x2a>
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003f7c:	d108      	bne.n	8003f90 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f8c:	601a      	str	r2, [r3, #0]
 8003f8e:	e00b      	b.n	8003fa8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f94:	2b12      	cmp	r3, #18
 8003f96:	d107      	bne.n	8003fa8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fa6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	9300      	str	r3, [sp, #0]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003fb4:	68f8      	ldr	r0, [r7, #12]
 8003fb6:	f000 f91d 	bl	80041f4 <I2C_WaitOnFlagUntilTimeout>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d00d      	beq.n	8003fdc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fce:	d103      	bne.n	8003fd8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003fd6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003fd8:	2303      	movs	r3, #3
 8003fda:	e035      	b.n	8004048 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	691b      	ldr	r3, [r3, #16]
 8003fe0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fe4:	d108      	bne.n	8003ff8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003fe6:	897b      	ldrh	r3, [r7, #10]
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	461a      	mov	r2, r3
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003ff4:	611a      	str	r2, [r3, #16]
 8003ff6:	e01b      	b.n	8004030 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003ff8:	897b      	ldrh	r3, [r7, #10]
 8003ffa:	11db      	asrs	r3, r3, #7
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	f003 0306 	and.w	r3, r3, #6
 8004002:	b2db      	uxtb	r3, r3
 8004004:	f063 030f 	orn	r3, r3, #15
 8004008:	b2da      	uxtb	r2, r3
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	490e      	ldr	r1, [pc, #56]	; (8004050 <I2C_MasterRequestWrite+0xfc>)
 8004016:	68f8      	ldr	r0, [r7, #12]
 8004018:	f000 f943 	bl	80042a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800401c:	4603      	mov	r3, r0
 800401e:	2b00      	cmp	r3, #0
 8004020:	d001      	beq.n	8004026 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e010      	b.n	8004048 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004026:	897b      	ldrh	r3, [r7, #10]
 8004028:	b2da      	uxtb	r2, r3
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	4907      	ldr	r1, [pc, #28]	; (8004054 <I2C_MasterRequestWrite+0x100>)
 8004036:	68f8      	ldr	r0, [r7, #12]
 8004038:	f000 f933 	bl	80042a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800403c:	4603      	mov	r3, r0
 800403e:	2b00      	cmp	r3, #0
 8004040:	d001      	beq.n	8004046 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e000      	b.n	8004048 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004046:	2300      	movs	r3, #0
}
 8004048:	4618      	mov	r0, r3
 800404a:	3718      	adds	r7, #24
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}
 8004050:	00010008 	.word	0x00010008
 8004054:	00010002 	.word	0x00010002

08004058 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b088      	sub	sp, #32
 800405c:	af02      	add	r7, sp, #8
 800405e:	60f8      	str	r0, [r7, #12]
 8004060:	607a      	str	r2, [r7, #4]
 8004062:	603b      	str	r3, [r7, #0]
 8004064:	460b      	mov	r3, r1
 8004066:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800406c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800407c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	2b08      	cmp	r3, #8
 8004082:	d006      	beq.n	8004092 <I2C_MasterRequestRead+0x3a>
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	2b01      	cmp	r3, #1
 8004088:	d003      	beq.n	8004092 <I2C_MasterRequestRead+0x3a>
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004090:	d108      	bne.n	80040a4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040a0:	601a      	str	r2, [r3, #0]
 80040a2:	e00b      	b.n	80040bc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a8:	2b11      	cmp	r3, #17
 80040aa:	d107      	bne.n	80040bc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040ba:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	9300      	str	r3, [sp, #0]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2200      	movs	r2, #0
 80040c4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80040c8:	68f8      	ldr	r0, [r7, #12]
 80040ca:	f000 f893 	bl	80041f4 <I2C_WaitOnFlagUntilTimeout>
 80040ce:	4603      	mov	r3, r0
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d00d      	beq.n	80040f0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040e2:	d103      	bne.n	80040ec <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040ea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80040ec:	2303      	movs	r3, #3
 80040ee:	e079      	b.n	80041e4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	691b      	ldr	r3, [r3, #16]
 80040f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040f8:	d108      	bne.n	800410c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80040fa:	897b      	ldrh	r3, [r7, #10]
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	f043 0301 	orr.w	r3, r3, #1
 8004102:	b2da      	uxtb	r2, r3
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	611a      	str	r2, [r3, #16]
 800410a:	e05f      	b.n	80041cc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800410c:	897b      	ldrh	r3, [r7, #10]
 800410e:	11db      	asrs	r3, r3, #7
 8004110:	b2db      	uxtb	r3, r3
 8004112:	f003 0306 	and.w	r3, r3, #6
 8004116:	b2db      	uxtb	r3, r3
 8004118:	f063 030f 	orn	r3, r3, #15
 800411c:	b2da      	uxtb	r2, r3
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	4930      	ldr	r1, [pc, #192]	; (80041ec <I2C_MasterRequestRead+0x194>)
 800412a:	68f8      	ldr	r0, [r7, #12]
 800412c:	f000 f8b9 	bl	80042a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004130:	4603      	mov	r3, r0
 8004132:	2b00      	cmp	r3, #0
 8004134:	d001      	beq.n	800413a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e054      	b.n	80041e4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800413a:	897b      	ldrh	r3, [r7, #10]
 800413c:	b2da      	uxtb	r2, r3
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	687a      	ldr	r2, [r7, #4]
 8004148:	4929      	ldr	r1, [pc, #164]	; (80041f0 <I2C_MasterRequestRead+0x198>)
 800414a:	68f8      	ldr	r0, [r7, #12]
 800414c:	f000 f8a9 	bl	80042a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004150:	4603      	mov	r3, r0
 8004152:	2b00      	cmp	r3, #0
 8004154:	d001      	beq.n	800415a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e044      	b.n	80041e4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800415a:	2300      	movs	r3, #0
 800415c:	613b      	str	r3, [r7, #16]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	695b      	ldr	r3, [r3, #20]
 8004164:	613b      	str	r3, [r7, #16]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	699b      	ldr	r3, [r3, #24]
 800416c:	613b      	str	r3, [r7, #16]
 800416e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800417e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	9300      	str	r3, [sp, #0]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2200      	movs	r2, #0
 8004188:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800418c:	68f8      	ldr	r0, [r7, #12]
 800418e:	f000 f831 	bl	80041f4 <I2C_WaitOnFlagUntilTimeout>
 8004192:	4603      	mov	r3, r0
 8004194:	2b00      	cmp	r3, #0
 8004196:	d00d      	beq.n	80041b4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041a6:	d103      	bne.n	80041b0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041ae:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80041b0:	2303      	movs	r3, #3
 80041b2:	e017      	b.n	80041e4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80041b4:	897b      	ldrh	r3, [r7, #10]
 80041b6:	11db      	asrs	r3, r3, #7
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	f003 0306 	and.w	r3, r3, #6
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	f063 030e 	orn	r3, r3, #14
 80041c4:	b2da      	uxtb	r2, r3
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	4907      	ldr	r1, [pc, #28]	; (80041f0 <I2C_MasterRequestRead+0x198>)
 80041d2:	68f8      	ldr	r0, [r7, #12]
 80041d4:	f000 f865 	bl	80042a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041d8:	4603      	mov	r3, r0
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d001      	beq.n	80041e2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e000      	b.n	80041e4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80041e2:	2300      	movs	r3, #0
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3718      	adds	r7, #24
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}
 80041ec:	00010008 	.word	0x00010008
 80041f0:	00010002 	.word	0x00010002

080041f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b084      	sub	sp, #16
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	60f8      	str	r0, [r7, #12]
 80041fc:	60b9      	str	r1, [r7, #8]
 80041fe:	603b      	str	r3, [r7, #0]
 8004200:	4613      	mov	r3, r2
 8004202:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004204:	e025      	b.n	8004252 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800420c:	d021      	beq.n	8004252 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800420e:	f7fe fe5d 	bl	8002ecc <HAL_GetTick>
 8004212:	4602      	mov	r2, r0
 8004214:	69bb      	ldr	r3, [r7, #24]
 8004216:	1ad3      	subs	r3, r2, r3
 8004218:	683a      	ldr	r2, [r7, #0]
 800421a:	429a      	cmp	r2, r3
 800421c:	d302      	bcc.n	8004224 <I2C_WaitOnFlagUntilTimeout+0x30>
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d116      	bne.n	8004252 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2200      	movs	r2, #0
 8004228:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2220      	movs	r2, #32
 800422e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2200      	movs	r2, #0
 8004236:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800423e:	f043 0220 	orr.w	r2, r3, #32
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2200      	movs	r2, #0
 800424a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e023      	b.n	800429a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	0c1b      	lsrs	r3, r3, #16
 8004256:	b2db      	uxtb	r3, r3
 8004258:	2b01      	cmp	r3, #1
 800425a:	d10d      	bne.n	8004278 <I2C_WaitOnFlagUntilTimeout+0x84>
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	695b      	ldr	r3, [r3, #20]
 8004262:	43da      	mvns	r2, r3
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	4013      	ands	r3, r2
 8004268:	b29b      	uxth	r3, r3
 800426a:	2b00      	cmp	r3, #0
 800426c:	bf0c      	ite	eq
 800426e:	2301      	moveq	r3, #1
 8004270:	2300      	movne	r3, #0
 8004272:	b2db      	uxtb	r3, r3
 8004274:	461a      	mov	r2, r3
 8004276:	e00c      	b.n	8004292 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	699b      	ldr	r3, [r3, #24]
 800427e:	43da      	mvns	r2, r3
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	4013      	ands	r3, r2
 8004284:	b29b      	uxth	r3, r3
 8004286:	2b00      	cmp	r3, #0
 8004288:	bf0c      	ite	eq
 800428a:	2301      	moveq	r3, #1
 800428c:	2300      	movne	r3, #0
 800428e:	b2db      	uxtb	r3, r3
 8004290:	461a      	mov	r2, r3
 8004292:	79fb      	ldrb	r3, [r7, #7]
 8004294:	429a      	cmp	r2, r3
 8004296:	d0b6      	beq.n	8004206 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004298:	2300      	movs	r3, #0
}
 800429a:	4618      	mov	r0, r3
 800429c:	3710      	adds	r7, #16
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}

080042a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80042a2:	b580      	push	{r7, lr}
 80042a4:	b084      	sub	sp, #16
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	60f8      	str	r0, [r7, #12]
 80042aa:	60b9      	str	r1, [r7, #8]
 80042ac:	607a      	str	r2, [r7, #4]
 80042ae:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80042b0:	e051      	b.n	8004356 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	695b      	ldr	r3, [r3, #20]
 80042b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042c0:	d123      	bne.n	800430a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042d0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80042da:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2200      	movs	r2, #0
 80042e0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2220      	movs	r2, #32
 80042e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2200      	movs	r2, #0
 80042ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f6:	f043 0204 	orr.w	r2, r3, #4
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2200      	movs	r2, #0
 8004302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	e046      	b.n	8004398 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004310:	d021      	beq.n	8004356 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004312:	f7fe fddb 	bl	8002ecc <HAL_GetTick>
 8004316:	4602      	mov	r2, r0
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	1ad3      	subs	r3, r2, r3
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	429a      	cmp	r2, r3
 8004320:	d302      	bcc.n	8004328 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d116      	bne.n	8004356 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2200      	movs	r2, #0
 800432c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2220      	movs	r2, #32
 8004332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2200      	movs	r2, #0
 800433a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004342:	f043 0220 	orr.w	r2, r3, #32
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2200      	movs	r2, #0
 800434e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e020      	b.n	8004398 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	0c1b      	lsrs	r3, r3, #16
 800435a:	b2db      	uxtb	r3, r3
 800435c:	2b01      	cmp	r3, #1
 800435e:	d10c      	bne.n	800437a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	695b      	ldr	r3, [r3, #20]
 8004366:	43da      	mvns	r2, r3
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	4013      	ands	r3, r2
 800436c:	b29b      	uxth	r3, r3
 800436e:	2b00      	cmp	r3, #0
 8004370:	bf14      	ite	ne
 8004372:	2301      	movne	r3, #1
 8004374:	2300      	moveq	r3, #0
 8004376:	b2db      	uxtb	r3, r3
 8004378:	e00b      	b.n	8004392 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	699b      	ldr	r3, [r3, #24]
 8004380:	43da      	mvns	r2, r3
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	4013      	ands	r3, r2
 8004386:	b29b      	uxth	r3, r3
 8004388:	2b00      	cmp	r3, #0
 800438a:	bf14      	ite	ne
 800438c:	2301      	movne	r3, #1
 800438e:	2300      	moveq	r3, #0
 8004390:	b2db      	uxtb	r3, r3
 8004392:	2b00      	cmp	r3, #0
 8004394:	d18d      	bne.n	80042b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004396:	2300      	movs	r3, #0
}
 8004398:	4618      	mov	r0, r3
 800439a:	3710      	adds	r7, #16
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}

080043a0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b084      	sub	sp, #16
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	60f8      	str	r0, [r7, #12]
 80043a8:	60b9      	str	r1, [r7, #8]
 80043aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80043ac:	e02d      	b.n	800440a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80043ae:	68f8      	ldr	r0, [r7, #12]
 80043b0:	f000 f8ce 	bl	8004550 <I2C_IsAcknowledgeFailed>
 80043b4:	4603      	mov	r3, r0
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d001      	beq.n	80043be <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e02d      	b.n	800441a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043c4:	d021      	beq.n	800440a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043c6:	f7fe fd81 	bl	8002ecc <HAL_GetTick>
 80043ca:	4602      	mov	r2, r0
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	1ad3      	subs	r3, r2, r3
 80043d0:	68ba      	ldr	r2, [r7, #8]
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d302      	bcc.n	80043dc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d116      	bne.n	800440a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2200      	movs	r2, #0
 80043e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2220      	movs	r2, #32
 80043e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2200      	movs	r2, #0
 80043ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f6:	f043 0220 	orr.w	r2, r3, #32
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2200      	movs	r2, #0
 8004402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e007      	b.n	800441a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	695b      	ldr	r3, [r3, #20]
 8004410:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004414:	2b80      	cmp	r3, #128	; 0x80
 8004416:	d1ca      	bne.n	80043ae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004418:	2300      	movs	r3, #0
}
 800441a:	4618      	mov	r0, r3
 800441c:	3710      	adds	r7, #16
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}

08004422 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004422:	b580      	push	{r7, lr}
 8004424:	b084      	sub	sp, #16
 8004426:	af00      	add	r7, sp, #0
 8004428:	60f8      	str	r0, [r7, #12]
 800442a:	60b9      	str	r1, [r7, #8]
 800442c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800442e:	e02d      	b.n	800448c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004430:	68f8      	ldr	r0, [r7, #12]
 8004432:	f000 f88d 	bl	8004550 <I2C_IsAcknowledgeFailed>
 8004436:	4603      	mov	r3, r0
 8004438:	2b00      	cmp	r3, #0
 800443a:	d001      	beq.n	8004440 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	e02d      	b.n	800449c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004446:	d021      	beq.n	800448c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004448:	f7fe fd40 	bl	8002ecc <HAL_GetTick>
 800444c:	4602      	mov	r2, r0
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	68ba      	ldr	r2, [r7, #8]
 8004454:	429a      	cmp	r2, r3
 8004456:	d302      	bcc.n	800445e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d116      	bne.n	800448c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2200      	movs	r2, #0
 8004462:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2220      	movs	r2, #32
 8004468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2200      	movs	r2, #0
 8004470:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004478:	f043 0220 	orr.w	r2, r3, #32
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2200      	movs	r2, #0
 8004484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	e007      	b.n	800449c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	695b      	ldr	r3, [r3, #20]
 8004492:	f003 0304 	and.w	r3, r3, #4
 8004496:	2b04      	cmp	r3, #4
 8004498:	d1ca      	bne.n	8004430 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800449a:	2300      	movs	r3, #0
}
 800449c:	4618      	mov	r0, r3
 800449e:	3710      	adds	r7, #16
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}

080044a4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	60f8      	str	r0, [r7, #12]
 80044ac:	60b9      	str	r1, [r7, #8]
 80044ae:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80044b0:	e042      	b.n	8004538 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	695b      	ldr	r3, [r3, #20]
 80044b8:	f003 0310 	and.w	r3, r3, #16
 80044bc:	2b10      	cmp	r3, #16
 80044be:	d119      	bne.n	80044f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f06f 0210 	mvn.w	r2, #16
 80044c8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2200      	movs	r2, #0
 80044ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2220      	movs	r2, #32
 80044d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2200      	movs	r2, #0
 80044dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2200      	movs	r2, #0
 80044ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	e029      	b.n	8004548 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044f4:	f7fe fcea 	bl	8002ecc <HAL_GetTick>
 80044f8:	4602      	mov	r2, r0
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	68ba      	ldr	r2, [r7, #8]
 8004500:	429a      	cmp	r2, r3
 8004502:	d302      	bcc.n	800450a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d116      	bne.n	8004538 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2200      	movs	r2, #0
 800450e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2220      	movs	r2, #32
 8004514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2200      	movs	r2, #0
 800451c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004524:	f043 0220 	orr.w	r2, r3, #32
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2200      	movs	r2, #0
 8004530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	e007      	b.n	8004548 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	695b      	ldr	r3, [r3, #20]
 800453e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004542:	2b40      	cmp	r3, #64	; 0x40
 8004544:	d1b5      	bne.n	80044b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004546:	2300      	movs	r3, #0
}
 8004548:	4618      	mov	r0, r3
 800454a:	3710      	adds	r7, #16
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}

08004550 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004550:	b480      	push	{r7}
 8004552:	b083      	sub	sp, #12
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	695b      	ldr	r3, [r3, #20]
 800455e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004562:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004566:	d11b      	bne.n	80045a0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004570:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2200      	movs	r2, #0
 8004576:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2220      	movs	r2, #32
 800457c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800458c:	f043 0204 	orr.w	r2, r3, #4
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2200      	movs	r2, #0
 8004598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	e000      	b.n	80045a2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80045a0:	2300      	movs	r3, #0
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	370c      	adds	r7, #12
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bc80      	pop	{r7}
 80045aa:	4770      	bx	lr

080045ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b086      	sub	sp, #24
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d101      	bne.n	80045be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e26c      	b.n	8004a98 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 0301 	and.w	r3, r3, #1
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	f000 8087 	beq.w	80046da <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80045cc:	4b92      	ldr	r3, [pc, #584]	; (8004818 <HAL_RCC_OscConfig+0x26c>)
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	f003 030c 	and.w	r3, r3, #12
 80045d4:	2b04      	cmp	r3, #4
 80045d6:	d00c      	beq.n	80045f2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80045d8:	4b8f      	ldr	r3, [pc, #572]	; (8004818 <HAL_RCC_OscConfig+0x26c>)
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	f003 030c 	and.w	r3, r3, #12
 80045e0:	2b08      	cmp	r3, #8
 80045e2:	d112      	bne.n	800460a <HAL_RCC_OscConfig+0x5e>
 80045e4:	4b8c      	ldr	r3, [pc, #560]	; (8004818 <HAL_RCC_OscConfig+0x26c>)
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045f0:	d10b      	bne.n	800460a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045f2:	4b89      	ldr	r3, [pc, #548]	; (8004818 <HAL_RCC_OscConfig+0x26c>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d06c      	beq.n	80046d8 <HAL_RCC_OscConfig+0x12c>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d168      	bne.n	80046d8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e246      	b.n	8004a98 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004612:	d106      	bne.n	8004622 <HAL_RCC_OscConfig+0x76>
 8004614:	4b80      	ldr	r3, [pc, #512]	; (8004818 <HAL_RCC_OscConfig+0x26c>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a7f      	ldr	r2, [pc, #508]	; (8004818 <HAL_RCC_OscConfig+0x26c>)
 800461a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800461e:	6013      	str	r3, [r2, #0]
 8004620:	e02e      	b.n	8004680 <HAL_RCC_OscConfig+0xd4>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d10c      	bne.n	8004644 <HAL_RCC_OscConfig+0x98>
 800462a:	4b7b      	ldr	r3, [pc, #492]	; (8004818 <HAL_RCC_OscConfig+0x26c>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a7a      	ldr	r2, [pc, #488]	; (8004818 <HAL_RCC_OscConfig+0x26c>)
 8004630:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004634:	6013      	str	r3, [r2, #0]
 8004636:	4b78      	ldr	r3, [pc, #480]	; (8004818 <HAL_RCC_OscConfig+0x26c>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a77      	ldr	r2, [pc, #476]	; (8004818 <HAL_RCC_OscConfig+0x26c>)
 800463c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004640:	6013      	str	r3, [r2, #0]
 8004642:	e01d      	b.n	8004680 <HAL_RCC_OscConfig+0xd4>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800464c:	d10c      	bne.n	8004668 <HAL_RCC_OscConfig+0xbc>
 800464e:	4b72      	ldr	r3, [pc, #456]	; (8004818 <HAL_RCC_OscConfig+0x26c>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a71      	ldr	r2, [pc, #452]	; (8004818 <HAL_RCC_OscConfig+0x26c>)
 8004654:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004658:	6013      	str	r3, [r2, #0]
 800465a:	4b6f      	ldr	r3, [pc, #444]	; (8004818 <HAL_RCC_OscConfig+0x26c>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a6e      	ldr	r2, [pc, #440]	; (8004818 <HAL_RCC_OscConfig+0x26c>)
 8004660:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004664:	6013      	str	r3, [r2, #0]
 8004666:	e00b      	b.n	8004680 <HAL_RCC_OscConfig+0xd4>
 8004668:	4b6b      	ldr	r3, [pc, #428]	; (8004818 <HAL_RCC_OscConfig+0x26c>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a6a      	ldr	r2, [pc, #424]	; (8004818 <HAL_RCC_OscConfig+0x26c>)
 800466e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004672:	6013      	str	r3, [r2, #0]
 8004674:	4b68      	ldr	r3, [pc, #416]	; (8004818 <HAL_RCC_OscConfig+0x26c>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a67      	ldr	r2, [pc, #412]	; (8004818 <HAL_RCC_OscConfig+0x26c>)
 800467a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800467e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d013      	beq.n	80046b0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004688:	f7fe fc20 	bl	8002ecc <HAL_GetTick>
 800468c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800468e:	e008      	b.n	80046a2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004690:	f7fe fc1c 	bl	8002ecc <HAL_GetTick>
 8004694:	4602      	mov	r2, r0
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	1ad3      	subs	r3, r2, r3
 800469a:	2b64      	cmp	r3, #100	; 0x64
 800469c:	d901      	bls.n	80046a2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800469e:	2303      	movs	r3, #3
 80046a0:	e1fa      	b.n	8004a98 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046a2:	4b5d      	ldr	r3, [pc, #372]	; (8004818 <HAL_RCC_OscConfig+0x26c>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d0f0      	beq.n	8004690 <HAL_RCC_OscConfig+0xe4>
 80046ae:	e014      	b.n	80046da <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046b0:	f7fe fc0c 	bl	8002ecc <HAL_GetTick>
 80046b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046b6:	e008      	b.n	80046ca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046b8:	f7fe fc08 	bl	8002ecc <HAL_GetTick>
 80046bc:	4602      	mov	r2, r0
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	2b64      	cmp	r3, #100	; 0x64
 80046c4:	d901      	bls.n	80046ca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80046c6:	2303      	movs	r3, #3
 80046c8:	e1e6      	b.n	8004a98 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046ca:	4b53      	ldr	r3, [pc, #332]	; (8004818 <HAL_RCC_OscConfig+0x26c>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d1f0      	bne.n	80046b8 <HAL_RCC_OscConfig+0x10c>
 80046d6:	e000      	b.n	80046da <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 0302 	and.w	r3, r3, #2
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d063      	beq.n	80047ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80046e6:	4b4c      	ldr	r3, [pc, #304]	; (8004818 <HAL_RCC_OscConfig+0x26c>)
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	f003 030c 	and.w	r3, r3, #12
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d00b      	beq.n	800470a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80046f2:	4b49      	ldr	r3, [pc, #292]	; (8004818 <HAL_RCC_OscConfig+0x26c>)
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	f003 030c 	and.w	r3, r3, #12
 80046fa:	2b08      	cmp	r3, #8
 80046fc:	d11c      	bne.n	8004738 <HAL_RCC_OscConfig+0x18c>
 80046fe:	4b46      	ldr	r3, [pc, #280]	; (8004818 <HAL_RCC_OscConfig+0x26c>)
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004706:	2b00      	cmp	r3, #0
 8004708:	d116      	bne.n	8004738 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800470a:	4b43      	ldr	r3, [pc, #268]	; (8004818 <HAL_RCC_OscConfig+0x26c>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f003 0302 	and.w	r3, r3, #2
 8004712:	2b00      	cmp	r3, #0
 8004714:	d005      	beq.n	8004722 <HAL_RCC_OscConfig+0x176>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	691b      	ldr	r3, [r3, #16]
 800471a:	2b01      	cmp	r3, #1
 800471c:	d001      	beq.n	8004722 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	e1ba      	b.n	8004a98 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004722:	4b3d      	ldr	r3, [pc, #244]	; (8004818 <HAL_RCC_OscConfig+0x26c>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	695b      	ldr	r3, [r3, #20]
 800472e:	00db      	lsls	r3, r3, #3
 8004730:	4939      	ldr	r1, [pc, #228]	; (8004818 <HAL_RCC_OscConfig+0x26c>)
 8004732:	4313      	orrs	r3, r2
 8004734:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004736:	e03a      	b.n	80047ae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	691b      	ldr	r3, [r3, #16]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d020      	beq.n	8004782 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004740:	4b36      	ldr	r3, [pc, #216]	; (800481c <HAL_RCC_OscConfig+0x270>)
 8004742:	2201      	movs	r2, #1
 8004744:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004746:	f7fe fbc1 	bl	8002ecc <HAL_GetTick>
 800474a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800474c:	e008      	b.n	8004760 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800474e:	f7fe fbbd 	bl	8002ecc <HAL_GetTick>
 8004752:	4602      	mov	r2, r0
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	1ad3      	subs	r3, r2, r3
 8004758:	2b02      	cmp	r3, #2
 800475a:	d901      	bls.n	8004760 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800475c:	2303      	movs	r3, #3
 800475e:	e19b      	b.n	8004a98 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004760:	4b2d      	ldr	r3, [pc, #180]	; (8004818 <HAL_RCC_OscConfig+0x26c>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 0302 	and.w	r3, r3, #2
 8004768:	2b00      	cmp	r3, #0
 800476a:	d0f0      	beq.n	800474e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800476c:	4b2a      	ldr	r3, [pc, #168]	; (8004818 <HAL_RCC_OscConfig+0x26c>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	695b      	ldr	r3, [r3, #20]
 8004778:	00db      	lsls	r3, r3, #3
 800477a:	4927      	ldr	r1, [pc, #156]	; (8004818 <HAL_RCC_OscConfig+0x26c>)
 800477c:	4313      	orrs	r3, r2
 800477e:	600b      	str	r3, [r1, #0]
 8004780:	e015      	b.n	80047ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004782:	4b26      	ldr	r3, [pc, #152]	; (800481c <HAL_RCC_OscConfig+0x270>)
 8004784:	2200      	movs	r2, #0
 8004786:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004788:	f7fe fba0 	bl	8002ecc <HAL_GetTick>
 800478c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800478e:	e008      	b.n	80047a2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004790:	f7fe fb9c 	bl	8002ecc <HAL_GetTick>
 8004794:	4602      	mov	r2, r0
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	2b02      	cmp	r3, #2
 800479c:	d901      	bls.n	80047a2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800479e:	2303      	movs	r3, #3
 80047a0:	e17a      	b.n	8004a98 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047a2:	4b1d      	ldr	r3, [pc, #116]	; (8004818 <HAL_RCC_OscConfig+0x26c>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 0302 	and.w	r3, r3, #2
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d1f0      	bne.n	8004790 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 0308 	and.w	r3, r3, #8
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d03a      	beq.n	8004830 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	699b      	ldr	r3, [r3, #24]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d019      	beq.n	80047f6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047c2:	4b17      	ldr	r3, [pc, #92]	; (8004820 <HAL_RCC_OscConfig+0x274>)
 80047c4:	2201      	movs	r2, #1
 80047c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047c8:	f7fe fb80 	bl	8002ecc <HAL_GetTick>
 80047cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047ce:	e008      	b.n	80047e2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047d0:	f7fe fb7c 	bl	8002ecc <HAL_GetTick>
 80047d4:	4602      	mov	r2, r0
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	1ad3      	subs	r3, r2, r3
 80047da:	2b02      	cmp	r3, #2
 80047dc:	d901      	bls.n	80047e2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80047de:	2303      	movs	r3, #3
 80047e0:	e15a      	b.n	8004a98 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047e2:	4b0d      	ldr	r3, [pc, #52]	; (8004818 <HAL_RCC_OscConfig+0x26c>)
 80047e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e6:	f003 0302 	and.w	r3, r3, #2
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d0f0      	beq.n	80047d0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80047ee:	2001      	movs	r0, #1
 80047f0:	f000 fad8 	bl	8004da4 <RCC_Delay>
 80047f4:	e01c      	b.n	8004830 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047f6:	4b0a      	ldr	r3, [pc, #40]	; (8004820 <HAL_RCC_OscConfig+0x274>)
 80047f8:	2200      	movs	r2, #0
 80047fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047fc:	f7fe fb66 	bl	8002ecc <HAL_GetTick>
 8004800:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004802:	e00f      	b.n	8004824 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004804:	f7fe fb62 	bl	8002ecc <HAL_GetTick>
 8004808:	4602      	mov	r2, r0
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	1ad3      	subs	r3, r2, r3
 800480e:	2b02      	cmp	r3, #2
 8004810:	d908      	bls.n	8004824 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004812:	2303      	movs	r3, #3
 8004814:	e140      	b.n	8004a98 <HAL_RCC_OscConfig+0x4ec>
 8004816:	bf00      	nop
 8004818:	40021000 	.word	0x40021000
 800481c:	42420000 	.word	0x42420000
 8004820:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004824:	4b9e      	ldr	r3, [pc, #632]	; (8004aa0 <HAL_RCC_OscConfig+0x4f4>)
 8004826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004828:	f003 0302 	and.w	r3, r3, #2
 800482c:	2b00      	cmp	r3, #0
 800482e:	d1e9      	bne.n	8004804 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f003 0304 	and.w	r3, r3, #4
 8004838:	2b00      	cmp	r3, #0
 800483a:	f000 80a6 	beq.w	800498a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800483e:	2300      	movs	r3, #0
 8004840:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004842:	4b97      	ldr	r3, [pc, #604]	; (8004aa0 <HAL_RCC_OscConfig+0x4f4>)
 8004844:	69db      	ldr	r3, [r3, #28]
 8004846:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800484a:	2b00      	cmp	r3, #0
 800484c:	d10d      	bne.n	800486a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800484e:	4b94      	ldr	r3, [pc, #592]	; (8004aa0 <HAL_RCC_OscConfig+0x4f4>)
 8004850:	69db      	ldr	r3, [r3, #28]
 8004852:	4a93      	ldr	r2, [pc, #588]	; (8004aa0 <HAL_RCC_OscConfig+0x4f4>)
 8004854:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004858:	61d3      	str	r3, [r2, #28]
 800485a:	4b91      	ldr	r3, [pc, #580]	; (8004aa0 <HAL_RCC_OscConfig+0x4f4>)
 800485c:	69db      	ldr	r3, [r3, #28]
 800485e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004862:	60bb      	str	r3, [r7, #8]
 8004864:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004866:	2301      	movs	r3, #1
 8004868:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800486a:	4b8e      	ldr	r3, [pc, #568]	; (8004aa4 <HAL_RCC_OscConfig+0x4f8>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004872:	2b00      	cmp	r3, #0
 8004874:	d118      	bne.n	80048a8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004876:	4b8b      	ldr	r3, [pc, #556]	; (8004aa4 <HAL_RCC_OscConfig+0x4f8>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a8a      	ldr	r2, [pc, #552]	; (8004aa4 <HAL_RCC_OscConfig+0x4f8>)
 800487c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004880:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004882:	f7fe fb23 	bl	8002ecc <HAL_GetTick>
 8004886:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004888:	e008      	b.n	800489c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800488a:	f7fe fb1f 	bl	8002ecc <HAL_GetTick>
 800488e:	4602      	mov	r2, r0
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	1ad3      	subs	r3, r2, r3
 8004894:	2b64      	cmp	r3, #100	; 0x64
 8004896:	d901      	bls.n	800489c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004898:	2303      	movs	r3, #3
 800489a:	e0fd      	b.n	8004a98 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800489c:	4b81      	ldr	r3, [pc, #516]	; (8004aa4 <HAL_RCC_OscConfig+0x4f8>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d0f0      	beq.n	800488a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	68db      	ldr	r3, [r3, #12]
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d106      	bne.n	80048be <HAL_RCC_OscConfig+0x312>
 80048b0:	4b7b      	ldr	r3, [pc, #492]	; (8004aa0 <HAL_RCC_OscConfig+0x4f4>)
 80048b2:	6a1b      	ldr	r3, [r3, #32]
 80048b4:	4a7a      	ldr	r2, [pc, #488]	; (8004aa0 <HAL_RCC_OscConfig+0x4f4>)
 80048b6:	f043 0301 	orr.w	r3, r3, #1
 80048ba:	6213      	str	r3, [r2, #32]
 80048bc:	e02d      	b.n	800491a <HAL_RCC_OscConfig+0x36e>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	68db      	ldr	r3, [r3, #12]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d10c      	bne.n	80048e0 <HAL_RCC_OscConfig+0x334>
 80048c6:	4b76      	ldr	r3, [pc, #472]	; (8004aa0 <HAL_RCC_OscConfig+0x4f4>)
 80048c8:	6a1b      	ldr	r3, [r3, #32]
 80048ca:	4a75      	ldr	r2, [pc, #468]	; (8004aa0 <HAL_RCC_OscConfig+0x4f4>)
 80048cc:	f023 0301 	bic.w	r3, r3, #1
 80048d0:	6213      	str	r3, [r2, #32]
 80048d2:	4b73      	ldr	r3, [pc, #460]	; (8004aa0 <HAL_RCC_OscConfig+0x4f4>)
 80048d4:	6a1b      	ldr	r3, [r3, #32]
 80048d6:	4a72      	ldr	r2, [pc, #456]	; (8004aa0 <HAL_RCC_OscConfig+0x4f4>)
 80048d8:	f023 0304 	bic.w	r3, r3, #4
 80048dc:	6213      	str	r3, [r2, #32]
 80048de:	e01c      	b.n	800491a <HAL_RCC_OscConfig+0x36e>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	68db      	ldr	r3, [r3, #12]
 80048e4:	2b05      	cmp	r3, #5
 80048e6:	d10c      	bne.n	8004902 <HAL_RCC_OscConfig+0x356>
 80048e8:	4b6d      	ldr	r3, [pc, #436]	; (8004aa0 <HAL_RCC_OscConfig+0x4f4>)
 80048ea:	6a1b      	ldr	r3, [r3, #32]
 80048ec:	4a6c      	ldr	r2, [pc, #432]	; (8004aa0 <HAL_RCC_OscConfig+0x4f4>)
 80048ee:	f043 0304 	orr.w	r3, r3, #4
 80048f2:	6213      	str	r3, [r2, #32]
 80048f4:	4b6a      	ldr	r3, [pc, #424]	; (8004aa0 <HAL_RCC_OscConfig+0x4f4>)
 80048f6:	6a1b      	ldr	r3, [r3, #32]
 80048f8:	4a69      	ldr	r2, [pc, #420]	; (8004aa0 <HAL_RCC_OscConfig+0x4f4>)
 80048fa:	f043 0301 	orr.w	r3, r3, #1
 80048fe:	6213      	str	r3, [r2, #32]
 8004900:	e00b      	b.n	800491a <HAL_RCC_OscConfig+0x36e>
 8004902:	4b67      	ldr	r3, [pc, #412]	; (8004aa0 <HAL_RCC_OscConfig+0x4f4>)
 8004904:	6a1b      	ldr	r3, [r3, #32]
 8004906:	4a66      	ldr	r2, [pc, #408]	; (8004aa0 <HAL_RCC_OscConfig+0x4f4>)
 8004908:	f023 0301 	bic.w	r3, r3, #1
 800490c:	6213      	str	r3, [r2, #32]
 800490e:	4b64      	ldr	r3, [pc, #400]	; (8004aa0 <HAL_RCC_OscConfig+0x4f4>)
 8004910:	6a1b      	ldr	r3, [r3, #32]
 8004912:	4a63      	ldr	r2, [pc, #396]	; (8004aa0 <HAL_RCC_OscConfig+0x4f4>)
 8004914:	f023 0304 	bic.w	r3, r3, #4
 8004918:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	68db      	ldr	r3, [r3, #12]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d015      	beq.n	800494e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004922:	f7fe fad3 	bl	8002ecc <HAL_GetTick>
 8004926:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004928:	e00a      	b.n	8004940 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800492a:	f7fe facf 	bl	8002ecc <HAL_GetTick>
 800492e:	4602      	mov	r2, r0
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	1ad3      	subs	r3, r2, r3
 8004934:	f241 3288 	movw	r2, #5000	; 0x1388
 8004938:	4293      	cmp	r3, r2
 800493a:	d901      	bls.n	8004940 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800493c:	2303      	movs	r3, #3
 800493e:	e0ab      	b.n	8004a98 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004940:	4b57      	ldr	r3, [pc, #348]	; (8004aa0 <HAL_RCC_OscConfig+0x4f4>)
 8004942:	6a1b      	ldr	r3, [r3, #32]
 8004944:	f003 0302 	and.w	r3, r3, #2
 8004948:	2b00      	cmp	r3, #0
 800494a:	d0ee      	beq.n	800492a <HAL_RCC_OscConfig+0x37e>
 800494c:	e014      	b.n	8004978 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800494e:	f7fe fabd 	bl	8002ecc <HAL_GetTick>
 8004952:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004954:	e00a      	b.n	800496c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004956:	f7fe fab9 	bl	8002ecc <HAL_GetTick>
 800495a:	4602      	mov	r2, r0
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	1ad3      	subs	r3, r2, r3
 8004960:	f241 3288 	movw	r2, #5000	; 0x1388
 8004964:	4293      	cmp	r3, r2
 8004966:	d901      	bls.n	800496c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004968:	2303      	movs	r3, #3
 800496a:	e095      	b.n	8004a98 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800496c:	4b4c      	ldr	r3, [pc, #304]	; (8004aa0 <HAL_RCC_OscConfig+0x4f4>)
 800496e:	6a1b      	ldr	r3, [r3, #32]
 8004970:	f003 0302 	and.w	r3, r3, #2
 8004974:	2b00      	cmp	r3, #0
 8004976:	d1ee      	bne.n	8004956 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004978:	7dfb      	ldrb	r3, [r7, #23]
 800497a:	2b01      	cmp	r3, #1
 800497c:	d105      	bne.n	800498a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800497e:	4b48      	ldr	r3, [pc, #288]	; (8004aa0 <HAL_RCC_OscConfig+0x4f4>)
 8004980:	69db      	ldr	r3, [r3, #28]
 8004982:	4a47      	ldr	r2, [pc, #284]	; (8004aa0 <HAL_RCC_OscConfig+0x4f4>)
 8004984:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004988:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	69db      	ldr	r3, [r3, #28]
 800498e:	2b00      	cmp	r3, #0
 8004990:	f000 8081 	beq.w	8004a96 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004994:	4b42      	ldr	r3, [pc, #264]	; (8004aa0 <HAL_RCC_OscConfig+0x4f4>)
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	f003 030c 	and.w	r3, r3, #12
 800499c:	2b08      	cmp	r3, #8
 800499e:	d061      	beq.n	8004a64 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	69db      	ldr	r3, [r3, #28]
 80049a4:	2b02      	cmp	r3, #2
 80049a6:	d146      	bne.n	8004a36 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049a8:	4b3f      	ldr	r3, [pc, #252]	; (8004aa8 <HAL_RCC_OscConfig+0x4fc>)
 80049aa:	2200      	movs	r2, #0
 80049ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049ae:	f7fe fa8d 	bl	8002ecc <HAL_GetTick>
 80049b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80049b4:	e008      	b.n	80049c8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049b6:	f7fe fa89 	bl	8002ecc <HAL_GetTick>
 80049ba:	4602      	mov	r2, r0
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	1ad3      	subs	r3, r2, r3
 80049c0:	2b02      	cmp	r3, #2
 80049c2:	d901      	bls.n	80049c8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80049c4:	2303      	movs	r3, #3
 80049c6:	e067      	b.n	8004a98 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80049c8:	4b35      	ldr	r3, [pc, #212]	; (8004aa0 <HAL_RCC_OscConfig+0x4f4>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d1f0      	bne.n	80049b6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6a1b      	ldr	r3, [r3, #32]
 80049d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049dc:	d108      	bne.n	80049f0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80049de:	4b30      	ldr	r3, [pc, #192]	; (8004aa0 <HAL_RCC_OscConfig+0x4f4>)
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	492d      	ldr	r1, [pc, #180]	; (8004aa0 <HAL_RCC_OscConfig+0x4f4>)
 80049ec:	4313      	orrs	r3, r2
 80049ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049f0:	4b2b      	ldr	r3, [pc, #172]	; (8004aa0 <HAL_RCC_OscConfig+0x4f4>)
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6a19      	ldr	r1, [r3, #32]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a00:	430b      	orrs	r3, r1
 8004a02:	4927      	ldr	r1, [pc, #156]	; (8004aa0 <HAL_RCC_OscConfig+0x4f4>)
 8004a04:	4313      	orrs	r3, r2
 8004a06:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a08:	4b27      	ldr	r3, [pc, #156]	; (8004aa8 <HAL_RCC_OscConfig+0x4fc>)
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a0e:	f7fe fa5d 	bl	8002ecc <HAL_GetTick>
 8004a12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a14:	e008      	b.n	8004a28 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a16:	f7fe fa59 	bl	8002ecc <HAL_GetTick>
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	1ad3      	subs	r3, r2, r3
 8004a20:	2b02      	cmp	r3, #2
 8004a22:	d901      	bls.n	8004a28 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004a24:	2303      	movs	r3, #3
 8004a26:	e037      	b.n	8004a98 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a28:	4b1d      	ldr	r3, [pc, #116]	; (8004aa0 <HAL_RCC_OscConfig+0x4f4>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d0f0      	beq.n	8004a16 <HAL_RCC_OscConfig+0x46a>
 8004a34:	e02f      	b.n	8004a96 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a36:	4b1c      	ldr	r3, [pc, #112]	; (8004aa8 <HAL_RCC_OscConfig+0x4fc>)
 8004a38:	2200      	movs	r2, #0
 8004a3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a3c:	f7fe fa46 	bl	8002ecc <HAL_GetTick>
 8004a40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a42:	e008      	b.n	8004a56 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a44:	f7fe fa42 	bl	8002ecc <HAL_GetTick>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	1ad3      	subs	r3, r2, r3
 8004a4e:	2b02      	cmp	r3, #2
 8004a50:	d901      	bls.n	8004a56 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004a52:	2303      	movs	r3, #3
 8004a54:	e020      	b.n	8004a98 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a56:	4b12      	ldr	r3, [pc, #72]	; (8004aa0 <HAL_RCC_OscConfig+0x4f4>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d1f0      	bne.n	8004a44 <HAL_RCC_OscConfig+0x498>
 8004a62:	e018      	b.n	8004a96 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	69db      	ldr	r3, [r3, #28]
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d101      	bne.n	8004a70 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	e013      	b.n	8004a98 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004a70:	4b0b      	ldr	r3, [pc, #44]	; (8004aa0 <HAL_RCC_OscConfig+0x4f4>)
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6a1b      	ldr	r3, [r3, #32]
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d106      	bne.n	8004a92 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	d001      	beq.n	8004a96 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e000      	b.n	8004a98 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004a96:	2300      	movs	r3, #0
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3718      	adds	r7, #24
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}
 8004aa0:	40021000 	.word	0x40021000
 8004aa4:	40007000 	.word	0x40007000
 8004aa8:	42420060 	.word	0x42420060

08004aac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b084      	sub	sp, #16
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
 8004ab4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d101      	bne.n	8004ac0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	e0d0      	b.n	8004c62 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ac0:	4b6a      	ldr	r3, [pc, #424]	; (8004c6c <HAL_RCC_ClockConfig+0x1c0>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 0307 	and.w	r3, r3, #7
 8004ac8:	683a      	ldr	r2, [r7, #0]
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d910      	bls.n	8004af0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ace:	4b67      	ldr	r3, [pc, #412]	; (8004c6c <HAL_RCC_ClockConfig+0x1c0>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f023 0207 	bic.w	r2, r3, #7
 8004ad6:	4965      	ldr	r1, [pc, #404]	; (8004c6c <HAL_RCC_ClockConfig+0x1c0>)
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ade:	4b63      	ldr	r3, [pc, #396]	; (8004c6c <HAL_RCC_ClockConfig+0x1c0>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 0307 	and.w	r3, r3, #7
 8004ae6:	683a      	ldr	r2, [r7, #0]
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d001      	beq.n	8004af0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	e0b8      	b.n	8004c62 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f003 0302 	and.w	r3, r3, #2
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d020      	beq.n	8004b3e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 0304 	and.w	r3, r3, #4
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d005      	beq.n	8004b14 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b08:	4b59      	ldr	r3, [pc, #356]	; (8004c70 <HAL_RCC_ClockConfig+0x1c4>)
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	4a58      	ldr	r2, [pc, #352]	; (8004c70 <HAL_RCC_ClockConfig+0x1c4>)
 8004b0e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004b12:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f003 0308 	and.w	r3, r3, #8
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d005      	beq.n	8004b2c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b20:	4b53      	ldr	r3, [pc, #332]	; (8004c70 <HAL_RCC_ClockConfig+0x1c4>)
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	4a52      	ldr	r2, [pc, #328]	; (8004c70 <HAL_RCC_ClockConfig+0x1c4>)
 8004b26:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004b2a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b2c:	4b50      	ldr	r3, [pc, #320]	; (8004c70 <HAL_RCC_ClockConfig+0x1c4>)
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	494d      	ldr	r1, [pc, #308]	; (8004c70 <HAL_RCC_ClockConfig+0x1c4>)
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 0301 	and.w	r3, r3, #1
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d040      	beq.n	8004bcc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	d107      	bne.n	8004b62 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b52:	4b47      	ldr	r3, [pc, #284]	; (8004c70 <HAL_RCC_ClockConfig+0x1c4>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d115      	bne.n	8004b8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e07f      	b.n	8004c62 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	2b02      	cmp	r3, #2
 8004b68:	d107      	bne.n	8004b7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b6a:	4b41      	ldr	r3, [pc, #260]	; (8004c70 <HAL_RCC_ClockConfig+0x1c4>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d109      	bne.n	8004b8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	e073      	b.n	8004c62 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b7a:	4b3d      	ldr	r3, [pc, #244]	; (8004c70 <HAL_RCC_ClockConfig+0x1c4>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f003 0302 	and.w	r3, r3, #2
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d101      	bne.n	8004b8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	e06b      	b.n	8004c62 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b8a:	4b39      	ldr	r3, [pc, #228]	; (8004c70 <HAL_RCC_ClockConfig+0x1c4>)
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	f023 0203 	bic.w	r2, r3, #3
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	4936      	ldr	r1, [pc, #216]	; (8004c70 <HAL_RCC_ClockConfig+0x1c4>)
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b9c:	f7fe f996 	bl	8002ecc <HAL_GetTick>
 8004ba0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ba2:	e00a      	b.n	8004bba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ba4:	f7fe f992 	bl	8002ecc <HAL_GetTick>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	1ad3      	subs	r3, r2, r3
 8004bae:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d901      	bls.n	8004bba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004bb6:	2303      	movs	r3, #3
 8004bb8:	e053      	b.n	8004c62 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bba:	4b2d      	ldr	r3, [pc, #180]	; (8004c70 <HAL_RCC_ClockConfig+0x1c4>)
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	f003 020c 	and.w	r2, r3, #12
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	009b      	lsls	r3, r3, #2
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d1eb      	bne.n	8004ba4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004bcc:	4b27      	ldr	r3, [pc, #156]	; (8004c6c <HAL_RCC_ClockConfig+0x1c0>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f003 0307 	and.w	r3, r3, #7
 8004bd4:	683a      	ldr	r2, [r7, #0]
 8004bd6:	429a      	cmp	r2, r3
 8004bd8:	d210      	bcs.n	8004bfc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bda:	4b24      	ldr	r3, [pc, #144]	; (8004c6c <HAL_RCC_ClockConfig+0x1c0>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f023 0207 	bic.w	r2, r3, #7
 8004be2:	4922      	ldr	r1, [pc, #136]	; (8004c6c <HAL_RCC_ClockConfig+0x1c0>)
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	4313      	orrs	r3, r2
 8004be8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bea:	4b20      	ldr	r3, [pc, #128]	; (8004c6c <HAL_RCC_ClockConfig+0x1c0>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 0307 	and.w	r3, r3, #7
 8004bf2:	683a      	ldr	r2, [r7, #0]
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d001      	beq.n	8004bfc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e032      	b.n	8004c62 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f003 0304 	and.w	r3, r3, #4
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d008      	beq.n	8004c1a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c08:	4b19      	ldr	r3, [pc, #100]	; (8004c70 <HAL_RCC_ClockConfig+0x1c4>)
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	68db      	ldr	r3, [r3, #12]
 8004c14:	4916      	ldr	r1, [pc, #88]	; (8004c70 <HAL_RCC_ClockConfig+0x1c4>)
 8004c16:	4313      	orrs	r3, r2
 8004c18:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 0308 	and.w	r3, r3, #8
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d009      	beq.n	8004c3a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004c26:	4b12      	ldr	r3, [pc, #72]	; (8004c70 <HAL_RCC_ClockConfig+0x1c4>)
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	691b      	ldr	r3, [r3, #16]
 8004c32:	00db      	lsls	r3, r3, #3
 8004c34:	490e      	ldr	r1, [pc, #56]	; (8004c70 <HAL_RCC_ClockConfig+0x1c4>)
 8004c36:	4313      	orrs	r3, r2
 8004c38:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004c3a:	f000 f821 	bl	8004c80 <HAL_RCC_GetSysClockFreq>
 8004c3e:	4602      	mov	r2, r0
 8004c40:	4b0b      	ldr	r3, [pc, #44]	; (8004c70 <HAL_RCC_ClockConfig+0x1c4>)
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	091b      	lsrs	r3, r3, #4
 8004c46:	f003 030f 	and.w	r3, r3, #15
 8004c4a:	490a      	ldr	r1, [pc, #40]	; (8004c74 <HAL_RCC_ClockConfig+0x1c8>)
 8004c4c:	5ccb      	ldrb	r3, [r1, r3]
 8004c4e:	fa22 f303 	lsr.w	r3, r2, r3
 8004c52:	4a09      	ldr	r2, [pc, #36]	; (8004c78 <HAL_RCC_ClockConfig+0x1cc>)
 8004c54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004c56:	4b09      	ldr	r3, [pc, #36]	; (8004c7c <HAL_RCC_ClockConfig+0x1d0>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f7fe f8f4 	bl	8002e48 <HAL_InitTick>

  return HAL_OK;
 8004c60:	2300      	movs	r3, #0
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3710      	adds	r7, #16
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	bf00      	nop
 8004c6c:	40022000 	.word	0x40022000
 8004c70:	40021000 	.word	0x40021000
 8004c74:	0800a9d8 	.word	0x0800a9d8
 8004c78:	20000074 	.word	0x20000074
 8004c7c:	20000078 	.word	0x20000078

08004c80 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c80:	b490      	push	{r4, r7}
 8004c82:	b08a      	sub	sp, #40	; 0x28
 8004c84:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004c86:	4b2a      	ldr	r3, [pc, #168]	; (8004d30 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004c88:	1d3c      	adds	r4, r7, #4
 8004c8a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004c8c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004c90:	f240 2301 	movw	r3, #513	; 0x201
 8004c94:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004c96:	2300      	movs	r3, #0
 8004c98:	61fb      	str	r3, [r7, #28]
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	61bb      	str	r3, [r7, #24]
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	627b      	str	r3, [r7, #36]	; 0x24
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004caa:	4b22      	ldr	r3, [pc, #136]	; (8004d34 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004cb0:	69fb      	ldr	r3, [r7, #28]
 8004cb2:	f003 030c 	and.w	r3, r3, #12
 8004cb6:	2b04      	cmp	r3, #4
 8004cb8:	d002      	beq.n	8004cc0 <HAL_RCC_GetSysClockFreq+0x40>
 8004cba:	2b08      	cmp	r3, #8
 8004cbc:	d003      	beq.n	8004cc6 <HAL_RCC_GetSysClockFreq+0x46>
 8004cbe:	e02d      	b.n	8004d1c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004cc0:	4b1d      	ldr	r3, [pc, #116]	; (8004d38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004cc2:	623b      	str	r3, [r7, #32]
      break;
 8004cc4:	e02d      	b.n	8004d22 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004cc6:	69fb      	ldr	r3, [r7, #28]
 8004cc8:	0c9b      	lsrs	r3, r3, #18
 8004cca:	f003 030f 	and.w	r3, r3, #15
 8004cce:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004cd2:	4413      	add	r3, r2
 8004cd4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004cd8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004cda:	69fb      	ldr	r3, [r7, #28]
 8004cdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d013      	beq.n	8004d0c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004ce4:	4b13      	ldr	r3, [pc, #76]	; (8004d34 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	0c5b      	lsrs	r3, r3, #17
 8004cea:	f003 0301 	and.w	r3, r3, #1
 8004cee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004cf2:	4413      	add	r3, r2
 8004cf4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004cf8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	4a0e      	ldr	r2, [pc, #56]	; (8004d38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004cfe:	fb02 f203 	mul.w	r2, r2, r3
 8004d02:	69bb      	ldr	r3, [r7, #24]
 8004d04:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d08:	627b      	str	r3, [r7, #36]	; 0x24
 8004d0a:	e004      	b.n	8004d16 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	4a0b      	ldr	r2, [pc, #44]	; (8004d3c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004d10:	fb02 f303 	mul.w	r3, r2, r3
 8004d14:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d18:	623b      	str	r3, [r7, #32]
      break;
 8004d1a:	e002      	b.n	8004d22 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004d1c:	4b06      	ldr	r3, [pc, #24]	; (8004d38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d1e:	623b      	str	r3, [r7, #32]
      break;
 8004d20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d22:	6a3b      	ldr	r3, [r7, #32]
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	3728      	adds	r7, #40	; 0x28
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bc90      	pop	{r4, r7}
 8004d2c:	4770      	bx	lr
 8004d2e:	bf00      	nop
 8004d30:	0800a3f4 	.word	0x0800a3f4
 8004d34:	40021000 	.word	0x40021000
 8004d38:	007a1200 	.word	0x007a1200
 8004d3c:	003d0900 	.word	0x003d0900

08004d40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d40:	b480      	push	{r7}
 8004d42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d44:	4b02      	ldr	r3, [pc, #8]	; (8004d50 <HAL_RCC_GetHCLKFreq+0x10>)
 8004d46:	681b      	ldr	r3, [r3, #0]
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bc80      	pop	{r7}
 8004d4e:	4770      	bx	lr
 8004d50:	20000074 	.word	0x20000074

08004d54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004d58:	f7ff fff2 	bl	8004d40 <HAL_RCC_GetHCLKFreq>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	4b05      	ldr	r3, [pc, #20]	; (8004d74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	0a1b      	lsrs	r3, r3, #8
 8004d64:	f003 0307 	and.w	r3, r3, #7
 8004d68:	4903      	ldr	r1, [pc, #12]	; (8004d78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d6a:	5ccb      	ldrb	r3, [r1, r3]
 8004d6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	bd80      	pop	{r7, pc}
 8004d74:	40021000 	.word	0x40021000
 8004d78:	0800a9e8 	.word	0x0800a9e8

08004d7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004d80:	f7ff ffde 	bl	8004d40 <HAL_RCC_GetHCLKFreq>
 8004d84:	4602      	mov	r2, r0
 8004d86:	4b05      	ldr	r3, [pc, #20]	; (8004d9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	0adb      	lsrs	r3, r3, #11
 8004d8c:	f003 0307 	and.w	r3, r3, #7
 8004d90:	4903      	ldr	r1, [pc, #12]	; (8004da0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d92:	5ccb      	ldrb	r3, [r1, r3]
 8004d94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	bd80      	pop	{r7, pc}
 8004d9c:	40021000 	.word	0x40021000
 8004da0:	0800a9e8 	.word	0x0800a9e8

08004da4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b085      	sub	sp, #20
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004dac:	4b0a      	ldr	r3, [pc, #40]	; (8004dd8 <RCC_Delay+0x34>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a0a      	ldr	r2, [pc, #40]	; (8004ddc <RCC_Delay+0x38>)
 8004db2:	fba2 2303 	umull	r2, r3, r2, r3
 8004db6:	0a5b      	lsrs	r3, r3, #9
 8004db8:	687a      	ldr	r2, [r7, #4]
 8004dba:	fb02 f303 	mul.w	r3, r2, r3
 8004dbe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004dc0:	bf00      	nop
  }
  while (Delay --);
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	1e5a      	subs	r2, r3, #1
 8004dc6:	60fa      	str	r2, [r7, #12]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d1f9      	bne.n	8004dc0 <RCC_Delay+0x1c>
}
 8004dcc:	bf00      	nop
 8004dce:	bf00      	nop
 8004dd0:	3714      	adds	r7, #20
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bc80      	pop	{r7}
 8004dd6:	4770      	bx	lr
 8004dd8:	20000074 	.word	0x20000074
 8004ddc:	10624dd3 	.word	0x10624dd3

08004de0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b082      	sub	sp, #8
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d101      	bne.n	8004df2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	e076      	b.n	8004ee0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d108      	bne.n	8004e0c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e02:	d009      	beq.n	8004e18 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2200      	movs	r2, #0
 8004e08:	61da      	str	r2, [r3, #28]
 8004e0a:	e005      	b.n	8004e18 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2200      	movs	r2, #0
 8004e16:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e24:	b2db      	uxtb	r3, r3
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d106      	bne.n	8004e38 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f7fd fd6e 	bl	8002914 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2202      	movs	r2, #2
 8004e3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e4e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004e60:	431a      	orrs	r2, r3
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	68db      	ldr	r3, [r3, #12]
 8004e66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e6a:	431a      	orrs	r2, r3
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	691b      	ldr	r3, [r3, #16]
 8004e70:	f003 0302 	and.w	r3, r3, #2
 8004e74:	431a      	orrs	r2, r3
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	695b      	ldr	r3, [r3, #20]
 8004e7a:	f003 0301 	and.w	r3, r3, #1
 8004e7e:	431a      	orrs	r2, r3
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	699b      	ldr	r3, [r3, #24]
 8004e84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e88:	431a      	orrs	r2, r3
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	69db      	ldr	r3, [r3, #28]
 8004e8e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e92:	431a      	orrs	r2, r3
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6a1b      	ldr	r3, [r3, #32]
 8004e98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e9c:	ea42 0103 	orr.w	r1, r2, r3
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ea4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	430a      	orrs	r2, r1
 8004eae:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	699b      	ldr	r3, [r3, #24]
 8004eb4:	0c1a      	lsrs	r2, r3, #16
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f002 0204 	and.w	r2, r2, #4
 8004ebe:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	69da      	ldr	r2, [r3, #28]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ece:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2201      	movs	r2, #1
 8004eda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004ede:	2300      	movs	r3, #0
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3708      	adds	r7, #8
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}

08004ee8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b088      	sub	sp, #32
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	60f8      	str	r0, [r7, #12]
 8004ef0:	60b9      	str	r1, [r7, #8]
 8004ef2:	603b      	str	r3, [r7, #0]
 8004ef4:	4613      	mov	r3, r2
 8004ef6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004f02:	2b01      	cmp	r3, #1
 8004f04:	d101      	bne.n	8004f0a <HAL_SPI_Transmit+0x22>
 8004f06:	2302      	movs	r3, #2
 8004f08:	e126      	b.n	8005158 <HAL_SPI_Transmit+0x270>
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f12:	f7fd ffdb 	bl	8002ecc <HAL_GetTick>
 8004f16:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004f18:	88fb      	ldrh	r3, [r7, #6]
 8004f1a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f22:	b2db      	uxtb	r3, r3
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d002      	beq.n	8004f2e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004f28:	2302      	movs	r3, #2
 8004f2a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004f2c:	e10b      	b.n	8005146 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d002      	beq.n	8004f3a <HAL_SPI_Transmit+0x52>
 8004f34:	88fb      	ldrh	r3, [r7, #6]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d102      	bne.n	8004f40 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004f3e:	e102      	b.n	8005146 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2203      	movs	r2, #3
 8004f44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	68ba      	ldr	r2, [r7, #8]
 8004f52:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	88fa      	ldrh	r2, [r7, #6]
 8004f58:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	88fa      	ldrh	r2, [r7, #6]
 8004f5e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2200      	movs	r2, #0
 8004f64:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2200      	movs	r2, #0
 8004f76:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f86:	d10f      	bne.n	8004fa8 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f96:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004fa6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fb2:	2b40      	cmp	r3, #64	; 0x40
 8004fb4:	d007      	beq.n	8004fc6 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	681a      	ldr	r2, [r3, #0]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004fc4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	68db      	ldr	r3, [r3, #12]
 8004fca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fce:	d14b      	bne.n	8005068 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d002      	beq.n	8004fde <HAL_SPI_Transmit+0xf6>
 8004fd8:	8afb      	ldrh	r3, [r7, #22]
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	d13e      	bne.n	800505c <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fe2:	881a      	ldrh	r2, [r3, #0]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fee:	1c9a      	adds	r2, r3, #2
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	3b01      	subs	r3, #1
 8004ffc:	b29a      	uxth	r2, r3
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005002:	e02b      	b.n	800505c <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	f003 0302 	and.w	r3, r3, #2
 800500e:	2b02      	cmp	r3, #2
 8005010:	d112      	bne.n	8005038 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005016:	881a      	ldrh	r2, [r3, #0]
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005022:	1c9a      	adds	r2, r3, #2
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800502c:	b29b      	uxth	r3, r3
 800502e:	3b01      	subs	r3, #1
 8005030:	b29a      	uxth	r2, r3
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	86da      	strh	r2, [r3, #54]	; 0x36
 8005036:	e011      	b.n	800505c <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005038:	f7fd ff48 	bl	8002ecc <HAL_GetTick>
 800503c:	4602      	mov	r2, r0
 800503e:	69bb      	ldr	r3, [r7, #24]
 8005040:	1ad3      	subs	r3, r2, r3
 8005042:	683a      	ldr	r2, [r7, #0]
 8005044:	429a      	cmp	r2, r3
 8005046:	d803      	bhi.n	8005050 <HAL_SPI_Transmit+0x168>
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800504e:	d102      	bne.n	8005056 <HAL_SPI_Transmit+0x16e>
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d102      	bne.n	800505c <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005056:	2303      	movs	r3, #3
 8005058:	77fb      	strb	r3, [r7, #31]
          goto error;
 800505a:	e074      	b.n	8005146 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005060:	b29b      	uxth	r3, r3
 8005062:	2b00      	cmp	r3, #0
 8005064:	d1ce      	bne.n	8005004 <HAL_SPI_Transmit+0x11c>
 8005066:	e04c      	b.n	8005102 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d002      	beq.n	8005076 <HAL_SPI_Transmit+0x18e>
 8005070:	8afb      	ldrh	r3, [r7, #22]
 8005072:	2b01      	cmp	r3, #1
 8005074:	d140      	bne.n	80050f8 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	330c      	adds	r3, #12
 8005080:	7812      	ldrb	r2, [r2, #0]
 8005082:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005088:	1c5a      	adds	r2, r3, #1
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005092:	b29b      	uxth	r3, r3
 8005094:	3b01      	subs	r3, #1
 8005096:	b29a      	uxth	r2, r3
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800509c:	e02c      	b.n	80050f8 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	f003 0302 	and.w	r3, r3, #2
 80050a8:	2b02      	cmp	r3, #2
 80050aa:	d113      	bne.n	80050d4 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	330c      	adds	r3, #12
 80050b6:	7812      	ldrb	r2, [r2, #0]
 80050b8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050be:	1c5a      	adds	r2, r3, #1
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	3b01      	subs	r3, #1
 80050cc:	b29a      	uxth	r2, r3
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	86da      	strh	r2, [r3, #54]	; 0x36
 80050d2:	e011      	b.n	80050f8 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80050d4:	f7fd fefa 	bl	8002ecc <HAL_GetTick>
 80050d8:	4602      	mov	r2, r0
 80050da:	69bb      	ldr	r3, [r7, #24]
 80050dc:	1ad3      	subs	r3, r2, r3
 80050de:	683a      	ldr	r2, [r7, #0]
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d803      	bhi.n	80050ec <HAL_SPI_Transmit+0x204>
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050ea:	d102      	bne.n	80050f2 <HAL_SPI_Transmit+0x20a>
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d102      	bne.n	80050f8 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80050f2:	2303      	movs	r3, #3
 80050f4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80050f6:	e026      	b.n	8005146 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d1cd      	bne.n	800509e <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005102:	69ba      	ldr	r2, [r7, #24]
 8005104:	6839      	ldr	r1, [r7, #0]
 8005106:	68f8      	ldr	r0, [r7, #12]
 8005108:	f000 f8b2 	bl	8005270 <SPI_EndRxTxTransaction>
 800510c:	4603      	mov	r3, r0
 800510e:	2b00      	cmp	r3, #0
 8005110:	d002      	beq.n	8005118 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2220      	movs	r2, #32
 8005116:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d10a      	bne.n	8005136 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005120:	2300      	movs	r3, #0
 8005122:	613b      	str	r3, [r7, #16]
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	68db      	ldr	r3, [r3, #12]
 800512a:	613b      	str	r3, [r7, #16]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	613b      	str	r3, [r7, #16]
 8005134:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800513a:	2b00      	cmp	r3, #0
 800513c:	d002      	beq.n	8005144 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	77fb      	strb	r3, [r7, #31]
 8005142:	e000      	b.n	8005146 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005144:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2201      	movs	r2, #1
 800514a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2200      	movs	r2, #0
 8005152:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005156:	7ffb      	ldrb	r3, [r7, #31]
}
 8005158:	4618      	mov	r0, r3
 800515a:	3720      	adds	r7, #32
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}

08005160 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b088      	sub	sp, #32
 8005164:	af00      	add	r7, sp, #0
 8005166:	60f8      	str	r0, [r7, #12]
 8005168:	60b9      	str	r1, [r7, #8]
 800516a:	603b      	str	r3, [r7, #0]
 800516c:	4613      	mov	r3, r2
 800516e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005170:	f7fd feac 	bl	8002ecc <HAL_GetTick>
 8005174:	4602      	mov	r2, r0
 8005176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005178:	1a9b      	subs	r3, r3, r2
 800517a:	683a      	ldr	r2, [r7, #0]
 800517c:	4413      	add	r3, r2
 800517e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005180:	f7fd fea4 	bl	8002ecc <HAL_GetTick>
 8005184:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005186:	4b39      	ldr	r3, [pc, #228]	; (800526c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	015b      	lsls	r3, r3, #5
 800518c:	0d1b      	lsrs	r3, r3, #20
 800518e:	69fa      	ldr	r2, [r7, #28]
 8005190:	fb02 f303 	mul.w	r3, r2, r3
 8005194:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005196:	e054      	b.n	8005242 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800519e:	d050      	beq.n	8005242 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80051a0:	f7fd fe94 	bl	8002ecc <HAL_GetTick>
 80051a4:	4602      	mov	r2, r0
 80051a6:	69bb      	ldr	r3, [r7, #24]
 80051a8:	1ad3      	subs	r3, r2, r3
 80051aa:	69fa      	ldr	r2, [r7, #28]
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d902      	bls.n	80051b6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80051b0:	69fb      	ldr	r3, [r7, #28]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d13d      	bne.n	8005232 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	685a      	ldr	r2, [r3, #4]
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80051c4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051ce:	d111      	bne.n	80051f4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051d8:	d004      	beq.n	80051e4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051e2:	d107      	bne.n	80051f4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	681a      	ldr	r2, [r3, #0]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051f2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051fc:	d10f      	bne.n	800521e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	681a      	ldr	r2, [r3, #0]
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800520c:	601a      	str	r2, [r3, #0]
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800521c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2201      	movs	r2, #1
 8005222:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2200      	movs	r2, #0
 800522a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800522e:	2303      	movs	r3, #3
 8005230:	e017      	b.n	8005262 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d101      	bne.n	800523c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005238:	2300      	movs	r3, #0
 800523a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	3b01      	subs	r3, #1
 8005240:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	689a      	ldr	r2, [r3, #8]
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	4013      	ands	r3, r2
 800524c:	68ba      	ldr	r2, [r7, #8]
 800524e:	429a      	cmp	r2, r3
 8005250:	bf0c      	ite	eq
 8005252:	2301      	moveq	r3, #1
 8005254:	2300      	movne	r3, #0
 8005256:	b2db      	uxtb	r3, r3
 8005258:	461a      	mov	r2, r3
 800525a:	79fb      	ldrb	r3, [r7, #7]
 800525c:	429a      	cmp	r2, r3
 800525e:	d19b      	bne.n	8005198 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005260:	2300      	movs	r3, #0
}
 8005262:	4618      	mov	r0, r3
 8005264:	3720      	adds	r7, #32
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}
 800526a:	bf00      	nop
 800526c:	20000074 	.word	0x20000074

08005270 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b086      	sub	sp, #24
 8005274:	af02      	add	r7, sp, #8
 8005276:	60f8      	str	r0, [r7, #12]
 8005278:	60b9      	str	r1, [r7, #8]
 800527a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	9300      	str	r3, [sp, #0]
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	2200      	movs	r2, #0
 8005284:	2180      	movs	r1, #128	; 0x80
 8005286:	68f8      	ldr	r0, [r7, #12]
 8005288:	f7ff ff6a 	bl	8005160 <SPI_WaitFlagStateUntilTimeout>
 800528c:	4603      	mov	r3, r0
 800528e:	2b00      	cmp	r3, #0
 8005290:	d007      	beq.n	80052a2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005296:	f043 0220 	orr.w	r2, r3, #32
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800529e:	2303      	movs	r3, #3
 80052a0:	e000      	b.n	80052a4 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80052a2:	2300      	movs	r3, #0
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	3710      	adds	r7, #16
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}

080052ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b082      	sub	sp, #8
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d101      	bne.n	80052be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80052ba:	2301      	movs	r3, #1
 80052bc:	e041      	b.n	8005342 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052c4:	b2db      	uxtb	r3, r3
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d106      	bne.n	80052d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2200      	movs	r2, #0
 80052ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f7fd fce0 	bl	8002c98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2202      	movs	r2, #2
 80052dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	3304      	adds	r3, #4
 80052e8:	4619      	mov	r1, r3
 80052ea:	4610      	mov	r0, r2
 80052ec:	f000 fa70 	bl	80057d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2201      	movs	r2, #1
 80052f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2201      	movs	r2, #1
 80052fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2201      	movs	r2, #1
 8005304:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2201      	movs	r2, #1
 800530c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2201      	movs	r2, #1
 8005314:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2201      	movs	r2, #1
 800531c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2201      	movs	r2, #1
 8005324:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2201      	movs	r2, #1
 800532c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2201      	movs	r2, #1
 8005334:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2201      	movs	r2, #1
 800533c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005340:	2300      	movs	r3, #0
}
 8005342:	4618      	mov	r0, r3
 8005344:	3708      	adds	r7, #8
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
	...

0800534c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800534c:	b480      	push	{r7}
 800534e:	b085      	sub	sp, #20
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800535a:	b2db      	uxtb	r3, r3
 800535c:	2b01      	cmp	r3, #1
 800535e:	d001      	beq.n	8005364 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005360:	2301      	movs	r3, #1
 8005362:	e03a      	b.n	80053da <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2202      	movs	r2, #2
 8005368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	68da      	ldr	r2, [r3, #12]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f042 0201 	orr.w	r2, r2, #1
 800537a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a18      	ldr	r2, [pc, #96]	; (80053e4 <HAL_TIM_Base_Start_IT+0x98>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d00e      	beq.n	80053a4 <HAL_TIM_Base_Start_IT+0x58>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800538e:	d009      	beq.n	80053a4 <HAL_TIM_Base_Start_IT+0x58>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a14      	ldr	r2, [pc, #80]	; (80053e8 <HAL_TIM_Base_Start_IT+0x9c>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d004      	beq.n	80053a4 <HAL_TIM_Base_Start_IT+0x58>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a13      	ldr	r2, [pc, #76]	; (80053ec <HAL_TIM_Base_Start_IT+0xa0>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d111      	bne.n	80053c8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	f003 0307 	and.w	r3, r3, #7
 80053ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2b06      	cmp	r3, #6
 80053b4:	d010      	beq.n	80053d8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	681a      	ldr	r2, [r3, #0]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f042 0201 	orr.w	r2, r2, #1
 80053c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053c6:	e007      	b.n	80053d8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f042 0201 	orr.w	r2, r2, #1
 80053d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80053d8:	2300      	movs	r3, #0
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3714      	adds	r7, #20
 80053de:	46bd      	mov	sp, r7
 80053e0:	bc80      	pop	{r7}
 80053e2:	4770      	bx	lr
 80053e4:	40012c00 	.word	0x40012c00
 80053e8:	40000400 	.word	0x40000400
 80053ec:	40000800 	.word	0x40000800

080053f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b082      	sub	sp, #8
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	691b      	ldr	r3, [r3, #16]
 80053fe:	f003 0302 	and.w	r3, r3, #2
 8005402:	2b02      	cmp	r3, #2
 8005404:	d122      	bne.n	800544c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	68db      	ldr	r3, [r3, #12]
 800540c:	f003 0302 	and.w	r3, r3, #2
 8005410:	2b02      	cmp	r3, #2
 8005412:	d11b      	bne.n	800544c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f06f 0202 	mvn.w	r2, #2
 800541c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2201      	movs	r2, #1
 8005422:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	699b      	ldr	r3, [r3, #24]
 800542a:	f003 0303 	and.w	r3, r3, #3
 800542e:	2b00      	cmp	r3, #0
 8005430:	d003      	beq.n	800543a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f000 f9b1 	bl	800579a <HAL_TIM_IC_CaptureCallback>
 8005438:	e005      	b.n	8005446 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f000 f9a4 	bl	8005788 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005440:	6878      	ldr	r0, [r7, #4]
 8005442:	f000 f9b3 	bl	80057ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2200      	movs	r2, #0
 800544a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	691b      	ldr	r3, [r3, #16]
 8005452:	f003 0304 	and.w	r3, r3, #4
 8005456:	2b04      	cmp	r3, #4
 8005458:	d122      	bne.n	80054a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	68db      	ldr	r3, [r3, #12]
 8005460:	f003 0304 	and.w	r3, r3, #4
 8005464:	2b04      	cmp	r3, #4
 8005466:	d11b      	bne.n	80054a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f06f 0204 	mvn.w	r2, #4
 8005470:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2202      	movs	r2, #2
 8005476:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	699b      	ldr	r3, [r3, #24]
 800547e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005482:	2b00      	cmp	r3, #0
 8005484:	d003      	beq.n	800548e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f000 f987 	bl	800579a <HAL_TIM_IC_CaptureCallback>
 800548c:	e005      	b.n	800549a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f000 f97a 	bl	8005788 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005494:	6878      	ldr	r0, [r7, #4]
 8005496:	f000 f989 	bl	80057ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2200      	movs	r2, #0
 800549e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	691b      	ldr	r3, [r3, #16]
 80054a6:	f003 0308 	and.w	r3, r3, #8
 80054aa:	2b08      	cmp	r3, #8
 80054ac:	d122      	bne.n	80054f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	68db      	ldr	r3, [r3, #12]
 80054b4:	f003 0308 	and.w	r3, r3, #8
 80054b8:	2b08      	cmp	r3, #8
 80054ba:	d11b      	bne.n	80054f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f06f 0208 	mvn.w	r2, #8
 80054c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2204      	movs	r2, #4
 80054ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	69db      	ldr	r3, [r3, #28]
 80054d2:	f003 0303 	and.w	r3, r3, #3
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d003      	beq.n	80054e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f000 f95d 	bl	800579a <HAL_TIM_IC_CaptureCallback>
 80054e0:	e005      	b.n	80054ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f000 f950 	bl	8005788 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f000 f95f 	bl	80057ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2200      	movs	r2, #0
 80054f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	691b      	ldr	r3, [r3, #16]
 80054fa:	f003 0310 	and.w	r3, r3, #16
 80054fe:	2b10      	cmp	r3, #16
 8005500:	d122      	bne.n	8005548 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	68db      	ldr	r3, [r3, #12]
 8005508:	f003 0310 	and.w	r3, r3, #16
 800550c:	2b10      	cmp	r3, #16
 800550e:	d11b      	bne.n	8005548 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f06f 0210 	mvn.w	r2, #16
 8005518:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2208      	movs	r2, #8
 800551e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	69db      	ldr	r3, [r3, #28]
 8005526:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800552a:	2b00      	cmp	r3, #0
 800552c:	d003      	beq.n	8005536 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f000 f933 	bl	800579a <HAL_TIM_IC_CaptureCallback>
 8005534:	e005      	b.n	8005542 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f000 f926 	bl	8005788 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	f000 f935 	bl	80057ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2200      	movs	r2, #0
 8005546:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	691b      	ldr	r3, [r3, #16]
 800554e:	f003 0301 	and.w	r3, r3, #1
 8005552:	2b01      	cmp	r3, #1
 8005554:	d10e      	bne.n	8005574 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	68db      	ldr	r3, [r3, #12]
 800555c:	f003 0301 	and.w	r3, r3, #1
 8005560:	2b01      	cmp	r3, #1
 8005562:	d107      	bne.n	8005574 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f06f 0201 	mvn.w	r2, #1
 800556c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f7fd f924 	bl	80027bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	691b      	ldr	r3, [r3, #16]
 800557a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800557e:	2b80      	cmp	r3, #128	; 0x80
 8005580:	d10e      	bne.n	80055a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	68db      	ldr	r3, [r3, #12]
 8005588:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800558c:	2b80      	cmp	r3, #128	; 0x80
 800558e:	d107      	bne.n	80055a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005598:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f000 fa77 	bl	8005a8e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	691b      	ldr	r3, [r3, #16]
 80055a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055aa:	2b40      	cmp	r3, #64	; 0x40
 80055ac:	d10e      	bne.n	80055cc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	68db      	ldr	r3, [r3, #12]
 80055b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055b8:	2b40      	cmp	r3, #64	; 0x40
 80055ba:	d107      	bne.n	80055cc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80055c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f000 f8f9 	bl	80057be <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	691b      	ldr	r3, [r3, #16]
 80055d2:	f003 0320 	and.w	r3, r3, #32
 80055d6:	2b20      	cmp	r3, #32
 80055d8:	d10e      	bne.n	80055f8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	68db      	ldr	r3, [r3, #12]
 80055e0:	f003 0320 	and.w	r3, r3, #32
 80055e4:	2b20      	cmp	r3, #32
 80055e6:	d107      	bne.n	80055f8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f06f 0220 	mvn.w	r2, #32
 80055f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f000 fa42 	bl	8005a7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80055f8:	bf00      	nop
 80055fa:	3708      	adds	r7, #8
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}

08005600 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b084      	sub	sp, #16
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
 8005608:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005610:	2b01      	cmp	r3, #1
 8005612:	d101      	bne.n	8005618 <HAL_TIM_ConfigClockSource+0x18>
 8005614:	2302      	movs	r3, #2
 8005616:	e0b3      	b.n	8005780 <HAL_TIM_ConfigClockSource+0x180>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2201      	movs	r2, #1
 800561c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2202      	movs	r2, #2
 8005624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005636:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800563e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	68fa      	ldr	r2, [r7, #12]
 8005646:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005650:	d03e      	beq.n	80056d0 <HAL_TIM_ConfigClockSource+0xd0>
 8005652:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005656:	f200 8087 	bhi.w	8005768 <HAL_TIM_ConfigClockSource+0x168>
 800565a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800565e:	f000 8085 	beq.w	800576c <HAL_TIM_ConfigClockSource+0x16c>
 8005662:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005666:	d87f      	bhi.n	8005768 <HAL_TIM_ConfigClockSource+0x168>
 8005668:	2b70      	cmp	r3, #112	; 0x70
 800566a:	d01a      	beq.n	80056a2 <HAL_TIM_ConfigClockSource+0xa2>
 800566c:	2b70      	cmp	r3, #112	; 0x70
 800566e:	d87b      	bhi.n	8005768 <HAL_TIM_ConfigClockSource+0x168>
 8005670:	2b60      	cmp	r3, #96	; 0x60
 8005672:	d050      	beq.n	8005716 <HAL_TIM_ConfigClockSource+0x116>
 8005674:	2b60      	cmp	r3, #96	; 0x60
 8005676:	d877      	bhi.n	8005768 <HAL_TIM_ConfigClockSource+0x168>
 8005678:	2b50      	cmp	r3, #80	; 0x50
 800567a:	d03c      	beq.n	80056f6 <HAL_TIM_ConfigClockSource+0xf6>
 800567c:	2b50      	cmp	r3, #80	; 0x50
 800567e:	d873      	bhi.n	8005768 <HAL_TIM_ConfigClockSource+0x168>
 8005680:	2b40      	cmp	r3, #64	; 0x40
 8005682:	d058      	beq.n	8005736 <HAL_TIM_ConfigClockSource+0x136>
 8005684:	2b40      	cmp	r3, #64	; 0x40
 8005686:	d86f      	bhi.n	8005768 <HAL_TIM_ConfigClockSource+0x168>
 8005688:	2b30      	cmp	r3, #48	; 0x30
 800568a:	d064      	beq.n	8005756 <HAL_TIM_ConfigClockSource+0x156>
 800568c:	2b30      	cmp	r3, #48	; 0x30
 800568e:	d86b      	bhi.n	8005768 <HAL_TIM_ConfigClockSource+0x168>
 8005690:	2b20      	cmp	r3, #32
 8005692:	d060      	beq.n	8005756 <HAL_TIM_ConfigClockSource+0x156>
 8005694:	2b20      	cmp	r3, #32
 8005696:	d867      	bhi.n	8005768 <HAL_TIM_ConfigClockSource+0x168>
 8005698:	2b00      	cmp	r3, #0
 800569a:	d05c      	beq.n	8005756 <HAL_TIM_ConfigClockSource+0x156>
 800569c:	2b10      	cmp	r3, #16
 800569e:	d05a      	beq.n	8005756 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80056a0:	e062      	b.n	8005768 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6818      	ldr	r0, [r3, #0]
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	6899      	ldr	r1, [r3, #8]
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	685a      	ldr	r2, [r3, #4]
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	68db      	ldr	r3, [r3, #12]
 80056b2:	f000 f966 	bl	8005982 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	689b      	ldr	r3, [r3, #8]
 80056bc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80056c4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	68fa      	ldr	r2, [r7, #12]
 80056cc:	609a      	str	r2, [r3, #8]
      break;
 80056ce:	e04e      	b.n	800576e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6818      	ldr	r0, [r3, #0]
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	6899      	ldr	r1, [r3, #8]
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	685a      	ldr	r2, [r3, #4]
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	68db      	ldr	r3, [r3, #12]
 80056e0:	f000 f94f 	bl	8005982 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	689a      	ldr	r2, [r3, #8]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80056f2:	609a      	str	r2, [r3, #8]
      break;
 80056f4:	e03b      	b.n	800576e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6818      	ldr	r0, [r3, #0]
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	6859      	ldr	r1, [r3, #4]
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	68db      	ldr	r3, [r3, #12]
 8005702:	461a      	mov	r2, r3
 8005704:	f000 f8c6 	bl	8005894 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	2150      	movs	r1, #80	; 0x50
 800570e:	4618      	mov	r0, r3
 8005710:	f000 f91d 	bl	800594e <TIM_ITRx_SetConfig>
      break;
 8005714:	e02b      	b.n	800576e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6818      	ldr	r0, [r3, #0]
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	6859      	ldr	r1, [r3, #4]
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	68db      	ldr	r3, [r3, #12]
 8005722:	461a      	mov	r2, r3
 8005724:	f000 f8e4 	bl	80058f0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	2160      	movs	r1, #96	; 0x60
 800572e:	4618      	mov	r0, r3
 8005730:	f000 f90d 	bl	800594e <TIM_ITRx_SetConfig>
      break;
 8005734:	e01b      	b.n	800576e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6818      	ldr	r0, [r3, #0]
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	6859      	ldr	r1, [r3, #4]
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	68db      	ldr	r3, [r3, #12]
 8005742:	461a      	mov	r2, r3
 8005744:	f000 f8a6 	bl	8005894 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	2140      	movs	r1, #64	; 0x40
 800574e:	4618      	mov	r0, r3
 8005750:	f000 f8fd 	bl	800594e <TIM_ITRx_SetConfig>
      break;
 8005754:	e00b      	b.n	800576e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4619      	mov	r1, r3
 8005760:	4610      	mov	r0, r2
 8005762:	f000 f8f4 	bl	800594e <TIM_ITRx_SetConfig>
        break;
 8005766:	e002      	b.n	800576e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005768:	bf00      	nop
 800576a:	e000      	b.n	800576e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800576c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2201      	movs	r2, #1
 8005772:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2200      	movs	r2, #0
 800577a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800577e:	2300      	movs	r3, #0
}
 8005780:	4618      	mov	r0, r3
 8005782:	3710      	adds	r7, #16
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}

08005788 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005788:	b480      	push	{r7}
 800578a:	b083      	sub	sp, #12
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005790:	bf00      	nop
 8005792:	370c      	adds	r7, #12
 8005794:	46bd      	mov	sp, r7
 8005796:	bc80      	pop	{r7}
 8005798:	4770      	bx	lr

0800579a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800579a:	b480      	push	{r7}
 800579c:	b083      	sub	sp, #12
 800579e:	af00      	add	r7, sp, #0
 80057a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80057a2:	bf00      	nop
 80057a4:	370c      	adds	r7, #12
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bc80      	pop	{r7}
 80057aa:	4770      	bx	lr

080057ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b083      	sub	sp, #12
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80057b4:	bf00      	nop
 80057b6:	370c      	adds	r7, #12
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bc80      	pop	{r7}
 80057bc:	4770      	bx	lr

080057be <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80057be:	b480      	push	{r7}
 80057c0:	b083      	sub	sp, #12
 80057c2:	af00      	add	r7, sp, #0
 80057c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80057c6:	bf00      	nop
 80057c8:	370c      	adds	r7, #12
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bc80      	pop	{r7}
 80057ce:	4770      	bx	lr

080057d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b085      	sub	sp, #20
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
 80057d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	4a29      	ldr	r2, [pc, #164]	; (8005888 <TIM_Base_SetConfig+0xb8>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d00b      	beq.n	8005800 <TIM_Base_SetConfig+0x30>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057ee:	d007      	beq.n	8005800 <TIM_Base_SetConfig+0x30>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	4a26      	ldr	r2, [pc, #152]	; (800588c <TIM_Base_SetConfig+0xbc>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d003      	beq.n	8005800 <TIM_Base_SetConfig+0x30>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	4a25      	ldr	r2, [pc, #148]	; (8005890 <TIM_Base_SetConfig+0xc0>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d108      	bne.n	8005812 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005806:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	68fa      	ldr	r2, [r7, #12]
 800580e:	4313      	orrs	r3, r2
 8005810:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	4a1c      	ldr	r2, [pc, #112]	; (8005888 <TIM_Base_SetConfig+0xb8>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d00b      	beq.n	8005832 <TIM_Base_SetConfig+0x62>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005820:	d007      	beq.n	8005832 <TIM_Base_SetConfig+0x62>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	4a19      	ldr	r2, [pc, #100]	; (800588c <TIM_Base_SetConfig+0xbc>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d003      	beq.n	8005832 <TIM_Base_SetConfig+0x62>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	4a18      	ldr	r2, [pc, #96]	; (8005890 <TIM_Base_SetConfig+0xc0>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d108      	bne.n	8005844 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005838:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	68db      	ldr	r3, [r3, #12]
 800583e:	68fa      	ldr	r2, [r7, #12]
 8005840:	4313      	orrs	r3, r2
 8005842:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	695b      	ldr	r3, [r3, #20]
 800584e:	4313      	orrs	r3, r2
 8005850:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	68fa      	ldr	r2, [r7, #12]
 8005856:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	689a      	ldr	r2, [r3, #8]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	4a07      	ldr	r2, [pc, #28]	; (8005888 <TIM_Base_SetConfig+0xb8>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d103      	bne.n	8005878 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	691a      	ldr	r2, [r3, #16]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2201      	movs	r2, #1
 800587c:	615a      	str	r2, [r3, #20]
}
 800587e:	bf00      	nop
 8005880:	3714      	adds	r7, #20
 8005882:	46bd      	mov	sp, r7
 8005884:	bc80      	pop	{r7}
 8005886:	4770      	bx	lr
 8005888:	40012c00 	.word	0x40012c00
 800588c:	40000400 	.word	0x40000400
 8005890:	40000800 	.word	0x40000800

08005894 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005894:	b480      	push	{r7}
 8005896:	b087      	sub	sp, #28
 8005898:	af00      	add	r7, sp, #0
 800589a:	60f8      	str	r0, [r7, #12]
 800589c:	60b9      	str	r1, [r7, #8]
 800589e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	6a1b      	ldr	r3, [r3, #32]
 80058a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	6a1b      	ldr	r3, [r3, #32]
 80058aa:	f023 0201 	bic.w	r2, r3, #1
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	699b      	ldr	r3, [r3, #24]
 80058b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80058be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	011b      	lsls	r3, r3, #4
 80058c4:	693a      	ldr	r2, [r7, #16]
 80058c6:	4313      	orrs	r3, r2
 80058c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	f023 030a 	bic.w	r3, r3, #10
 80058d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80058d2:	697a      	ldr	r2, [r7, #20]
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	4313      	orrs	r3, r2
 80058d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	693a      	ldr	r2, [r7, #16]
 80058de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	697a      	ldr	r2, [r7, #20]
 80058e4:	621a      	str	r2, [r3, #32]
}
 80058e6:	bf00      	nop
 80058e8:	371c      	adds	r7, #28
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bc80      	pop	{r7}
 80058ee:	4770      	bx	lr

080058f0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b087      	sub	sp, #28
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	60f8      	str	r0, [r7, #12]
 80058f8:	60b9      	str	r1, [r7, #8]
 80058fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	6a1b      	ldr	r3, [r3, #32]
 8005900:	f023 0210 	bic.w	r2, r3, #16
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	699b      	ldr	r3, [r3, #24]
 800590c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	6a1b      	ldr	r3, [r3, #32]
 8005912:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800591a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	031b      	lsls	r3, r3, #12
 8005920:	697a      	ldr	r2, [r7, #20]
 8005922:	4313      	orrs	r3, r2
 8005924:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800592c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	011b      	lsls	r3, r3, #4
 8005932:	693a      	ldr	r2, [r7, #16]
 8005934:	4313      	orrs	r3, r2
 8005936:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	697a      	ldr	r2, [r7, #20]
 800593c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	693a      	ldr	r2, [r7, #16]
 8005942:	621a      	str	r2, [r3, #32]
}
 8005944:	bf00      	nop
 8005946:	371c      	adds	r7, #28
 8005948:	46bd      	mov	sp, r7
 800594a:	bc80      	pop	{r7}
 800594c:	4770      	bx	lr

0800594e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800594e:	b480      	push	{r7}
 8005950:	b085      	sub	sp, #20
 8005952:	af00      	add	r7, sp, #0
 8005954:	6078      	str	r0, [r7, #4]
 8005956:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005964:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005966:	683a      	ldr	r2, [r7, #0]
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	4313      	orrs	r3, r2
 800596c:	f043 0307 	orr.w	r3, r3, #7
 8005970:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	68fa      	ldr	r2, [r7, #12]
 8005976:	609a      	str	r2, [r3, #8]
}
 8005978:	bf00      	nop
 800597a:	3714      	adds	r7, #20
 800597c:	46bd      	mov	sp, r7
 800597e:	bc80      	pop	{r7}
 8005980:	4770      	bx	lr

08005982 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005982:	b480      	push	{r7}
 8005984:	b087      	sub	sp, #28
 8005986:	af00      	add	r7, sp, #0
 8005988:	60f8      	str	r0, [r7, #12]
 800598a:	60b9      	str	r1, [r7, #8]
 800598c:	607a      	str	r2, [r7, #4]
 800598e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800599c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	021a      	lsls	r2, r3, #8
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	431a      	orrs	r2, r3
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	4313      	orrs	r3, r2
 80059aa:	697a      	ldr	r2, [r7, #20]
 80059ac:	4313      	orrs	r3, r2
 80059ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	697a      	ldr	r2, [r7, #20]
 80059b4:	609a      	str	r2, [r3, #8]
}
 80059b6:	bf00      	nop
 80059b8:	371c      	adds	r7, #28
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bc80      	pop	{r7}
 80059be:	4770      	bx	lr

080059c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b085      	sub	sp, #20
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
 80059c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d101      	bne.n	80059d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80059d4:	2302      	movs	r3, #2
 80059d6:	e046      	b.n	8005a66 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2201      	movs	r2, #1
 80059dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2202      	movs	r2, #2
 80059e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	689b      	ldr	r3, [r3, #8]
 80059f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	68fa      	ldr	r2, [r7, #12]
 8005a06:	4313      	orrs	r3, r2
 8005a08:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	68fa      	ldr	r2, [r7, #12]
 8005a10:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a16      	ldr	r2, [pc, #88]	; (8005a70 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d00e      	beq.n	8005a3a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a24:	d009      	beq.n	8005a3a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a12      	ldr	r2, [pc, #72]	; (8005a74 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d004      	beq.n	8005a3a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a10      	ldr	r2, [pc, #64]	; (8005a78 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d10c      	bne.n	8005a54 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a40:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	68ba      	ldr	r2, [r7, #8]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	68ba      	ldr	r2, [r7, #8]
 8005a52:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2201      	movs	r2, #1
 8005a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a64:	2300      	movs	r3, #0
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3714      	adds	r7, #20
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bc80      	pop	{r7}
 8005a6e:	4770      	bx	lr
 8005a70:	40012c00 	.word	0x40012c00
 8005a74:	40000400 	.word	0x40000400
 8005a78:	40000800 	.word	0x40000800

08005a7c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b083      	sub	sp, #12
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a84:	bf00      	nop
 8005a86:	370c      	adds	r7, #12
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bc80      	pop	{r7}
 8005a8c:	4770      	bx	lr

08005a8e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a8e:	b480      	push	{r7}
 8005a90:	b083      	sub	sp, #12
 8005a92:	af00      	add	r7, sp, #0
 8005a94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a96:	bf00      	nop
 8005a98:	370c      	adds	r7, #12
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bc80      	pop	{r7}
 8005a9e:	4770      	bx	lr

08005aa0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b082      	sub	sp, #8
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d101      	bne.n	8005ab2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	e03f      	b.n	8005b32 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ab8:	b2db      	uxtb	r3, r3
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d106      	bne.n	8005acc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f7fd f92e 	bl	8002d28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2224      	movs	r2, #36	; 0x24
 8005ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	68da      	ldr	r2, [r3, #12]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ae2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	f000 fcc9 	bl	800647c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	691a      	ldr	r2, [r3, #16]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005af8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	695a      	ldr	r2, [r3, #20]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	68da      	ldr	r2, [r3, #12]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2220      	movs	r2, #32
 8005b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2220      	movs	r2, #32
 8005b2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005b30:	2300      	movs	r3, #0
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	3708      	adds	r7, #8
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}

08005b3a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b3a:	b580      	push	{r7, lr}
 8005b3c:	b08a      	sub	sp, #40	; 0x28
 8005b3e:	af02      	add	r7, sp, #8
 8005b40:	60f8      	str	r0, [r7, #12]
 8005b42:	60b9      	str	r1, [r7, #8]
 8005b44:	603b      	str	r3, [r7, #0]
 8005b46:	4613      	mov	r3, r2
 8005b48:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b54:	b2db      	uxtb	r3, r3
 8005b56:	2b20      	cmp	r3, #32
 8005b58:	d17c      	bne.n	8005c54 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d002      	beq.n	8005b66 <HAL_UART_Transmit+0x2c>
 8005b60:	88fb      	ldrh	r3, [r7, #6]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d101      	bne.n	8005b6a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005b66:	2301      	movs	r3, #1
 8005b68:	e075      	b.n	8005c56 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d101      	bne.n	8005b78 <HAL_UART_Transmit+0x3e>
 8005b74:	2302      	movs	r3, #2
 8005b76:	e06e      	b.n	8005c56 <HAL_UART_Transmit+0x11c>
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2200      	movs	r2, #0
 8005b84:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2221      	movs	r2, #33	; 0x21
 8005b8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b8e:	f7fd f99d 	bl	8002ecc <HAL_GetTick>
 8005b92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	88fa      	ldrh	r2, [r7, #6]
 8005b98:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	88fa      	ldrh	r2, [r7, #6]
 8005b9e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ba8:	d108      	bne.n	8005bbc <HAL_UART_Transmit+0x82>
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	691b      	ldr	r3, [r3, #16]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d104      	bne.n	8005bbc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	61bb      	str	r3, [r7, #24]
 8005bba:	e003      	b.n	8005bc4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005bcc:	e02a      	b.n	8005c24 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	9300      	str	r3, [sp, #0]
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	2180      	movs	r1, #128	; 0x80
 8005bd8:	68f8      	ldr	r0, [r7, #12]
 8005bda:	f000 fa7c 	bl	80060d6 <UART_WaitOnFlagUntilTimeout>
 8005bde:	4603      	mov	r3, r0
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d001      	beq.n	8005be8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005be4:	2303      	movs	r3, #3
 8005be6:	e036      	b.n	8005c56 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005be8:	69fb      	ldr	r3, [r7, #28]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d10b      	bne.n	8005c06 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005bee:	69bb      	ldr	r3, [r7, #24]
 8005bf0:	881b      	ldrh	r3, [r3, #0]
 8005bf2:	461a      	mov	r2, r3
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005bfc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005bfe:	69bb      	ldr	r3, [r7, #24]
 8005c00:	3302      	adds	r3, #2
 8005c02:	61bb      	str	r3, [r7, #24]
 8005c04:	e007      	b.n	8005c16 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005c06:	69fb      	ldr	r3, [r7, #28]
 8005c08:	781a      	ldrb	r2, [r3, #0]
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005c10:	69fb      	ldr	r3, [r7, #28]
 8005c12:	3301      	adds	r3, #1
 8005c14:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	3b01      	subs	r3, #1
 8005c1e:	b29a      	uxth	r2, r3
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c28:	b29b      	uxth	r3, r3
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d1cf      	bne.n	8005bce <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	9300      	str	r3, [sp, #0]
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	2200      	movs	r2, #0
 8005c36:	2140      	movs	r1, #64	; 0x40
 8005c38:	68f8      	ldr	r0, [r7, #12]
 8005c3a:	f000 fa4c 	bl	80060d6 <UART_WaitOnFlagUntilTimeout>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d001      	beq.n	8005c48 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005c44:	2303      	movs	r3, #3
 8005c46:	e006      	b.n	8005c56 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2220      	movs	r2, #32
 8005c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005c50:	2300      	movs	r3, #0
 8005c52:	e000      	b.n	8005c56 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005c54:	2302      	movs	r3, #2
  }
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	3720      	adds	r7, #32
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}

08005c5e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c5e:	b480      	push	{r7}
 8005c60:	b085      	sub	sp, #20
 8005c62:	af00      	add	r7, sp, #0
 8005c64:	60f8      	str	r0, [r7, #12]
 8005c66:	60b9      	str	r1, [r7, #8]
 8005c68:	4613      	mov	r3, r2
 8005c6a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c72:	b2db      	uxtb	r3, r3
 8005c74:	2b20      	cmp	r3, #32
 8005c76:	d130      	bne.n	8005cda <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d002      	beq.n	8005c84 <HAL_UART_Transmit_IT+0x26>
 8005c7e:	88fb      	ldrh	r3, [r7, #6]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d101      	bne.n	8005c88 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8005c84:	2301      	movs	r3, #1
 8005c86:	e029      	b.n	8005cdc <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	d101      	bne.n	8005c96 <HAL_UART_Transmit_IT+0x38>
 8005c92:	2302      	movs	r3, #2
 8005c94:	e022      	b.n	8005cdc <HAL_UART_Transmit_IT+0x7e>
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2201      	movs	r2, #1
 8005c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	68ba      	ldr	r2, [r7, #8]
 8005ca2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	88fa      	ldrh	r2, [r7, #6]
 8005ca8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	88fa      	ldrh	r2, [r7, #6]
 8005cae:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2221      	movs	r2, #33	; 0x21
 8005cba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	68da      	ldr	r2, [r3, #12]
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005cd4:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	e000      	b.n	8005cdc <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8005cda:	2302      	movs	r3, #2
  }
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	3714      	adds	r7, #20
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bc80      	pop	{r7}
 8005ce4:	4770      	bx	lr

08005ce6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ce6:	b580      	push	{r7, lr}
 8005ce8:	b084      	sub	sp, #16
 8005cea:	af00      	add	r7, sp, #0
 8005cec:	60f8      	str	r0, [r7, #12]
 8005cee:	60b9      	str	r1, [r7, #8]
 8005cf0:	4613      	mov	r3, r2
 8005cf2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005cfa:	b2db      	uxtb	r3, r3
 8005cfc:	2b20      	cmp	r3, #32
 8005cfe:	d11d      	bne.n	8005d3c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d002      	beq.n	8005d0c <HAL_UART_Receive_IT+0x26>
 8005d06:	88fb      	ldrh	r3, [r7, #6]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d101      	bne.n	8005d10 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	e016      	b.n	8005d3e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d16:	2b01      	cmp	r3, #1
 8005d18:	d101      	bne.n	8005d1e <HAL_UART_Receive_IT+0x38>
 8005d1a:	2302      	movs	r3, #2
 8005d1c:	e00f      	b.n	8005d3e <HAL_UART_Receive_IT+0x58>
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2201      	movs	r2, #1
 8005d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8005d2c:	88fb      	ldrh	r3, [r7, #6]
 8005d2e:	461a      	mov	r2, r3
 8005d30:	68b9      	ldr	r1, [r7, #8]
 8005d32:	68f8      	ldr	r0, [r7, #12]
 8005d34:	f000 fa19 	bl	800616a <UART_Start_Receive_IT>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	e000      	b.n	8005d3e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005d3c:	2302      	movs	r3, #2
  }
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3710      	adds	r7, #16
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}
	...

08005d48 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b08a      	sub	sp, #40	; 0x28
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	68db      	ldr	r3, [r3, #12]
 8005d5e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	695b      	ldr	r3, [r3, #20]
 8005d66:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8005d68:	2300      	movs	r3, #0
 8005d6a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d72:	f003 030f 	and.w	r3, r3, #15
 8005d76:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8005d78:	69bb      	ldr	r3, [r7, #24]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d10d      	bne.n	8005d9a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d80:	f003 0320 	and.w	r3, r3, #32
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d008      	beq.n	8005d9a <HAL_UART_IRQHandler+0x52>
 8005d88:	6a3b      	ldr	r3, [r7, #32]
 8005d8a:	f003 0320 	and.w	r3, r3, #32
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d003      	beq.n	8005d9a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f000 fac9 	bl	800632a <UART_Receive_IT>
      return;
 8005d98:	e17b      	b.n	8006092 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005d9a:	69bb      	ldr	r3, [r7, #24]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	f000 80b1 	beq.w	8005f04 <HAL_UART_IRQHandler+0x1bc>
 8005da2:	69fb      	ldr	r3, [r7, #28]
 8005da4:	f003 0301 	and.w	r3, r3, #1
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d105      	bne.n	8005db8 <HAL_UART_IRQHandler+0x70>
 8005dac:	6a3b      	ldr	r3, [r7, #32]
 8005dae:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	f000 80a6 	beq.w	8005f04 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dba:	f003 0301 	and.w	r3, r3, #1
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d00a      	beq.n	8005dd8 <HAL_UART_IRQHandler+0x90>
 8005dc2:	6a3b      	ldr	r3, [r7, #32]
 8005dc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d005      	beq.n	8005dd8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dd0:	f043 0201 	orr.w	r2, r3, #1
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dda:	f003 0304 	and.w	r3, r3, #4
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d00a      	beq.n	8005df8 <HAL_UART_IRQHandler+0xb0>
 8005de2:	69fb      	ldr	r3, [r7, #28]
 8005de4:	f003 0301 	and.w	r3, r3, #1
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d005      	beq.n	8005df8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005df0:	f043 0202 	orr.w	r2, r3, #2
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dfa:	f003 0302 	and.w	r3, r3, #2
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d00a      	beq.n	8005e18 <HAL_UART_IRQHandler+0xd0>
 8005e02:	69fb      	ldr	r3, [r7, #28]
 8005e04:	f003 0301 	and.w	r3, r3, #1
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d005      	beq.n	8005e18 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e10:	f043 0204 	orr.w	r2, r3, #4
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e1a:	f003 0308 	and.w	r3, r3, #8
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d00f      	beq.n	8005e42 <HAL_UART_IRQHandler+0xfa>
 8005e22:	6a3b      	ldr	r3, [r7, #32]
 8005e24:	f003 0320 	and.w	r3, r3, #32
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d104      	bne.n	8005e36 <HAL_UART_IRQHandler+0xee>
 8005e2c:	69fb      	ldr	r3, [r7, #28]
 8005e2e:	f003 0301 	and.w	r3, r3, #1
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d005      	beq.n	8005e42 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e3a:	f043 0208 	orr.w	r2, r3, #8
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	f000 811e 	beq.w	8006088 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e4e:	f003 0320 	and.w	r3, r3, #32
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d007      	beq.n	8005e66 <HAL_UART_IRQHandler+0x11e>
 8005e56:	6a3b      	ldr	r3, [r7, #32]
 8005e58:	f003 0320 	and.w	r3, r3, #32
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d002      	beq.n	8005e66 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f000 fa62 	bl	800632a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	695b      	ldr	r3, [r3, #20]
 8005e6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	bf14      	ite	ne
 8005e74:	2301      	movne	r3, #1
 8005e76:	2300      	moveq	r3, #0
 8005e78:	b2db      	uxtb	r3, r3
 8005e7a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e80:	f003 0308 	and.w	r3, r3, #8
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d102      	bne.n	8005e8e <HAL_UART_IRQHandler+0x146>
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d031      	beq.n	8005ef2 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f000 f9a4 	bl	80061dc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	695b      	ldr	r3, [r3, #20]
 8005e9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d023      	beq.n	8005eea <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	695a      	ldr	r2, [r3, #20]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005eb0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d013      	beq.n	8005ee2 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ebe:	4a76      	ldr	r2, [pc, #472]	; (8006098 <HAL_UART_IRQHandler+0x350>)
 8005ec0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f7fd f976 	bl	80031b8 <HAL_DMA_Abort_IT>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d016      	beq.n	8005f00 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ed6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ed8:	687a      	ldr	r2, [r7, #4]
 8005eda:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005edc:	4610      	mov	r0, r2
 8005ede:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ee0:	e00e      	b.n	8005f00 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f000 f8e3 	bl	80060ae <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ee8:	e00a      	b.n	8005f00 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f000 f8df 	bl	80060ae <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ef0:	e006      	b.n	8005f00 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f000 f8db 	bl	80060ae <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2200      	movs	r2, #0
 8005efc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005efe:	e0c3      	b.n	8006088 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f00:	bf00      	nop
    return;
 8005f02:	e0c1      	b.n	8006088 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	f040 80a1 	bne.w	8006050 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8005f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f10:	f003 0310 	and.w	r3, r3, #16
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	f000 809b 	beq.w	8006050 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8005f1a:	6a3b      	ldr	r3, [r7, #32]
 8005f1c:	f003 0310 	and.w	r3, r3, #16
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	f000 8095 	beq.w	8006050 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005f26:	2300      	movs	r3, #0
 8005f28:	60fb      	str	r3, [r7, #12]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	60fb      	str	r3, [r7, #12]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	60fb      	str	r3, [r7, #12]
 8005f3a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	695b      	ldr	r3, [r3, #20]
 8005f42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d04e      	beq.n	8005fe8 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8005f54:	8a3b      	ldrh	r3, [r7, #16]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	f000 8098 	beq.w	800608c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005f60:	8a3a      	ldrh	r2, [r7, #16]
 8005f62:	429a      	cmp	r2, r3
 8005f64:	f080 8092 	bcs.w	800608c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	8a3a      	ldrh	r2, [r7, #16]
 8005f6c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f72:	699b      	ldr	r3, [r3, #24]
 8005f74:	2b20      	cmp	r3, #32
 8005f76:	d02b      	beq.n	8005fd0 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	68da      	ldr	r2, [r3, #12]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005f86:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	695a      	ldr	r2, [r3, #20]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f022 0201 	bic.w	r2, r2, #1
 8005f96:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	695a      	ldr	r2, [r3, #20]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fa6:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2220      	movs	r2, #32
 8005fac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	68da      	ldr	r2, [r3, #12]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f022 0210 	bic.w	r2, r2, #16
 8005fc4:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f7fd f8b9 	bl	8003142 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005fd8:	b29b      	uxth	r3, r3
 8005fda:	1ad3      	subs	r3, r2, r3
 8005fdc:	b29b      	uxth	r3, r3
 8005fde:	4619      	mov	r1, r3
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f000 f86d 	bl	80060c0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005fe6:	e051      	b.n	800608c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ff0:	b29b      	uxth	r3, r3
 8005ff2:	1ad3      	subs	r3, r2, r3
 8005ff4:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ffa:	b29b      	uxth	r3, r3
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d047      	beq.n	8006090 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8006000:	8a7b      	ldrh	r3, [r7, #18]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d044      	beq.n	8006090 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	68da      	ldr	r2, [r3, #12]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006014:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	695a      	ldr	r2, [r3, #20]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f022 0201 	bic.w	r2, r2, #1
 8006024:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2220      	movs	r2, #32
 800602a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2200      	movs	r2, #0
 8006032:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	68da      	ldr	r2, [r3, #12]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f022 0210 	bic.w	r2, r2, #16
 8006042:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006044:	8a7b      	ldrh	r3, [r7, #18]
 8006046:	4619      	mov	r1, r3
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f000 f839 	bl	80060c0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800604e:	e01f      	b.n	8006090 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006052:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006056:	2b00      	cmp	r3, #0
 8006058:	d008      	beq.n	800606c <HAL_UART_IRQHandler+0x324>
 800605a:	6a3b      	ldr	r3, [r7, #32]
 800605c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006060:	2b00      	cmp	r3, #0
 8006062:	d003      	beq.n	800606c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f000 f8f9 	bl	800625c <UART_Transmit_IT>
    return;
 800606a:	e012      	b.n	8006092 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800606c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800606e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006072:	2b00      	cmp	r3, #0
 8006074:	d00d      	beq.n	8006092 <HAL_UART_IRQHandler+0x34a>
 8006076:	6a3b      	ldr	r3, [r7, #32]
 8006078:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800607c:	2b00      	cmp	r3, #0
 800607e:	d008      	beq.n	8006092 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	f000 f93a 	bl	80062fa <UART_EndTransmit_IT>
    return;
 8006086:	e004      	b.n	8006092 <HAL_UART_IRQHandler+0x34a>
    return;
 8006088:	bf00      	nop
 800608a:	e002      	b.n	8006092 <HAL_UART_IRQHandler+0x34a>
      return;
 800608c:	bf00      	nop
 800608e:	e000      	b.n	8006092 <HAL_UART_IRQHandler+0x34a>
      return;
 8006090:	bf00      	nop
  }
}
 8006092:	3728      	adds	r7, #40	; 0x28
 8006094:	46bd      	mov	sp, r7
 8006096:	bd80      	pop	{r7, pc}
 8006098:	08006235 	.word	0x08006235

0800609c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800609c:	b480      	push	{r7}
 800609e:	b083      	sub	sp, #12
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80060a4:	bf00      	nop
 80060a6:	370c      	adds	r7, #12
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bc80      	pop	{r7}
 80060ac:	4770      	bx	lr

080060ae <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80060ae:	b480      	push	{r7}
 80060b0:	b083      	sub	sp, #12
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80060b6:	bf00      	nop
 80060b8:	370c      	adds	r7, #12
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bc80      	pop	{r7}
 80060be:	4770      	bx	lr

080060c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b083      	sub	sp, #12
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
 80060c8:	460b      	mov	r3, r1
 80060ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80060cc:	bf00      	nop
 80060ce:	370c      	adds	r7, #12
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bc80      	pop	{r7}
 80060d4:	4770      	bx	lr

080060d6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80060d6:	b580      	push	{r7, lr}
 80060d8:	b084      	sub	sp, #16
 80060da:	af00      	add	r7, sp, #0
 80060dc:	60f8      	str	r0, [r7, #12]
 80060de:	60b9      	str	r1, [r7, #8]
 80060e0:	603b      	str	r3, [r7, #0]
 80060e2:	4613      	mov	r3, r2
 80060e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060e6:	e02c      	b.n	8006142 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060e8:	69bb      	ldr	r3, [r7, #24]
 80060ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060ee:	d028      	beq.n	8006142 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80060f0:	69bb      	ldr	r3, [r7, #24]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d007      	beq.n	8006106 <UART_WaitOnFlagUntilTimeout+0x30>
 80060f6:	f7fc fee9 	bl	8002ecc <HAL_GetTick>
 80060fa:	4602      	mov	r2, r0
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	1ad3      	subs	r3, r2, r3
 8006100:	69ba      	ldr	r2, [r7, #24]
 8006102:	429a      	cmp	r2, r3
 8006104:	d21d      	bcs.n	8006142 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	68da      	ldr	r2, [r3, #12]
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006114:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	695a      	ldr	r2, [r3, #20]
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f022 0201 	bic.w	r2, r2, #1
 8006124:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2220      	movs	r2, #32
 800612a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2220      	movs	r2, #32
 8006132:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2200      	movs	r2, #0
 800613a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800613e:	2303      	movs	r3, #3
 8006140:	e00f      	b.n	8006162 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	681a      	ldr	r2, [r3, #0]
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	4013      	ands	r3, r2
 800614c:	68ba      	ldr	r2, [r7, #8]
 800614e:	429a      	cmp	r2, r3
 8006150:	bf0c      	ite	eq
 8006152:	2301      	moveq	r3, #1
 8006154:	2300      	movne	r3, #0
 8006156:	b2db      	uxtb	r3, r3
 8006158:	461a      	mov	r2, r3
 800615a:	79fb      	ldrb	r3, [r7, #7]
 800615c:	429a      	cmp	r2, r3
 800615e:	d0c3      	beq.n	80060e8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006160:	2300      	movs	r3, #0
}
 8006162:	4618      	mov	r0, r3
 8006164:	3710      	adds	r7, #16
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}

0800616a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800616a:	b480      	push	{r7}
 800616c:	b085      	sub	sp, #20
 800616e:	af00      	add	r7, sp, #0
 8006170:	60f8      	str	r0, [r7, #12]
 8006172:	60b9      	str	r1, [r7, #8]
 8006174:	4613      	mov	r3, r2
 8006176:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	68ba      	ldr	r2, [r7, #8]
 800617c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	88fa      	ldrh	r2, [r7, #6]
 8006182:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	88fa      	ldrh	r2, [r7, #6]
 8006188:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2200      	movs	r2, #0
 800618e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2222      	movs	r2, #34	; 0x22
 8006194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2200      	movs	r2, #0
 800619c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	68da      	ldr	r2, [r3, #12]
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80061ae:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	695a      	ldr	r2, [r3, #20]
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f042 0201 	orr.w	r2, r2, #1
 80061be:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	68da      	ldr	r2, [r3, #12]
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f042 0220 	orr.w	r2, r2, #32
 80061ce:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80061d0:	2300      	movs	r3, #0
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3714      	adds	r7, #20
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bc80      	pop	{r7}
 80061da:	4770      	bx	lr

080061dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80061dc:	b480      	push	{r7}
 80061de:	b083      	sub	sp, #12
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	68da      	ldr	r2, [r3, #12]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80061f2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	695a      	ldr	r2, [r3, #20]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f022 0201 	bic.w	r2, r2, #1
 8006202:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006208:	2b01      	cmp	r3, #1
 800620a:	d107      	bne.n	800621c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	68da      	ldr	r2, [r3, #12]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f022 0210 	bic.w	r2, r2, #16
 800621a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2220      	movs	r2, #32
 8006220:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2200      	movs	r2, #0
 8006228:	631a      	str	r2, [r3, #48]	; 0x30
}
 800622a:	bf00      	nop
 800622c:	370c      	adds	r7, #12
 800622e:	46bd      	mov	sp, r7
 8006230:	bc80      	pop	{r7}
 8006232:	4770      	bx	lr

08006234 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b084      	sub	sp, #16
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006240:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2200      	movs	r2, #0
 8006246:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2200      	movs	r2, #0
 800624c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800624e:	68f8      	ldr	r0, [r7, #12]
 8006250:	f7ff ff2d 	bl	80060ae <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006254:	bf00      	nop
 8006256:	3710      	adds	r7, #16
 8006258:	46bd      	mov	sp, r7
 800625a:	bd80      	pop	{r7, pc}

0800625c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800625c:	b480      	push	{r7}
 800625e:	b085      	sub	sp, #20
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800626a:	b2db      	uxtb	r3, r3
 800626c:	2b21      	cmp	r3, #33	; 0x21
 800626e:	d13e      	bne.n	80062ee <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	689b      	ldr	r3, [r3, #8]
 8006274:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006278:	d114      	bne.n	80062a4 <UART_Transmit_IT+0x48>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	691b      	ldr	r3, [r3, #16]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d110      	bne.n	80062a4 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6a1b      	ldr	r3, [r3, #32]
 8006286:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	881b      	ldrh	r3, [r3, #0]
 800628c:	461a      	mov	r2, r3
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006296:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6a1b      	ldr	r3, [r3, #32]
 800629c:	1c9a      	adds	r2, r3, #2
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	621a      	str	r2, [r3, #32]
 80062a2:	e008      	b.n	80062b6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6a1b      	ldr	r3, [r3, #32]
 80062a8:	1c59      	adds	r1, r3, #1
 80062aa:	687a      	ldr	r2, [r7, #4]
 80062ac:	6211      	str	r1, [r2, #32]
 80062ae:	781a      	ldrb	r2, [r3, #0]
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80062ba:	b29b      	uxth	r3, r3
 80062bc:	3b01      	subs	r3, #1
 80062be:	b29b      	uxth	r3, r3
 80062c0:	687a      	ldr	r2, [r7, #4]
 80062c2:	4619      	mov	r1, r3
 80062c4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d10f      	bne.n	80062ea <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	68da      	ldr	r2, [r3, #12]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80062d8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	68da      	ldr	r2, [r3, #12]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80062e8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80062ea:	2300      	movs	r3, #0
 80062ec:	e000      	b.n	80062f0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80062ee:	2302      	movs	r3, #2
  }
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	3714      	adds	r7, #20
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bc80      	pop	{r7}
 80062f8:	4770      	bx	lr

080062fa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80062fa:	b580      	push	{r7, lr}
 80062fc:	b082      	sub	sp, #8
 80062fe:	af00      	add	r7, sp, #0
 8006300:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	68da      	ldr	r2, [r3, #12]
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006310:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2220      	movs	r2, #32
 8006316:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f7ff febe 	bl	800609c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006320:	2300      	movs	r3, #0
}
 8006322:	4618      	mov	r0, r3
 8006324:	3708      	adds	r7, #8
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}

0800632a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800632a:	b580      	push	{r7, lr}
 800632c:	b086      	sub	sp, #24
 800632e:	af00      	add	r7, sp, #0
 8006330:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006338:	b2db      	uxtb	r3, r3
 800633a:	2b22      	cmp	r3, #34	; 0x22
 800633c:	f040 8099 	bne.w	8006472 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	689b      	ldr	r3, [r3, #8]
 8006344:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006348:	d117      	bne.n	800637a <UART_Receive_IT+0x50>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	691b      	ldr	r3, [r3, #16]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d113      	bne.n	800637a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006352:	2300      	movs	r3, #0
 8006354:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800635a:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	685b      	ldr	r3, [r3, #4]
 8006362:	b29b      	uxth	r3, r3
 8006364:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006368:	b29a      	uxth	r2, r3
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006372:	1c9a      	adds	r2, r3, #2
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	629a      	str	r2, [r3, #40]	; 0x28
 8006378:	e026      	b.n	80063c8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800637e:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8006380:	2300      	movs	r3, #0
 8006382:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800638c:	d007      	beq.n	800639e <UART_Receive_IT+0x74>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	689b      	ldr	r3, [r3, #8]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d10a      	bne.n	80063ac <UART_Receive_IT+0x82>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	691b      	ldr	r3, [r3, #16]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d106      	bne.n	80063ac <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	b2da      	uxtb	r2, r3
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	701a      	strb	r2, [r3, #0]
 80063aa:	e008      	b.n	80063be <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	b2db      	uxtb	r3, r3
 80063b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063b8:	b2da      	uxtb	r2, r3
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063c2:	1c5a      	adds	r2, r3, #1
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80063cc:	b29b      	uxth	r3, r3
 80063ce:	3b01      	subs	r3, #1
 80063d0:	b29b      	uxth	r3, r3
 80063d2:	687a      	ldr	r2, [r7, #4]
 80063d4:	4619      	mov	r1, r3
 80063d6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d148      	bne.n	800646e <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	68da      	ldr	r2, [r3, #12]
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f022 0220 	bic.w	r2, r2, #32
 80063ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	68da      	ldr	r2, [r3, #12]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80063fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	695a      	ldr	r2, [r3, #20]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f022 0201 	bic.w	r2, r2, #1
 800640a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2220      	movs	r2, #32
 8006410:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006418:	2b01      	cmp	r3, #1
 800641a:	d123      	bne.n	8006464 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2200      	movs	r2, #0
 8006420:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	68da      	ldr	r2, [r3, #12]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f022 0210 	bic.w	r2, r2, #16
 8006430:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f003 0310 	and.w	r3, r3, #16
 800643c:	2b10      	cmp	r3, #16
 800643e:	d10a      	bne.n	8006456 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006440:	2300      	movs	r3, #0
 8006442:	60fb      	str	r3, [r7, #12]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	60fb      	str	r3, [r7, #12]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	60fb      	str	r3, [r7, #12]
 8006454:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800645a:	4619      	mov	r1, r3
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f7ff fe2f 	bl	80060c0 <HAL_UARTEx_RxEventCallback>
 8006462:	e002      	b.n	800646a <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f7fc f9bf 	bl	80027e8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800646a:	2300      	movs	r3, #0
 800646c:	e002      	b.n	8006474 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800646e:	2300      	movs	r3, #0
 8006470:	e000      	b.n	8006474 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8006472:	2302      	movs	r3, #2
  }
}
 8006474:	4618      	mov	r0, r3
 8006476:	3718      	adds	r7, #24
 8006478:	46bd      	mov	sp, r7
 800647a:	bd80      	pop	{r7, pc}

0800647c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b084      	sub	sp, #16
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	691b      	ldr	r3, [r3, #16]
 800648a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	68da      	ldr	r2, [r3, #12]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	430a      	orrs	r2, r1
 8006498:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	689a      	ldr	r2, [r3, #8]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	691b      	ldr	r3, [r3, #16]
 80064a2:	431a      	orrs	r2, r3
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	695b      	ldr	r3, [r3, #20]
 80064a8:	4313      	orrs	r3, r2
 80064aa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	68db      	ldr	r3, [r3, #12]
 80064b2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80064b6:	f023 030c 	bic.w	r3, r3, #12
 80064ba:	687a      	ldr	r2, [r7, #4]
 80064bc:	6812      	ldr	r2, [r2, #0]
 80064be:	68b9      	ldr	r1, [r7, #8]
 80064c0:	430b      	orrs	r3, r1
 80064c2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	695b      	ldr	r3, [r3, #20]
 80064ca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	699a      	ldr	r2, [r3, #24]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	430a      	orrs	r2, r1
 80064d8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a2c      	ldr	r2, [pc, #176]	; (8006590 <UART_SetConfig+0x114>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d103      	bne.n	80064ec <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80064e4:	f7fe fc4a 	bl	8004d7c <HAL_RCC_GetPCLK2Freq>
 80064e8:	60f8      	str	r0, [r7, #12]
 80064ea:	e002      	b.n	80064f2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80064ec:	f7fe fc32 	bl	8004d54 <HAL_RCC_GetPCLK1Freq>
 80064f0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80064f2:	68fa      	ldr	r2, [r7, #12]
 80064f4:	4613      	mov	r3, r2
 80064f6:	009b      	lsls	r3, r3, #2
 80064f8:	4413      	add	r3, r2
 80064fa:	009a      	lsls	r2, r3, #2
 80064fc:	441a      	add	r2, r3
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	009b      	lsls	r3, r3, #2
 8006504:	fbb2 f3f3 	udiv	r3, r2, r3
 8006508:	4a22      	ldr	r2, [pc, #136]	; (8006594 <UART_SetConfig+0x118>)
 800650a:	fba2 2303 	umull	r2, r3, r2, r3
 800650e:	095b      	lsrs	r3, r3, #5
 8006510:	0119      	lsls	r1, r3, #4
 8006512:	68fa      	ldr	r2, [r7, #12]
 8006514:	4613      	mov	r3, r2
 8006516:	009b      	lsls	r3, r3, #2
 8006518:	4413      	add	r3, r2
 800651a:	009a      	lsls	r2, r3, #2
 800651c:	441a      	add	r2, r3
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	009b      	lsls	r3, r3, #2
 8006524:	fbb2 f2f3 	udiv	r2, r2, r3
 8006528:	4b1a      	ldr	r3, [pc, #104]	; (8006594 <UART_SetConfig+0x118>)
 800652a:	fba3 0302 	umull	r0, r3, r3, r2
 800652e:	095b      	lsrs	r3, r3, #5
 8006530:	2064      	movs	r0, #100	; 0x64
 8006532:	fb00 f303 	mul.w	r3, r0, r3
 8006536:	1ad3      	subs	r3, r2, r3
 8006538:	011b      	lsls	r3, r3, #4
 800653a:	3332      	adds	r3, #50	; 0x32
 800653c:	4a15      	ldr	r2, [pc, #84]	; (8006594 <UART_SetConfig+0x118>)
 800653e:	fba2 2303 	umull	r2, r3, r2, r3
 8006542:	095b      	lsrs	r3, r3, #5
 8006544:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006548:	4419      	add	r1, r3
 800654a:	68fa      	ldr	r2, [r7, #12]
 800654c:	4613      	mov	r3, r2
 800654e:	009b      	lsls	r3, r3, #2
 8006550:	4413      	add	r3, r2
 8006552:	009a      	lsls	r2, r3, #2
 8006554:	441a      	add	r2, r3
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	685b      	ldr	r3, [r3, #4]
 800655a:	009b      	lsls	r3, r3, #2
 800655c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006560:	4b0c      	ldr	r3, [pc, #48]	; (8006594 <UART_SetConfig+0x118>)
 8006562:	fba3 0302 	umull	r0, r3, r3, r2
 8006566:	095b      	lsrs	r3, r3, #5
 8006568:	2064      	movs	r0, #100	; 0x64
 800656a:	fb00 f303 	mul.w	r3, r0, r3
 800656e:	1ad3      	subs	r3, r2, r3
 8006570:	011b      	lsls	r3, r3, #4
 8006572:	3332      	adds	r3, #50	; 0x32
 8006574:	4a07      	ldr	r2, [pc, #28]	; (8006594 <UART_SetConfig+0x118>)
 8006576:	fba2 2303 	umull	r2, r3, r2, r3
 800657a:	095b      	lsrs	r3, r3, #5
 800657c:	f003 020f 	and.w	r2, r3, #15
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	440a      	add	r2, r1
 8006586:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006588:	bf00      	nop
 800658a:	3710      	adds	r7, #16
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}
 8006590:	40013800 	.word	0x40013800
 8006594:	51eb851f 	.word	0x51eb851f

08006598 <__errno>:
 8006598:	4b01      	ldr	r3, [pc, #4]	; (80065a0 <__errno+0x8>)
 800659a:	6818      	ldr	r0, [r3, #0]
 800659c:	4770      	bx	lr
 800659e:	bf00      	nop
 80065a0:	20000080 	.word	0x20000080

080065a4 <__libc_init_array>:
 80065a4:	b570      	push	{r4, r5, r6, lr}
 80065a6:	2600      	movs	r6, #0
 80065a8:	4d0c      	ldr	r5, [pc, #48]	; (80065dc <__libc_init_array+0x38>)
 80065aa:	4c0d      	ldr	r4, [pc, #52]	; (80065e0 <__libc_init_array+0x3c>)
 80065ac:	1b64      	subs	r4, r4, r5
 80065ae:	10a4      	asrs	r4, r4, #2
 80065b0:	42a6      	cmp	r6, r4
 80065b2:	d109      	bne.n	80065c8 <__libc_init_array+0x24>
 80065b4:	f003 fe62 	bl	800a27c <_init>
 80065b8:	2600      	movs	r6, #0
 80065ba:	4d0a      	ldr	r5, [pc, #40]	; (80065e4 <__libc_init_array+0x40>)
 80065bc:	4c0a      	ldr	r4, [pc, #40]	; (80065e8 <__libc_init_array+0x44>)
 80065be:	1b64      	subs	r4, r4, r5
 80065c0:	10a4      	asrs	r4, r4, #2
 80065c2:	42a6      	cmp	r6, r4
 80065c4:	d105      	bne.n	80065d2 <__libc_init_array+0x2e>
 80065c6:	bd70      	pop	{r4, r5, r6, pc}
 80065c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80065cc:	4798      	blx	r3
 80065ce:	3601      	adds	r6, #1
 80065d0:	e7ee      	b.n	80065b0 <__libc_init_array+0xc>
 80065d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80065d6:	4798      	blx	r3
 80065d8:	3601      	adds	r6, #1
 80065da:	e7f2      	b.n	80065c2 <__libc_init_array+0x1e>
 80065dc:	0800ae18 	.word	0x0800ae18
 80065e0:	0800ae18 	.word	0x0800ae18
 80065e4:	0800ae18 	.word	0x0800ae18
 80065e8:	0800ae1c 	.word	0x0800ae1c

080065ec <memset>:
 80065ec:	4603      	mov	r3, r0
 80065ee:	4402      	add	r2, r0
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d100      	bne.n	80065f6 <memset+0xa>
 80065f4:	4770      	bx	lr
 80065f6:	f803 1b01 	strb.w	r1, [r3], #1
 80065fa:	e7f9      	b.n	80065f0 <memset+0x4>

080065fc <__cvt>:
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006602:	461f      	mov	r7, r3
 8006604:	bfbb      	ittet	lt
 8006606:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800660a:	461f      	movlt	r7, r3
 800660c:	2300      	movge	r3, #0
 800660e:	232d      	movlt	r3, #45	; 0x2d
 8006610:	b088      	sub	sp, #32
 8006612:	4614      	mov	r4, r2
 8006614:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006616:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006618:	7013      	strb	r3, [r2, #0]
 800661a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800661c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8006620:	f023 0820 	bic.w	r8, r3, #32
 8006624:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006628:	d005      	beq.n	8006636 <__cvt+0x3a>
 800662a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800662e:	d100      	bne.n	8006632 <__cvt+0x36>
 8006630:	3501      	adds	r5, #1
 8006632:	2302      	movs	r3, #2
 8006634:	e000      	b.n	8006638 <__cvt+0x3c>
 8006636:	2303      	movs	r3, #3
 8006638:	aa07      	add	r2, sp, #28
 800663a:	9204      	str	r2, [sp, #16]
 800663c:	aa06      	add	r2, sp, #24
 800663e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006642:	e9cd 3500 	strd	r3, r5, [sp]
 8006646:	4622      	mov	r2, r4
 8006648:	463b      	mov	r3, r7
 800664a:	f000 fcfd 	bl	8007048 <_dtoa_r>
 800664e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006652:	4606      	mov	r6, r0
 8006654:	d102      	bne.n	800665c <__cvt+0x60>
 8006656:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006658:	07db      	lsls	r3, r3, #31
 800665a:	d522      	bpl.n	80066a2 <__cvt+0xa6>
 800665c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006660:	eb06 0905 	add.w	r9, r6, r5
 8006664:	d110      	bne.n	8006688 <__cvt+0x8c>
 8006666:	7833      	ldrb	r3, [r6, #0]
 8006668:	2b30      	cmp	r3, #48	; 0x30
 800666a:	d10a      	bne.n	8006682 <__cvt+0x86>
 800666c:	2200      	movs	r2, #0
 800666e:	2300      	movs	r3, #0
 8006670:	4620      	mov	r0, r4
 8006672:	4639      	mov	r1, r7
 8006674:	f7fa f998 	bl	80009a8 <__aeabi_dcmpeq>
 8006678:	b918      	cbnz	r0, 8006682 <__cvt+0x86>
 800667a:	f1c5 0501 	rsb	r5, r5, #1
 800667e:	f8ca 5000 	str.w	r5, [sl]
 8006682:	f8da 3000 	ldr.w	r3, [sl]
 8006686:	4499      	add	r9, r3
 8006688:	2200      	movs	r2, #0
 800668a:	2300      	movs	r3, #0
 800668c:	4620      	mov	r0, r4
 800668e:	4639      	mov	r1, r7
 8006690:	f7fa f98a 	bl	80009a8 <__aeabi_dcmpeq>
 8006694:	b108      	cbz	r0, 800669a <__cvt+0x9e>
 8006696:	f8cd 901c 	str.w	r9, [sp, #28]
 800669a:	2230      	movs	r2, #48	; 0x30
 800669c:	9b07      	ldr	r3, [sp, #28]
 800669e:	454b      	cmp	r3, r9
 80066a0:	d307      	bcc.n	80066b2 <__cvt+0xb6>
 80066a2:	4630      	mov	r0, r6
 80066a4:	9b07      	ldr	r3, [sp, #28]
 80066a6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80066a8:	1b9b      	subs	r3, r3, r6
 80066aa:	6013      	str	r3, [r2, #0]
 80066ac:	b008      	add	sp, #32
 80066ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066b2:	1c59      	adds	r1, r3, #1
 80066b4:	9107      	str	r1, [sp, #28]
 80066b6:	701a      	strb	r2, [r3, #0]
 80066b8:	e7f0      	b.n	800669c <__cvt+0xa0>

080066ba <__exponent>:
 80066ba:	4603      	mov	r3, r0
 80066bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80066be:	2900      	cmp	r1, #0
 80066c0:	f803 2b02 	strb.w	r2, [r3], #2
 80066c4:	bfb6      	itet	lt
 80066c6:	222d      	movlt	r2, #45	; 0x2d
 80066c8:	222b      	movge	r2, #43	; 0x2b
 80066ca:	4249      	neglt	r1, r1
 80066cc:	2909      	cmp	r1, #9
 80066ce:	7042      	strb	r2, [r0, #1]
 80066d0:	dd2b      	ble.n	800672a <__exponent+0x70>
 80066d2:	f10d 0407 	add.w	r4, sp, #7
 80066d6:	46a4      	mov	ip, r4
 80066d8:	270a      	movs	r7, #10
 80066da:	fb91 f6f7 	sdiv	r6, r1, r7
 80066de:	460a      	mov	r2, r1
 80066e0:	46a6      	mov	lr, r4
 80066e2:	fb07 1516 	mls	r5, r7, r6, r1
 80066e6:	2a63      	cmp	r2, #99	; 0x63
 80066e8:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80066ec:	4631      	mov	r1, r6
 80066ee:	f104 34ff 	add.w	r4, r4, #4294967295
 80066f2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80066f6:	dcf0      	bgt.n	80066da <__exponent+0x20>
 80066f8:	3130      	adds	r1, #48	; 0x30
 80066fa:	f1ae 0502 	sub.w	r5, lr, #2
 80066fe:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006702:	4629      	mov	r1, r5
 8006704:	1c44      	adds	r4, r0, #1
 8006706:	4561      	cmp	r1, ip
 8006708:	d30a      	bcc.n	8006720 <__exponent+0x66>
 800670a:	f10d 0209 	add.w	r2, sp, #9
 800670e:	eba2 020e 	sub.w	r2, r2, lr
 8006712:	4565      	cmp	r5, ip
 8006714:	bf88      	it	hi
 8006716:	2200      	movhi	r2, #0
 8006718:	4413      	add	r3, r2
 800671a:	1a18      	subs	r0, r3, r0
 800671c:	b003      	add	sp, #12
 800671e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006720:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006724:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006728:	e7ed      	b.n	8006706 <__exponent+0x4c>
 800672a:	2330      	movs	r3, #48	; 0x30
 800672c:	3130      	adds	r1, #48	; 0x30
 800672e:	7083      	strb	r3, [r0, #2]
 8006730:	70c1      	strb	r1, [r0, #3]
 8006732:	1d03      	adds	r3, r0, #4
 8006734:	e7f1      	b.n	800671a <__exponent+0x60>
	...

08006738 <_printf_float>:
 8006738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800673c:	b091      	sub	sp, #68	; 0x44
 800673e:	460c      	mov	r4, r1
 8006740:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8006744:	4616      	mov	r6, r2
 8006746:	461f      	mov	r7, r3
 8006748:	4605      	mov	r5, r0
 800674a:	f001 fb61 	bl	8007e10 <_localeconv_r>
 800674e:	6803      	ldr	r3, [r0, #0]
 8006750:	4618      	mov	r0, r3
 8006752:	9309      	str	r3, [sp, #36]	; 0x24
 8006754:	f7f9 fcfc 	bl	8000150 <strlen>
 8006758:	2300      	movs	r3, #0
 800675a:	930e      	str	r3, [sp, #56]	; 0x38
 800675c:	f8d8 3000 	ldr.w	r3, [r8]
 8006760:	900a      	str	r0, [sp, #40]	; 0x28
 8006762:	3307      	adds	r3, #7
 8006764:	f023 0307 	bic.w	r3, r3, #7
 8006768:	f103 0208 	add.w	r2, r3, #8
 800676c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006770:	f8d4 b000 	ldr.w	fp, [r4]
 8006774:	f8c8 2000 	str.w	r2, [r8]
 8006778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800677c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006780:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8006784:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8006788:	930b      	str	r3, [sp, #44]	; 0x2c
 800678a:	f04f 32ff 	mov.w	r2, #4294967295
 800678e:	4640      	mov	r0, r8
 8006790:	4b9c      	ldr	r3, [pc, #624]	; (8006a04 <_printf_float+0x2cc>)
 8006792:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006794:	f7fa f93a 	bl	8000a0c <__aeabi_dcmpun>
 8006798:	bb70      	cbnz	r0, 80067f8 <_printf_float+0xc0>
 800679a:	f04f 32ff 	mov.w	r2, #4294967295
 800679e:	4640      	mov	r0, r8
 80067a0:	4b98      	ldr	r3, [pc, #608]	; (8006a04 <_printf_float+0x2cc>)
 80067a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80067a4:	f7fa f914 	bl	80009d0 <__aeabi_dcmple>
 80067a8:	bb30      	cbnz	r0, 80067f8 <_printf_float+0xc0>
 80067aa:	2200      	movs	r2, #0
 80067ac:	2300      	movs	r3, #0
 80067ae:	4640      	mov	r0, r8
 80067b0:	4651      	mov	r1, sl
 80067b2:	f7fa f903 	bl	80009bc <__aeabi_dcmplt>
 80067b6:	b110      	cbz	r0, 80067be <_printf_float+0x86>
 80067b8:	232d      	movs	r3, #45	; 0x2d
 80067ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067be:	4b92      	ldr	r3, [pc, #584]	; (8006a08 <_printf_float+0x2d0>)
 80067c0:	4892      	ldr	r0, [pc, #584]	; (8006a0c <_printf_float+0x2d4>)
 80067c2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80067c6:	bf94      	ite	ls
 80067c8:	4698      	movls	r8, r3
 80067ca:	4680      	movhi	r8, r0
 80067cc:	2303      	movs	r3, #3
 80067ce:	f04f 0a00 	mov.w	sl, #0
 80067d2:	6123      	str	r3, [r4, #16]
 80067d4:	f02b 0304 	bic.w	r3, fp, #4
 80067d8:	6023      	str	r3, [r4, #0]
 80067da:	4633      	mov	r3, r6
 80067dc:	4621      	mov	r1, r4
 80067de:	4628      	mov	r0, r5
 80067e0:	9700      	str	r7, [sp, #0]
 80067e2:	aa0f      	add	r2, sp, #60	; 0x3c
 80067e4:	f000 f9d4 	bl	8006b90 <_printf_common>
 80067e8:	3001      	adds	r0, #1
 80067ea:	f040 8090 	bne.w	800690e <_printf_float+0x1d6>
 80067ee:	f04f 30ff 	mov.w	r0, #4294967295
 80067f2:	b011      	add	sp, #68	; 0x44
 80067f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067f8:	4642      	mov	r2, r8
 80067fa:	4653      	mov	r3, sl
 80067fc:	4640      	mov	r0, r8
 80067fe:	4651      	mov	r1, sl
 8006800:	f7fa f904 	bl	8000a0c <__aeabi_dcmpun>
 8006804:	b148      	cbz	r0, 800681a <_printf_float+0xe2>
 8006806:	f1ba 0f00 	cmp.w	sl, #0
 800680a:	bfb8      	it	lt
 800680c:	232d      	movlt	r3, #45	; 0x2d
 800680e:	4880      	ldr	r0, [pc, #512]	; (8006a10 <_printf_float+0x2d8>)
 8006810:	bfb8      	it	lt
 8006812:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006816:	4b7f      	ldr	r3, [pc, #508]	; (8006a14 <_printf_float+0x2dc>)
 8006818:	e7d3      	b.n	80067c2 <_printf_float+0x8a>
 800681a:	6863      	ldr	r3, [r4, #4]
 800681c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006820:	1c5a      	adds	r2, r3, #1
 8006822:	d142      	bne.n	80068aa <_printf_float+0x172>
 8006824:	2306      	movs	r3, #6
 8006826:	6063      	str	r3, [r4, #4]
 8006828:	2200      	movs	r2, #0
 800682a:	9206      	str	r2, [sp, #24]
 800682c:	aa0e      	add	r2, sp, #56	; 0x38
 800682e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8006832:	aa0d      	add	r2, sp, #52	; 0x34
 8006834:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8006838:	9203      	str	r2, [sp, #12]
 800683a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800683e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006842:	6023      	str	r3, [r4, #0]
 8006844:	6863      	ldr	r3, [r4, #4]
 8006846:	4642      	mov	r2, r8
 8006848:	9300      	str	r3, [sp, #0]
 800684a:	4628      	mov	r0, r5
 800684c:	4653      	mov	r3, sl
 800684e:	910b      	str	r1, [sp, #44]	; 0x2c
 8006850:	f7ff fed4 	bl	80065fc <__cvt>
 8006854:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006856:	4680      	mov	r8, r0
 8006858:	2947      	cmp	r1, #71	; 0x47
 800685a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800685c:	d108      	bne.n	8006870 <_printf_float+0x138>
 800685e:	1cc8      	adds	r0, r1, #3
 8006860:	db02      	blt.n	8006868 <_printf_float+0x130>
 8006862:	6863      	ldr	r3, [r4, #4]
 8006864:	4299      	cmp	r1, r3
 8006866:	dd40      	ble.n	80068ea <_printf_float+0x1b2>
 8006868:	f1a9 0902 	sub.w	r9, r9, #2
 800686c:	fa5f f989 	uxtb.w	r9, r9
 8006870:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006874:	d81f      	bhi.n	80068b6 <_printf_float+0x17e>
 8006876:	464a      	mov	r2, r9
 8006878:	3901      	subs	r1, #1
 800687a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800687e:	910d      	str	r1, [sp, #52]	; 0x34
 8006880:	f7ff ff1b 	bl	80066ba <__exponent>
 8006884:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006886:	4682      	mov	sl, r0
 8006888:	1813      	adds	r3, r2, r0
 800688a:	2a01      	cmp	r2, #1
 800688c:	6123      	str	r3, [r4, #16]
 800688e:	dc02      	bgt.n	8006896 <_printf_float+0x15e>
 8006890:	6822      	ldr	r2, [r4, #0]
 8006892:	07d2      	lsls	r2, r2, #31
 8006894:	d501      	bpl.n	800689a <_printf_float+0x162>
 8006896:	3301      	adds	r3, #1
 8006898:	6123      	str	r3, [r4, #16]
 800689a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d09b      	beq.n	80067da <_printf_float+0xa2>
 80068a2:	232d      	movs	r3, #45	; 0x2d
 80068a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80068a8:	e797      	b.n	80067da <_printf_float+0xa2>
 80068aa:	2947      	cmp	r1, #71	; 0x47
 80068ac:	d1bc      	bne.n	8006828 <_printf_float+0xf0>
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d1ba      	bne.n	8006828 <_printf_float+0xf0>
 80068b2:	2301      	movs	r3, #1
 80068b4:	e7b7      	b.n	8006826 <_printf_float+0xee>
 80068b6:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80068ba:	d118      	bne.n	80068ee <_printf_float+0x1b6>
 80068bc:	2900      	cmp	r1, #0
 80068be:	6863      	ldr	r3, [r4, #4]
 80068c0:	dd0b      	ble.n	80068da <_printf_float+0x1a2>
 80068c2:	6121      	str	r1, [r4, #16]
 80068c4:	b913      	cbnz	r3, 80068cc <_printf_float+0x194>
 80068c6:	6822      	ldr	r2, [r4, #0]
 80068c8:	07d0      	lsls	r0, r2, #31
 80068ca:	d502      	bpl.n	80068d2 <_printf_float+0x19a>
 80068cc:	3301      	adds	r3, #1
 80068ce:	440b      	add	r3, r1
 80068d0:	6123      	str	r3, [r4, #16]
 80068d2:	f04f 0a00 	mov.w	sl, #0
 80068d6:	65a1      	str	r1, [r4, #88]	; 0x58
 80068d8:	e7df      	b.n	800689a <_printf_float+0x162>
 80068da:	b913      	cbnz	r3, 80068e2 <_printf_float+0x1aa>
 80068dc:	6822      	ldr	r2, [r4, #0]
 80068de:	07d2      	lsls	r2, r2, #31
 80068e0:	d501      	bpl.n	80068e6 <_printf_float+0x1ae>
 80068e2:	3302      	adds	r3, #2
 80068e4:	e7f4      	b.n	80068d0 <_printf_float+0x198>
 80068e6:	2301      	movs	r3, #1
 80068e8:	e7f2      	b.n	80068d0 <_printf_float+0x198>
 80068ea:	f04f 0967 	mov.w	r9, #103	; 0x67
 80068ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80068f0:	4299      	cmp	r1, r3
 80068f2:	db05      	blt.n	8006900 <_printf_float+0x1c8>
 80068f4:	6823      	ldr	r3, [r4, #0]
 80068f6:	6121      	str	r1, [r4, #16]
 80068f8:	07d8      	lsls	r0, r3, #31
 80068fa:	d5ea      	bpl.n	80068d2 <_printf_float+0x19a>
 80068fc:	1c4b      	adds	r3, r1, #1
 80068fe:	e7e7      	b.n	80068d0 <_printf_float+0x198>
 8006900:	2900      	cmp	r1, #0
 8006902:	bfcc      	ite	gt
 8006904:	2201      	movgt	r2, #1
 8006906:	f1c1 0202 	rsble	r2, r1, #2
 800690a:	4413      	add	r3, r2
 800690c:	e7e0      	b.n	80068d0 <_printf_float+0x198>
 800690e:	6823      	ldr	r3, [r4, #0]
 8006910:	055a      	lsls	r2, r3, #21
 8006912:	d407      	bmi.n	8006924 <_printf_float+0x1ec>
 8006914:	6923      	ldr	r3, [r4, #16]
 8006916:	4642      	mov	r2, r8
 8006918:	4631      	mov	r1, r6
 800691a:	4628      	mov	r0, r5
 800691c:	47b8      	blx	r7
 800691e:	3001      	adds	r0, #1
 8006920:	d12b      	bne.n	800697a <_printf_float+0x242>
 8006922:	e764      	b.n	80067ee <_printf_float+0xb6>
 8006924:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006928:	f240 80dd 	bls.w	8006ae6 <_printf_float+0x3ae>
 800692c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006930:	2200      	movs	r2, #0
 8006932:	2300      	movs	r3, #0
 8006934:	f7fa f838 	bl	80009a8 <__aeabi_dcmpeq>
 8006938:	2800      	cmp	r0, #0
 800693a:	d033      	beq.n	80069a4 <_printf_float+0x26c>
 800693c:	2301      	movs	r3, #1
 800693e:	4631      	mov	r1, r6
 8006940:	4628      	mov	r0, r5
 8006942:	4a35      	ldr	r2, [pc, #212]	; (8006a18 <_printf_float+0x2e0>)
 8006944:	47b8      	blx	r7
 8006946:	3001      	adds	r0, #1
 8006948:	f43f af51 	beq.w	80067ee <_printf_float+0xb6>
 800694c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006950:	429a      	cmp	r2, r3
 8006952:	db02      	blt.n	800695a <_printf_float+0x222>
 8006954:	6823      	ldr	r3, [r4, #0]
 8006956:	07d8      	lsls	r0, r3, #31
 8006958:	d50f      	bpl.n	800697a <_printf_float+0x242>
 800695a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800695e:	4631      	mov	r1, r6
 8006960:	4628      	mov	r0, r5
 8006962:	47b8      	blx	r7
 8006964:	3001      	adds	r0, #1
 8006966:	f43f af42 	beq.w	80067ee <_printf_float+0xb6>
 800696a:	f04f 0800 	mov.w	r8, #0
 800696e:	f104 091a 	add.w	r9, r4, #26
 8006972:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006974:	3b01      	subs	r3, #1
 8006976:	4543      	cmp	r3, r8
 8006978:	dc09      	bgt.n	800698e <_printf_float+0x256>
 800697a:	6823      	ldr	r3, [r4, #0]
 800697c:	079b      	lsls	r3, r3, #30
 800697e:	f100 8102 	bmi.w	8006b86 <_printf_float+0x44e>
 8006982:	68e0      	ldr	r0, [r4, #12]
 8006984:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006986:	4298      	cmp	r0, r3
 8006988:	bfb8      	it	lt
 800698a:	4618      	movlt	r0, r3
 800698c:	e731      	b.n	80067f2 <_printf_float+0xba>
 800698e:	2301      	movs	r3, #1
 8006990:	464a      	mov	r2, r9
 8006992:	4631      	mov	r1, r6
 8006994:	4628      	mov	r0, r5
 8006996:	47b8      	blx	r7
 8006998:	3001      	adds	r0, #1
 800699a:	f43f af28 	beq.w	80067ee <_printf_float+0xb6>
 800699e:	f108 0801 	add.w	r8, r8, #1
 80069a2:	e7e6      	b.n	8006972 <_printf_float+0x23a>
 80069a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	dc38      	bgt.n	8006a1c <_printf_float+0x2e4>
 80069aa:	2301      	movs	r3, #1
 80069ac:	4631      	mov	r1, r6
 80069ae:	4628      	mov	r0, r5
 80069b0:	4a19      	ldr	r2, [pc, #100]	; (8006a18 <_printf_float+0x2e0>)
 80069b2:	47b8      	blx	r7
 80069b4:	3001      	adds	r0, #1
 80069b6:	f43f af1a 	beq.w	80067ee <_printf_float+0xb6>
 80069ba:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80069be:	4313      	orrs	r3, r2
 80069c0:	d102      	bne.n	80069c8 <_printf_float+0x290>
 80069c2:	6823      	ldr	r3, [r4, #0]
 80069c4:	07d9      	lsls	r1, r3, #31
 80069c6:	d5d8      	bpl.n	800697a <_printf_float+0x242>
 80069c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80069cc:	4631      	mov	r1, r6
 80069ce:	4628      	mov	r0, r5
 80069d0:	47b8      	blx	r7
 80069d2:	3001      	adds	r0, #1
 80069d4:	f43f af0b 	beq.w	80067ee <_printf_float+0xb6>
 80069d8:	f04f 0900 	mov.w	r9, #0
 80069dc:	f104 0a1a 	add.w	sl, r4, #26
 80069e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80069e2:	425b      	negs	r3, r3
 80069e4:	454b      	cmp	r3, r9
 80069e6:	dc01      	bgt.n	80069ec <_printf_float+0x2b4>
 80069e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80069ea:	e794      	b.n	8006916 <_printf_float+0x1de>
 80069ec:	2301      	movs	r3, #1
 80069ee:	4652      	mov	r2, sl
 80069f0:	4631      	mov	r1, r6
 80069f2:	4628      	mov	r0, r5
 80069f4:	47b8      	blx	r7
 80069f6:	3001      	adds	r0, #1
 80069f8:	f43f aef9 	beq.w	80067ee <_printf_float+0xb6>
 80069fc:	f109 0901 	add.w	r9, r9, #1
 8006a00:	e7ee      	b.n	80069e0 <_printf_float+0x2a8>
 8006a02:	bf00      	nop
 8006a04:	7fefffff 	.word	0x7fefffff
 8006a08:	0800a9f4 	.word	0x0800a9f4
 8006a0c:	0800a9f8 	.word	0x0800a9f8
 8006a10:	0800aa00 	.word	0x0800aa00
 8006a14:	0800a9fc 	.word	0x0800a9fc
 8006a18:	0800aa04 	.word	0x0800aa04
 8006a1c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006a1e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006a20:	429a      	cmp	r2, r3
 8006a22:	bfa8      	it	ge
 8006a24:	461a      	movge	r2, r3
 8006a26:	2a00      	cmp	r2, #0
 8006a28:	4691      	mov	r9, r2
 8006a2a:	dc37      	bgt.n	8006a9c <_printf_float+0x364>
 8006a2c:	f04f 0b00 	mov.w	fp, #0
 8006a30:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006a34:	f104 021a 	add.w	r2, r4, #26
 8006a38:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006a3c:	ebaa 0309 	sub.w	r3, sl, r9
 8006a40:	455b      	cmp	r3, fp
 8006a42:	dc33      	bgt.n	8006aac <_printf_float+0x374>
 8006a44:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006a48:	429a      	cmp	r2, r3
 8006a4a:	db3b      	blt.n	8006ac4 <_printf_float+0x38c>
 8006a4c:	6823      	ldr	r3, [r4, #0]
 8006a4e:	07da      	lsls	r2, r3, #31
 8006a50:	d438      	bmi.n	8006ac4 <_printf_float+0x38c>
 8006a52:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006a54:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006a56:	eba2 030a 	sub.w	r3, r2, sl
 8006a5a:	eba2 0901 	sub.w	r9, r2, r1
 8006a5e:	4599      	cmp	r9, r3
 8006a60:	bfa8      	it	ge
 8006a62:	4699      	movge	r9, r3
 8006a64:	f1b9 0f00 	cmp.w	r9, #0
 8006a68:	dc34      	bgt.n	8006ad4 <_printf_float+0x39c>
 8006a6a:	f04f 0800 	mov.w	r8, #0
 8006a6e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006a72:	f104 0a1a 	add.w	sl, r4, #26
 8006a76:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006a7a:	1a9b      	subs	r3, r3, r2
 8006a7c:	eba3 0309 	sub.w	r3, r3, r9
 8006a80:	4543      	cmp	r3, r8
 8006a82:	f77f af7a 	ble.w	800697a <_printf_float+0x242>
 8006a86:	2301      	movs	r3, #1
 8006a88:	4652      	mov	r2, sl
 8006a8a:	4631      	mov	r1, r6
 8006a8c:	4628      	mov	r0, r5
 8006a8e:	47b8      	blx	r7
 8006a90:	3001      	adds	r0, #1
 8006a92:	f43f aeac 	beq.w	80067ee <_printf_float+0xb6>
 8006a96:	f108 0801 	add.w	r8, r8, #1
 8006a9a:	e7ec      	b.n	8006a76 <_printf_float+0x33e>
 8006a9c:	4613      	mov	r3, r2
 8006a9e:	4631      	mov	r1, r6
 8006aa0:	4642      	mov	r2, r8
 8006aa2:	4628      	mov	r0, r5
 8006aa4:	47b8      	blx	r7
 8006aa6:	3001      	adds	r0, #1
 8006aa8:	d1c0      	bne.n	8006a2c <_printf_float+0x2f4>
 8006aaa:	e6a0      	b.n	80067ee <_printf_float+0xb6>
 8006aac:	2301      	movs	r3, #1
 8006aae:	4631      	mov	r1, r6
 8006ab0:	4628      	mov	r0, r5
 8006ab2:	920b      	str	r2, [sp, #44]	; 0x2c
 8006ab4:	47b8      	blx	r7
 8006ab6:	3001      	adds	r0, #1
 8006ab8:	f43f ae99 	beq.w	80067ee <_printf_float+0xb6>
 8006abc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006abe:	f10b 0b01 	add.w	fp, fp, #1
 8006ac2:	e7b9      	b.n	8006a38 <_printf_float+0x300>
 8006ac4:	4631      	mov	r1, r6
 8006ac6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006aca:	4628      	mov	r0, r5
 8006acc:	47b8      	blx	r7
 8006ace:	3001      	adds	r0, #1
 8006ad0:	d1bf      	bne.n	8006a52 <_printf_float+0x31a>
 8006ad2:	e68c      	b.n	80067ee <_printf_float+0xb6>
 8006ad4:	464b      	mov	r3, r9
 8006ad6:	4631      	mov	r1, r6
 8006ad8:	4628      	mov	r0, r5
 8006ada:	eb08 020a 	add.w	r2, r8, sl
 8006ade:	47b8      	blx	r7
 8006ae0:	3001      	adds	r0, #1
 8006ae2:	d1c2      	bne.n	8006a6a <_printf_float+0x332>
 8006ae4:	e683      	b.n	80067ee <_printf_float+0xb6>
 8006ae6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006ae8:	2a01      	cmp	r2, #1
 8006aea:	dc01      	bgt.n	8006af0 <_printf_float+0x3b8>
 8006aec:	07db      	lsls	r3, r3, #31
 8006aee:	d537      	bpl.n	8006b60 <_printf_float+0x428>
 8006af0:	2301      	movs	r3, #1
 8006af2:	4642      	mov	r2, r8
 8006af4:	4631      	mov	r1, r6
 8006af6:	4628      	mov	r0, r5
 8006af8:	47b8      	blx	r7
 8006afa:	3001      	adds	r0, #1
 8006afc:	f43f ae77 	beq.w	80067ee <_printf_float+0xb6>
 8006b00:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006b04:	4631      	mov	r1, r6
 8006b06:	4628      	mov	r0, r5
 8006b08:	47b8      	blx	r7
 8006b0a:	3001      	adds	r0, #1
 8006b0c:	f43f ae6f 	beq.w	80067ee <_printf_float+0xb6>
 8006b10:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006b14:	2200      	movs	r2, #0
 8006b16:	2300      	movs	r3, #0
 8006b18:	f7f9 ff46 	bl	80009a8 <__aeabi_dcmpeq>
 8006b1c:	b9d8      	cbnz	r0, 8006b56 <_printf_float+0x41e>
 8006b1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006b20:	f108 0201 	add.w	r2, r8, #1
 8006b24:	3b01      	subs	r3, #1
 8006b26:	4631      	mov	r1, r6
 8006b28:	4628      	mov	r0, r5
 8006b2a:	47b8      	blx	r7
 8006b2c:	3001      	adds	r0, #1
 8006b2e:	d10e      	bne.n	8006b4e <_printf_float+0x416>
 8006b30:	e65d      	b.n	80067ee <_printf_float+0xb6>
 8006b32:	2301      	movs	r3, #1
 8006b34:	464a      	mov	r2, r9
 8006b36:	4631      	mov	r1, r6
 8006b38:	4628      	mov	r0, r5
 8006b3a:	47b8      	blx	r7
 8006b3c:	3001      	adds	r0, #1
 8006b3e:	f43f ae56 	beq.w	80067ee <_printf_float+0xb6>
 8006b42:	f108 0801 	add.w	r8, r8, #1
 8006b46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006b48:	3b01      	subs	r3, #1
 8006b4a:	4543      	cmp	r3, r8
 8006b4c:	dcf1      	bgt.n	8006b32 <_printf_float+0x3fa>
 8006b4e:	4653      	mov	r3, sl
 8006b50:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006b54:	e6e0      	b.n	8006918 <_printf_float+0x1e0>
 8006b56:	f04f 0800 	mov.w	r8, #0
 8006b5a:	f104 091a 	add.w	r9, r4, #26
 8006b5e:	e7f2      	b.n	8006b46 <_printf_float+0x40e>
 8006b60:	2301      	movs	r3, #1
 8006b62:	4642      	mov	r2, r8
 8006b64:	e7df      	b.n	8006b26 <_printf_float+0x3ee>
 8006b66:	2301      	movs	r3, #1
 8006b68:	464a      	mov	r2, r9
 8006b6a:	4631      	mov	r1, r6
 8006b6c:	4628      	mov	r0, r5
 8006b6e:	47b8      	blx	r7
 8006b70:	3001      	adds	r0, #1
 8006b72:	f43f ae3c 	beq.w	80067ee <_printf_float+0xb6>
 8006b76:	f108 0801 	add.w	r8, r8, #1
 8006b7a:	68e3      	ldr	r3, [r4, #12]
 8006b7c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006b7e:	1a5b      	subs	r3, r3, r1
 8006b80:	4543      	cmp	r3, r8
 8006b82:	dcf0      	bgt.n	8006b66 <_printf_float+0x42e>
 8006b84:	e6fd      	b.n	8006982 <_printf_float+0x24a>
 8006b86:	f04f 0800 	mov.w	r8, #0
 8006b8a:	f104 0919 	add.w	r9, r4, #25
 8006b8e:	e7f4      	b.n	8006b7a <_printf_float+0x442>

08006b90 <_printf_common>:
 8006b90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b94:	4616      	mov	r6, r2
 8006b96:	4699      	mov	r9, r3
 8006b98:	688a      	ldr	r2, [r1, #8]
 8006b9a:	690b      	ldr	r3, [r1, #16]
 8006b9c:	4607      	mov	r7, r0
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	bfb8      	it	lt
 8006ba2:	4613      	movlt	r3, r2
 8006ba4:	6033      	str	r3, [r6, #0]
 8006ba6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006baa:	460c      	mov	r4, r1
 8006bac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006bb0:	b10a      	cbz	r2, 8006bb6 <_printf_common+0x26>
 8006bb2:	3301      	adds	r3, #1
 8006bb4:	6033      	str	r3, [r6, #0]
 8006bb6:	6823      	ldr	r3, [r4, #0]
 8006bb8:	0699      	lsls	r1, r3, #26
 8006bba:	bf42      	ittt	mi
 8006bbc:	6833      	ldrmi	r3, [r6, #0]
 8006bbe:	3302      	addmi	r3, #2
 8006bc0:	6033      	strmi	r3, [r6, #0]
 8006bc2:	6825      	ldr	r5, [r4, #0]
 8006bc4:	f015 0506 	ands.w	r5, r5, #6
 8006bc8:	d106      	bne.n	8006bd8 <_printf_common+0x48>
 8006bca:	f104 0a19 	add.w	sl, r4, #25
 8006bce:	68e3      	ldr	r3, [r4, #12]
 8006bd0:	6832      	ldr	r2, [r6, #0]
 8006bd2:	1a9b      	subs	r3, r3, r2
 8006bd4:	42ab      	cmp	r3, r5
 8006bd6:	dc28      	bgt.n	8006c2a <_printf_common+0x9a>
 8006bd8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006bdc:	1e13      	subs	r3, r2, #0
 8006bde:	6822      	ldr	r2, [r4, #0]
 8006be0:	bf18      	it	ne
 8006be2:	2301      	movne	r3, #1
 8006be4:	0692      	lsls	r2, r2, #26
 8006be6:	d42d      	bmi.n	8006c44 <_printf_common+0xb4>
 8006be8:	4649      	mov	r1, r9
 8006bea:	4638      	mov	r0, r7
 8006bec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006bf0:	47c0      	blx	r8
 8006bf2:	3001      	adds	r0, #1
 8006bf4:	d020      	beq.n	8006c38 <_printf_common+0xa8>
 8006bf6:	6823      	ldr	r3, [r4, #0]
 8006bf8:	68e5      	ldr	r5, [r4, #12]
 8006bfa:	f003 0306 	and.w	r3, r3, #6
 8006bfe:	2b04      	cmp	r3, #4
 8006c00:	bf18      	it	ne
 8006c02:	2500      	movne	r5, #0
 8006c04:	6832      	ldr	r2, [r6, #0]
 8006c06:	f04f 0600 	mov.w	r6, #0
 8006c0a:	68a3      	ldr	r3, [r4, #8]
 8006c0c:	bf08      	it	eq
 8006c0e:	1aad      	subeq	r5, r5, r2
 8006c10:	6922      	ldr	r2, [r4, #16]
 8006c12:	bf08      	it	eq
 8006c14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	bfc4      	itt	gt
 8006c1c:	1a9b      	subgt	r3, r3, r2
 8006c1e:	18ed      	addgt	r5, r5, r3
 8006c20:	341a      	adds	r4, #26
 8006c22:	42b5      	cmp	r5, r6
 8006c24:	d11a      	bne.n	8006c5c <_printf_common+0xcc>
 8006c26:	2000      	movs	r0, #0
 8006c28:	e008      	b.n	8006c3c <_printf_common+0xac>
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	4652      	mov	r2, sl
 8006c2e:	4649      	mov	r1, r9
 8006c30:	4638      	mov	r0, r7
 8006c32:	47c0      	blx	r8
 8006c34:	3001      	adds	r0, #1
 8006c36:	d103      	bne.n	8006c40 <_printf_common+0xb0>
 8006c38:	f04f 30ff 	mov.w	r0, #4294967295
 8006c3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c40:	3501      	adds	r5, #1
 8006c42:	e7c4      	b.n	8006bce <_printf_common+0x3e>
 8006c44:	2030      	movs	r0, #48	; 0x30
 8006c46:	18e1      	adds	r1, r4, r3
 8006c48:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006c4c:	1c5a      	adds	r2, r3, #1
 8006c4e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006c52:	4422      	add	r2, r4
 8006c54:	3302      	adds	r3, #2
 8006c56:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006c5a:	e7c5      	b.n	8006be8 <_printf_common+0x58>
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	4622      	mov	r2, r4
 8006c60:	4649      	mov	r1, r9
 8006c62:	4638      	mov	r0, r7
 8006c64:	47c0      	blx	r8
 8006c66:	3001      	adds	r0, #1
 8006c68:	d0e6      	beq.n	8006c38 <_printf_common+0xa8>
 8006c6a:	3601      	adds	r6, #1
 8006c6c:	e7d9      	b.n	8006c22 <_printf_common+0x92>
	...

08006c70 <_printf_i>:
 8006c70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006c74:	460c      	mov	r4, r1
 8006c76:	7e27      	ldrb	r7, [r4, #24]
 8006c78:	4691      	mov	r9, r2
 8006c7a:	2f78      	cmp	r7, #120	; 0x78
 8006c7c:	4680      	mov	r8, r0
 8006c7e:	469a      	mov	sl, r3
 8006c80:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006c82:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006c86:	d807      	bhi.n	8006c98 <_printf_i+0x28>
 8006c88:	2f62      	cmp	r7, #98	; 0x62
 8006c8a:	d80a      	bhi.n	8006ca2 <_printf_i+0x32>
 8006c8c:	2f00      	cmp	r7, #0
 8006c8e:	f000 80d9 	beq.w	8006e44 <_printf_i+0x1d4>
 8006c92:	2f58      	cmp	r7, #88	; 0x58
 8006c94:	f000 80a4 	beq.w	8006de0 <_printf_i+0x170>
 8006c98:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006c9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006ca0:	e03a      	b.n	8006d18 <_printf_i+0xa8>
 8006ca2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006ca6:	2b15      	cmp	r3, #21
 8006ca8:	d8f6      	bhi.n	8006c98 <_printf_i+0x28>
 8006caa:	a001      	add	r0, pc, #4	; (adr r0, 8006cb0 <_printf_i+0x40>)
 8006cac:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006cb0:	08006d09 	.word	0x08006d09
 8006cb4:	08006d1d 	.word	0x08006d1d
 8006cb8:	08006c99 	.word	0x08006c99
 8006cbc:	08006c99 	.word	0x08006c99
 8006cc0:	08006c99 	.word	0x08006c99
 8006cc4:	08006c99 	.word	0x08006c99
 8006cc8:	08006d1d 	.word	0x08006d1d
 8006ccc:	08006c99 	.word	0x08006c99
 8006cd0:	08006c99 	.word	0x08006c99
 8006cd4:	08006c99 	.word	0x08006c99
 8006cd8:	08006c99 	.word	0x08006c99
 8006cdc:	08006e2b 	.word	0x08006e2b
 8006ce0:	08006d4d 	.word	0x08006d4d
 8006ce4:	08006e0d 	.word	0x08006e0d
 8006ce8:	08006c99 	.word	0x08006c99
 8006cec:	08006c99 	.word	0x08006c99
 8006cf0:	08006e4d 	.word	0x08006e4d
 8006cf4:	08006c99 	.word	0x08006c99
 8006cf8:	08006d4d 	.word	0x08006d4d
 8006cfc:	08006c99 	.word	0x08006c99
 8006d00:	08006c99 	.word	0x08006c99
 8006d04:	08006e15 	.word	0x08006e15
 8006d08:	680b      	ldr	r3, [r1, #0]
 8006d0a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006d0e:	1d1a      	adds	r2, r3, #4
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	600a      	str	r2, [r1, #0]
 8006d14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006d18:	2301      	movs	r3, #1
 8006d1a:	e0a4      	b.n	8006e66 <_printf_i+0x1f6>
 8006d1c:	6825      	ldr	r5, [r4, #0]
 8006d1e:	6808      	ldr	r0, [r1, #0]
 8006d20:	062e      	lsls	r6, r5, #24
 8006d22:	f100 0304 	add.w	r3, r0, #4
 8006d26:	d50a      	bpl.n	8006d3e <_printf_i+0xce>
 8006d28:	6805      	ldr	r5, [r0, #0]
 8006d2a:	600b      	str	r3, [r1, #0]
 8006d2c:	2d00      	cmp	r5, #0
 8006d2e:	da03      	bge.n	8006d38 <_printf_i+0xc8>
 8006d30:	232d      	movs	r3, #45	; 0x2d
 8006d32:	426d      	negs	r5, r5
 8006d34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d38:	230a      	movs	r3, #10
 8006d3a:	485e      	ldr	r0, [pc, #376]	; (8006eb4 <_printf_i+0x244>)
 8006d3c:	e019      	b.n	8006d72 <_printf_i+0x102>
 8006d3e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006d42:	6805      	ldr	r5, [r0, #0]
 8006d44:	600b      	str	r3, [r1, #0]
 8006d46:	bf18      	it	ne
 8006d48:	b22d      	sxthne	r5, r5
 8006d4a:	e7ef      	b.n	8006d2c <_printf_i+0xbc>
 8006d4c:	680b      	ldr	r3, [r1, #0]
 8006d4e:	6825      	ldr	r5, [r4, #0]
 8006d50:	1d18      	adds	r0, r3, #4
 8006d52:	6008      	str	r0, [r1, #0]
 8006d54:	0628      	lsls	r0, r5, #24
 8006d56:	d501      	bpl.n	8006d5c <_printf_i+0xec>
 8006d58:	681d      	ldr	r5, [r3, #0]
 8006d5a:	e002      	b.n	8006d62 <_printf_i+0xf2>
 8006d5c:	0669      	lsls	r1, r5, #25
 8006d5e:	d5fb      	bpl.n	8006d58 <_printf_i+0xe8>
 8006d60:	881d      	ldrh	r5, [r3, #0]
 8006d62:	2f6f      	cmp	r7, #111	; 0x6f
 8006d64:	bf0c      	ite	eq
 8006d66:	2308      	moveq	r3, #8
 8006d68:	230a      	movne	r3, #10
 8006d6a:	4852      	ldr	r0, [pc, #328]	; (8006eb4 <_printf_i+0x244>)
 8006d6c:	2100      	movs	r1, #0
 8006d6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006d72:	6866      	ldr	r6, [r4, #4]
 8006d74:	2e00      	cmp	r6, #0
 8006d76:	bfa8      	it	ge
 8006d78:	6821      	ldrge	r1, [r4, #0]
 8006d7a:	60a6      	str	r6, [r4, #8]
 8006d7c:	bfa4      	itt	ge
 8006d7e:	f021 0104 	bicge.w	r1, r1, #4
 8006d82:	6021      	strge	r1, [r4, #0]
 8006d84:	b90d      	cbnz	r5, 8006d8a <_printf_i+0x11a>
 8006d86:	2e00      	cmp	r6, #0
 8006d88:	d04d      	beq.n	8006e26 <_printf_i+0x1b6>
 8006d8a:	4616      	mov	r6, r2
 8006d8c:	fbb5 f1f3 	udiv	r1, r5, r3
 8006d90:	fb03 5711 	mls	r7, r3, r1, r5
 8006d94:	5dc7      	ldrb	r7, [r0, r7]
 8006d96:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006d9a:	462f      	mov	r7, r5
 8006d9c:	42bb      	cmp	r3, r7
 8006d9e:	460d      	mov	r5, r1
 8006da0:	d9f4      	bls.n	8006d8c <_printf_i+0x11c>
 8006da2:	2b08      	cmp	r3, #8
 8006da4:	d10b      	bne.n	8006dbe <_printf_i+0x14e>
 8006da6:	6823      	ldr	r3, [r4, #0]
 8006da8:	07df      	lsls	r7, r3, #31
 8006daa:	d508      	bpl.n	8006dbe <_printf_i+0x14e>
 8006dac:	6923      	ldr	r3, [r4, #16]
 8006dae:	6861      	ldr	r1, [r4, #4]
 8006db0:	4299      	cmp	r1, r3
 8006db2:	bfde      	ittt	le
 8006db4:	2330      	movle	r3, #48	; 0x30
 8006db6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006dba:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006dbe:	1b92      	subs	r2, r2, r6
 8006dc0:	6122      	str	r2, [r4, #16]
 8006dc2:	464b      	mov	r3, r9
 8006dc4:	4621      	mov	r1, r4
 8006dc6:	4640      	mov	r0, r8
 8006dc8:	f8cd a000 	str.w	sl, [sp]
 8006dcc:	aa03      	add	r2, sp, #12
 8006dce:	f7ff fedf 	bl	8006b90 <_printf_common>
 8006dd2:	3001      	adds	r0, #1
 8006dd4:	d14c      	bne.n	8006e70 <_printf_i+0x200>
 8006dd6:	f04f 30ff 	mov.w	r0, #4294967295
 8006dda:	b004      	add	sp, #16
 8006ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006de0:	4834      	ldr	r0, [pc, #208]	; (8006eb4 <_printf_i+0x244>)
 8006de2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006de6:	680e      	ldr	r6, [r1, #0]
 8006de8:	6823      	ldr	r3, [r4, #0]
 8006dea:	f856 5b04 	ldr.w	r5, [r6], #4
 8006dee:	061f      	lsls	r7, r3, #24
 8006df0:	600e      	str	r6, [r1, #0]
 8006df2:	d514      	bpl.n	8006e1e <_printf_i+0x1ae>
 8006df4:	07d9      	lsls	r1, r3, #31
 8006df6:	bf44      	itt	mi
 8006df8:	f043 0320 	orrmi.w	r3, r3, #32
 8006dfc:	6023      	strmi	r3, [r4, #0]
 8006dfe:	b91d      	cbnz	r5, 8006e08 <_printf_i+0x198>
 8006e00:	6823      	ldr	r3, [r4, #0]
 8006e02:	f023 0320 	bic.w	r3, r3, #32
 8006e06:	6023      	str	r3, [r4, #0]
 8006e08:	2310      	movs	r3, #16
 8006e0a:	e7af      	b.n	8006d6c <_printf_i+0xfc>
 8006e0c:	6823      	ldr	r3, [r4, #0]
 8006e0e:	f043 0320 	orr.w	r3, r3, #32
 8006e12:	6023      	str	r3, [r4, #0]
 8006e14:	2378      	movs	r3, #120	; 0x78
 8006e16:	4828      	ldr	r0, [pc, #160]	; (8006eb8 <_printf_i+0x248>)
 8006e18:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006e1c:	e7e3      	b.n	8006de6 <_printf_i+0x176>
 8006e1e:	065e      	lsls	r6, r3, #25
 8006e20:	bf48      	it	mi
 8006e22:	b2ad      	uxthmi	r5, r5
 8006e24:	e7e6      	b.n	8006df4 <_printf_i+0x184>
 8006e26:	4616      	mov	r6, r2
 8006e28:	e7bb      	b.n	8006da2 <_printf_i+0x132>
 8006e2a:	680b      	ldr	r3, [r1, #0]
 8006e2c:	6826      	ldr	r6, [r4, #0]
 8006e2e:	1d1d      	adds	r5, r3, #4
 8006e30:	6960      	ldr	r0, [r4, #20]
 8006e32:	600d      	str	r5, [r1, #0]
 8006e34:	0635      	lsls	r5, r6, #24
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	d501      	bpl.n	8006e3e <_printf_i+0x1ce>
 8006e3a:	6018      	str	r0, [r3, #0]
 8006e3c:	e002      	b.n	8006e44 <_printf_i+0x1d4>
 8006e3e:	0671      	lsls	r1, r6, #25
 8006e40:	d5fb      	bpl.n	8006e3a <_printf_i+0x1ca>
 8006e42:	8018      	strh	r0, [r3, #0]
 8006e44:	2300      	movs	r3, #0
 8006e46:	4616      	mov	r6, r2
 8006e48:	6123      	str	r3, [r4, #16]
 8006e4a:	e7ba      	b.n	8006dc2 <_printf_i+0x152>
 8006e4c:	680b      	ldr	r3, [r1, #0]
 8006e4e:	1d1a      	adds	r2, r3, #4
 8006e50:	600a      	str	r2, [r1, #0]
 8006e52:	681e      	ldr	r6, [r3, #0]
 8006e54:	2100      	movs	r1, #0
 8006e56:	4630      	mov	r0, r6
 8006e58:	6862      	ldr	r2, [r4, #4]
 8006e5a:	f000 ffe9 	bl	8007e30 <memchr>
 8006e5e:	b108      	cbz	r0, 8006e64 <_printf_i+0x1f4>
 8006e60:	1b80      	subs	r0, r0, r6
 8006e62:	6060      	str	r0, [r4, #4]
 8006e64:	6863      	ldr	r3, [r4, #4]
 8006e66:	6123      	str	r3, [r4, #16]
 8006e68:	2300      	movs	r3, #0
 8006e6a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e6e:	e7a8      	b.n	8006dc2 <_printf_i+0x152>
 8006e70:	4632      	mov	r2, r6
 8006e72:	4649      	mov	r1, r9
 8006e74:	4640      	mov	r0, r8
 8006e76:	6923      	ldr	r3, [r4, #16]
 8006e78:	47d0      	blx	sl
 8006e7a:	3001      	adds	r0, #1
 8006e7c:	d0ab      	beq.n	8006dd6 <_printf_i+0x166>
 8006e7e:	6823      	ldr	r3, [r4, #0]
 8006e80:	079b      	lsls	r3, r3, #30
 8006e82:	d413      	bmi.n	8006eac <_printf_i+0x23c>
 8006e84:	68e0      	ldr	r0, [r4, #12]
 8006e86:	9b03      	ldr	r3, [sp, #12]
 8006e88:	4298      	cmp	r0, r3
 8006e8a:	bfb8      	it	lt
 8006e8c:	4618      	movlt	r0, r3
 8006e8e:	e7a4      	b.n	8006dda <_printf_i+0x16a>
 8006e90:	2301      	movs	r3, #1
 8006e92:	4632      	mov	r2, r6
 8006e94:	4649      	mov	r1, r9
 8006e96:	4640      	mov	r0, r8
 8006e98:	47d0      	blx	sl
 8006e9a:	3001      	adds	r0, #1
 8006e9c:	d09b      	beq.n	8006dd6 <_printf_i+0x166>
 8006e9e:	3501      	adds	r5, #1
 8006ea0:	68e3      	ldr	r3, [r4, #12]
 8006ea2:	9903      	ldr	r1, [sp, #12]
 8006ea4:	1a5b      	subs	r3, r3, r1
 8006ea6:	42ab      	cmp	r3, r5
 8006ea8:	dcf2      	bgt.n	8006e90 <_printf_i+0x220>
 8006eaa:	e7eb      	b.n	8006e84 <_printf_i+0x214>
 8006eac:	2500      	movs	r5, #0
 8006eae:	f104 0619 	add.w	r6, r4, #25
 8006eb2:	e7f5      	b.n	8006ea0 <_printf_i+0x230>
 8006eb4:	0800aa06 	.word	0x0800aa06
 8006eb8:	0800aa17 	.word	0x0800aa17

08006ebc <iprintf>:
 8006ebc:	b40f      	push	{r0, r1, r2, r3}
 8006ebe:	4b0a      	ldr	r3, [pc, #40]	; (8006ee8 <iprintf+0x2c>)
 8006ec0:	b513      	push	{r0, r1, r4, lr}
 8006ec2:	681c      	ldr	r4, [r3, #0]
 8006ec4:	b124      	cbz	r4, 8006ed0 <iprintf+0x14>
 8006ec6:	69a3      	ldr	r3, [r4, #24]
 8006ec8:	b913      	cbnz	r3, 8006ed0 <iprintf+0x14>
 8006eca:	4620      	mov	r0, r4
 8006ecc:	f000 ff02 	bl	8007cd4 <__sinit>
 8006ed0:	ab05      	add	r3, sp, #20
 8006ed2:	4620      	mov	r0, r4
 8006ed4:	9a04      	ldr	r2, [sp, #16]
 8006ed6:	68a1      	ldr	r1, [r4, #8]
 8006ed8:	9301      	str	r3, [sp, #4]
 8006eda:	f001 fd7f 	bl	80089dc <_vfiprintf_r>
 8006ede:	b002      	add	sp, #8
 8006ee0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ee4:	b004      	add	sp, #16
 8006ee6:	4770      	bx	lr
 8006ee8:	20000080 	.word	0x20000080

08006eec <siprintf>:
 8006eec:	b40e      	push	{r1, r2, r3}
 8006eee:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006ef2:	b500      	push	{lr}
 8006ef4:	b09c      	sub	sp, #112	; 0x70
 8006ef6:	ab1d      	add	r3, sp, #116	; 0x74
 8006ef8:	9002      	str	r0, [sp, #8]
 8006efa:	9006      	str	r0, [sp, #24]
 8006efc:	9107      	str	r1, [sp, #28]
 8006efe:	9104      	str	r1, [sp, #16]
 8006f00:	4808      	ldr	r0, [pc, #32]	; (8006f24 <siprintf+0x38>)
 8006f02:	4909      	ldr	r1, [pc, #36]	; (8006f28 <siprintf+0x3c>)
 8006f04:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f08:	9105      	str	r1, [sp, #20]
 8006f0a:	6800      	ldr	r0, [r0, #0]
 8006f0c:	a902      	add	r1, sp, #8
 8006f0e:	9301      	str	r3, [sp, #4]
 8006f10:	f001 fc3c 	bl	800878c <_svfiprintf_r>
 8006f14:	2200      	movs	r2, #0
 8006f16:	9b02      	ldr	r3, [sp, #8]
 8006f18:	701a      	strb	r2, [r3, #0]
 8006f1a:	b01c      	add	sp, #112	; 0x70
 8006f1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f20:	b003      	add	sp, #12
 8006f22:	4770      	bx	lr
 8006f24:	20000080 	.word	0x20000080
 8006f28:	ffff0208 	.word	0xffff0208

08006f2c <quorem>:
 8006f2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f30:	6903      	ldr	r3, [r0, #16]
 8006f32:	690c      	ldr	r4, [r1, #16]
 8006f34:	4607      	mov	r7, r0
 8006f36:	42a3      	cmp	r3, r4
 8006f38:	f2c0 8083 	blt.w	8007042 <quorem+0x116>
 8006f3c:	3c01      	subs	r4, #1
 8006f3e:	f100 0514 	add.w	r5, r0, #20
 8006f42:	f101 0814 	add.w	r8, r1, #20
 8006f46:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006f4a:	9301      	str	r3, [sp, #4]
 8006f4c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006f50:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006f54:	3301      	adds	r3, #1
 8006f56:	429a      	cmp	r2, r3
 8006f58:	fbb2 f6f3 	udiv	r6, r2, r3
 8006f5c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006f60:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006f64:	d332      	bcc.n	8006fcc <quorem+0xa0>
 8006f66:	f04f 0e00 	mov.w	lr, #0
 8006f6a:	4640      	mov	r0, r8
 8006f6c:	46ac      	mov	ip, r5
 8006f6e:	46f2      	mov	sl, lr
 8006f70:	f850 2b04 	ldr.w	r2, [r0], #4
 8006f74:	b293      	uxth	r3, r2
 8006f76:	fb06 e303 	mla	r3, r6, r3, lr
 8006f7a:	0c12      	lsrs	r2, r2, #16
 8006f7c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006f80:	fb06 e202 	mla	r2, r6, r2, lr
 8006f84:	b29b      	uxth	r3, r3
 8006f86:	ebaa 0303 	sub.w	r3, sl, r3
 8006f8a:	f8dc a000 	ldr.w	sl, [ip]
 8006f8e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006f92:	fa1f fa8a 	uxth.w	sl, sl
 8006f96:	4453      	add	r3, sl
 8006f98:	fa1f fa82 	uxth.w	sl, r2
 8006f9c:	f8dc 2000 	ldr.w	r2, [ip]
 8006fa0:	4581      	cmp	r9, r0
 8006fa2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8006fa6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006faa:	b29b      	uxth	r3, r3
 8006fac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006fb0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006fb4:	f84c 3b04 	str.w	r3, [ip], #4
 8006fb8:	d2da      	bcs.n	8006f70 <quorem+0x44>
 8006fba:	f855 300b 	ldr.w	r3, [r5, fp]
 8006fbe:	b92b      	cbnz	r3, 8006fcc <quorem+0xa0>
 8006fc0:	9b01      	ldr	r3, [sp, #4]
 8006fc2:	3b04      	subs	r3, #4
 8006fc4:	429d      	cmp	r5, r3
 8006fc6:	461a      	mov	r2, r3
 8006fc8:	d32f      	bcc.n	800702a <quorem+0xfe>
 8006fca:	613c      	str	r4, [r7, #16]
 8006fcc:	4638      	mov	r0, r7
 8006fce:	f001 f9c5 	bl	800835c <__mcmp>
 8006fd2:	2800      	cmp	r0, #0
 8006fd4:	db25      	blt.n	8007022 <quorem+0xf6>
 8006fd6:	4628      	mov	r0, r5
 8006fd8:	f04f 0c00 	mov.w	ip, #0
 8006fdc:	3601      	adds	r6, #1
 8006fde:	f858 1b04 	ldr.w	r1, [r8], #4
 8006fe2:	f8d0 e000 	ldr.w	lr, [r0]
 8006fe6:	b28b      	uxth	r3, r1
 8006fe8:	ebac 0303 	sub.w	r3, ip, r3
 8006fec:	fa1f f28e 	uxth.w	r2, lr
 8006ff0:	4413      	add	r3, r2
 8006ff2:	0c0a      	lsrs	r2, r1, #16
 8006ff4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006ff8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006ffc:	b29b      	uxth	r3, r3
 8006ffe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007002:	45c1      	cmp	r9, r8
 8007004:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007008:	f840 3b04 	str.w	r3, [r0], #4
 800700c:	d2e7      	bcs.n	8006fde <quorem+0xb2>
 800700e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007012:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007016:	b922      	cbnz	r2, 8007022 <quorem+0xf6>
 8007018:	3b04      	subs	r3, #4
 800701a:	429d      	cmp	r5, r3
 800701c:	461a      	mov	r2, r3
 800701e:	d30a      	bcc.n	8007036 <quorem+0x10a>
 8007020:	613c      	str	r4, [r7, #16]
 8007022:	4630      	mov	r0, r6
 8007024:	b003      	add	sp, #12
 8007026:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800702a:	6812      	ldr	r2, [r2, #0]
 800702c:	3b04      	subs	r3, #4
 800702e:	2a00      	cmp	r2, #0
 8007030:	d1cb      	bne.n	8006fca <quorem+0x9e>
 8007032:	3c01      	subs	r4, #1
 8007034:	e7c6      	b.n	8006fc4 <quorem+0x98>
 8007036:	6812      	ldr	r2, [r2, #0]
 8007038:	3b04      	subs	r3, #4
 800703a:	2a00      	cmp	r2, #0
 800703c:	d1f0      	bne.n	8007020 <quorem+0xf4>
 800703e:	3c01      	subs	r4, #1
 8007040:	e7eb      	b.n	800701a <quorem+0xee>
 8007042:	2000      	movs	r0, #0
 8007044:	e7ee      	b.n	8007024 <quorem+0xf8>
	...

08007048 <_dtoa_r>:
 8007048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800704c:	4616      	mov	r6, r2
 800704e:	461f      	mov	r7, r3
 8007050:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007052:	b099      	sub	sp, #100	; 0x64
 8007054:	4605      	mov	r5, r0
 8007056:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800705a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800705e:	b974      	cbnz	r4, 800707e <_dtoa_r+0x36>
 8007060:	2010      	movs	r0, #16
 8007062:	f000 fedd 	bl	8007e20 <malloc>
 8007066:	4602      	mov	r2, r0
 8007068:	6268      	str	r0, [r5, #36]	; 0x24
 800706a:	b920      	cbnz	r0, 8007076 <_dtoa_r+0x2e>
 800706c:	21ea      	movs	r1, #234	; 0xea
 800706e:	4bae      	ldr	r3, [pc, #696]	; (8007328 <_dtoa_r+0x2e0>)
 8007070:	48ae      	ldr	r0, [pc, #696]	; (800732c <_dtoa_r+0x2e4>)
 8007072:	f001 ff09 	bl	8008e88 <__assert_func>
 8007076:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800707a:	6004      	str	r4, [r0, #0]
 800707c:	60c4      	str	r4, [r0, #12]
 800707e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007080:	6819      	ldr	r1, [r3, #0]
 8007082:	b151      	cbz	r1, 800709a <_dtoa_r+0x52>
 8007084:	685a      	ldr	r2, [r3, #4]
 8007086:	2301      	movs	r3, #1
 8007088:	4093      	lsls	r3, r2
 800708a:	604a      	str	r2, [r1, #4]
 800708c:	608b      	str	r3, [r1, #8]
 800708e:	4628      	mov	r0, r5
 8007090:	f000 ff2a 	bl	8007ee8 <_Bfree>
 8007094:	2200      	movs	r2, #0
 8007096:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007098:	601a      	str	r2, [r3, #0]
 800709a:	1e3b      	subs	r3, r7, #0
 800709c:	bfaf      	iteee	ge
 800709e:	2300      	movge	r3, #0
 80070a0:	2201      	movlt	r2, #1
 80070a2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80070a6:	9305      	strlt	r3, [sp, #20]
 80070a8:	bfa8      	it	ge
 80070aa:	f8c8 3000 	strge.w	r3, [r8]
 80070ae:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80070b2:	4b9f      	ldr	r3, [pc, #636]	; (8007330 <_dtoa_r+0x2e8>)
 80070b4:	bfb8      	it	lt
 80070b6:	f8c8 2000 	strlt.w	r2, [r8]
 80070ba:	ea33 0309 	bics.w	r3, r3, r9
 80070be:	d119      	bne.n	80070f4 <_dtoa_r+0xac>
 80070c0:	f242 730f 	movw	r3, #9999	; 0x270f
 80070c4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80070c6:	6013      	str	r3, [r2, #0]
 80070c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80070cc:	4333      	orrs	r3, r6
 80070ce:	f000 8580 	beq.w	8007bd2 <_dtoa_r+0xb8a>
 80070d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80070d4:	b953      	cbnz	r3, 80070ec <_dtoa_r+0xa4>
 80070d6:	4b97      	ldr	r3, [pc, #604]	; (8007334 <_dtoa_r+0x2ec>)
 80070d8:	e022      	b.n	8007120 <_dtoa_r+0xd8>
 80070da:	4b97      	ldr	r3, [pc, #604]	; (8007338 <_dtoa_r+0x2f0>)
 80070dc:	9308      	str	r3, [sp, #32]
 80070de:	3308      	adds	r3, #8
 80070e0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80070e2:	6013      	str	r3, [r2, #0]
 80070e4:	9808      	ldr	r0, [sp, #32]
 80070e6:	b019      	add	sp, #100	; 0x64
 80070e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070ec:	4b91      	ldr	r3, [pc, #580]	; (8007334 <_dtoa_r+0x2ec>)
 80070ee:	9308      	str	r3, [sp, #32]
 80070f0:	3303      	adds	r3, #3
 80070f2:	e7f5      	b.n	80070e0 <_dtoa_r+0x98>
 80070f4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80070f8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80070fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007100:	2200      	movs	r2, #0
 8007102:	2300      	movs	r3, #0
 8007104:	f7f9 fc50 	bl	80009a8 <__aeabi_dcmpeq>
 8007108:	4680      	mov	r8, r0
 800710a:	b158      	cbz	r0, 8007124 <_dtoa_r+0xdc>
 800710c:	2301      	movs	r3, #1
 800710e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007110:	6013      	str	r3, [r2, #0]
 8007112:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007114:	2b00      	cmp	r3, #0
 8007116:	f000 8559 	beq.w	8007bcc <_dtoa_r+0xb84>
 800711a:	4888      	ldr	r0, [pc, #544]	; (800733c <_dtoa_r+0x2f4>)
 800711c:	6018      	str	r0, [r3, #0]
 800711e:	1e43      	subs	r3, r0, #1
 8007120:	9308      	str	r3, [sp, #32]
 8007122:	e7df      	b.n	80070e4 <_dtoa_r+0x9c>
 8007124:	ab16      	add	r3, sp, #88	; 0x58
 8007126:	9301      	str	r3, [sp, #4]
 8007128:	ab17      	add	r3, sp, #92	; 0x5c
 800712a:	9300      	str	r3, [sp, #0]
 800712c:	4628      	mov	r0, r5
 800712e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007132:	f001 f9bf 	bl	80084b4 <__d2b>
 8007136:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800713a:	4682      	mov	sl, r0
 800713c:	2c00      	cmp	r4, #0
 800713e:	d07e      	beq.n	800723e <_dtoa_r+0x1f6>
 8007140:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007144:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007146:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800714a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800714e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8007152:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8007156:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800715a:	2200      	movs	r2, #0
 800715c:	4b78      	ldr	r3, [pc, #480]	; (8007340 <_dtoa_r+0x2f8>)
 800715e:	f7f9 f803 	bl	8000168 <__aeabi_dsub>
 8007162:	a36b      	add	r3, pc, #428	; (adr r3, 8007310 <_dtoa_r+0x2c8>)
 8007164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007168:	f7f9 f9b6 	bl	80004d8 <__aeabi_dmul>
 800716c:	a36a      	add	r3, pc, #424	; (adr r3, 8007318 <_dtoa_r+0x2d0>)
 800716e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007172:	f7f8 fffb 	bl	800016c <__adddf3>
 8007176:	4606      	mov	r6, r0
 8007178:	4620      	mov	r0, r4
 800717a:	460f      	mov	r7, r1
 800717c:	f7f9 f942 	bl	8000404 <__aeabi_i2d>
 8007180:	a367      	add	r3, pc, #412	; (adr r3, 8007320 <_dtoa_r+0x2d8>)
 8007182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007186:	f7f9 f9a7 	bl	80004d8 <__aeabi_dmul>
 800718a:	4602      	mov	r2, r0
 800718c:	460b      	mov	r3, r1
 800718e:	4630      	mov	r0, r6
 8007190:	4639      	mov	r1, r7
 8007192:	f7f8 ffeb 	bl	800016c <__adddf3>
 8007196:	4606      	mov	r6, r0
 8007198:	460f      	mov	r7, r1
 800719a:	f7f9 fc4d 	bl	8000a38 <__aeabi_d2iz>
 800719e:	2200      	movs	r2, #0
 80071a0:	4681      	mov	r9, r0
 80071a2:	2300      	movs	r3, #0
 80071a4:	4630      	mov	r0, r6
 80071a6:	4639      	mov	r1, r7
 80071a8:	f7f9 fc08 	bl	80009bc <__aeabi_dcmplt>
 80071ac:	b148      	cbz	r0, 80071c2 <_dtoa_r+0x17a>
 80071ae:	4648      	mov	r0, r9
 80071b0:	f7f9 f928 	bl	8000404 <__aeabi_i2d>
 80071b4:	4632      	mov	r2, r6
 80071b6:	463b      	mov	r3, r7
 80071b8:	f7f9 fbf6 	bl	80009a8 <__aeabi_dcmpeq>
 80071bc:	b908      	cbnz	r0, 80071c2 <_dtoa_r+0x17a>
 80071be:	f109 39ff 	add.w	r9, r9, #4294967295
 80071c2:	f1b9 0f16 	cmp.w	r9, #22
 80071c6:	d857      	bhi.n	8007278 <_dtoa_r+0x230>
 80071c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80071cc:	4b5d      	ldr	r3, [pc, #372]	; (8007344 <_dtoa_r+0x2fc>)
 80071ce:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80071d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071d6:	f7f9 fbf1 	bl	80009bc <__aeabi_dcmplt>
 80071da:	2800      	cmp	r0, #0
 80071dc:	d04e      	beq.n	800727c <_dtoa_r+0x234>
 80071de:	2300      	movs	r3, #0
 80071e0:	f109 39ff 	add.w	r9, r9, #4294967295
 80071e4:	930f      	str	r3, [sp, #60]	; 0x3c
 80071e6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80071e8:	1b1c      	subs	r4, r3, r4
 80071ea:	1e63      	subs	r3, r4, #1
 80071ec:	9309      	str	r3, [sp, #36]	; 0x24
 80071ee:	bf49      	itett	mi
 80071f0:	f1c4 0301 	rsbmi	r3, r4, #1
 80071f4:	2300      	movpl	r3, #0
 80071f6:	9306      	strmi	r3, [sp, #24]
 80071f8:	2300      	movmi	r3, #0
 80071fa:	bf54      	ite	pl
 80071fc:	9306      	strpl	r3, [sp, #24]
 80071fe:	9309      	strmi	r3, [sp, #36]	; 0x24
 8007200:	f1b9 0f00 	cmp.w	r9, #0
 8007204:	db3c      	blt.n	8007280 <_dtoa_r+0x238>
 8007206:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007208:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800720c:	444b      	add	r3, r9
 800720e:	9309      	str	r3, [sp, #36]	; 0x24
 8007210:	2300      	movs	r3, #0
 8007212:	930a      	str	r3, [sp, #40]	; 0x28
 8007214:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007216:	2b09      	cmp	r3, #9
 8007218:	d86c      	bhi.n	80072f4 <_dtoa_r+0x2ac>
 800721a:	2b05      	cmp	r3, #5
 800721c:	bfc4      	itt	gt
 800721e:	3b04      	subgt	r3, #4
 8007220:	9322      	strgt	r3, [sp, #136]	; 0x88
 8007222:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007224:	bfc8      	it	gt
 8007226:	2400      	movgt	r4, #0
 8007228:	f1a3 0302 	sub.w	r3, r3, #2
 800722c:	bfd8      	it	le
 800722e:	2401      	movle	r4, #1
 8007230:	2b03      	cmp	r3, #3
 8007232:	f200 808b 	bhi.w	800734c <_dtoa_r+0x304>
 8007236:	e8df f003 	tbb	[pc, r3]
 800723a:	4f2d      	.short	0x4f2d
 800723c:	5b4d      	.short	0x5b4d
 800723e:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8007242:	441c      	add	r4, r3
 8007244:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8007248:	2b20      	cmp	r3, #32
 800724a:	bfc3      	ittte	gt
 800724c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007250:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8007254:	fa09 f303 	lslgt.w	r3, r9, r3
 8007258:	f1c3 0320 	rsble	r3, r3, #32
 800725c:	bfc6      	itte	gt
 800725e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007262:	4318      	orrgt	r0, r3
 8007264:	fa06 f003 	lslle.w	r0, r6, r3
 8007268:	f7f9 f8bc 	bl	80003e4 <__aeabi_ui2d>
 800726c:	2301      	movs	r3, #1
 800726e:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8007272:	3c01      	subs	r4, #1
 8007274:	9313      	str	r3, [sp, #76]	; 0x4c
 8007276:	e770      	b.n	800715a <_dtoa_r+0x112>
 8007278:	2301      	movs	r3, #1
 800727a:	e7b3      	b.n	80071e4 <_dtoa_r+0x19c>
 800727c:	900f      	str	r0, [sp, #60]	; 0x3c
 800727e:	e7b2      	b.n	80071e6 <_dtoa_r+0x19e>
 8007280:	9b06      	ldr	r3, [sp, #24]
 8007282:	eba3 0309 	sub.w	r3, r3, r9
 8007286:	9306      	str	r3, [sp, #24]
 8007288:	f1c9 0300 	rsb	r3, r9, #0
 800728c:	930a      	str	r3, [sp, #40]	; 0x28
 800728e:	2300      	movs	r3, #0
 8007290:	930e      	str	r3, [sp, #56]	; 0x38
 8007292:	e7bf      	b.n	8007214 <_dtoa_r+0x1cc>
 8007294:	2300      	movs	r3, #0
 8007296:	930b      	str	r3, [sp, #44]	; 0x2c
 8007298:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800729a:	2b00      	cmp	r3, #0
 800729c:	dc59      	bgt.n	8007352 <_dtoa_r+0x30a>
 800729e:	f04f 0b01 	mov.w	fp, #1
 80072a2:	465b      	mov	r3, fp
 80072a4:	f8cd b008 	str.w	fp, [sp, #8]
 80072a8:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 80072ac:	2200      	movs	r2, #0
 80072ae:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80072b0:	6042      	str	r2, [r0, #4]
 80072b2:	2204      	movs	r2, #4
 80072b4:	f102 0614 	add.w	r6, r2, #20
 80072b8:	429e      	cmp	r6, r3
 80072ba:	6841      	ldr	r1, [r0, #4]
 80072bc:	d94f      	bls.n	800735e <_dtoa_r+0x316>
 80072be:	4628      	mov	r0, r5
 80072c0:	f000 fdd2 	bl	8007e68 <_Balloc>
 80072c4:	9008      	str	r0, [sp, #32]
 80072c6:	2800      	cmp	r0, #0
 80072c8:	d14d      	bne.n	8007366 <_dtoa_r+0x31e>
 80072ca:	4602      	mov	r2, r0
 80072cc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80072d0:	4b1d      	ldr	r3, [pc, #116]	; (8007348 <_dtoa_r+0x300>)
 80072d2:	e6cd      	b.n	8007070 <_dtoa_r+0x28>
 80072d4:	2301      	movs	r3, #1
 80072d6:	e7de      	b.n	8007296 <_dtoa_r+0x24e>
 80072d8:	2300      	movs	r3, #0
 80072da:	930b      	str	r3, [sp, #44]	; 0x2c
 80072dc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80072de:	eb09 0b03 	add.w	fp, r9, r3
 80072e2:	f10b 0301 	add.w	r3, fp, #1
 80072e6:	2b01      	cmp	r3, #1
 80072e8:	9302      	str	r3, [sp, #8]
 80072ea:	bfb8      	it	lt
 80072ec:	2301      	movlt	r3, #1
 80072ee:	e7dd      	b.n	80072ac <_dtoa_r+0x264>
 80072f0:	2301      	movs	r3, #1
 80072f2:	e7f2      	b.n	80072da <_dtoa_r+0x292>
 80072f4:	2401      	movs	r4, #1
 80072f6:	2300      	movs	r3, #0
 80072f8:	940b      	str	r4, [sp, #44]	; 0x2c
 80072fa:	9322      	str	r3, [sp, #136]	; 0x88
 80072fc:	f04f 3bff 	mov.w	fp, #4294967295
 8007300:	2200      	movs	r2, #0
 8007302:	2312      	movs	r3, #18
 8007304:	f8cd b008 	str.w	fp, [sp, #8]
 8007308:	9223      	str	r2, [sp, #140]	; 0x8c
 800730a:	e7cf      	b.n	80072ac <_dtoa_r+0x264>
 800730c:	f3af 8000 	nop.w
 8007310:	636f4361 	.word	0x636f4361
 8007314:	3fd287a7 	.word	0x3fd287a7
 8007318:	8b60c8b3 	.word	0x8b60c8b3
 800731c:	3fc68a28 	.word	0x3fc68a28
 8007320:	509f79fb 	.word	0x509f79fb
 8007324:	3fd34413 	.word	0x3fd34413
 8007328:	0800aa35 	.word	0x0800aa35
 800732c:	0800aa4c 	.word	0x0800aa4c
 8007330:	7ff00000 	.word	0x7ff00000
 8007334:	0800aa31 	.word	0x0800aa31
 8007338:	0800aa28 	.word	0x0800aa28
 800733c:	0800aa05 	.word	0x0800aa05
 8007340:	3ff80000 	.word	0x3ff80000
 8007344:	0800aba8 	.word	0x0800aba8
 8007348:	0800aaab 	.word	0x0800aaab
 800734c:	2301      	movs	r3, #1
 800734e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007350:	e7d4      	b.n	80072fc <_dtoa_r+0x2b4>
 8007352:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8007356:	465b      	mov	r3, fp
 8007358:	f8cd b008 	str.w	fp, [sp, #8]
 800735c:	e7a6      	b.n	80072ac <_dtoa_r+0x264>
 800735e:	3101      	adds	r1, #1
 8007360:	6041      	str	r1, [r0, #4]
 8007362:	0052      	lsls	r2, r2, #1
 8007364:	e7a6      	b.n	80072b4 <_dtoa_r+0x26c>
 8007366:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007368:	9a08      	ldr	r2, [sp, #32]
 800736a:	601a      	str	r2, [r3, #0]
 800736c:	9b02      	ldr	r3, [sp, #8]
 800736e:	2b0e      	cmp	r3, #14
 8007370:	f200 80a8 	bhi.w	80074c4 <_dtoa_r+0x47c>
 8007374:	2c00      	cmp	r4, #0
 8007376:	f000 80a5 	beq.w	80074c4 <_dtoa_r+0x47c>
 800737a:	f1b9 0f00 	cmp.w	r9, #0
 800737e:	dd34      	ble.n	80073ea <_dtoa_r+0x3a2>
 8007380:	4a9a      	ldr	r2, [pc, #616]	; (80075ec <_dtoa_r+0x5a4>)
 8007382:	f009 030f 	and.w	r3, r9, #15
 8007386:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800738a:	f419 7f80 	tst.w	r9, #256	; 0x100
 800738e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007392:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007396:	ea4f 1429 	mov.w	r4, r9, asr #4
 800739a:	d016      	beq.n	80073ca <_dtoa_r+0x382>
 800739c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80073a0:	4b93      	ldr	r3, [pc, #588]	; (80075f0 <_dtoa_r+0x5a8>)
 80073a2:	2703      	movs	r7, #3
 80073a4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80073a8:	f7f9 f9c0 	bl	800072c <__aeabi_ddiv>
 80073ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80073b0:	f004 040f 	and.w	r4, r4, #15
 80073b4:	4e8e      	ldr	r6, [pc, #568]	; (80075f0 <_dtoa_r+0x5a8>)
 80073b6:	b954      	cbnz	r4, 80073ce <_dtoa_r+0x386>
 80073b8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80073bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80073c0:	f7f9 f9b4 	bl	800072c <__aeabi_ddiv>
 80073c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80073c8:	e029      	b.n	800741e <_dtoa_r+0x3d6>
 80073ca:	2702      	movs	r7, #2
 80073cc:	e7f2      	b.n	80073b4 <_dtoa_r+0x36c>
 80073ce:	07e1      	lsls	r1, r4, #31
 80073d0:	d508      	bpl.n	80073e4 <_dtoa_r+0x39c>
 80073d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80073d6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80073da:	f7f9 f87d 	bl	80004d8 <__aeabi_dmul>
 80073de:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80073e2:	3701      	adds	r7, #1
 80073e4:	1064      	asrs	r4, r4, #1
 80073e6:	3608      	adds	r6, #8
 80073e8:	e7e5      	b.n	80073b6 <_dtoa_r+0x36e>
 80073ea:	f000 80a5 	beq.w	8007538 <_dtoa_r+0x4f0>
 80073ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80073f2:	f1c9 0400 	rsb	r4, r9, #0
 80073f6:	4b7d      	ldr	r3, [pc, #500]	; (80075ec <_dtoa_r+0x5a4>)
 80073f8:	f004 020f 	and.w	r2, r4, #15
 80073fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007404:	f7f9 f868 	bl	80004d8 <__aeabi_dmul>
 8007408:	2702      	movs	r7, #2
 800740a:	2300      	movs	r3, #0
 800740c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007410:	4e77      	ldr	r6, [pc, #476]	; (80075f0 <_dtoa_r+0x5a8>)
 8007412:	1124      	asrs	r4, r4, #4
 8007414:	2c00      	cmp	r4, #0
 8007416:	f040 8084 	bne.w	8007522 <_dtoa_r+0x4da>
 800741a:	2b00      	cmp	r3, #0
 800741c:	d1d2      	bne.n	80073c4 <_dtoa_r+0x37c>
 800741e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007420:	2b00      	cmp	r3, #0
 8007422:	f000 808b 	beq.w	800753c <_dtoa_r+0x4f4>
 8007426:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800742a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800742e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007432:	2200      	movs	r2, #0
 8007434:	4b6f      	ldr	r3, [pc, #444]	; (80075f4 <_dtoa_r+0x5ac>)
 8007436:	f7f9 fac1 	bl	80009bc <__aeabi_dcmplt>
 800743a:	2800      	cmp	r0, #0
 800743c:	d07e      	beq.n	800753c <_dtoa_r+0x4f4>
 800743e:	9b02      	ldr	r3, [sp, #8]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d07b      	beq.n	800753c <_dtoa_r+0x4f4>
 8007444:	f1bb 0f00 	cmp.w	fp, #0
 8007448:	dd38      	ble.n	80074bc <_dtoa_r+0x474>
 800744a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800744e:	2200      	movs	r2, #0
 8007450:	4b69      	ldr	r3, [pc, #420]	; (80075f8 <_dtoa_r+0x5b0>)
 8007452:	f7f9 f841 	bl	80004d8 <__aeabi_dmul>
 8007456:	465c      	mov	r4, fp
 8007458:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800745c:	f109 38ff 	add.w	r8, r9, #4294967295
 8007460:	3701      	adds	r7, #1
 8007462:	4638      	mov	r0, r7
 8007464:	f7f8 ffce 	bl	8000404 <__aeabi_i2d>
 8007468:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800746c:	f7f9 f834 	bl	80004d8 <__aeabi_dmul>
 8007470:	2200      	movs	r2, #0
 8007472:	4b62      	ldr	r3, [pc, #392]	; (80075fc <_dtoa_r+0x5b4>)
 8007474:	f7f8 fe7a 	bl	800016c <__adddf3>
 8007478:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800747c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007480:	9611      	str	r6, [sp, #68]	; 0x44
 8007482:	2c00      	cmp	r4, #0
 8007484:	d15d      	bne.n	8007542 <_dtoa_r+0x4fa>
 8007486:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800748a:	2200      	movs	r2, #0
 800748c:	4b5c      	ldr	r3, [pc, #368]	; (8007600 <_dtoa_r+0x5b8>)
 800748e:	f7f8 fe6b 	bl	8000168 <__aeabi_dsub>
 8007492:	4602      	mov	r2, r0
 8007494:	460b      	mov	r3, r1
 8007496:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800749a:	4633      	mov	r3, r6
 800749c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800749e:	f7f9 faab 	bl	80009f8 <__aeabi_dcmpgt>
 80074a2:	2800      	cmp	r0, #0
 80074a4:	f040 829e 	bne.w	80079e4 <_dtoa_r+0x99c>
 80074a8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80074ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80074ae:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80074b2:	f7f9 fa83 	bl	80009bc <__aeabi_dcmplt>
 80074b6:	2800      	cmp	r0, #0
 80074b8:	f040 8292 	bne.w	80079e0 <_dtoa_r+0x998>
 80074bc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80074c0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80074c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	f2c0 8153 	blt.w	8007772 <_dtoa_r+0x72a>
 80074cc:	f1b9 0f0e 	cmp.w	r9, #14
 80074d0:	f300 814f 	bgt.w	8007772 <_dtoa_r+0x72a>
 80074d4:	4b45      	ldr	r3, [pc, #276]	; (80075ec <_dtoa_r+0x5a4>)
 80074d6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80074da:	e9d3 3400 	ldrd	r3, r4, [r3]
 80074de:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80074e2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	f280 80db 	bge.w	80076a0 <_dtoa_r+0x658>
 80074ea:	9b02      	ldr	r3, [sp, #8]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	f300 80d7 	bgt.w	80076a0 <_dtoa_r+0x658>
 80074f2:	f040 8274 	bne.w	80079de <_dtoa_r+0x996>
 80074f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80074fa:	2200      	movs	r2, #0
 80074fc:	4b40      	ldr	r3, [pc, #256]	; (8007600 <_dtoa_r+0x5b8>)
 80074fe:	f7f8 ffeb 	bl	80004d8 <__aeabi_dmul>
 8007502:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007506:	f7f9 fa6d 	bl	80009e4 <__aeabi_dcmpge>
 800750a:	9c02      	ldr	r4, [sp, #8]
 800750c:	4626      	mov	r6, r4
 800750e:	2800      	cmp	r0, #0
 8007510:	f040 824a 	bne.w	80079a8 <_dtoa_r+0x960>
 8007514:	2331      	movs	r3, #49	; 0x31
 8007516:	9f08      	ldr	r7, [sp, #32]
 8007518:	f109 0901 	add.w	r9, r9, #1
 800751c:	f807 3b01 	strb.w	r3, [r7], #1
 8007520:	e246      	b.n	80079b0 <_dtoa_r+0x968>
 8007522:	07e2      	lsls	r2, r4, #31
 8007524:	d505      	bpl.n	8007532 <_dtoa_r+0x4ea>
 8007526:	e9d6 2300 	ldrd	r2, r3, [r6]
 800752a:	f7f8 ffd5 	bl	80004d8 <__aeabi_dmul>
 800752e:	2301      	movs	r3, #1
 8007530:	3701      	adds	r7, #1
 8007532:	1064      	asrs	r4, r4, #1
 8007534:	3608      	adds	r6, #8
 8007536:	e76d      	b.n	8007414 <_dtoa_r+0x3cc>
 8007538:	2702      	movs	r7, #2
 800753a:	e770      	b.n	800741e <_dtoa_r+0x3d6>
 800753c:	46c8      	mov	r8, r9
 800753e:	9c02      	ldr	r4, [sp, #8]
 8007540:	e78f      	b.n	8007462 <_dtoa_r+0x41a>
 8007542:	9908      	ldr	r1, [sp, #32]
 8007544:	4b29      	ldr	r3, [pc, #164]	; (80075ec <_dtoa_r+0x5a4>)
 8007546:	4421      	add	r1, r4
 8007548:	9112      	str	r1, [sp, #72]	; 0x48
 800754a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800754c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007550:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007554:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007558:	2900      	cmp	r1, #0
 800755a:	d055      	beq.n	8007608 <_dtoa_r+0x5c0>
 800755c:	2000      	movs	r0, #0
 800755e:	4929      	ldr	r1, [pc, #164]	; (8007604 <_dtoa_r+0x5bc>)
 8007560:	f7f9 f8e4 	bl	800072c <__aeabi_ddiv>
 8007564:	463b      	mov	r3, r7
 8007566:	4632      	mov	r2, r6
 8007568:	f7f8 fdfe 	bl	8000168 <__aeabi_dsub>
 800756c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007570:	9f08      	ldr	r7, [sp, #32]
 8007572:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007576:	f7f9 fa5f 	bl	8000a38 <__aeabi_d2iz>
 800757a:	4604      	mov	r4, r0
 800757c:	f7f8 ff42 	bl	8000404 <__aeabi_i2d>
 8007580:	4602      	mov	r2, r0
 8007582:	460b      	mov	r3, r1
 8007584:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007588:	f7f8 fdee 	bl	8000168 <__aeabi_dsub>
 800758c:	4602      	mov	r2, r0
 800758e:	460b      	mov	r3, r1
 8007590:	3430      	adds	r4, #48	; 0x30
 8007592:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007596:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800759a:	f807 4b01 	strb.w	r4, [r7], #1
 800759e:	f7f9 fa0d 	bl	80009bc <__aeabi_dcmplt>
 80075a2:	2800      	cmp	r0, #0
 80075a4:	d174      	bne.n	8007690 <_dtoa_r+0x648>
 80075a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80075aa:	2000      	movs	r0, #0
 80075ac:	4911      	ldr	r1, [pc, #68]	; (80075f4 <_dtoa_r+0x5ac>)
 80075ae:	f7f8 fddb 	bl	8000168 <__aeabi_dsub>
 80075b2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80075b6:	f7f9 fa01 	bl	80009bc <__aeabi_dcmplt>
 80075ba:	2800      	cmp	r0, #0
 80075bc:	f040 80b6 	bne.w	800772c <_dtoa_r+0x6e4>
 80075c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80075c2:	429f      	cmp	r7, r3
 80075c4:	f43f af7a 	beq.w	80074bc <_dtoa_r+0x474>
 80075c8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80075cc:	2200      	movs	r2, #0
 80075ce:	4b0a      	ldr	r3, [pc, #40]	; (80075f8 <_dtoa_r+0x5b0>)
 80075d0:	f7f8 ff82 	bl	80004d8 <__aeabi_dmul>
 80075d4:	2200      	movs	r2, #0
 80075d6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80075da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80075de:	4b06      	ldr	r3, [pc, #24]	; (80075f8 <_dtoa_r+0x5b0>)
 80075e0:	f7f8 ff7a 	bl	80004d8 <__aeabi_dmul>
 80075e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80075e8:	e7c3      	b.n	8007572 <_dtoa_r+0x52a>
 80075ea:	bf00      	nop
 80075ec:	0800aba8 	.word	0x0800aba8
 80075f0:	0800ab80 	.word	0x0800ab80
 80075f4:	3ff00000 	.word	0x3ff00000
 80075f8:	40240000 	.word	0x40240000
 80075fc:	401c0000 	.word	0x401c0000
 8007600:	40140000 	.word	0x40140000
 8007604:	3fe00000 	.word	0x3fe00000
 8007608:	4630      	mov	r0, r6
 800760a:	4639      	mov	r1, r7
 800760c:	f7f8 ff64 	bl	80004d8 <__aeabi_dmul>
 8007610:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007612:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007616:	9c08      	ldr	r4, [sp, #32]
 8007618:	9314      	str	r3, [sp, #80]	; 0x50
 800761a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800761e:	f7f9 fa0b 	bl	8000a38 <__aeabi_d2iz>
 8007622:	9015      	str	r0, [sp, #84]	; 0x54
 8007624:	f7f8 feee 	bl	8000404 <__aeabi_i2d>
 8007628:	4602      	mov	r2, r0
 800762a:	460b      	mov	r3, r1
 800762c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007630:	f7f8 fd9a 	bl	8000168 <__aeabi_dsub>
 8007634:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007636:	4606      	mov	r6, r0
 8007638:	3330      	adds	r3, #48	; 0x30
 800763a:	f804 3b01 	strb.w	r3, [r4], #1
 800763e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007640:	460f      	mov	r7, r1
 8007642:	429c      	cmp	r4, r3
 8007644:	f04f 0200 	mov.w	r2, #0
 8007648:	d124      	bne.n	8007694 <_dtoa_r+0x64c>
 800764a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800764e:	4bb3      	ldr	r3, [pc, #716]	; (800791c <_dtoa_r+0x8d4>)
 8007650:	f7f8 fd8c 	bl	800016c <__adddf3>
 8007654:	4602      	mov	r2, r0
 8007656:	460b      	mov	r3, r1
 8007658:	4630      	mov	r0, r6
 800765a:	4639      	mov	r1, r7
 800765c:	f7f9 f9cc 	bl	80009f8 <__aeabi_dcmpgt>
 8007660:	2800      	cmp	r0, #0
 8007662:	d162      	bne.n	800772a <_dtoa_r+0x6e2>
 8007664:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007668:	2000      	movs	r0, #0
 800766a:	49ac      	ldr	r1, [pc, #688]	; (800791c <_dtoa_r+0x8d4>)
 800766c:	f7f8 fd7c 	bl	8000168 <__aeabi_dsub>
 8007670:	4602      	mov	r2, r0
 8007672:	460b      	mov	r3, r1
 8007674:	4630      	mov	r0, r6
 8007676:	4639      	mov	r1, r7
 8007678:	f7f9 f9a0 	bl	80009bc <__aeabi_dcmplt>
 800767c:	2800      	cmp	r0, #0
 800767e:	f43f af1d 	beq.w	80074bc <_dtoa_r+0x474>
 8007682:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007684:	1e7b      	subs	r3, r7, #1
 8007686:	9314      	str	r3, [sp, #80]	; 0x50
 8007688:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800768c:	2b30      	cmp	r3, #48	; 0x30
 800768e:	d0f8      	beq.n	8007682 <_dtoa_r+0x63a>
 8007690:	46c1      	mov	r9, r8
 8007692:	e03a      	b.n	800770a <_dtoa_r+0x6c2>
 8007694:	4ba2      	ldr	r3, [pc, #648]	; (8007920 <_dtoa_r+0x8d8>)
 8007696:	f7f8 ff1f 	bl	80004d8 <__aeabi_dmul>
 800769a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800769e:	e7bc      	b.n	800761a <_dtoa_r+0x5d2>
 80076a0:	9f08      	ldr	r7, [sp, #32]
 80076a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80076a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80076aa:	f7f9 f83f 	bl	800072c <__aeabi_ddiv>
 80076ae:	f7f9 f9c3 	bl	8000a38 <__aeabi_d2iz>
 80076b2:	4604      	mov	r4, r0
 80076b4:	f7f8 fea6 	bl	8000404 <__aeabi_i2d>
 80076b8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80076bc:	f7f8 ff0c 	bl	80004d8 <__aeabi_dmul>
 80076c0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80076c4:	460b      	mov	r3, r1
 80076c6:	4602      	mov	r2, r0
 80076c8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80076cc:	f7f8 fd4c 	bl	8000168 <__aeabi_dsub>
 80076d0:	f807 6b01 	strb.w	r6, [r7], #1
 80076d4:	9e08      	ldr	r6, [sp, #32]
 80076d6:	9b02      	ldr	r3, [sp, #8]
 80076d8:	1bbe      	subs	r6, r7, r6
 80076da:	42b3      	cmp	r3, r6
 80076dc:	d13a      	bne.n	8007754 <_dtoa_r+0x70c>
 80076de:	4602      	mov	r2, r0
 80076e0:	460b      	mov	r3, r1
 80076e2:	f7f8 fd43 	bl	800016c <__adddf3>
 80076e6:	4602      	mov	r2, r0
 80076e8:	460b      	mov	r3, r1
 80076ea:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80076ee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80076f2:	f7f9 f981 	bl	80009f8 <__aeabi_dcmpgt>
 80076f6:	bb58      	cbnz	r0, 8007750 <_dtoa_r+0x708>
 80076f8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80076fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007700:	f7f9 f952 	bl	80009a8 <__aeabi_dcmpeq>
 8007704:	b108      	cbz	r0, 800770a <_dtoa_r+0x6c2>
 8007706:	07e1      	lsls	r1, r4, #31
 8007708:	d422      	bmi.n	8007750 <_dtoa_r+0x708>
 800770a:	4628      	mov	r0, r5
 800770c:	4651      	mov	r1, sl
 800770e:	f000 fbeb 	bl	8007ee8 <_Bfree>
 8007712:	2300      	movs	r3, #0
 8007714:	703b      	strb	r3, [r7, #0]
 8007716:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007718:	f109 0001 	add.w	r0, r9, #1
 800771c:	6018      	str	r0, [r3, #0]
 800771e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007720:	2b00      	cmp	r3, #0
 8007722:	f43f acdf 	beq.w	80070e4 <_dtoa_r+0x9c>
 8007726:	601f      	str	r7, [r3, #0]
 8007728:	e4dc      	b.n	80070e4 <_dtoa_r+0x9c>
 800772a:	4627      	mov	r7, r4
 800772c:	463b      	mov	r3, r7
 800772e:	461f      	mov	r7, r3
 8007730:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007734:	2a39      	cmp	r2, #57	; 0x39
 8007736:	d107      	bne.n	8007748 <_dtoa_r+0x700>
 8007738:	9a08      	ldr	r2, [sp, #32]
 800773a:	429a      	cmp	r2, r3
 800773c:	d1f7      	bne.n	800772e <_dtoa_r+0x6e6>
 800773e:	2230      	movs	r2, #48	; 0x30
 8007740:	9908      	ldr	r1, [sp, #32]
 8007742:	f108 0801 	add.w	r8, r8, #1
 8007746:	700a      	strb	r2, [r1, #0]
 8007748:	781a      	ldrb	r2, [r3, #0]
 800774a:	3201      	adds	r2, #1
 800774c:	701a      	strb	r2, [r3, #0]
 800774e:	e79f      	b.n	8007690 <_dtoa_r+0x648>
 8007750:	46c8      	mov	r8, r9
 8007752:	e7eb      	b.n	800772c <_dtoa_r+0x6e4>
 8007754:	2200      	movs	r2, #0
 8007756:	4b72      	ldr	r3, [pc, #456]	; (8007920 <_dtoa_r+0x8d8>)
 8007758:	f7f8 febe 	bl	80004d8 <__aeabi_dmul>
 800775c:	4602      	mov	r2, r0
 800775e:	460b      	mov	r3, r1
 8007760:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007764:	2200      	movs	r2, #0
 8007766:	2300      	movs	r3, #0
 8007768:	f7f9 f91e 	bl	80009a8 <__aeabi_dcmpeq>
 800776c:	2800      	cmp	r0, #0
 800776e:	d098      	beq.n	80076a2 <_dtoa_r+0x65a>
 8007770:	e7cb      	b.n	800770a <_dtoa_r+0x6c2>
 8007772:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007774:	2a00      	cmp	r2, #0
 8007776:	f000 80cd 	beq.w	8007914 <_dtoa_r+0x8cc>
 800777a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800777c:	2a01      	cmp	r2, #1
 800777e:	f300 80af 	bgt.w	80078e0 <_dtoa_r+0x898>
 8007782:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007784:	2a00      	cmp	r2, #0
 8007786:	f000 80a7 	beq.w	80078d8 <_dtoa_r+0x890>
 800778a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800778e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007790:	9f06      	ldr	r7, [sp, #24]
 8007792:	9a06      	ldr	r2, [sp, #24]
 8007794:	2101      	movs	r1, #1
 8007796:	441a      	add	r2, r3
 8007798:	9206      	str	r2, [sp, #24]
 800779a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800779c:	4628      	mov	r0, r5
 800779e:	441a      	add	r2, r3
 80077a0:	9209      	str	r2, [sp, #36]	; 0x24
 80077a2:	f000 fc5b 	bl	800805c <__i2b>
 80077a6:	4606      	mov	r6, r0
 80077a8:	2f00      	cmp	r7, #0
 80077aa:	dd0c      	ble.n	80077c6 <_dtoa_r+0x77e>
 80077ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	dd09      	ble.n	80077c6 <_dtoa_r+0x77e>
 80077b2:	42bb      	cmp	r3, r7
 80077b4:	bfa8      	it	ge
 80077b6:	463b      	movge	r3, r7
 80077b8:	9a06      	ldr	r2, [sp, #24]
 80077ba:	1aff      	subs	r7, r7, r3
 80077bc:	1ad2      	subs	r2, r2, r3
 80077be:	9206      	str	r2, [sp, #24]
 80077c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80077c2:	1ad3      	subs	r3, r2, r3
 80077c4:	9309      	str	r3, [sp, #36]	; 0x24
 80077c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077c8:	b1f3      	cbz	r3, 8007808 <_dtoa_r+0x7c0>
 80077ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	f000 80a9 	beq.w	8007924 <_dtoa_r+0x8dc>
 80077d2:	2c00      	cmp	r4, #0
 80077d4:	dd10      	ble.n	80077f8 <_dtoa_r+0x7b0>
 80077d6:	4631      	mov	r1, r6
 80077d8:	4622      	mov	r2, r4
 80077da:	4628      	mov	r0, r5
 80077dc:	f000 fcf8 	bl	80081d0 <__pow5mult>
 80077e0:	4652      	mov	r2, sl
 80077e2:	4601      	mov	r1, r0
 80077e4:	4606      	mov	r6, r0
 80077e6:	4628      	mov	r0, r5
 80077e8:	f000 fc4e 	bl	8008088 <__multiply>
 80077ec:	4680      	mov	r8, r0
 80077ee:	4651      	mov	r1, sl
 80077f0:	4628      	mov	r0, r5
 80077f2:	f000 fb79 	bl	8007ee8 <_Bfree>
 80077f6:	46c2      	mov	sl, r8
 80077f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077fa:	1b1a      	subs	r2, r3, r4
 80077fc:	d004      	beq.n	8007808 <_dtoa_r+0x7c0>
 80077fe:	4651      	mov	r1, sl
 8007800:	4628      	mov	r0, r5
 8007802:	f000 fce5 	bl	80081d0 <__pow5mult>
 8007806:	4682      	mov	sl, r0
 8007808:	2101      	movs	r1, #1
 800780a:	4628      	mov	r0, r5
 800780c:	f000 fc26 	bl	800805c <__i2b>
 8007810:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007812:	4604      	mov	r4, r0
 8007814:	2b00      	cmp	r3, #0
 8007816:	f340 8087 	ble.w	8007928 <_dtoa_r+0x8e0>
 800781a:	461a      	mov	r2, r3
 800781c:	4601      	mov	r1, r0
 800781e:	4628      	mov	r0, r5
 8007820:	f000 fcd6 	bl	80081d0 <__pow5mult>
 8007824:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007826:	4604      	mov	r4, r0
 8007828:	2b01      	cmp	r3, #1
 800782a:	f340 8080 	ble.w	800792e <_dtoa_r+0x8e6>
 800782e:	f04f 0800 	mov.w	r8, #0
 8007832:	6923      	ldr	r3, [r4, #16]
 8007834:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007838:	6918      	ldr	r0, [r3, #16]
 800783a:	f000 fbc1 	bl	8007fc0 <__hi0bits>
 800783e:	f1c0 0020 	rsb	r0, r0, #32
 8007842:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007844:	4418      	add	r0, r3
 8007846:	f010 001f 	ands.w	r0, r0, #31
 800784a:	f000 8092 	beq.w	8007972 <_dtoa_r+0x92a>
 800784e:	f1c0 0320 	rsb	r3, r0, #32
 8007852:	2b04      	cmp	r3, #4
 8007854:	f340 808a 	ble.w	800796c <_dtoa_r+0x924>
 8007858:	f1c0 001c 	rsb	r0, r0, #28
 800785c:	9b06      	ldr	r3, [sp, #24]
 800785e:	4407      	add	r7, r0
 8007860:	4403      	add	r3, r0
 8007862:	9306      	str	r3, [sp, #24]
 8007864:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007866:	4403      	add	r3, r0
 8007868:	9309      	str	r3, [sp, #36]	; 0x24
 800786a:	9b06      	ldr	r3, [sp, #24]
 800786c:	2b00      	cmp	r3, #0
 800786e:	dd05      	ble.n	800787c <_dtoa_r+0x834>
 8007870:	4651      	mov	r1, sl
 8007872:	461a      	mov	r2, r3
 8007874:	4628      	mov	r0, r5
 8007876:	f000 fd05 	bl	8008284 <__lshift>
 800787a:	4682      	mov	sl, r0
 800787c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800787e:	2b00      	cmp	r3, #0
 8007880:	dd05      	ble.n	800788e <_dtoa_r+0x846>
 8007882:	4621      	mov	r1, r4
 8007884:	461a      	mov	r2, r3
 8007886:	4628      	mov	r0, r5
 8007888:	f000 fcfc 	bl	8008284 <__lshift>
 800788c:	4604      	mov	r4, r0
 800788e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007890:	2b00      	cmp	r3, #0
 8007892:	d070      	beq.n	8007976 <_dtoa_r+0x92e>
 8007894:	4621      	mov	r1, r4
 8007896:	4650      	mov	r0, sl
 8007898:	f000 fd60 	bl	800835c <__mcmp>
 800789c:	2800      	cmp	r0, #0
 800789e:	da6a      	bge.n	8007976 <_dtoa_r+0x92e>
 80078a0:	2300      	movs	r3, #0
 80078a2:	4651      	mov	r1, sl
 80078a4:	220a      	movs	r2, #10
 80078a6:	4628      	mov	r0, r5
 80078a8:	f000 fb40 	bl	8007f2c <__multadd>
 80078ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078ae:	4682      	mov	sl, r0
 80078b0:	f109 39ff 	add.w	r9, r9, #4294967295
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	f000 8193 	beq.w	8007be0 <_dtoa_r+0xb98>
 80078ba:	4631      	mov	r1, r6
 80078bc:	2300      	movs	r3, #0
 80078be:	220a      	movs	r2, #10
 80078c0:	4628      	mov	r0, r5
 80078c2:	f000 fb33 	bl	8007f2c <__multadd>
 80078c6:	f1bb 0f00 	cmp.w	fp, #0
 80078ca:	4606      	mov	r6, r0
 80078cc:	f300 8093 	bgt.w	80079f6 <_dtoa_r+0x9ae>
 80078d0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80078d2:	2b02      	cmp	r3, #2
 80078d4:	dc57      	bgt.n	8007986 <_dtoa_r+0x93e>
 80078d6:	e08e      	b.n	80079f6 <_dtoa_r+0x9ae>
 80078d8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80078da:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80078de:	e756      	b.n	800778e <_dtoa_r+0x746>
 80078e0:	9b02      	ldr	r3, [sp, #8]
 80078e2:	1e5c      	subs	r4, r3, #1
 80078e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078e6:	42a3      	cmp	r3, r4
 80078e8:	bfb7      	itett	lt
 80078ea:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80078ec:	1b1c      	subge	r4, r3, r4
 80078ee:	1ae2      	sublt	r2, r4, r3
 80078f0:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80078f2:	bfbe      	ittt	lt
 80078f4:	940a      	strlt	r4, [sp, #40]	; 0x28
 80078f6:	189b      	addlt	r3, r3, r2
 80078f8:	930e      	strlt	r3, [sp, #56]	; 0x38
 80078fa:	9b02      	ldr	r3, [sp, #8]
 80078fc:	bfb8      	it	lt
 80078fe:	2400      	movlt	r4, #0
 8007900:	2b00      	cmp	r3, #0
 8007902:	bfbb      	ittet	lt
 8007904:	9b06      	ldrlt	r3, [sp, #24]
 8007906:	9a02      	ldrlt	r2, [sp, #8]
 8007908:	9f06      	ldrge	r7, [sp, #24]
 800790a:	1a9f      	sublt	r7, r3, r2
 800790c:	bfac      	ite	ge
 800790e:	9b02      	ldrge	r3, [sp, #8]
 8007910:	2300      	movlt	r3, #0
 8007912:	e73e      	b.n	8007792 <_dtoa_r+0x74a>
 8007914:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007916:	9f06      	ldr	r7, [sp, #24]
 8007918:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800791a:	e745      	b.n	80077a8 <_dtoa_r+0x760>
 800791c:	3fe00000 	.word	0x3fe00000
 8007920:	40240000 	.word	0x40240000
 8007924:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007926:	e76a      	b.n	80077fe <_dtoa_r+0x7b6>
 8007928:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800792a:	2b01      	cmp	r3, #1
 800792c:	dc19      	bgt.n	8007962 <_dtoa_r+0x91a>
 800792e:	9b04      	ldr	r3, [sp, #16]
 8007930:	b9bb      	cbnz	r3, 8007962 <_dtoa_r+0x91a>
 8007932:	9b05      	ldr	r3, [sp, #20]
 8007934:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007938:	b99b      	cbnz	r3, 8007962 <_dtoa_r+0x91a>
 800793a:	9b05      	ldr	r3, [sp, #20]
 800793c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007940:	0d1b      	lsrs	r3, r3, #20
 8007942:	051b      	lsls	r3, r3, #20
 8007944:	b183      	cbz	r3, 8007968 <_dtoa_r+0x920>
 8007946:	f04f 0801 	mov.w	r8, #1
 800794a:	9b06      	ldr	r3, [sp, #24]
 800794c:	3301      	adds	r3, #1
 800794e:	9306      	str	r3, [sp, #24]
 8007950:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007952:	3301      	adds	r3, #1
 8007954:	9309      	str	r3, [sp, #36]	; 0x24
 8007956:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007958:	2b00      	cmp	r3, #0
 800795a:	f47f af6a 	bne.w	8007832 <_dtoa_r+0x7ea>
 800795e:	2001      	movs	r0, #1
 8007960:	e76f      	b.n	8007842 <_dtoa_r+0x7fa>
 8007962:	f04f 0800 	mov.w	r8, #0
 8007966:	e7f6      	b.n	8007956 <_dtoa_r+0x90e>
 8007968:	4698      	mov	r8, r3
 800796a:	e7f4      	b.n	8007956 <_dtoa_r+0x90e>
 800796c:	f43f af7d 	beq.w	800786a <_dtoa_r+0x822>
 8007970:	4618      	mov	r0, r3
 8007972:	301c      	adds	r0, #28
 8007974:	e772      	b.n	800785c <_dtoa_r+0x814>
 8007976:	9b02      	ldr	r3, [sp, #8]
 8007978:	2b00      	cmp	r3, #0
 800797a:	dc36      	bgt.n	80079ea <_dtoa_r+0x9a2>
 800797c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800797e:	2b02      	cmp	r3, #2
 8007980:	dd33      	ble.n	80079ea <_dtoa_r+0x9a2>
 8007982:	f8dd b008 	ldr.w	fp, [sp, #8]
 8007986:	f1bb 0f00 	cmp.w	fp, #0
 800798a:	d10d      	bne.n	80079a8 <_dtoa_r+0x960>
 800798c:	4621      	mov	r1, r4
 800798e:	465b      	mov	r3, fp
 8007990:	2205      	movs	r2, #5
 8007992:	4628      	mov	r0, r5
 8007994:	f000 faca 	bl	8007f2c <__multadd>
 8007998:	4601      	mov	r1, r0
 800799a:	4604      	mov	r4, r0
 800799c:	4650      	mov	r0, sl
 800799e:	f000 fcdd 	bl	800835c <__mcmp>
 80079a2:	2800      	cmp	r0, #0
 80079a4:	f73f adb6 	bgt.w	8007514 <_dtoa_r+0x4cc>
 80079a8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80079aa:	9f08      	ldr	r7, [sp, #32]
 80079ac:	ea6f 0903 	mvn.w	r9, r3
 80079b0:	f04f 0800 	mov.w	r8, #0
 80079b4:	4621      	mov	r1, r4
 80079b6:	4628      	mov	r0, r5
 80079b8:	f000 fa96 	bl	8007ee8 <_Bfree>
 80079bc:	2e00      	cmp	r6, #0
 80079be:	f43f aea4 	beq.w	800770a <_dtoa_r+0x6c2>
 80079c2:	f1b8 0f00 	cmp.w	r8, #0
 80079c6:	d005      	beq.n	80079d4 <_dtoa_r+0x98c>
 80079c8:	45b0      	cmp	r8, r6
 80079ca:	d003      	beq.n	80079d4 <_dtoa_r+0x98c>
 80079cc:	4641      	mov	r1, r8
 80079ce:	4628      	mov	r0, r5
 80079d0:	f000 fa8a 	bl	8007ee8 <_Bfree>
 80079d4:	4631      	mov	r1, r6
 80079d6:	4628      	mov	r0, r5
 80079d8:	f000 fa86 	bl	8007ee8 <_Bfree>
 80079dc:	e695      	b.n	800770a <_dtoa_r+0x6c2>
 80079de:	2400      	movs	r4, #0
 80079e0:	4626      	mov	r6, r4
 80079e2:	e7e1      	b.n	80079a8 <_dtoa_r+0x960>
 80079e4:	46c1      	mov	r9, r8
 80079e6:	4626      	mov	r6, r4
 80079e8:	e594      	b.n	8007514 <_dtoa_r+0x4cc>
 80079ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80079ec:	f8dd b008 	ldr.w	fp, [sp, #8]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	f000 80fc 	beq.w	8007bee <_dtoa_r+0xba6>
 80079f6:	2f00      	cmp	r7, #0
 80079f8:	dd05      	ble.n	8007a06 <_dtoa_r+0x9be>
 80079fa:	4631      	mov	r1, r6
 80079fc:	463a      	mov	r2, r7
 80079fe:	4628      	mov	r0, r5
 8007a00:	f000 fc40 	bl	8008284 <__lshift>
 8007a04:	4606      	mov	r6, r0
 8007a06:	f1b8 0f00 	cmp.w	r8, #0
 8007a0a:	d05c      	beq.n	8007ac6 <_dtoa_r+0xa7e>
 8007a0c:	4628      	mov	r0, r5
 8007a0e:	6871      	ldr	r1, [r6, #4]
 8007a10:	f000 fa2a 	bl	8007e68 <_Balloc>
 8007a14:	4607      	mov	r7, r0
 8007a16:	b928      	cbnz	r0, 8007a24 <_dtoa_r+0x9dc>
 8007a18:	4602      	mov	r2, r0
 8007a1a:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007a1e:	4b7e      	ldr	r3, [pc, #504]	; (8007c18 <_dtoa_r+0xbd0>)
 8007a20:	f7ff bb26 	b.w	8007070 <_dtoa_r+0x28>
 8007a24:	6932      	ldr	r2, [r6, #16]
 8007a26:	f106 010c 	add.w	r1, r6, #12
 8007a2a:	3202      	adds	r2, #2
 8007a2c:	0092      	lsls	r2, r2, #2
 8007a2e:	300c      	adds	r0, #12
 8007a30:	f000 fa0c 	bl	8007e4c <memcpy>
 8007a34:	2201      	movs	r2, #1
 8007a36:	4639      	mov	r1, r7
 8007a38:	4628      	mov	r0, r5
 8007a3a:	f000 fc23 	bl	8008284 <__lshift>
 8007a3e:	46b0      	mov	r8, r6
 8007a40:	4606      	mov	r6, r0
 8007a42:	9b08      	ldr	r3, [sp, #32]
 8007a44:	3301      	adds	r3, #1
 8007a46:	9302      	str	r3, [sp, #8]
 8007a48:	9b08      	ldr	r3, [sp, #32]
 8007a4a:	445b      	add	r3, fp
 8007a4c:	930a      	str	r3, [sp, #40]	; 0x28
 8007a4e:	9b04      	ldr	r3, [sp, #16]
 8007a50:	f003 0301 	and.w	r3, r3, #1
 8007a54:	9309      	str	r3, [sp, #36]	; 0x24
 8007a56:	9b02      	ldr	r3, [sp, #8]
 8007a58:	4621      	mov	r1, r4
 8007a5a:	4650      	mov	r0, sl
 8007a5c:	f103 3bff 	add.w	fp, r3, #4294967295
 8007a60:	f7ff fa64 	bl	8006f2c <quorem>
 8007a64:	4603      	mov	r3, r0
 8007a66:	4641      	mov	r1, r8
 8007a68:	3330      	adds	r3, #48	; 0x30
 8007a6a:	9004      	str	r0, [sp, #16]
 8007a6c:	4650      	mov	r0, sl
 8007a6e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007a70:	f000 fc74 	bl	800835c <__mcmp>
 8007a74:	4632      	mov	r2, r6
 8007a76:	9006      	str	r0, [sp, #24]
 8007a78:	4621      	mov	r1, r4
 8007a7a:	4628      	mov	r0, r5
 8007a7c:	f000 fc8a 	bl	8008394 <__mdiff>
 8007a80:	68c2      	ldr	r2, [r0, #12]
 8007a82:	4607      	mov	r7, r0
 8007a84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a86:	bb02      	cbnz	r2, 8007aca <_dtoa_r+0xa82>
 8007a88:	4601      	mov	r1, r0
 8007a8a:	4650      	mov	r0, sl
 8007a8c:	f000 fc66 	bl	800835c <__mcmp>
 8007a90:	4602      	mov	r2, r0
 8007a92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a94:	4639      	mov	r1, r7
 8007a96:	4628      	mov	r0, r5
 8007a98:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8007a9c:	f000 fa24 	bl	8007ee8 <_Bfree>
 8007aa0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007aa2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007aa4:	9f02      	ldr	r7, [sp, #8]
 8007aa6:	ea43 0102 	orr.w	r1, r3, r2
 8007aaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007aac:	430b      	orrs	r3, r1
 8007aae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ab0:	d10d      	bne.n	8007ace <_dtoa_r+0xa86>
 8007ab2:	2b39      	cmp	r3, #57	; 0x39
 8007ab4:	d027      	beq.n	8007b06 <_dtoa_r+0xabe>
 8007ab6:	9a06      	ldr	r2, [sp, #24]
 8007ab8:	2a00      	cmp	r2, #0
 8007aba:	dd01      	ble.n	8007ac0 <_dtoa_r+0xa78>
 8007abc:	9b04      	ldr	r3, [sp, #16]
 8007abe:	3331      	adds	r3, #49	; 0x31
 8007ac0:	f88b 3000 	strb.w	r3, [fp]
 8007ac4:	e776      	b.n	80079b4 <_dtoa_r+0x96c>
 8007ac6:	4630      	mov	r0, r6
 8007ac8:	e7b9      	b.n	8007a3e <_dtoa_r+0x9f6>
 8007aca:	2201      	movs	r2, #1
 8007acc:	e7e2      	b.n	8007a94 <_dtoa_r+0xa4c>
 8007ace:	9906      	ldr	r1, [sp, #24]
 8007ad0:	2900      	cmp	r1, #0
 8007ad2:	db04      	blt.n	8007ade <_dtoa_r+0xa96>
 8007ad4:	9822      	ldr	r0, [sp, #136]	; 0x88
 8007ad6:	4301      	orrs	r1, r0
 8007ad8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007ada:	4301      	orrs	r1, r0
 8007adc:	d120      	bne.n	8007b20 <_dtoa_r+0xad8>
 8007ade:	2a00      	cmp	r2, #0
 8007ae0:	ddee      	ble.n	8007ac0 <_dtoa_r+0xa78>
 8007ae2:	4651      	mov	r1, sl
 8007ae4:	2201      	movs	r2, #1
 8007ae6:	4628      	mov	r0, r5
 8007ae8:	9302      	str	r3, [sp, #8]
 8007aea:	f000 fbcb 	bl	8008284 <__lshift>
 8007aee:	4621      	mov	r1, r4
 8007af0:	4682      	mov	sl, r0
 8007af2:	f000 fc33 	bl	800835c <__mcmp>
 8007af6:	2800      	cmp	r0, #0
 8007af8:	9b02      	ldr	r3, [sp, #8]
 8007afa:	dc02      	bgt.n	8007b02 <_dtoa_r+0xaba>
 8007afc:	d1e0      	bne.n	8007ac0 <_dtoa_r+0xa78>
 8007afe:	07da      	lsls	r2, r3, #31
 8007b00:	d5de      	bpl.n	8007ac0 <_dtoa_r+0xa78>
 8007b02:	2b39      	cmp	r3, #57	; 0x39
 8007b04:	d1da      	bne.n	8007abc <_dtoa_r+0xa74>
 8007b06:	2339      	movs	r3, #57	; 0x39
 8007b08:	f88b 3000 	strb.w	r3, [fp]
 8007b0c:	463b      	mov	r3, r7
 8007b0e:	461f      	mov	r7, r3
 8007b10:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8007b14:	3b01      	subs	r3, #1
 8007b16:	2a39      	cmp	r2, #57	; 0x39
 8007b18:	d050      	beq.n	8007bbc <_dtoa_r+0xb74>
 8007b1a:	3201      	adds	r2, #1
 8007b1c:	701a      	strb	r2, [r3, #0]
 8007b1e:	e749      	b.n	80079b4 <_dtoa_r+0x96c>
 8007b20:	2a00      	cmp	r2, #0
 8007b22:	dd03      	ble.n	8007b2c <_dtoa_r+0xae4>
 8007b24:	2b39      	cmp	r3, #57	; 0x39
 8007b26:	d0ee      	beq.n	8007b06 <_dtoa_r+0xabe>
 8007b28:	3301      	adds	r3, #1
 8007b2a:	e7c9      	b.n	8007ac0 <_dtoa_r+0xa78>
 8007b2c:	9a02      	ldr	r2, [sp, #8]
 8007b2e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007b30:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007b34:	428a      	cmp	r2, r1
 8007b36:	d02a      	beq.n	8007b8e <_dtoa_r+0xb46>
 8007b38:	4651      	mov	r1, sl
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	220a      	movs	r2, #10
 8007b3e:	4628      	mov	r0, r5
 8007b40:	f000 f9f4 	bl	8007f2c <__multadd>
 8007b44:	45b0      	cmp	r8, r6
 8007b46:	4682      	mov	sl, r0
 8007b48:	f04f 0300 	mov.w	r3, #0
 8007b4c:	f04f 020a 	mov.w	r2, #10
 8007b50:	4641      	mov	r1, r8
 8007b52:	4628      	mov	r0, r5
 8007b54:	d107      	bne.n	8007b66 <_dtoa_r+0xb1e>
 8007b56:	f000 f9e9 	bl	8007f2c <__multadd>
 8007b5a:	4680      	mov	r8, r0
 8007b5c:	4606      	mov	r6, r0
 8007b5e:	9b02      	ldr	r3, [sp, #8]
 8007b60:	3301      	adds	r3, #1
 8007b62:	9302      	str	r3, [sp, #8]
 8007b64:	e777      	b.n	8007a56 <_dtoa_r+0xa0e>
 8007b66:	f000 f9e1 	bl	8007f2c <__multadd>
 8007b6a:	4631      	mov	r1, r6
 8007b6c:	4680      	mov	r8, r0
 8007b6e:	2300      	movs	r3, #0
 8007b70:	220a      	movs	r2, #10
 8007b72:	4628      	mov	r0, r5
 8007b74:	f000 f9da 	bl	8007f2c <__multadd>
 8007b78:	4606      	mov	r6, r0
 8007b7a:	e7f0      	b.n	8007b5e <_dtoa_r+0xb16>
 8007b7c:	f1bb 0f00 	cmp.w	fp, #0
 8007b80:	bfcc      	ite	gt
 8007b82:	465f      	movgt	r7, fp
 8007b84:	2701      	movle	r7, #1
 8007b86:	f04f 0800 	mov.w	r8, #0
 8007b8a:	9a08      	ldr	r2, [sp, #32]
 8007b8c:	4417      	add	r7, r2
 8007b8e:	4651      	mov	r1, sl
 8007b90:	2201      	movs	r2, #1
 8007b92:	4628      	mov	r0, r5
 8007b94:	9302      	str	r3, [sp, #8]
 8007b96:	f000 fb75 	bl	8008284 <__lshift>
 8007b9a:	4621      	mov	r1, r4
 8007b9c:	4682      	mov	sl, r0
 8007b9e:	f000 fbdd 	bl	800835c <__mcmp>
 8007ba2:	2800      	cmp	r0, #0
 8007ba4:	dcb2      	bgt.n	8007b0c <_dtoa_r+0xac4>
 8007ba6:	d102      	bne.n	8007bae <_dtoa_r+0xb66>
 8007ba8:	9b02      	ldr	r3, [sp, #8]
 8007baa:	07db      	lsls	r3, r3, #31
 8007bac:	d4ae      	bmi.n	8007b0c <_dtoa_r+0xac4>
 8007bae:	463b      	mov	r3, r7
 8007bb0:	461f      	mov	r7, r3
 8007bb2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007bb6:	2a30      	cmp	r2, #48	; 0x30
 8007bb8:	d0fa      	beq.n	8007bb0 <_dtoa_r+0xb68>
 8007bba:	e6fb      	b.n	80079b4 <_dtoa_r+0x96c>
 8007bbc:	9a08      	ldr	r2, [sp, #32]
 8007bbe:	429a      	cmp	r2, r3
 8007bc0:	d1a5      	bne.n	8007b0e <_dtoa_r+0xac6>
 8007bc2:	2331      	movs	r3, #49	; 0x31
 8007bc4:	f109 0901 	add.w	r9, r9, #1
 8007bc8:	7013      	strb	r3, [r2, #0]
 8007bca:	e6f3      	b.n	80079b4 <_dtoa_r+0x96c>
 8007bcc:	4b13      	ldr	r3, [pc, #76]	; (8007c1c <_dtoa_r+0xbd4>)
 8007bce:	f7ff baa7 	b.w	8007120 <_dtoa_r+0xd8>
 8007bd2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	f47f aa80 	bne.w	80070da <_dtoa_r+0x92>
 8007bda:	4b11      	ldr	r3, [pc, #68]	; (8007c20 <_dtoa_r+0xbd8>)
 8007bdc:	f7ff baa0 	b.w	8007120 <_dtoa_r+0xd8>
 8007be0:	f1bb 0f00 	cmp.w	fp, #0
 8007be4:	dc03      	bgt.n	8007bee <_dtoa_r+0xba6>
 8007be6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007be8:	2b02      	cmp	r3, #2
 8007bea:	f73f aecc 	bgt.w	8007986 <_dtoa_r+0x93e>
 8007bee:	9f08      	ldr	r7, [sp, #32]
 8007bf0:	4621      	mov	r1, r4
 8007bf2:	4650      	mov	r0, sl
 8007bf4:	f7ff f99a 	bl	8006f2c <quorem>
 8007bf8:	9a08      	ldr	r2, [sp, #32]
 8007bfa:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007bfe:	f807 3b01 	strb.w	r3, [r7], #1
 8007c02:	1aba      	subs	r2, r7, r2
 8007c04:	4593      	cmp	fp, r2
 8007c06:	ddb9      	ble.n	8007b7c <_dtoa_r+0xb34>
 8007c08:	4651      	mov	r1, sl
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	220a      	movs	r2, #10
 8007c0e:	4628      	mov	r0, r5
 8007c10:	f000 f98c 	bl	8007f2c <__multadd>
 8007c14:	4682      	mov	sl, r0
 8007c16:	e7eb      	b.n	8007bf0 <_dtoa_r+0xba8>
 8007c18:	0800aaab 	.word	0x0800aaab
 8007c1c:	0800aa04 	.word	0x0800aa04
 8007c20:	0800aa28 	.word	0x0800aa28

08007c24 <std>:
 8007c24:	2300      	movs	r3, #0
 8007c26:	b510      	push	{r4, lr}
 8007c28:	4604      	mov	r4, r0
 8007c2a:	e9c0 3300 	strd	r3, r3, [r0]
 8007c2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007c32:	6083      	str	r3, [r0, #8]
 8007c34:	8181      	strh	r1, [r0, #12]
 8007c36:	6643      	str	r3, [r0, #100]	; 0x64
 8007c38:	81c2      	strh	r2, [r0, #14]
 8007c3a:	6183      	str	r3, [r0, #24]
 8007c3c:	4619      	mov	r1, r3
 8007c3e:	2208      	movs	r2, #8
 8007c40:	305c      	adds	r0, #92	; 0x5c
 8007c42:	f7fe fcd3 	bl	80065ec <memset>
 8007c46:	4b05      	ldr	r3, [pc, #20]	; (8007c5c <std+0x38>)
 8007c48:	6224      	str	r4, [r4, #32]
 8007c4a:	6263      	str	r3, [r4, #36]	; 0x24
 8007c4c:	4b04      	ldr	r3, [pc, #16]	; (8007c60 <std+0x3c>)
 8007c4e:	62a3      	str	r3, [r4, #40]	; 0x28
 8007c50:	4b04      	ldr	r3, [pc, #16]	; (8007c64 <std+0x40>)
 8007c52:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007c54:	4b04      	ldr	r3, [pc, #16]	; (8007c68 <std+0x44>)
 8007c56:	6323      	str	r3, [r4, #48]	; 0x30
 8007c58:	bd10      	pop	{r4, pc}
 8007c5a:	bf00      	nop
 8007c5c:	08008c5d 	.word	0x08008c5d
 8007c60:	08008c7f 	.word	0x08008c7f
 8007c64:	08008cb7 	.word	0x08008cb7
 8007c68:	08008cdb 	.word	0x08008cdb

08007c6c <_cleanup_r>:
 8007c6c:	4901      	ldr	r1, [pc, #4]	; (8007c74 <_cleanup_r+0x8>)
 8007c6e:	f000 b8af 	b.w	8007dd0 <_fwalk_reent>
 8007c72:	bf00      	nop
 8007c74:	08008ff1 	.word	0x08008ff1

08007c78 <__sfmoreglue>:
 8007c78:	b570      	push	{r4, r5, r6, lr}
 8007c7a:	2568      	movs	r5, #104	; 0x68
 8007c7c:	1e4a      	subs	r2, r1, #1
 8007c7e:	4355      	muls	r5, r2
 8007c80:	460e      	mov	r6, r1
 8007c82:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007c86:	f000 fccb 	bl	8008620 <_malloc_r>
 8007c8a:	4604      	mov	r4, r0
 8007c8c:	b140      	cbz	r0, 8007ca0 <__sfmoreglue+0x28>
 8007c8e:	2100      	movs	r1, #0
 8007c90:	e9c0 1600 	strd	r1, r6, [r0]
 8007c94:	300c      	adds	r0, #12
 8007c96:	60a0      	str	r0, [r4, #8]
 8007c98:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007c9c:	f7fe fca6 	bl	80065ec <memset>
 8007ca0:	4620      	mov	r0, r4
 8007ca2:	bd70      	pop	{r4, r5, r6, pc}

08007ca4 <__sfp_lock_acquire>:
 8007ca4:	4801      	ldr	r0, [pc, #4]	; (8007cac <__sfp_lock_acquire+0x8>)
 8007ca6:	f000 b8b8 	b.w	8007e1a <__retarget_lock_acquire_recursive>
 8007caa:	bf00      	nop
 8007cac:	20000c54 	.word	0x20000c54

08007cb0 <__sfp_lock_release>:
 8007cb0:	4801      	ldr	r0, [pc, #4]	; (8007cb8 <__sfp_lock_release+0x8>)
 8007cb2:	f000 b8b3 	b.w	8007e1c <__retarget_lock_release_recursive>
 8007cb6:	bf00      	nop
 8007cb8:	20000c54 	.word	0x20000c54

08007cbc <__sinit_lock_acquire>:
 8007cbc:	4801      	ldr	r0, [pc, #4]	; (8007cc4 <__sinit_lock_acquire+0x8>)
 8007cbe:	f000 b8ac 	b.w	8007e1a <__retarget_lock_acquire_recursive>
 8007cc2:	bf00      	nop
 8007cc4:	20000c4f 	.word	0x20000c4f

08007cc8 <__sinit_lock_release>:
 8007cc8:	4801      	ldr	r0, [pc, #4]	; (8007cd0 <__sinit_lock_release+0x8>)
 8007cca:	f000 b8a7 	b.w	8007e1c <__retarget_lock_release_recursive>
 8007cce:	bf00      	nop
 8007cd0:	20000c4f 	.word	0x20000c4f

08007cd4 <__sinit>:
 8007cd4:	b510      	push	{r4, lr}
 8007cd6:	4604      	mov	r4, r0
 8007cd8:	f7ff fff0 	bl	8007cbc <__sinit_lock_acquire>
 8007cdc:	69a3      	ldr	r3, [r4, #24]
 8007cde:	b11b      	cbz	r3, 8007ce8 <__sinit+0x14>
 8007ce0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ce4:	f7ff bff0 	b.w	8007cc8 <__sinit_lock_release>
 8007ce8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007cec:	6523      	str	r3, [r4, #80]	; 0x50
 8007cee:	4b13      	ldr	r3, [pc, #76]	; (8007d3c <__sinit+0x68>)
 8007cf0:	4a13      	ldr	r2, [pc, #76]	; (8007d40 <__sinit+0x6c>)
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	62a2      	str	r2, [r4, #40]	; 0x28
 8007cf6:	42a3      	cmp	r3, r4
 8007cf8:	bf08      	it	eq
 8007cfa:	2301      	moveq	r3, #1
 8007cfc:	4620      	mov	r0, r4
 8007cfe:	bf08      	it	eq
 8007d00:	61a3      	streq	r3, [r4, #24]
 8007d02:	f000 f81f 	bl	8007d44 <__sfp>
 8007d06:	6060      	str	r0, [r4, #4]
 8007d08:	4620      	mov	r0, r4
 8007d0a:	f000 f81b 	bl	8007d44 <__sfp>
 8007d0e:	60a0      	str	r0, [r4, #8]
 8007d10:	4620      	mov	r0, r4
 8007d12:	f000 f817 	bl	8007d44 <__sfp>
 8007d16:	2200      	movs	r2, #0
 8007d18:	2104      	movs	r1, #4
 8007d1a:	60e0      	str	r0, [r4, #12]
 8007d1c:	6860      	ldr	r0, [r4, #4]
 8007d1e:	f7ff ff81 	bl	8007c24 <std>
 8007d22:	2201      	movs	r2, #1
 8007d24:	2109      	movs	r1, #9
 8007d26:	68a0      	ldr	r0, [r4, #8]
 8007d28:	f7ff ff7c 	bl	8007c24 <std>
 8007d2c:	2202      	movs	r2, #2
 8007d2e:	2112      	movs	r1, #18
 8007d30:	68e0      	ldr	r0, [r4, #12]
 8007d32:	f7ff ff77 	bl	8007c24 <std>
 8007d36:	2301      	movs	r3, #1
 8007d38:	61a3      	str	r3, [r4, #24]
 8007d3a:	e7d1      	b.n	8007ce0 <__sinit+0xc>
 8007d3c:	0800a9f0 	.word	0x0800a9f0
 8007d40:	08007c6d 	.word	0x08007c6d

08007d44 <__sfp>:
 8007d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d46:	4607      	mov	r7, r0
 8007d48:	f7ff ffac 	bl	8007ca4 <__sfp_lock_acquire>
 8007d4c:	4b1e      	ldr	r3, [pc, #120]	; (8007dc8 <__sfp+0x84>)
 8007d4e:	681e      	ldr	r6, [r3, #0]
 8007d50:	69b3      	ldr	r3, [r6, #24]
 8007d52:	b913      	cbnz	r3, 8007d5a <__sfp+0x16>
 8007d54:	4630      	mov	r0, r6
 8007d56:	f7ff ffbd 	bl	8007cd4 <__sinit>
 8007d5a:	3648      	adds	r6, #72	; 0x48
 8007d5c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007d60:	3b01      	subs	r3, #1
 8007d62:	d503      	bpl.n	8007d6c <__sfp+0x28>
 8007d64:	6833      	ldr	r3, [r6, #0]
 8007d66:	b30b      	cbz	r3, 8007dac <__sfp+0x68>
 8007d68:	6836      	ldr	r6, [r6, #0]
 8007d6a:	e7f7      	b.n	8007d5c <__sfp+0x18>
 8007d6c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007d70:	b9d5      	cbnz	r5, 8007da8 <__sfp+0x64>
 8007d72:	4b16      	ldr	r3, [pc, #88]	; (8007dcc <__sfp+0x88>)
 8007d74:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007d78:	60e3      	str	r3, [r4, #12]
 8007d7a:	6665      	str	r5, [r4, #100]	; 0x64
 8007d7c:	f000 f84c 	bl	8007e18 <__retarget_lock_init_recursive>
 8007d80:	f7ff ff96 	bl	8007cb0 <__sfp_lock_release>
 8007d84:	2208      	movs	r2, #8
 8007d86:	4629      	mov	r1, r5
 8007d88:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007d8c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007d90:	6025      	str	r5, [r4, #0]
 8007d92:	61a5      	str	r5, [r4, #24]
 8007d94:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007d98:	f7fe fc28 	bl	80065ec <memset>
 8007d9c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007da0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007da4:	4620      	mov	r0, r4
 8007da6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007da8:	3468      	adds	r4, #104	; 0x68
 8007daa:	e7d9      	b.n	8007d60 <__sfp+0x1c>
 8007dac:	2104      	movs	r1, #4
 8007dae:	4638      	mov	r0, r7
 8007db0:	f7ff ff62 	bl	8007c78 <__sfmoreglue>
 8007db4:	4604      	mov	r4, r0
 8007db6:	6030      	str	r0, [r6, #0]
 8007db8:	2800      	cmp	r0, #0
 8007dba:	d1d5      	bne.n	8007d68 <__sfp+0x24>
 8007dbc:	f7ff ff78 	bl	8007cb0 <__sfp_lock_release>
 8007dc0:	230c      	movs	r3, #12
 8007dc2:	603b      	str	r3, [r7, #0]
 8007dc4:	e7ee      	b.n	8007da4 <__sfp+0x60>
 8007dc6:	bf00      	nop
 8007dc8:	0800a9f0 	.word	0x0800a9f0
 8007dcc:	ffff0001 	.word	0xffff0001

08007dd0 <_fwalk_reent>:
 8007dd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007dd4:	4606      	mov	r6, r0
 8007dd6:	4688      	mov	r8, r1
 8007dd8:	2700      	movs	r7, #0
 8007dda:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007dde:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007de2:	f1b9 0901 	subs.w	r9, r9, #1
 8007de6:	d505      	bpl.n	8007df4 <_fwalk_reent+0x24>
 8007de8:	6824      	ldr	r4, [r4, #0]
 8007dea:	2c00      	cmp	r4, #0
 8007dec:	d1f7      	bne.n	8007dde <_fwalk_reent+0xe>
 8007dee:	4638      	mov	r0, r7
 8007df0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007df4:	89ab      	ldrh	r3, [r5, #12]
 8007df6:	2b01      	cmp	r3, #1
 8007df8:	d907      	bls.n	8007e0a <_fwalk_reent+0x3a>
 8007dfa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007dfe:	3301      	adds	r3, #1
 8007e00:	d003      	beq.n	8007e0a <_fwalk_reent+0x3a>
 8007e02:	4629      	mov	r1, r5
 8007e04:	4630      	mov	r0, r6
 8007e06:	47c0      	blx	r8
 8007e08:	4307      	orrs	r7, r0
 8007e0a:	3568      	adds	r5, #104	; 0x68
 8007e0c:	e7e9      	b.n	8007de2 <_fwalk_reent+0x12>
	...

08007e10 <_localeconv_r>:
 8007e10:	4800      	ldr	r0, [pc, #0]	; (8007e14 <_localeconv_r+0x4>)
 8007e12:	4770      	bx	lr
 8007e14:	200001d4 	.word	0x200001d4

08007e18 <__retarget_lock_init_recursive>:
 8007e18:	4770      	bx	lr

08007e1a <__retarget_lock_acquire_recursive>:
 8007e1a:	4770      	bx	lr

08007e1c <__retarget_lock_release_recursive>:
 8007e1c:	4770      	bx	lr
	...

08007e20 <malloc>:
 8007e20:	4b02      	ldr	r3, [pc, #8]	; (8007e2c <malloc+0xc>)
 8007e22:	4601      	mov	r1, r0
 8007e24:	6818      	ldr	r0, [r3, #0]
 8007e26:	f000 bbfb 	b.w	8008620 <_malloc_r>
 8007e2a:	bf00      	nop
 8007e2c:	20000080 	.word	0x20000080

08007e30 <memchr>:
 8007e30:	4603      	mov	r3, r0
 8007e32:	b510      	push	{r4, lr}
 8007e34:	b2c9      	uxtb	r1, r1
 8007e36:	4402      	add	r2, r0
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	d101      	bne.n	8007e42 <memchr+0x12>
 8007e3e:	2000      	movs	r0, #0
 8007e40:	e003      	b.n	8007e4a <memchr+0x1a>
 8007e42:	7804      	ldrb	r4, [r0, #0]
 8007e44:	3301      	adds	r3, #1
 8007e46:	428c      	cmp	r4, r1
 8007e48:	d1f6      	bne.n	8007e38 <memchr+0x8>
 8007e4a:	bd10      	pop	{r4, pc}

08007e4c <memcpy>:
 8007e4c:	440a      	add	r2, r1
 8007e4e:	4291      	cmp	r1, r2
 8007e50:	f100 33ff 	add.w	r3, r0, #4294967295
 8007e54:	d100      	bne.n	8007e58 <memcpy+0xc>
 8007e56:	4770      	bx	lr
 8007e58:	b510      	push	{r4, lr}
 8007e5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e5e:	4291      	cmp	r1, r2
 8007e60:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e64:	d1f9      	bne.n	8007e5a <memcpy+0xe>
 8007e66:	bd10      	pop	{r4, pc}

08007e68 <_Balloc>:
 8007e68:	b570      	push	{r4, r5, r6, lr}
 8007e6a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007e6c:	4604      	mov	r4, r0
 8007e6e:	460d      	mov	r5, r1
 8007e70:	b976      	cbnz	r6, 8007e90 <_Balloc+0x28>
 8007e72:	2010      	movs	r0, #16
 8007e74:	f7ff ffd4 	bl	8007e20 <malloc>
 8007e78:	4602      	mov	r2, r0
 8007e7a:	6260      	str	r0, [r4, #36]	; 0x24
 8007e7c:	b920      	cbnz	r0, 8007e88 <_Balloc+0x20>
 8007e7e:	2166      	movs	r1, #102	; 0x66
 8007e80:	4b17      	ldr	r3, [pc, #92]	; (8007ee0 <_Balloc+0x78>)
 8007e82:	4818      	ldr	r0, [pc, #96]	; (8007ee4 <_Balloc+0x7c>)
 8007e84:	f001 f800 	bl	8008e88 <__assert_func>
 8007e88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007e8c:	6006      	str	r6, [r0, #0]
 8007e8e:	60c6      	str	r6, [r0, #12]
 8007e90:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007e92:	68f3      	ldr	r3, [r6, #12]
 8007e94:	b183      	cbz	r3, 8007eb8 <_Balloc+0x50>
 8007e96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e98:	68db      	ldr	r3, [r3, #12]
 8007e9a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007e9e:	b9b8      	cbnz	r0, 8007ed0 <_Balloc+0x68>
 8007ea0:	2101      	movs	r1, #1
 8007ea2:	fa01 f605 	lsl.w	r6, r1, r5
 8007ea6:	1d72      	adds	r2, r6, #5
 8007ea8:	4620      	mov	r0, r4
 8007eaa:	0092      	lsls	r2, r2, #2
 8007eac:	f000 fb5e 	bl	800856c <_calloc_r>
 8007eb0:	b160      	cbz	r0, 8007ecc <_Balloc+0x64>
 8007eb2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007eb6:	e00e      	b.n	8007ed6 <_Balloc+0x6e>
 8007eb8:	2221      	movs	r2, #33	; 0x21
 8007eba:	2104      	movs	r1, #4
 8007ebc:	4620      	mov	r0, r4
 8007ebe:	f000 fb55 	bl	800856c <_calloc_r>
 8007ec2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ec4:	60f0      	str	r0, [r6, #12]
 8007ec6:	68db      	ldr	r3, [r3, #12]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d1e4      	bne.n	8007e96 <_Balloc+0x2e>
 8007ecc:	2000      	movs	r0, #0
 8007ece:	bd70      	pop	{r4, r5, r6, pc}
 8007ed0:	6802      	ldr	r2, [r0, #0]
 8007ed2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007edc:	e7f7      	b.n	8007ece <_Balloc+0x66>
 8007ede:	bf00      	nop
 8007ee0:	0800aa35 	.word	0x0800aa35
 8007ee4:	0800ab1c 	.word	0x0800ab1c

08007ee8 <_Bfree>:
 8007ee8:	b570      	push	{r4, r5, r6, lr}
 8007eea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007eec:	4605      	mov	r5, r0
 8007eee:	460c      	mov	r4, r1
 8007ef0:	b976      	cbnz	r6, 8007f10 <_Bfree+0x28>
 8007ef2:	2010      	movs	r0, #16
 8007ef4:	f7ff ff94 	bl	8007e20 <malloc>
 8007ef8:	4602      	mov	r2, r0
 8007efa:	6268      	str	r0, [r5, #36]	; 0x24
 8007efc:	b920      	cbnz	r0, 8007f08 <_Bfree+0x20>
 8007efe:	218a      	movs	r1, #138	; 0x8a
 8007f00:	4b08      	ldr	r3, [pc, #32]	; (8007f24 <_Bfree+0x3c>)
 8007f02:	4809      	ldr	r0, [pc, #36]	; (8007f28 <_Bfree+0x40>)
 8007f04:	f000 ffc0 	bl	8008e88 <__assert_func>
 8007f08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007f0c:	6006      	str	r6, [r0, #0]
 8007f0e:	60c6      	str	r6, [r0, #12]
 8007f10:	b13c      	cbz	r4, 8007f22 <_Bfree+0x3a>
 8007f12:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007f14:	6862      	ldr	r2, [r4, #4]
 8007f16:	68db      	ldr	r3, [r3, #12]
 8007f18:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007f1c:	6021      	str	r1, [r4, #0]
 8007f1e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007f22:	bd70      	pop	{r4, r5, r6, pc}
 8007f24:	0800aa35 	.word	0x0800aa35
 8007f28:	0800ab1c 	.word	0x0800ab1c

08007f2c <__multadd>:
 8007f2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f30:	4698      	mov	r8, r3
 8007f32:	460c      	mov	r4, r1
 8007f34:	2300      	movs	r3, #0
 8007f36:	690e      	ldr	r6, [r1, #16]
 8007f38:	4607      	mov	r7, r0
 8007f3a:	f101 0014 	add.w	r0, r1, #20
 8007f3e:	6805      	ldr	r5, [r0, #0]
 8007f40:	3301      	adds	r3, #1
 8007f42:	b2a9      	uxth	r1, r5
 8007f44:	fb02 8101 	mla	r1, r2, r1, r8
 8007f48:	0c2d      	lsrs	r5, r5, #16
 8007f4a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8007f4e:	fb02 c505 	mla	r5, r2, r5, ip
 8007f52:	b289      	uxth	r1, r1
 8007f54:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8007f58:	429e      	cmp	r6, r3
 8007f5a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8007f5e:	f840 1b04 	str.w	r1, [r0], #4
 8007f62:	dcec      	bgt.n	8007f3e <__multadd+0x12>
 8007f64:	f1b8 0f00 	cmp.w	r8, #0
 8007f68:	d022      	beq.n	8007fb0 <__multadd+0x84>
 8007f6a:	68a3      	ldr	r3, [r4, #8]
 8007f6c:	42b3      	cmp	r3, r6
 8007f6e:	dc19      	bgt.n	8007fa4 <__multadd+0x78>
 8007f70:	6861      	ldr	r1, [r4, #4]
 8007f72:	4638      	mov	r0, r7
 8007f74:	3101      	adds	r1, #1
 8007f76:	f7ff ff77 	bl	8007e68 <_Balloc>
 8007f7a:	4605      	mov	r5, r0
 8007f7c:	b928      	cbnz	r0, 8007f8a <__multadd+0x5e>
 8007f7e:	4602      	mov	r2, r0
 8007f80:	21b5      	movs	r1, #181	; 0xb5
 8007f82:	4b0d      	ldr	r3, [pc, #52]	; (8007fb8 <__multadd+0x8c>)
 8007f84:	480d      	ldr	r0, [pc, #52]	; (8007fbc <__multadd+0x90>)
 8007f86:	f000 ff7f 	bl	8008e88 <__assert_func>
 8007f8a:	6922      	ldr	r2, [r4, #16]
 8007f8c:	f104 010c 	add.w	r1, r4, #12
 8007f90:	3202      	adds	r2, #2
 8007f92:	0092      	lsls	r2, r2, #2
 8007f94:	300c      	adds	r0, #12
 8007f96:	f7ff ff59 	bl	8007e4c <memcpy>
 8007f9a:	4621      	mov	r1, r4
 8007f9c:	4638      	mov	r0, r7
 8007f9e:	f7ff ffa3 	bl	8007ee8 <_Bfree>
 8007fa2:	462c      	mov	r4, r5
 8007fa4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8007fa8:	3601      	adds	r6, #1
 8007faa:	f8c3 8014 	str.w	r8, [r3, #20]
 8007fae:	6126      	str	r6, [r4, #16]
 8007fb0:	4620      	mov	r0, r4
 8007fb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fb6:	bf00      	nop
 8007fb8:	0800aaab 	.word	0x0800aaab
 8007fbc:	0800ab1c 	.word	0x0800ab1c

08007fc0 <__hi0bits>:
 8007fc0:	0c02      	lsrs	r2, r0, #16
 8007fc2:	0412      	lsls	r2, r2, #16
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	b9ca      	cbnz	r2, 8007ffc <__hi0bits+0x3c>
 8007fc8:	0403      	lsls	r3, r0, #16
 8007fca:	2010      	movs	r0, #16
 8007fcc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007fd0:	bf04      	itt	eq
 8007fd2:	021b      	lsleq	r3, r3, #8
 8007fd4:	3008      	addeq	r0, #8
 8007fd6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007fda:	bf04      	itt	eq
 8007fdc:	011b      	lsleq	r3, r3, #4
 8007fde:	3004      	addeq	r0, #4
 8007fe0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007fe4:	bf04      	itt	eq
 8007fe6:	009b      	lsleq	r3, r3, #2
 8007fe8:	3002      	addeq	r0, #2
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	db05      	blt.n	8007ffa <__hi0bits+0x3a>
 8007fee:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8007ff2:	f100 0001 	add.w	r0, r0, #1
 8007ff6:	bf08      	it	eq
 8007ff8:	2020      	moveq	r0, #32
 8007ffa:	4770      	bx	lr
 8007ffc:	2000      	movs	r0, #0
 8007ffe:	e7e5      	b.n	8007fcc <__hi0bits+0xc>

08008000 <__lo0bits>:
 8008000:	6803      	ldr	r3, [r0, #0]
 8008002:	4602      	mov	r2, r0
 8008004:	f013 0007 	ands.w	r0, r3, #7
 8008008:	d00b      	beq.n	8008022 <__lo0bits+0x22>
 800800a:	07d9      	lsls	r1, r3, #31
 800800c:	d422      	bmi.n	8008054 <__lo0bits+0x54>
 800800e:	0798      	lsls	r0, r3, #30
 8008010:	bf49      	itett	mi
 8008012:	085b      	lsrmi	r3, r3, #1
 8008014:	089b      	lsrpl	r3, r3, #2
 8008016:	2001      	movmi	r0, #1
 8008018:	6013      	strmi	r3, [r2, #0]
 800801a:	bf5c      	itt	pl
 800801c:	2002      	movpl	r0, #2
 800801e:	6013      	strpl	r3, [r2, #0]
 8008020:	4770      	bx	lr
 8008022:	b299      	uxth	r1, r3
 8008024:	b909      	cbnz	r1, 800802a <__lo0bits+0x2a>
 8008026:	2010      	movs	r0, #16
 8008028:	0c1b      	lsrs	r3, r3, #16
 800802a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800802e:	bf04      	itt	eq
 8008030:	0a1b      	lsreq	r3, r3, #8
 8008032:	3008      	addeq	r0, #8
 8008034:	0719      	lsls	r1, r3, #28
 8008036:	bf04      	itt	eq
 8008038:	091b      	lsreq	r3, r3, #4
 800803a:	3004      	addeq	r0, #4
 800803c:	0799      	lsls	r1, r3, #30
 800803e:	bf04      	itt	eq
 8008040:	089b      	lsreq	r3, r3, #2
 8008042:	3002      	addeq	r0, #2
 8008044:	07d9      	lsls	r1, r3, #31
 8008046:	d403      	bmi.n	8008050 <__lo0bits+0x50>
 8008048:	085b      	lsrs	r3, r3, #1
 800804a:	f100 0001 	add.w	r0, r0, #1
 800804e:	d003      	beq.n	8008058 <__lo0bits+0x58>
 8008050:	6013      	str	r3, [r2, #0]
 8008052:	4770      	bx	lr
 8008054:	2000      	movs	r0, #0
 8008056:	4770      	bx	lr
 8008058:	2020      	movs	r0, #32
 800805a:	4770      	bx	lr

0800805c <__i2b>:
 800805c:	b510      	push	{r4, lr}
 800805e:	460c      	mov	r4, r1
 8008060:	2101      	movs	r1, #1
 8008062:	f7ff ff01 	bl	8007e68 <_Balloc>
 8008066:	4602      	mov	r2, r0
 8008068:	b928      	cbnz	r0, 8008076 <__i2b+0x1a>
 800806a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800806e:	4b04      	ldr	r3, [pc, #16]	; (8008080 <__i2b+0x24>)
 8008070:	4804      	ldr	r0, [pc, #16]	; (8008084 <__i2b+0x28>)
 8008072:	f000 ff09 	bl	8008e88 <__assert_func>
 8008076:	2301      	movs	r3, #1
 8008078:	6144      	str	r4, [r0, #20]
 800807a:	6103      	str	r3, [r0, #16]
 800807c:	bd10      	pop	{r4, pc}
 800807e:	bf00      	nop
 8008080:	0800aaab 	.word	0x0800aaab
 8008084:	0800ab1c 	.word	0x0800ab1c

08008088 <__multiply>:
 8008088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800808c:	4614      	mov	r4, r2
 800808e:	690a      	ldr	r2, [r1, #16]
 8008090:	6923      	ldr	r3, [r4, #16]
 8008092:	460d      	mov	r5, r1
 8008094:	429a      	cmp	r2, r3
 8008096:	bfbe      	ittt	lt
 8008098:	460b      	movlt	r3, r1
 800809a:	4625      	movlt	r5, r4
 800809c:	461c      	movlt	r4, r3
 800809e:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80080a2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80080a6:	68ab      	ldr	r3, [r5, #8]
 80080a8:	6869      	ldr	r1, [r5, #4]
 80080aa:	eb0a 0709 	add.w	r7, sl, r9
 80080ae:	42bb      	cmp	r3, r7
 80080b0:	b085      	sub	sp, #20
 80080b2:	bfb8      	it	lt
 80080b4:	3101      	addlt	r1, #1
 80080b6:	f7ff fed7 	bl	8007e68 <_Balloc>
 80080ba:	b930      	cbnz	r0, 80080ca <__multiply+0x42>
 80080bc:	4602      	mov	r2, r0
 80080be:	f240 115d 	movw	r1, #349	; 0x15d
 80080c2:	4b41      	ldr	r3, [pc, #260]	; (80081c8 <__multiply+0x140>)
 80080c4:	4841      	ldr	r0, [pc, #260]	; (80081cc <__multiply+0x144>)
 80080c6:	f000 fedf 	bl	8008e88 <__assert_func>
 80080ca:	f100 0614 	add.w	r6, r0, #20
 80080ce:	4633      	mov	r3, r6
 80080d0:	2200      	movs	r2, #0
 80080d2:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80080d6:	4543      	cmp	r3, r8
 80080d8:	d31e      	bcc.n	8008118 <__multiply+0x90>
 80080da:	f105 0c14 	add.w	ip, r5, #20
 80080de:	f104 0314 	add.w	r3, r4, #20
 80080e2:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80080e6:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80080ea:	9202      	str	r2, [sp, #8]
 80080ec:	ebac 0205 	sub.w	r2, ip, r5
 80080f0:	3a15      	subs	r2, #21
 80080f2:	f022 0203 	bic.w	r2, r2, #3
 80080f6:	3204      	adds	r2, #4
 80080f8:	f105 0115 	add.w	r1, r5, #21
 80080fc:	458c      	cmp	ip, r1
 80080fe:	bf38      	it	cc
 8008100:	2204      	movcc	r2, #4
 8008102:	9201      	str	r2, [sp, #4]
 8008104:	9a02      	ldr	r2, [sp, #8]
 8008106:	9303      	str	r3, [sp, #12]
 8008108:	429a      	cmp	r2, r3
 800810a:	d808      	bhi.n	800811e <__multiply+0x96>
 800810c:	2f00      	cmp	r7, #0
 800810e:	dc55      	bgt.n	80081bc <__multiply+0x134>
 8008110:	6107      	str	r7, [r0, #16]
 8008112:	b005      	add	sp, #20
 8008114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008118:	f843 2b04 	str.w	r2, [r3], #4
 800811c:	e7db      	b.n	80080d6 <__multiply+0x4e>
 800811e:	f8b3 a000 	ldrh.w	sl, [r3]
 8008122:	f1ba 0f00 	cmp.w	sl, #0
 8008126:	d020      	beq.n	800816a <__multiply+0xe2>
 8008128:	46b1      	mov	r9, r6
 800812a:	2200      	movs	r2, #0
 800812c:	f105 0e14 	add.w	lr, r5, #20
 8008130:	f85e 4b04 	ldr.w	r4, [lr], #4
 8008134:	f8d9 b000 	ldr.w	fp, [r9]
 8008138:	b2a1      	uxth	r1, r4
 800813a:	fa1f fb8b 	uxth.w	fp, fp
 800813e:	fb0a b101 	mla	r1, sl, r1, fp
 8008142:	4411      	add	r1, r2
 8008144:	f8d9 2000 	ldr.w	r2, [r9]
 8008148:	0c24      	lsrs	r4, r4, #16
 800814a:	0c12      	lsrs	r2, r2, #16
 800814c:	fb0a 2404 	mla	r4, sl, r4, r2
 8008150:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8008154:	b289      	uxth	r1, r1
 8008156:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800815a:	45f4      	cmp	ip, lr
 800815c:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8008160:	f849 1b04 	str.w	r1, [r9], #4
 8008164:	d8e4      	bhi.n	8008130 <__multiply+0xa8>
 8008166:	9901      	ldr	r1, [sp, #4]
 8008168:	5072      	str	r2, [r6, r1]
 800816a:	9a03      	ldr	r2, [sp, #12]
 800816c:	3304      	adds	r3, #4
 800816e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008172:	f1b9 0f00 	cmp.w	r9, #0
 8008176:	d01f      	beq.n	80081b8 <__multiply+0x130>
 8008178:	46b6      	mov	lr, r6
 800817a:	f04f 0a00 	mov.w	sl, #0
 800817e:	6834      	ldr	r4, [r6, #0]
 8008180:	f105 0114 	add.w	r1, r5, #20
 8008184:	880a      	ldrh	r2, [r1, #0]
 8008186:	f8be b002 	ldrh.w	fp, [lr, #2]
 800818a:	b2a4      	uxth	r4, r4
 800818c:	fb09 b202 	mla	r2, r9, r2, fp
 8008190:	4492      	add	sl, r2
 8008192:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008196:	f84e 4b04 	str.w	r4, [lr], #4
 800819a:	f851 4b04 	ldr.w	r4, [r1], #4
 800819e:	f8be 2000 	ldrh.w	r2, [lr]
 80081a2:	0c24      	lsrs	r4, r4, #16
 80081a4:	fb09 2404 	mla	r4, r9, r4, r2
 80081a8:	458c      	cmp	ip, r1
 80081aa:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80081ae:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80081b2:	d8e7      	bhi.n	8008184 <__multiply+0xfc>
 80081b4:	9a01      	ldr	r2, [sp, #4]
 80081b6:	50b4      	str	r4, [r6, r2]
 80081b8:	3604      	adds	r6, #4
 80081ba:	e7a3      	b.n	8008104 <__multiply+0x7c>
 80081bc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d1a5      	bne.n	8008110 <__multiply+0x88>
 80081c4:	3f01      	subs	r7, #1
 80081c6:	e7a1      	b.n	800810c <__multiply+0x84>
 80081c8:	0800aaab 	.word	0x0800aaab
 80081cc:	0800ab1c 	.word	0x0800ab1c

080081d0 <__pow5mult>:
 80081d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081d4:	4615      	mov	r5, r2
 80081d6:	f012 0203 	ands.w	r2, r2, #3
 80081da:	4606      	mov	r6, r0
 80081dc:	460f      	mov	r7, r1
 80081de:	d007      	beq.n	80081f0 <__pow5mult+0x20>
 80081e0:	4c25      	ldr	r4, [pc, #148]	; (8008278 <__pow5mult+0xa8>)
 80081e2:	3a01      	subs	r2, #1
 80081e4:	2300      	movs	r3, #0
 80081e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80081ea:	f7ff fe9f 	bl	8007f2c <__multadd>
 80081ee:	4607      	mov	r7, r0
 80081f0:	10ad      	asrs	r5, r5, #2
 80081f2:	d03d      	beq.n	8008270 <__pow5mult+0xa0>
 80081f4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80081f6:	b97c      	cbnz	r4, 8008218 <__pow5mult+0x48>
 80081f8:	2010      	movs	r0, #16
 80081fa:	f7ff fe11 	bl	8007e20 <malloc>
 80081fe:	4602      	mov	r2, r0
 8008200:	6270      	str	r0, [r6, #36]	; 0x24
 8008202:	b928      	cbnz	r0, 8008210 <__pow5mult+0x40>
 8008204:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008208:	4b1c      	ldr	r3, [pc, #112]	; (800827c <__pow5mult+0xac>)
 800820a:	481d      	ldr	r0, [pc, #116]	; (8008280 <__pow5mult+0xb0>)
 800820c:	f000 fe3c 	bl	8008e88 <__assert_func>
 8008210:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008214:	6004      	str	r4, [r0, #0]
 8008216:	60c4      	str	r4, [r0, #12]
 8008218:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800821c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008220:	b94c      	cbnz	r4, 8008236 <__pow5mult+0x66>
 8008222:	f240 2171 	movw	r1, #625	; 0x271
 8008226:	4630      	mov	r0, r6
 8008228:	f7ff ff18 	bl	800805c <__i2b>
 800822c:	2300      	movs	r3, #0
 800822e:	4604      	mov	r4, r0
 8008230:	f8c8 0008 	str.w	r0, [r8, #8]
 8008234:	6003      	str	r3, [r0, #0]
 8008236:	f04f 0900 	mov.w	r9, #0
 800823a:	07eb      	lsls	r3, r5, #31
 800823c:	d50a      	bpl.n	8008254 <__pow5mult+0x84>
 800823e:	4639      	mov	r1, r7
 8008240:	4622      	mov	r2, r4
 8008242:	4630      	mov	r0, r6
 8008244:	f7ff ff20 	bl	8008088 <__multiply>
 8008248:	4680      	mov	r8, r0
 800824a:	4639      	mov	r1, r7
 800824c:	4630      	mov	r0, r6
 800824e:	f7ff fe4b 	bl	8007ee8 <_Bfree>
 8008252:	4647      	mov	r7, r8
 8008254:	106d      	asrs	r5, r5, #1
 8008256:	d00b      	beq.n	8008270 <__pow5mult+0xa0>
 8008258:	6820      	ldr	r0, [r4, #0]
 800825a:	b938      	cbnz	r0, 800826c <__pow5mult+0x9c>
 800825c:	4622      	mov	r2, r4
 800825e:	4621      	mov	r1, r4
 8008260:	4630      	mov	r0, r6
 8008262:	f7ff ff11 	bl	8008088 <__multiply>
 8008266:	6020      	str	r0, [r4, #0]
 8008268:	f8c0 9000 	str.w	r9, [r0]
 800826c:	4604      	mov	r4, r0
 800826e:	e7e4      	b.n	800823a <__pow5mult+0x6a>
 8008270:	4638      	mov	r0, r7
 8008272:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008276:	bf00      	nop
 8008278:	0800ac70 	.word	0x0800ac70
 800827c:	0800aa35 	.word	0x0800aa35
 8008280:	0800ab1c 	.word	0x0800ab1c

08008284 <__lshift>:
 8008284:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008288:	460c      	mov	r4, r1
 800828a:	4607      	mov	r7, r0
 800828c:	4691      	mov	r9, r2
 800828e:	6923      	ldr	r3, [r4, #16]
 8008290:	6849      	ldr	r1, [r1, #4]
 8008292:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008296:	68a3      	ldr	r3, [r4, #8]
 8008298:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800829c:	f108 0601 	add.w	r6, r8, #1
 80082a0:	42b3      	cmp	r3, r6
 80082a2:	db0b      	blt.n	80082bc <__lshift+0x38>
 80082a4:	4638      	mov	r0, r7
 80082a6:	f7ff fddf 	bl	8007e68 <_Balloc>
 80082aa:	4605      	mov	r5, r0
 80082ac:	b948      	cbnz	r0, 80082c2 <__lshift+0x3e>
 80082ae:	4602      	mov	r2, r0
 80082b0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80082b4:	4b27      	ldr	r3, [pc, #156]	; (8008354 <__lshift+0xd0>)
 80082b6:	4828      	ldr	r0, [pc, #160]	; (8008358 <__lshift+0xd4>)
 80082b8:	f000 fde6 	bl	8008e88 <__assert_func>
 80082bc:	3101      	adds	r1, #1
 80082be:	005b      	lsls	r3, r3, #1
 80082c0:	e7ee      	b.n	80082a0 <__lshift+0x1c>
 80082c2:	2300      	movs	r3, #0
 80082c4:	f100 0114 	add.w	r1, r0, #20
 80082c8:	f100 0210 	add.w	r2, r0, #16
 80082cc:	4618      	mov	r0, r3
 80082ce:	4553      	cmp	r3, sl
 80082d0:	db33      	blt.n	800833a <__lshift+0xb6>
 80082d2:	6920      	ldr	r0, [r4, #16]
 80082d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80082d8:	f104 0314 	add.w	r3, r4, #20
 80082dc:	f019 091f 	ands.w	r9, r9, #31
 80082e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80082e4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80082e8:	d02b      	beq.n	8008342 <__lshift+0xbe>
 80082ea:	468a      	mov	sl, r1
 80082ec:	2200      	movs	r2, #0
 80082ee:	f1c9 0e20 	rsb	lr, r9, #32
 80082f2:	6818      	ldr	r0, [r3, #0]
 80082f4:	fa00 f009 	lsl.w	r0, r0, r9
 80082f8:	4302      	orrs	r2, r0
 80082fa:	f84a 2b04 	str.w	r2, [sl], #4
 80082fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8008302:	459c      	cmp	ip, r3
 8008304:	fa22 f20e 	lsr.w	r2, r2, lr
 8008308:	d8f3      	bhi.n	80082f2 <__lshift+0x6e>
 800830a:	ebac 0304 	sub.w	r3, ip, r4
 800830e:	3b15      	subs	r3, #21
 8008310:	f023 0303 	bic.w	r3, r3, #3
 8008314:	3304      	adds	r3, #4
 8008316:	f104 0015 	add.w	r0, r4, #21
 800831a:	4584      	cmp	ip, r0
 800831c:	bf38      	it	cc
 800831e:	2304      	movcc	r3, #4
 8008320:	50ca      	str	r2, [r1, r3]
 8008322:	b10a      	cbz	r2, 8008328 <__lshift+0xa4>
 8008324:	f108 0602 	add.w	r6, r8, #2
 8008328:	3e01      	subs	r6, #1
 800832a:	4638      	mov	r0, r7
 800832c:	4621      	mov	r1, r4
 800832e:	612e      	str	r6, [r5, #16]
 8008330:	f7ff fdda 	bl	8007ee8 <_Bfree>
 8008334:	4628      	mov	r0, r5
 8008336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800833a:	f842 0f04 	str.w	r0, [r2, #4]!
 800833e:	3301      	adds	r3, #1
 8008340:	e7c5      	b.n	80082ce <__lshift+0x4a>
 8008342:	3904      	subs	r1, #4
 8008344:	f853 2b04 	ldr.w	r2, [r3], #4
 8008348:	459c      	cmp	ip, r3
 800834a:	f841 2f04 	str.w	r2, [r1, #4]!
 800834e:	d8f9      	bhi.n	8008344 <__lshift+0xc0>
 8008350:	e7ea      	b.n	8008328 <__lshift+0xa4>
 8008352:	bf00      	nop
 8008354:	0800aaab 	.word	0x0800aaab
 8008358:	0800ab1c 	.word	0x0800ab1c

0800835c <__mcmp>:
 800835c:	4603      	mov	r3, r0
 800835e:	690a      	ldr	r2, [r1, #16]
 8008360:	6900      	ldr	r0, [r0, #16]
 8008362:	b530      	push	{r4, r5, lr}
 8008364:	1a80      	subs	r0, r0, r2
 8008366:	d10d      	bne.n	8008384 <__mcmp+0x28>
 8008368:	3314      	adds	r3, #20
 800836a:	3114      	adds	r1, #20
 800836c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008370:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008374:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008378:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800837c:	4295      	cmp	r5, r2
 800837e:	d002      	beq.n	8008386 <__mcmp+0x2a>
 8008380:	d304      	bcc.n	800838c <__mcmp+0x30>
 8008382:	2001      	movs	r0, #1
 8008384:	bd30      	pop	{r4, r5, pc}
 8008386:	42a3      	cmp	r3, r4
 8008388:	d3f4      	bcc.n	8008374 <__mcmp+0x18>
 800838a:	e7fb      	b.n	8008384 <__mcmp+0x28>
 800838c:	f04f 30ff 	mov.w	r0, #4294967295
 8008390:	e7f8      	b.n	8008384 <__mcmp+0x28>
	...

08008394 <__mdiff>:
 8008394:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008398:	460c      	mov	r4, r1
 800839a:	4606      	mov	r6, r0
 800839c:	4611      	mov	r1, r2
 800839e:	4620      	mov	r0, r4
 80083a0:	4692      	mov	sl, r2
 80083a2:	f7ff ffdb 	bl	800835c <__mcmp>
 80083a6:	1e05      	subs	r5, r0, #0
 80083a8:	d111      	bne.n	80083ce <__mdiff+0x3a>
 80083aa:	4629      	mov	r1, r5
 80083ac:	4630      	mov	r0, r6
 80083ae:	f7ff fd5b 	bl	8007e68 <_Balloc>
 80083b2:	4602      	mov	r2, r0
 80083b4:	b928      	cbnz	r0, 80083c2 <__mdiff+0x2e>
 80083b6:	f240 2132 	movw	r1, #562	; 0x232
 80083ba:	4b3c      	ldr	r3, [pc, #240]	; (80084ac <__mdiff+0x118>)
 80083bc:	483c      	ldr	r0, [pc, #240]	; (80084b0 <__mdiff+0x11c>)
 80083be:	f000 fd63 	bl	8008e88 <__assert_func>
 80083c2:	2301      	movs	r3, #1
 80083c4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80083c8:	4610      	mov	r0, r2
 80083ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083ce:	bfa4      	itt	ge
 80083d0:	4653      	movge	r3, sl
 80083d2:	46a2      	movge	sl, r4
 80083d4:	4630      	mov	r0, r6
 80083d6:	f8da 1004 	ldr.w	r1, [sl, #4]
 80083da:	bfa6      	itte	ge
 80083dc:	461c      	movge	r4, r3
 80083de:	2500      	movge	r5, #0
 80083e0:	2501      	movlt	r5, #1
 80083e2:	f7ff fd41 	bl	8007e68 <_Balloc>
 80083e6:	4602      	mov	r2, r0
 80083e8:	b918      	cbnz	r0, 80083f2 <__mdiff+0x5e>
 80083ea:	f44f 7110 	mov.w	r1, #576	; 0x240
 80083ee:	4b2f      	ldr	r3, [pc, #188]	; (80084ac <__mdiff+0x118>)
 80083f0:	e7e4      	b.n	80083bc <__mdiff+0x28>
 80083f2:	f100 0814 	add.w	r8, r0, #20
 80083f6:	f8da 7010 	ldr.w	r7, [sl, #16]
 80083fa:	60c5      	str	r5, [r0, #12]
 80083fc:	f04f 0c00 	mov.w	ip, #0
 8008400:	f10a 0514 	add.w	r5, sl, #20
 8008404:	f10a 0010 	add.w	r0, sl, #16
 8008408:	46c2      	mov	sl, r8
 800840a:	6926      	ldr	r6, [r4, #16]
 800840c:	f104 0914 	add.w	r9, r4, #20
 8008410:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8008414:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008418:	f850 bf04 	ldr.w	fp, [r0, #4]!
 800841c:	f859 3b04 	ldr.w	r3, [r9], #4
 8008420:	fa1f f18b 	uxth.w	r1, fp
 8008424:	4461      	add	r1, ip
 8008426:	fa1f fc83 	uxth.w	ip, r3
 800842a:	0c1b      	lsrs	r3, r3, #16
 800842c:	eba1 010c 	sub.w	r1, r1, ip
 8008430:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008434:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008438:	b289      	uxth	r1, r1
 800843a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800843e:	454e      	cmp	r6, r9
 8008440:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008444:	f84a 3b04 	str.w	r3, [sl], #4
 8008448:	d8e6      	bhi.n	8008418 <__mdiff+0x84>
 800844a:	1b33      	subs	r3, r6, r4
 800844c:	3b15      	subs	r3, #21
 800844e:	f023 0303 	bic.w	r3, r3, #3
 8008452:	3415      	adds	r4, #21
 8008454:	3304      	adds	r3, #4
 8008456:	42a6      	cmp	r6, r4
 8008458:	bf38      	it	cc
 800845a:	2304      	movcc	r3, #4
 800845c:	441d      	add	r5, r3
 800845e:	4443      	add	r3, r8
 8008460:	461e      	mov	r6, r3
 8008462:	462c      	mov	r4, r5
 8008464:	4574      	cmp	r4, lr
 8008466:	d30e      	bcc.n	8008486 <__mdiff+0xf2>
 8008468:	f10e 0103 	add.w	r1, lr, #3
 800846c:	1b49      	subs	r1, r1, r5
 800846e:	f021 0103 	bic.w	r1, r1, #3
 8008472:	3d03      	subs	r5, #3
 8008474:	45ae      	cmp	lr, r5
 8008476:	bf38      	it	cc
 8008478:	2100      	movcc	r1, #0
 800847a:	4419      	add	r1, r3
 800847c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8008480:	b18b      	cbz	r3, 80084a6 <__mdiff+0x112>
 8008482:	6117      	str	r7, [r2, #16]
 8008484:	e7a0      	b.n	80083c8 <__mdiff+0x34>
 8008486:	f854 8b04 	ldr.w	r8, [r4], #4
 800848a:	fa1f f188 	uxth.w	r1, r8
 800848e:	4461      	add	r1, ip
 8008490:	1408      	asrs	r0, r1, #16
 8008492:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8008496:	b289      	uxth	r1, r1
 8008498:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800849c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80084a0:	f846 1b04 	str.w	r1, [r6], #4
 80084a4:	e7de      	b.n	8008464 <__mdiff+0xd0>
 80084a6:	3f01      	subs	r7, #1
 80084a8:	e7e8      	b.n	800847c <__mdiff+0xe8>
 80084aa:	bf00      	nop
 80084ac:	0800aaab 	.word	0x0800aaab
 80084b0:	0800ab1c 	.word	0x0800ab1c

080084b4 <__d2b>:
 80084b4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80084b8:	2101      	movs	r1, #1
 80084ba:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80084be:	4690      	mov	r8, r2
 80084c0:	461d      	mov	r5, r3
 80084c2:	f7ff fcd1 	bl	8007e68 <_Balloc>
 80084c6:	4604      	mov	r4, r0
 80084c8:	b930      	cbnz	r0, 80084d8 <__d2b+0x24>
 80084ca:	4602      	mov	r2, r0
 80084cc:	f240 310a 	movw	r1, #778	; 0x30a
 80084d0:	4b24      	ldr	r3, [pc, #144]	; (8008564 <__d2b+0xb0>)
 80084d2:	4825      	ldr	r0, [pc, #148]	; (8008568 <__d2b+0xb4>)
 80084d4:	f000 fcd8 	bl	8008e88 <__assert_func>
 80084d8:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80084dc:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80084e0:	bb2d      	cbnz	r5, 800852e <__d2b+0x7a>
 80084e2:	9301      	str	r3, [sp, #4]
 80084e4:	f1b8 0300 	subs.w	r3, r8, #0
 80084e8:	d026      	beq.n	8008538 <__d2b+0x84>
 80084ea:	4668      	mov	r0, sp
 80084ec:	9300      	str	r3, [sp, #0]
 80084ee:	f7ff fd87 	bl	8008000 <__lo0bits>
 80084f2:	9900      	ldr	r1, [sp, #0]
 80084f4:	b1f0      	cbz	r0, 8008534 <__d2b+0x80>
 80084f6:	9a01      	ldr	r2, [sp, #4]
 80084f8:	f1c0 0320 	rsb	r3, r0, #32
 80084fc:	fa02 f303 	lsl.w	r3, r2, r3
 8008500:	430b      	orrs	r3, r1
 8008502:	40c2      	lsrs	r2, r0
 8008504:	6163      	str	r3, [r4, #20]
 8008506:	9201      	str	r2, [sp, #4]
 8008508:	9b01      	ldr	r3, [sp, #4]
 800850a:	2b00      	cmp	r3, #0
 800850c:	bf14      	ite	ne
 800850e:	2102      	movne	r1, #2
 8008510:	2101      	moveq	r1, #1
 8008512:	61a3      	str	r3, [r4, #24]
 8008514:	6121      	str	r1, [r4, #16]
 8008516:	b1c5      	cbz	r5, 800854a <__d2b+0x96>
 8008518:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800851c:	4405      	add	r5, r0
 800851e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008522:	603d      	str	r5, [r7, #0]
 8008524:	6030      	str	r0, [r6, #0]
 8008526:	4620      	mov	r0, r4
 8008528:	b002      	add	sp, #8
 800852a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800852e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008532:	e7d6      	b.n	80084e2 <__d2b+0x2e>
 8008534:	6161      	str	r1, [r4, #20]
 8008536:	e7e7      	b.n	8008508 <__d2b+0x54>
 8008538:	a801      	add	r0, sp, #4
 800853a:	f7ff fd61 	bl	8008000 <__lo0bits>
 800853e:	2101      	movs	r1, #1
 8008540:	9b01      	ldr	r3, [sp, #4]
 8008542:	6121      	str	r1, [r4, #16]
 8008544:	6163      	str	r3, [r4, #20]
 8008546:	3020      	adds	r0, #32
 8008548:	e7e5      	b.n	8008516 <__d2b+0x62>
 800854a:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800854e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008552:	6038      	str	r0, [r7, #0]
 8008554:	6918      	ldr	r0, [r3, #16]
 8008556:	f7ff fd33 	bl	8007fc0 <__hi0bits>
 800855a:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800855e:	6031      	str	r1, [r6, #0]
 8008560:	e7e1      	b.n	8008526 <__d2b+0x72>
 8008562:	bf00      	nop
 8008564:	0800aaab 	.word	0x0800aaab
 8008568:	0800ab1c 	.word	0x0800ab1c

0800856c <_calloc_r>:
 800856c:	b538      	push	{r3, r4, r5, lr}
 800856e:	fb02 f501 	mul.w	r5, r2, r1
 8008572:	4629      	mov	r1, r5
 8008574:	f000 f854 	bl	8008620 <_malloc_r>
 8008578:	4604      	mov	r4, r0
 800857a:	b118      	cbz	r0, 8008584 <_calloc_r+0x18>
 800857c:	462a      	mov	r2, r5
 800857e:	2100      	movs	r1, #0
 8008580:	f7fe f834 	bl	80065ec <memset>
 8008584:	4620      	mov	r0, r4
 8008586:	bd38      	pop	{r3, r4, r5, pc}

08008588 <_free_r>:
 8008588:	b538      	push	{r3, r4, r5, lr}
 800858a:	4605      	mov	r5, r0
 800858c:	2900      	cmp	r1, #0
 800858e:	d043      	beq.n	8008618 <_free_r+0x90>
 8008590:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008594:	1f0c      	subs	r4, r1, #4
 8008596:	2b00      	cmp	r3, #0
 8008598:	bfb8      	it	lt
 800859a:	18e4      	addlt	r4, r4, r3
 800859c:	f000 fe18 	bl	80091d0 <__malloc_lock>
 80085a0:	4a1e      	ldr	r2, [pc, #120]	; (800861c <_free_r+0x94>)
 80085a2:	6813      	ldr	r3, [r2, #0]
 80085a4:	4610      	mov	r0, r2
 80085a6:	b933      	cbnz	r3, 80085b6 <_free_r+0x2e>
 80085a8:	6063      	str	r3, [r4, #4]
 80085aa:	6014      	str	r4, [r2, #0]
 80085ac:	4628      	mov	r0, r5
 80085ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80085b2:	f000 be13 	b.w	80091dc <__malloc_unlock>
 80085b6:	42a3      	cmp	r3, r4
 80085b8:	d90a      	bls.n	80085d0 <_free_r+0x48>
 80085ba:	6821      	ldr	r1, [r4, #0]
 80085bc:	1862      	adds	r2, r4, r1
 80085be:	4293      	cmp	r3, r2
 80085c0:	bf01      	itttt	eq
 80085c2:	681a      	ldreq	r2, [r3, #0]
 80085c4:	685b      	ldreq	r3, [r3, #4]
 80085c6:	1852      	addeq	r2, r2, r1
 80085c8:	6022      	streq	r2, [r4, #0]
 80085ca:	6063      	str	r3, [r4, #4]
 80085cc:	6004      	str	r4, [r0, #0]
 80085ce:	e7ed      	b.n	80085ac <_free_r+0x24>
 80085d0:	461a      	mov	r2, r3
 80085d2:	685b      	ldr	r3, [r3, #4]
 80085d4:	b10b      	cbz	r3, 80085da <_free_r+0x52>
 80085d6:	42a3      	cmp	r3, r4
 80085d8:	d9fa      	bls.n	80085d0 <_free_r+0x48>
 80085da:	6811      	ldr	r1, [r2, #0]
 80085dc:	1850      	adds	r0, r2, r1
 80085de:	42a0      	cmp	r0, r4
 80085e0:	d10b      	bne.n	80085fa <_free_r+0x72>
 80085e2:	6820      	ldr	r0, [r4, #0]
 80085e4:	4401      	add	r1, r0
 80085e6:	1850      	adds	r0, r2, r1
 80085e8:	4283      	cmp	r3, r0
 80085ea:	6011      	str	r1, [r2, #0]
 80085ec:	d1de      	bne.n	80085ac <_free_r+0x24>
 80085ee:	6818      	ldr	r0, [r3, #0]
 80085f0:	685b      	ldr	r3, [r3, #4]
 80085f2:	4401      	add	r1, r0
 80085f4:	6011      	str	r1, [r2, #0]
 80085f6:	6053      	str	r3, [r2, #4]
 80085f8:	e7d8      	b.n	80085ac <_free_r+0x24>
 80085fa:	d902      	bls.n	8008602 <_free_r+0x7a>
 80085fc:	230c      	movs	r3, #12
 80085fe:	602b      	str	r3, [r5, #0]
 8008600:	e7d4      	b.n	80085ac <_free_r+0x24>
 8008602:	6820      	ldr	r0, [r4, #0]
 8008604:	1821      	adds	r1, r4, r0
 8008606:	428b      	cmp	r3, r1
 8008608:	bf01      	itttt	eq
 800860a:	6819      	ldreq	r1, [r3, #0]
 800860c:	685b      	ldreq	r3, [r3, #4]
 800860e:	1809      	addeq	r1, r1, r0
 8008610:	6021      	streq	r1, [r4, #0]
 8008612:	6063      	str	r3, [r4, #4]
 8008614:	6054      	str	r4, [r2, #4]
 8008616:	e7c9      	b.n	80085ac <_free_r+0x24>
 8008618:	bd38      	pop	{r3, r4, r5, pc}
 800861a:	bf00      	nop
 800861c:	20000278 	.word	0x20000278

08008620 <_malloc_r>:
 8008620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008622:	1ccd      	adds	r5, r1, #3
 8008624:	f025 0503 	bic.w	r5, r5, #3
 8008628:	3508      	adds	r5, #8
 800862a:	2d0c      	cmp	r5, #12
 800862c:	bf38      	it	cc
 800862e:	250c      	movcc	r5, #12
 8008630:	2d00      	cmp	r5, #0
 8008632:	4606      	mov	r6, r0
 8008634:	db01      	blt.n	800863a <_malloc_r+0x1a>
 8008636:	42a9      	cmp	r1, r5
 8008638:	d903      	bls.n	8008642 <_malloc_r+0x22>
 800863a:	230c      	movs	r3, #12
 800863c:	6033      	str	r3, [r6, #0]
 800863e:	2000      	movs	r0, #0
 8008640:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008642:	f000 fdc5 	bl	80091d0 <__malloc_lock>
 8008646:	4921      	ldr	r1, [pc, #132]	; (80086cc <_malloc_r+0xac>)
 8008648:	680a      	ldr	r2, [r1, #0]
 800864a:	4614      	mov	r4, r2
 800864c:	b99c      	cbnz	r4, 8008676 <_malloc_r+0x56>
 800864e:	4f20      	ldr	r7, [pc, #128]	; (80086d0 <_malloc_r+0xb0>)
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	b923      	cbnz	r3, 800865e <_malloc_r+0x3e>
 8008654:	4621      	mov	r1, r4
 8008656:	4630      	mov	r0, r6
 8008658:	f000 faf0 	bl	8008c3c <_sbrk_r>
 800865c:	6038      	str	r0, [r7, #0]
 800865e:	4629      	mov	r1, r5
 8008660:	4630      	mov	r0, r6
 8008662:	f000 faeb 	bl	8008c3c <_sbrk_r>
 8008666:	1c43      	adds	r3, r0, #1
 8008668:	d123      	bne.n	80086b2 <_malloc_r+0x92>
 800866a:	230c      	movs	r3, #12
 800866c:	4630      	mov	r0, r6
 800866e:	6033      	str	r3, [r6, #0]
 8008670:	f000 fdb4 	bl	80091dc <__malloc_unlock>
 8008674:	e7e3      	b.n	800863e <_malloc_r+0x1e>
 8008676:	6823      	ldr	r3, [r4, #0]
 8008678:	1b5b      	subs	r3, r3, r5
 800867a:	d417      	bmi.n	80086ac <_malloc_r+0x8c>
 800867c:	2b0b      	cmp	r3, #11
 800867e:	d903      	bls.n	8008688 <_malloc_r+0x68>
 8008680:	6023      	str	r3, [r4, #0]
 8008682:	441c      	add	r4, r3
 8008684:	6025      	str	r5, [r4, #0]
 8008686:	e004      	b.n	8008692 <_malloc_r+0x72>
 8008688:	6863      	ldr	r3, [r4, #4]
 800868a:	42a2      	cmp	r2, r4
 800868c:	bf0c      	ite	eq
 800868e:	600b      	streq	r3, [r1, #0]
 8008690:	6053      	strne	r3, [r2, #4]
 8008692:	4630      	mov	r0, r6
 8008694:	f000 fda2 	bl	80091dc <__malloc_unlock>
 8008698:	f104 000b 	add.w	r0, r4, #11
 800869c:	1d23      	adds	r3, r4, #4
 800869e:	f020 0007 	bic.w	r0, r0, #7
 80086a2:	1ac2      	subs	r2, r0, r3
 80086a4:	d0cc      	beq.n	8008640 <_malloc_r+0x20>
 80086a6:	1a1b      	subs	r3, r3, r0
 80086a8:	50a3      	str	r3, [r4, r2]
 80086aa:	e7c9      	b.n	8008640 <_malloc_r+0x20>
 80086ac:	4622      	mov	r2, r4
 80086ae:	6864      	ldr	r4, [r4, #4]
 80086b0:	e7cc      	b.n	800864c <_malloc_r+0x2c>
 80086b2:	1cc4      	adds	r4, r0, #3
 80086b4:	f024 0403 	bic.w	r4, r4, #3
 80086b8:	42a0      	cmp	r0, r4
 80086ba:	d0e3      	beq.n	8008684 <_malloc_r+0x64>
 80086bc:	1a21      	subs	r1, r4, r0
 80086be:	4630      	mov	r0, r6
 80086c0:	f000 fabc 	bl	8008c3c <_sbrk_r>
 80086c4:	3001      	adds	r0, #1
 80086c6:	d1dd      	bne.n	8008684 <_malloc_r+0x64>
 80086c8:	e7cf      	b.n	800866a <_malloc_r+0x4a>
 80086ca:	bf00      	nop
 80086cc:	20000278 	.word	0x20000278
 80086d0:	2000027c 	.word	0x2000027c

080086d4 <__ssputs_r>:
 80086d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086d8:	688e      	ldr	r6, [r1, #8]
 80086da:	4682      	mov	sl, r0
 80086dc:	429e      	cmp	r6, r3
 80086de:	460c      	mov	r4, r1
 80086e0:	4690      	mov	r8, r2
 80086e2:	461f      	mov	r7, r3
 80086e4:	d838      	bhi.n	8008758 <__ssputs_r+0x84>
 80086e6:	898a      	ldrh	r2, [r1, #12]
 80086e8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80086ec:	d032      	beq.n	8008754 <__ssputs_r+0x80>
 80086ee:	6825      	ldr	r5, [r4, #0]
 80086f0:	6909      	ldr	r1, [r1, #16]
 80086f2:	3301      	adds	r3, #1
 80086f4:	eba5 0901 	sub.w	r9, r5, r1
 80086f8:	6965      	ldr	r5, [r4, #20]
 80086fa:	444b      	add	r3, r9
 80086fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008700:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008704:	106d      	asrs	r5, r5, #1
 8008706:	429d      	cmp	r5, r3
 8008708:	bf38      	it	cc
 800870a:	461d      	movcc	r5, r3
 800870c:	0553      	lsls	r3, r2, #21
 800870e:	d531      	bpl.n	8008774 <__ssputs_r+0xa0>
 8008710:	4629      	mov	r1, r5
 8008712:	f7ff ff85 	bl	8008620 <_malloc_r>
 8008716:	4606      	mov	r6, r0
 8008718:	b950      	cbnz	r0, 8008730 <__ssputs_r+0x5c>
 800871a:	230c      	movs	r3, #12
 800871c:	f04f 30ff 	mov.w	r0, #4294967295
 8008720:	f8ca 3000 	str.w	r3, [sl]
 8008724:	89a3      	ldrh	r3, [r4, #12]
 8008726:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800872a:	81a3      	strh	r3, [r4, #12]
 800872c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008730:	464a      	mov	r2, r9
 8008732:	6921      	ldr	r1, [r4, #16]
 8008734:	f7ff fb8a 	bl	8007e4c <memcpy>
 8008738:	89a3      	ldrh	r3, [r4, #12]
 800873a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800873e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008742:	81a3      	strh	r3, [r4, #12]
 8008744:	6126      	str	r6, [r4, #16]
 8008746:	444e      	add	r6, r9
 8008748:	6026      	str	r6, [r4, #0]
 800874a:	463e      	mov	r6, r7
 800874c:	6165      	str	r5, [r4, #20]
 800874e:	eba5 0509 	sub.w	r5, r5, r9
 8008752:	60a5      	str	r5, [r4, #8]
 8008754:	42be      	cmp	r6, r7
 8008756:	d900      	bls.n	800875a <__ssputs_r+0x86>
 8008758:	463e      	mov	r6, r7
 800875a:	4632      	mov	r2, r6
 800875c:	4641      	mov	r1, r8
 800875e:	6820      	ldr	r0, [r4, #0]
 8008760:	f000 fd1c 	bl	800919c <memmove>
 8008764:	68a3      	ldr	r3, [r4, #8]
 8008766:	6822      	ldr	r2, [r4, #0]
 8008768:	1b9b      	subs	r3, r3, r6
 800876a:	4432      	add	r2, r6
 800876c:	2000      	movs	r0, #0
 800876e:	60a3      	str	r3, [r4, #8]
 8008770:	6022      	str	r2, [r4, #0]
 8008772:	e7db      	b.n	800872c <__ssputs_r+0x58>
 8008774:	462a      	mov	r2, r5
 8008776:	f000 fd37 	bl	80091e8 <_realloc_r>
 800877a:	4606      	mov	r6, r0
 800877c:	2800      	cmp	r0, #0
 800877e:	d1e1      	bne.n	8008744 <__ssputs_r+0x70>
 8008780:	4650      	mov	r0, sl
 8008782:	6921      	ldr	r1, [r4, #16]
 8008784:	f7ff ff00 	bl	8008588 <_free_r>
 8008788:	e7c7      	b.n	800871a <__ssputs_r+0x46>
	...

0800878c <_svfiprintf_r>:
 800878c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008790:	4698      	mov	r8, r3
 8008792:	898b      	ldrh	r3, [r1, #12]
 8008794:	4607      	mov	r7, r0
 8008796:	061b      	lsls	r3, r3, #24
 8008798:	460d      	mov	r5, r1
 800879a:	4614      	mov	r4, r2
 800879c:	b09d      	sub	sp, #116	; 0x74
 800879e:	d50e      	bpl.n	80087be <_svfiprintf_r+0x32>
 80087a0:	690b      	ldr	r3, [r1, #16]
 80087a2:	b963      	cbnz	r3, 80087be <_svfiprintf_r+0x32>
 80087a4:	2140      	movs	r1, #64	; 0x40
 80087a6:	f7ff ff3b 	bl	8008620 <_malloc_r>
 80087aa:	6028      	str	r0, [r5, #0]
 80087ac:	6128      	str	r0, [r5, #16]
 80087ae:	b920      	cbnz	r0, 80087ba <_svfiprintf_r+0x2e>
 80087b0:	230c      	movs	r3, #12
 80087b2:	603b      	str	r3, [r7, #0]
 80087b4:	f04f 30ff 	mov.w	r0, #4294967295
 80087b8:	e0d1      	b.n	800895e <_svfiprintf_r+0x1d2>
 80087ba:	2340      	movs	r3, #64	; 0x40
 80087bc:	616b      	str	r3, [r5, #20]
 80087be:	2300      	movs	r3, #0
 80087c0:	9309      	str	r3, [sp, #36]	; 0x24
 80087c2:	2320      	movs	r3, #32
 80087c4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80087c8:	2330      	movs	r3, #48	; 0x30
 80087ca:	f04f 0901 	mov.w	r9, #1
 80087ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80087d2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008978 <_svfiprintf_r+0x1ec>
 80087d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80087da:	4623      	mov	r3, r4
 80087dc:	469a      	mov	sl, r3
 80087de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80087e2:	b10a      	cbz	r2, 80087e8 <_svfiprintf_r+0x5c>
 80087e4:	2a25      	cmp	r2, #37	; 0x25
 80087e6:	d1f9      	bne.n	80087dc <_svfiprintf_r+0x50>
 80087e8:	ebba 0b04 	subs.w	fp, sl, r4
 80087ec:	d00b      	beq.n	8008806 <_svfiprintf_r+0x7a>
 80087ee:	465b      	mov	r3, fp
 80087f0:	4622      	mov	r2, r4
 80087f2:	4629      	mov	r1, r5
 80087f4:	4638      	mov	r0, r7
 80087f6:	f7ff ff6d 	bl	80086d4 <__ssputs_r>
 80087fa:	3001      	adds	r0, #1
 80087fc:	f000 80aa 	beq.w	8008954 <_svfiprintf_r+0x1c8>
 8008800:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008802:	445a      	add	r2, fp
 8008804:	9209      	str	r2, [sp, #36]	; 0x24
 8008806:	f89a 3000 	ldrb.w	r3, [sl]
 800880a:	2b00      	cmp	r3, #0
 800880c:	f000 80a2 	beq.w	8008954 <_svfiprintf_r+0x1c8>
 8008810:	2300      	movs	r3, #0
 8008812:	f04f 32ff 	mov.w	r2, #4294967295
 8008816:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800881a:	f10a 0a01 	add.w	sl, sl, #1
 800881e:	9304      	str	r3, [sp, #16]
 8008820:	9307      	str	r3, [sp, #28]
 8008822:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008826:	931a      	str	r3, [sp, #104]	; 0x68
 8008828:	4654      	mov	r4, sl
 800882a:	2205      	movs	r2, #5
 800882c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008830:	4851      	ldr	r0, [pc, #324]	; (8008978 <_svfiprintf_r+0x1ec>)
 8008832:	f7ff fafd 	bl	8007e30 <memchr>
 8008836:	9a04      	ldr	r2, [sp, #16]
 8008838:	b9d8      	cbnz	r0, 8008872 <_svfiprintf_r+0xe6>
 800883a:	06d0      	lsls	r0, r2, #27
 800883c:	bf44      	itt	mi
 800883e:	2320      	movmi	r3, #32
 8008840:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008844:	0711      	lsls	r1, r2, #28
 8008846:	bf44      	itt	mi
 8008848:	232b      	movmi	r3, #43	; 0x2b
 800884a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800884e:	f89a 3000 	ldrb.w	r3, [sl]
 8008852:	2b2a      	cmp	r3, #42	; 0x2a
 8008854:	d015      	beq.n	8008882 <_svfiprintf_r+0xf6>
 8008856:	4654      	mov	r4, sl
 8008858:	2000      	movs	r0, #0
 800885a:	f04f 0c0a 	mov.w	ip, #10
 800885e:	9a07      	ldr	r2, [sp, #28]
 8008860:	4621      	mov	r1, r4
 8008862:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008866:	3b30      	subs	r3, #48	; 0x30
 8008868:	2b09      	cmp	r3, #9
 800886a:	d94e      	bls.n	800890a <_svfiprintf_r+0x17e>
 800886c:	b1b0      	cbz	r0, 800889c <_svfiprintf_r+0x110>
 800886e:	9207      	str	r2, [sp, #28]
 8008870:	e014      	b.n	800889c <_svfiprintf_r+0x110>
 8008872:	eba0 0308 	sub.w	r3, r0, r8
 8008876:	fa09 f303 	lsl.w	r3, r9, r3
 800887a:	4313      	orrs	r3, r2
 800887c:	46a2      	mov	sl, r4
 800887e:	9304      	str	r3, [sp, #16]
 8008880:	e7d2      	b.n	8008828 <_svfiprintf_r+0x9c>
 8008882:	9b03      	ldr	r3, [sp, #12]
 8008884:	1d19      	adds	r1, r3, #4
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	9103      	str	r1, [sp, #12]
 800888a:	2b00      	cmp	r3, #0
 800888c:	bfbb      	ittet	lt
 800888e:	425b      	neglt	r3, r3
 8008890:	f042 0202 	orrlt.w	r2, r2, #2
 8008894:	9307      	strge	r3, [sp, #28]
 8008896:	9307      	strlt	r3, [sp, #28]
 8008898:	bfb8      	it	lt
 800889a:	9204      	strlt	r2, [sp, #16]
 800889c:	7823      	ldrb	r3, [r4, #0]
 800889e:	2b2e      	cmp	r3, #46	; 0x2e
 80088a0:	d10c      	bne.n	80088bc <_svfiprintf_r+0x130>
 80088a2:	7863      	ldrb	r3, [r4, #1]
 80088a4:	2b2a      	cmp	r3, #42	; 0x2a
 80088a6:	d135      	bne.n	8008914 <_svfiprintf_r+0x188>
 80088a8:	9b03      	ldr	r3, [sp, #12]
 80088aa:	3402      	adds	r4, #2
 80088ac:	1d1a      	adds	r2, r3, #4
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	9203      	str	r2, [sp, #12]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	bfb8      	it	lt
 80088b6:	f04f 33ff 	movlt.w	r3, #4294967295
 80088ba:	9305      	str	r3, [sp, #20]
 80088bc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008988 <_svfiprintf_r+0x1fc>
 80088c0:	2203      	movs	r2, #3
 80088c2:	4650      	mov	r0, sl
 80088c4:	7821      	ldrb	r1, [r4, #0]
 80088c6:	f7ff fab3 	bl	8007e30 <memchr>
 80088ca:	b140      	cbz	r0, 80088de <_svfiprintf_r+0x152>
 80088cc:	2340      	movs	r3, #64	; 0x40
 80088ce:	eba0 000a 	sub.w	r0, r0, sl
 80088d2:	fa03 f000 	lsl.w	r0, r3, r0
 80088d6:	9b04      	ldr	r3, [sp, #16]
 80088d8:	3401      	adds	r4, #1
 80088da:	4303      	orrs	r3, r0
 80088dc:	9304      	str	r3, [sp, #16]
 80088de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088e2:	2206      	movs	r2, #6
 80088e4:	4825      	ldr	r0, [pc, #148]	; (800897c <_svfiprintf_r+0x1f0>)
 80088e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80088ea:	f7ff faa1 	bl	8007e30 <memchr>
 80088ee:	2800      	cmp	r0, #0
 80088f0:	d038      	beq.n	8008964 <_svfiprintf_r+0x1d8>
 80088f2:	4b23      	ldr	r3, [pc, #140]	; (8008980 <_svfiprintf_r+0x1f4>)
 80088f4:	bb1b      	cbnz	r3, 800893e <_svfiprintf_r+0x1b2>
 80088f6:	9b03      	ldr	r3, [sp, #12]
 80088f8:	3307      	adds	r3, #7
 80088fa:	f023 0307 	bic.w	r3, r3, #7
 80088fe:	3308      	adds	r3, #8
 8008900:	9303      	str	r3, [sp, #12]
 8008902:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008904:	4433      	add	r3, r6
 8008906:	9309      	str	r3, [sp, #36]	; 0x24
 8008908:	e767      	b.n	80087da <_svfiprintf_r+0x4e>
 800890a:	460c      	mov	r4, r1
 800890c:	2001      	movs	r0, #1
 800890e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008912:	e7a5      	b.n	8008860 <_svfiprintf_r+0xd4>
 8008914:	2300      	movs	r3, #0
 8008916:	f04f 0c0a 	mov.w	ip, #10
 800891a:	4619      	mov	r1, r3
 800891c:	3401      	adds	r4, #1
 800891e:	9305      	str	r3, [sp, #20]
 8008920:	4620      	mov	r0, r4
 8008922:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008926:	3a30      	subs	r2, #48	; 0x30
 8008928:	2a09      	cmp	r2, #9
 800892a:	d903      	bls.n	8008934 <_svfiprintf_r+0x1a8>
 800892c:	2b00      	cmp	r3, #0
 800892e:	d0c5      	beq.n	80088bc <_svfiprintf_r+0x130>
 8008930:	9105      	str	r1, [sp, #20]
 8008932:	e7c3      	b.n	80088bc <_svfiprintf_r+0x130>
 8008934:	4604      	mov	r4, r0
 8008936:	2301      	movs	r3, #1
 8008938:	fb0c 2101 	mla	r1, ip, r1, r2
 800893c:	e7f0      	b.n	8008920 <_svfiprintf_r+0x194>
 800893e:	ab03      	add	r3, sp, #12
 8008940:	9300      	str	r3, [sp, #0]
 8008942:	462a      	mov	r2, r5
 8008944:	4638      	mov	r0, r7
 8008946:	4b0f      	ldr	r3, [pc, #60]	; (8008984 <_svfiprintf_r+0x1f8>)
 8008948:	a904      	add	r1, sp, #16
 800894a:	f7fd fef5 	bl	8006738 <_printf_float>
 800894e:	1c42      	adds	r2, r0, #1
 8008950:	4606      	mov	r6, r0
 8008952:	d1d6      	bne.n	8008902 <_svfiprintf_r+0x176>
 8008954:	89ab      	ldrh	r3, [r5, #12]
 8008956:	065b      	lsls	r3, r3, #25
 8008958:	f53f af2c 	bmi.w	80087b4 <_svfiprintf_r+0x28>
 800895c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800895e:	b01d      	add	sp, #116	; 0x74
 8008960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008964:	ab03      	add	r3, sp, #12
 8008966:	9300      	str	r3, [sp, #0]
 8008968:	462a      	mov	r2, r5
 800896a:	4638      	mov	r0, r7
 800896c:	4b05      	ldr	r3, [pc, #20]	; (8008984 <_svfiprintf_r+0x1f8>)
 800896e:	a904      	add	r1, sp, #16
 8008970:	f7fe f97e 	bl	8006c70 <_printf_i>
 8008974:	e7eb      	b.n	800894e <_svfiprintf_r+0x1c2>
 8008976:	bf00      	nop
 8008978:	0800ac7c 	.word	0x0800ac7c
 800897c:	0800ac86 	.word	0x0800ac86
 8008980:	08006739 	.word	0x08006739
 8008984:	080086d5 	.word	0x080086d5
 8008988:	0800ac82 	.word	0x0800ac82

0800898c <__sfputc_r>:
 800898c:	6893      	ldr	r3, [r2, #8]
 800898e:	b410      	push	{r4}
 8008990:	3b01      	subs	r3, #1
 8008992:	2b00      	cmp	r3, #0
 8008994:	6093      	str	r3, [r2, #8]
 8008996:	da07      	bge.n	80089a8 <__sfputc_r+0x1c>
 8008998:	6994      	ldr	r4, [r2, #24]
 800899a:	42a3      	cmp	r3, r4
 800899c:	db01      	blt.n	80089a2 <__sfputc_r+0x16>
 800899e:	290a      	cmp	r1, #10
 80089a0:	d102      	bne.n	80089a8 <__sfputc_r+0x1c>
 80089a2:	bc10      	pop	{r4}
 80089a4:	f000 b99e 	b.w	8008ce4 <__swbuf_r>
 80089a8:	6813      	ldr	r3, [r2, #0]
 80089aa:	1c58      	adds	r0, r3, #1
 80089ac:	6010      	str	r0, [r2, #0]
 80089ae:	7019      	strb	r1, [r3, #0]
 80089b0:	4608      	mov	r0, r1
 80089b2:	bc10      	pop	{r4}
 80089b4:	4770      	bx	lr

080089b6 <__sfputs_r>:
 80089b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089b8:	4606      	mov	r6, r0
 80089ba:	460f      	mov	r7, r1
 80089bc:	4614      	mov	r4, r2
 80089be:	18d5      	adds	r5, r2, r3
 80089c0:	42ac      	cmp	r4, r5
 80089c2:	d101      	bne.n	80089c8 <__sfputs_r+0x12>
 80089c4:	2000      	movs	r0, #0
 80089c6:	e007      	b.n	80089d8 <__sfputs_r+0x22>
 80089c8:	463a      	mov	r2, r7
 80089ca:	4630      	mov	r0, r6
 80089cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089d0:	f7ff ffdc 	bl	800898c <__sfputc_r>
 80089d4:	1c43      	adds	r3, r0, #1
 80089d6:	d1f3      	bne.n	80089c0 <__sfputs_r+0xa>
 80089d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080089dc <_vfiprintf_r>:
 80089dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089e0:	460d      	mov	r5, r1
 80089e2:	4614      	mov	r4, r2
 80089e4:	4698      	mov	r8, r3
 80089e6:	4606      	mov	r6, r0
 80089e8:	b09d      	sub	sp, #116	; 0x74
 80089ea:	b118      	cbz	r0, 80089f4 <_vfiprintf_r+0x18>
 80089ec:	6983      	ldr	r3, [r0, #24]
 80089ee:	b90b      	cbnz	r3, 80089f4 <_vfiprintf_r+0x18>
 80089f0:	f7ff f970 	bl	8007cd4 <__sinit>
 80089f4:	4b89      	ldr	r3, [pc, #548]	; (8008c1c <_vfiprintf_r+0x240>)
 80089f6:	429d      	cmp	r5, r3
 80089f8:	d11b      	bne.n	8008a32 <_vfiprintf_r+0x56>
 80089fa:	6875      	ldr	r5, [r6, #4]
 80089fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80089fe:	07d9      	lsls	r1, r3, #31
 8008a00:	d405      	bmi.n	8008a0e <_vfiprintf_r+0x32>
 8008a02:	89ab      	ldrh	r3, [r5, #12]
 8008a04:	059a      	lsls	r2, r3, #22
 8008a06:	d402      	bmi.n	8008a0e <_vfiprintf_r+0x32>
 8008a08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008a0a:	f7ff fa06 	bl	8007e1a <__retarget_lock_acquire_recursive>
 8008a0e:	89ab      	ldrh	r3, [r5, #12]
 8008a10:	071b      	lsls	r3, r3, #28
 8008a12:	d501      	bpl.n	8008a18 <_vfiprintf_r+0x3c>
 8008a14:	692b      	ldr	r3, [r5, #16]
 8008a16:	b9eb      	cbnz	r3, 8008a54 <_vfiprintf_r+0x78>
 8008a18:	4629      	mov	r1, r5
 8008a1a:	4630      	mov	r0, r6
 8008a1c:	f000 f9c6 	bl	8008dac <__swsetup_r>
 8008a20:	b1c0      	cbz	r0, 8008a54 <_vfiprintf_r+0x78>
 8008a22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008a24:	07dc      	lsls	r4, r3, #31
 8008a26:	d50e      	bpl.n	8008a46 <_vfiprintf_r+0x6a>
 8008a28:	f04f 30ff 	mov.w	r0, #4294967295
 8008a2c:	b01d      	add	sp, #116	; 0x74
 8008a2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a32:	4b7b      	ldr	r3, [pc, #492]	; (8008c20 <_vfiprintf_r+0x244>)
 8008a34:	429d      	cmp	r5, r3
 8008a36:	d101      	bne.n	8008a3c <_vfiprintf_r+0x60>
 8008a38:	68b5      	ldr	r5, [r6, #8]
 8008a3a:	e7df      	b.n	80089fc <_vfiprintf_r+0x20>
 8008a3c:	4b79      	ldr	r3, [pc, #484]	; (8008c24 <_vfiprintf_r+0x248>)
 8008a3e:	429d      	cmp	r5, r3
 8008a40:	bf08      	it	eq
 8008a42:	68f5      	ldreq	r5, [r6, #12]
 8008a44:	e7da      	b.n	80089fc <_vfiprintf_r+0x20>
 8008a46:	89ab      	ldrh	r3, [r5, #12]
 8008a48:	0598      	lsls	r0, r3, #22
 8008a4a:	d4ed      	bmi.n	8008a28 <_vfiprintf_r+0x4c>
 8008a4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008a4e:	f7ff f9e5 	bl	8007e1c <__retarget_lock_release_recursive>
 8008a52:	e7e9      	b.n	8008a28 <_vfiprintf_r+0x4c>
 8008a54:	2300      	movs	r3, #0
 8008a56:	9309      	str	r3, [sp, #36]	; 0x24
 8008a58:	2320      	movs	r3, #32
 8008a5a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008a5e:	2330      	movs	r3, #48	; 0x30
 8008a60:	f04f 0901 	mov.w	r9, #1
 8008a64:	f8cd 800c 	str.w	r8, [sp, #12]
 8008a68:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8008c28 <_vfiprintf_r+0x24c>
 8008a6c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008a70:	4623      	mov	r3, r4
 8008a72:	469a      	mov	sl, r3
 8008a74:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a78:	b10a      	cbz	r2, 8008a7e <_vfiprintf_r+0xa2>
 8008a7a:	2a25      	cmp	r2, #37	; 0x25
 8008a7c:	d1f9      	bne.n	8008a72 <_vfiprintf_r+0x96>
 8008a7e:	ebba 0b04 	subs.w	fp, sl, r4
 8008a82:	d00b      	beq.n	8008a9c <_vfiprintf_r+0xc0>
 8008a84:	465b      	mov	r3, fp
 8008a86:	4622      	mov	r2, r4
 8008a88:	4629      	mov	r1, r5
 8008a8a:	4630      	mov	r0, r6
 8008a8c:	f7ff ff93 	bl	80089b6 <__sfputs_r>
 8008a90:	3001      	adds	r0, #1
 8008a92:	f000 80aa 	beq.w	8008bea <_vfiprintf_r+0x20e>
 8008a96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a98:	445a      	add	r2, fp
 8008a9a:	9209      	str	r2, [sp, #36]	; 0x24
 8008a9c:	f89a 3000 	ldrb.w	r3, [sl]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	f000 80a2 	beq.w	8008bea <_vfiprintf_r+0x20e>
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8008aac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ab0:	f10a 0a01 	add.w	sl, sl, #1
 8008ab4:	9304      	str	r3, [sp, #16]
 8008ab6:	9307      	str	r3, [sp, #28]
 8008ab8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008abc:	931a      	str	r3, [sp, #104]	; 0x68
 8008abe:	4654      	mov	r4, sl
 8008ac0:	2205      	movs	r2, #5
 8008ac2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ac6:	4858      	ldr	r0, [pc, #352]	; (8008c28 <_vfiprintf_r+0x24c>)
 8008ac8:	f7ff f9b2 	bl	8007e30 <memchr>
 8008acc:	9a04      	ldr	r2, [sp, #16]
 8008ace:	b9d8      	cbnz	r0, 8008b08 <_vfiprintf_r+0x12c>
 8008ad0:	06d1      	lsls	r1, r2, #27
 8008ad2:	bf44      	itt	mi
 8008ad4:	2320      	movmi	r3, #32
 8008ad6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ada:	0713      	lsls	r3, r2, #28
 8008adc:	bf44      	itt	mi
 8008ade:	232b      	movmi	r3, #43	; 0x2b
 8008ae0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ae4:	f89a 3000 	ldrb.w	r3, [sl]
 8008ae8:	2b2a      	cmp	r3, #42	; 0x2a
 8008aea:	d015      	beq.n	8008b18 <_vfiprintf_r+0x13c>
 8008aec:	4654      	mov	r4, sl
 8008aee:	2000      	movs	r0, #0
 8008af0:	f04f 0c0a 	mov.w	ip, #10
 8008af4:	9a07      	ldr	r2, [sp, #28]
 8008af6:	4621      	mov	r1, r4
 8008af8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008afc:	3b30      	subs	r3, #48	; 0x30
 8008afe:	2b09      	cmp	r3, #9
 8008b00:	d94e      	bls.n	8008ba0 <_vfiprintf_r+0x1c4>
 8008b02:	b1b0      	cbz	r0, 8008b32 <_vfiprintf_r+0x156>
 8008b04:	9207      	str	r2, [sp, #28]
 8008b06:	e014      	b.n	8008b32 <_vfiprintf_r+0x156>
 8008b08:	eba0 0308 	sub.w	r3, r0, r8
 8008b0c:	fa09 f303 	lsl.w	r3, r9, r3
 8008b10:	4313      	orrs	r3, r2
 8008b12:	46a2      	mov	sl, r4
 8008b14:	9304      	str	r3, [sp, #16]
 8008b16:	e7d2      	b.n	8008abe <_vfiprintf_r+0xe2>
 8008b18:	9b03      	ldr	r3, [sp, #12]
 8008b1a:	1d19      	adds	r1, r3, #4
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	9103      	str	r1, [sp, #12]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	bfbb      	ittet	lt
 8008b24:	425b      	neglt	r3, r3
 8008b26:	f042 0202 	orrlt.w	r2, r2, #2
 8008b2a:	9307      	strge	r3, [sp, #28]
 8008b2c:	9307      	strlt	r3, [sp, #28]
 8008b2e:	bfb8      	it	lt
 8008b30:	9204      	strlt	r2, [sp, #16]
 8008b32:	7823      	ldrb	r3, [r4, #0]
 8008b34:	2b2e      	cmp	r3, #46	; 0x2e
 8008b36:	d10c      	bne.n	8008b52 <_vfiprintf_r+0x176>
 8008b38:	7863      	ldrb	r3, [r4, #1]
 8008b3a:	2b2a      	cmp	r3, #42	; 0x2a
 8008b3c:	d135      	bne.n	8008baa <_vfiprintf_r+0x1ce>
 8008b3e:	9b03      	ldr	r3, [sp, #12]
 8008b40:	3402      	adds	r4, #2
 8008b42:	1d1a      	adds	r2, r3, #4
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	9203      	str	r2, [sp, #12]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	bfb8      	it	lt
 8008b4c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008b50:	9305      	str	r3, [sp, #20]
 8008b52:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008c38 <_vfiprintf_r+0x25c>
 8008b56:	2203      	movs	r2, #3
 8008b58:	4650      	mov	r0, sl
 8008b5a:	7821      	ldrb	r1, [r4, #0]
 8008b5c:	f7ff f968 	bl	8007e30 <memchr>
 8008b60:	b140      	cbz	r0, 8008b74 <_vfiprintf_r+0x198>
 8008b62:	2340      	movs	r3, #64	; 0x40
 8008b64:	eba0 000a 	sub.w	r0, r0, sl
 8008b68:	fa03 f000 	lsl.w	r0, r3, r0
 8008b6c:	9b04      	ldr	r3, [sp, #16]
 8008b6e:	3401      	adds	r4, #1
 8008b70:	4303      	orrs	r3, r0
 8008b72:	9304      	str	r3, [sp, #16]
 8008b74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b78:	2206      	movs	r2, #6
 8008b7a:	482c      	ldr	r0, [pc, #176]	; (8008c2c <_vfiprintf_r+0x250>)
 8008b7c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008b80:	f7ff f956 	bl	8007e30 <memchr>
 8008b84:	2800      	cmp	r0, #0
 8008b86:	d03f      	beq.n	8008c08 <_vfiprintf_r+0x22c>
 8008b88:	4b29      	ldr	r3, [pc, #164]	; (8008c30 <_vfiprintf_r+0x254>)
 8008b8a:	bb1b      	cbnz	r3, 8008bd4 <_vfiprintf_r+0x1f8>
 8008b8c:	9b03      	ldr	r3, [sp, #12]
 8008b8e:	3307      	adds	r3, #7
 8008b90:	f023 0307 	bic.w	r3, r3, #7
 8008b94:	3308      	adds	r3, #8
 8008b96:	9303      	str	r3, [sp, #12]
 8008b98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b9a:	443b      	add	r3, r7
 8008b9c:	9309      	str	r3, [sp, #36]	; 0x24
 8008b9e:	e767      	b.n	8008a70 <_vfiprintf_r+0x94>
 8008ba0:	460c      	mov	r4, r1
 8008ba2:	2001      	movs	r0, #1
 8008ba4:	fb0c 3202 	mla	r2, ip, r2, r3
 8008ba8:	e7a5      	b.n	8008af6 <_vfiprintf_r+0x11a>
 8008baa:	2300      	movs	r3, #0
 8008bac:	f04f 0c0a 	mov.w	ip, #10
 8008bb0:	4619      	mov	r1, r3
 8008bb2:	3401      	adds	r4, #1
 8008bb4:	9305      	str	r3, [sp, #20]
 8008bb6:	4620      	mov	r0, r4
 8008bb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008bbc:	3a30      	subs	r2, #48	; 0x30
 8008bbe:	2a09      	cmp	r2, #9
 8008bc0:	d903      	bls.n	8008bca <_vfiprintf_r+0x1ee>
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d0c5      	beq.n	8008b52 <_vfiprintf_r+0x176>
 8008bc6:	9105      	str	r1, [sp, #20]
 8008bc8:	e7c3      	b.n	8008b52 <_vfiprintf_r+0x176>
 8008bca:	4604      	mov	r4, r0
 8008bcc:	2301      	movs	r3, #1
 8008bce:	fb0c 2101 	mla	r1, ip, r1, r2
 8008bd2:	e7f0      	b.n	8008bb6 <_vfiprintf_r+0x1da>
 8008bd4:	ab03      	add	r3, sp, #12
 8008bd6:	9300      	str	r3, [sp, #0]
 8008bd8:	462a      	mov	r2, r5
 8008bda:	4630      	mov	r0, r6
 8008bdc:	4b15      	ldr	r3, [pc, #84]	; (8008c34 <_vfiprintf_r+0x258>)
 8008bde:	a904      	add	r1, sp, #16
 8008be0:	f7fd fdaa 	bl	8006738 <_printf_float>
 8008be4:	4607      	mov	r7, r0
 8008be6:	1c78      	adds	r0, r7, #1
 8008be8:	d1d6      	bne.n	8008b98 <_vfiprintf_r+0x1bc>
 8008bea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008bec:	07d9      	lsls	r1, r3, #31
 8008bee:	d405      	bmi.n	8008bfc <_vfiprintf_r+0x220>
 8008bf0:	89ab      	ldrh	r3, [r5, #12]
 8008bf2:	059a      	lsls	r2, r3, #22
 8008bf4:	d402      	bmi.n	8008bfc <_vfiprintf_r+0x220>
 8008bf6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008bf8:	f7ff f910 	bl	8007e1c <__retarget_lock_release_recursive>
 8008bfc:	89ab      	ldrh	r3, [r5, #12]
 8008bfe:	065b      	lsls	r3, r3, #25
 8008c00:	f53f af12 	bmi.w	8008a28 <_vfiprintf_r+0x4c>
 8008c04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008c06:	e711      	b.n	8008a2c <_vfiprintf_r+0x50>
 8008c08:	ab03      	add	r3, sp, #12
 8008c0a:	9300      	str	r3, [sp, #0]
 8008c0c:	462a      	mov	r2, r5
 8008c0e:	4630      	mov	r0, r6
 8008c10:	4b08      	ldr	r3, [pc, #32]	; (8008c34 <_vfiprintf_r+0x258>)
 8008c12:	a904      	add	r1, sp, #16
 8008c14:	f7fe f82c 	bl	8006c70 <_printf_i>
 8008c18:	e7e4      	b.n	8008be4 <_vfiprintf_r+0x208>
 8008c1a:	bf00      	nop
 8008c1c:	0800aadc 	.word	0x0800aadc
 8008c20:	0800aafc 	.word	0x0800aafc
 8008c24:	0800aabc 	.word	0x0800aabc
 8008c28:	0800ac7c 	.word	0x0800ac7c
 8008c2c:	0800ac86 	.word	0x0800ac86
 8008c30:	08006739 	.word	0x08006739
 8008c34:	080089b7 	.word	0x080089b7
 8008c38:	0800ac82 	.word	0x0800ac82

08008c3c <_sbrk_r>:
 8008c3c:	b538      	push	{r3, r4, r5, lr}
 8008c3e:	2300      	movs	r3, #0
 8008c40:	4d05      	ldr	r5, [pc, #20]	; (8008c58 <_sbrk_r+0x1c>)
 8008c42:	4604      	mov	r4, r0
 8008c44:	4608      	mov	r0, r1
 8008c46:	602b      	str	r3, [r5, #0]
 8008c48:	f7f9 ff9a 	bl	8002b80 <_sbrk>
 8008c4c:	1c43      	adds	r3, r0, #1
 8008c4e:	d102      	bne.n	8008c56 <_sbrk_r+0x1a>
 8008c50:	682b      	ldr	r3, [r5, #0]
 8008c52:	b103      	cbz	r3, 8008c56 <_sbrk_r+0x1a>
 8008c54:	6023      	str	r3, [r4, #0]
 8008c56:	bd38      	pop	{r3, r4, r5, pc}
 8008c58:	20000c58 	.word	0x20000c58

08008c5c <__sread>:
 8008c5c:	b510      	push	{r4, lr}
 8008c5e:	460c      	mov	r4, r1
 8008c60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c64:	f000 fae6 	bl	8009234 <_read_r>
 8008c68:	2800      	cmp	r0, #0
 8008c6a:	bfab      	itete	ge
 8008c6c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008c6e:	89a3      	ldrhlt	r3, [r4, #12]
 8008c70:	181b      	addge	r3, r3, r0
 8008c72:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008c76:	bfac      	ite	ge
 8008c78:	6563      	strge	r3, [r4, #84]	; 0x54
 8008c7a:	81a3      	strhlt	r3, [r4, #12]
 8008c7c:	bd10      	pop	{r4, pc}

08008c7e <__swrite>:
 8008c7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c82:	461f      	mov	r7, r3
 8008c84:	898b      	ldrh	r3, [r1, #12]
 8008c86:	4605      	mov	r5, r0
 8008c88:	05db      	lsls	r3, r3, #23
 8008c8a:	460c      	mov	r4, r1
 8008c8c:	4616      	mov	r6, r2
 8008c8e:	d505      	bpl.n	8008c9c <__swrite+0x1e>
 8008c90:	2302      	movs	r3, #2
 8008c92:	2200      	movs	r2, #0
 8008c94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c98:	f000 f9f8 	bl	800908c <_lseek_r>
 8008c9c:	89a3      	ldrh	r3, [r4, #12]
 8008c9e:	4632      	mov	r2, r6
 8008ca0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008ca4:	81a3      	strh	r3, [r4, #12]
 8008ca6:	4628      	mov	r0, r5
 8008ca8:	463b      	mov	r3, r7
 8008caa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008cae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008cb2:	f000 b869 	b.w	8008d88 <_write_r>

08008cb6 <__sseek>:
 8008cb6:	b510      	push	{r4, lr}
 8008cb8:	460c      	mov	r4, r1
 8008cba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cbe:	f000 f9e5 	bl	800908c <_lseek_r>
 8008cc2:	1c43      	adds	r3, r0, #1
 8008cc4:	89a3      	ldrh	r3, [r4, #12]
 8008cc6:	bf15      	itete	ne
 8008cc8:	6560      	strne	r0, [r4, #84]	; 0x54
 8008cca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008cce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008cd2:	81a3      	strheq	r3, [r4, #12]
 8008cd4:	bf18      	it	ne
 8008cd6:	81a3      	strhne	r3, [r4, #12]
 8008cd8:	bd10      	pop	{r4, pc}

08008cda <__sclose>:
 8008cda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cde:	f000 b8f1 	b.w	8008ec4 <_close_r>
	...

08008ce4 <__swbuf_r>:
 8008ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ce6:	460e      	mov	r6, r1
 8008ce8:	4614      	mov	r4, r2
 8008cea:	4605      	mov	r5, r0
 8008cec:	b118      	cbz	r0, 8008cf6 <__swbuf_r+0x12>
 8008cee:	6983      	ldr	r3, [r0, #24]
 8008cf0:	b90b      	cbnz	r3, 8008cf6 <__swbuf_r+0x12>
 8008cf2:	f7fe ffef 	bl	8007cd4 <__sinit>
 8008cf6:	4b21      	ldr	r3, [pc, #132]	; (8008d7c <__swbuf_r+0x98>)
 8008cf8:	429c      	cmp	r4, r3
 8008cfa:	d12b      	bne.n	8008d54 <__swbuf_r+0x70>
 8008cfc:	686c      	ldr	r4, [r5, #4]
 8008cfe:	69a3      	ldr	r3, [r4, #24]
 8008d00:	60a3      	str	r3, [r4, #8]
 8008d02:	89a3      	ldrh	r3, [r4, #12]
 8008d04:	071a      	lsls	r2, r3, #28
 8008d06:	d52f      	bpl.n	8008d68 <__swbuf_r+0x84>
 8008d08:	6923      	ldr	r3, [r4, #16]
 8008d0a:	b36b      	cbz	r3, 8008d68 <__swbuf_r+0x84>
 8008d0c:	6923      	ldr	r3, [r4, #16]
 8008d0e:	6820      	ldr	r0, [r4, #0]
 8008d10:	b2f6      	uxtb	r6, r6
 8008d12:	1ac0      	subs	r0, r0, r3
 8008d14:	6963      	ldr	r3, [r4, #20]
 8008d16:	4637      	mov	r7, r6
 8008d18:	4283      	cmp	r3, r0
 8008d1a:	dc04      	bgt.n	8008d26 <__swbuf_r+0x42>
 8008d1c:	4621      	mov	r1, r4
 8008d1e:	4628      	mov	r0, r5
 8008d20:	f000 f966 	bl	8008ff0 <_fflush_r>
 8008d24:	bb30      	cbnz	r0, 8008d74 <__swbuf_r+0x90>
 8008d26:	68a3      	ldr	r3, [r4, #8]
 8008d28:	3001      	adds	r0, #1
 8008d2a:	3b01      	subs	r3, #1
 8008d2c:	60a3      	str	r3, [r4, #8]
 8008d2e:	6823      	ldr	r3, [r4, #0]
 8008d30:	1c5a      	adds	r2, r3, #1
 8008d32:	6022      	str	r2, [r4, #0]
 8008d34:	701e      	strb	r6, [r3, #0]
 8008d36:	6963      	ldr	r3, [r4, #20]
 8008d38:	4283      	cmp	r3, r0
 8008d3a:	d004      	beq.n	8008d46 <__swbuf_r+0x62>
 8008d3c:	89a3      	ldrh	r3, [r4, #12]
 8008d3e:	07db      	lsls	r3, r3, #31
 8008d40:	d506      	bpl.n	8008d50 <__swbuf_r+0x6c>
 8008d42:	2e0a      	cmp	r6, #10
 8008d44:	d104      	bne.n	8008d50 <__swbuf_r+0x6c>
 8008d46:	4621      	mov	r1, r4
 8008d48:	4628      	mov	r0, r5
 8008d4a:	f000 f951 	bl	8008ff0 <_fflush_r>
 8008d4e:	b988      	cbnz	r0, 8008d74 <__swbuf_r+0x90>
 8008d50:	4638      	mov	r0, r7
 8008d52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d54:	4b0a      	ldr	r3, [pc, #40]	; (8008d80 <__swbuf_r+0x9c>)
 8008d56:	429c      	cmp	r4, r3
 8008d58:	d101      	bne.n	8008d5e <__swbuf_r+0x7a>
 8008d5a:	68ac      	ldr	r4, [r5, #8]
 8008d5c:	e7cf      	b.n	8008cfe <__swbuf_r+0x1a>
 8008d5e:	4b09      	ldr	r3, [pc, #36]	; (8008d84 <__swbuf_r+0xa0>)
 8008d60:	429c      	cmp	r4, r3
 8008d62:	bf08      	it	eq
 8008d64:	68ec      	ldreq	r4, [r5, #12]
 8008d66:	e7ca      	b.n	8008cfe <__swbuf_r+0x1a>
 8008d68:	4621      	mov	r1, r4
 8008d6a:	4628      	mov	r0, r5
 8008d6c:	f000 f81e 	bl	8008dac <__swsetup_r>
 8008d70:	2800      	cmp	r0, #0
 8008d72:	d0cb      	beq.n	8008d0c <__swbuf_r+0x28>
 8008d74:	f04f 37ff 	mov.w	r7, #4294967295
 8008d78:	e7ea      	b.n	8008d50 <__swbuf_r+0x6c>
 8008d7a:	bf00      	nop
 8008d7c:	0800aadc 	.word	0x0800aadc
 8008d80:	0800aafc 	.word	0x0800aafc
 8008d84:	0800aabc 	.word	0x0800aabc

08008d88 <_write_r>:
 8008d88:	b538      	push	{r3, r4, r5, lr}
 8008d8a:	4604      	mov	r4, r0
 8008d8c:	4608      	mov	r0, r1
 8008d8e:	4611      	mov	r1, r2
 8008d90:	2200      	movs	r2, #0
 8008d92:	4d05      	ldr	r5, [pc, #20]	; (8008da8 <_write_r+0x20>)
 8008d94:	602a      	str	r2, [r5, #0]
 8008d96:	461a      	mov	r2, r3
 8008d98:	f7f9 fea6 	bl	8002ae8 <_write>
 8008d9c:	1c43      	adds	r3, r0, #1
 8008d9e:	d102      	bne.n	8008da6 <_write_r+0x1e>
 8008da0:	682b      	ldr	r3, [r5, #0]
 8008da2:	b103      	cbz	r3, 8008da6 <_write_r+0x1e>
 8008da4:	6023      	str	r3, [r4, #0]
 8008da6:	bd38      	pop	{r3, r4, r5, pc}
 8008da8:	20000c58 	.word	0x20000c58

08008dac <__swsetup_r>:
 8008dac:	4b32      	ldr	r3, [pc, #200]	; (8008e78 <__swsetup_r+0xcc>)
 8008dae:	b570      	push	{r4, r5, r6, lr}
 8008db0:	681d      	ldr	r5, [r3, #0]
 8008db2:	4606      	mov	r6, r0
 8008db4:	460c      	mov	r4, r1
 8008db6:	b125      	cbz	r5, 8008dc2 <__swsetup_r+0x16>
 8008db8:	69ab      	ldr	r3, [r5, #24]
 8008dba:	b913      	cbnz	r3, 8008dc2 <__swsetup_r+0x16>
 8008dbc:	4628      	mov	r0, r5
 8008dbe:	f7fe ff89 	bl	8007cd4 <__sinit>
 8008dc2:	4b2e      	ldr	r3, [pc, #184]	; (8008e7c <__swsetup_r+0xd0>)
 8008dc4:	429c      	cmp	r4, r3
 8008dc6:	d10f      	bne.n	8008de8 <__swsetup_r+0x3c>
 8008dc8:	686c      	ldr	r4, [r5, #4]
 8008dca:	89a3      	ldrh	r3, [r4, #12]
 8008dcc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008dd0:	0719      	lsls	r1, r3, #28
 8008dd2:	d42c      	bmi.n	8008e2e <__swsetup_r+0x82>
 8008dd4:	06dd      	lsls	r5, r3, #27
 8008dd6:	d411      	bmi.n	8008dfc <__swsetup_r+0x50>
 8008dd8:	2309      	movs	r3, #9
 8008dda:	6033      	str	r3, [r6, #0]
 8008ddc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008de0:	f04f 30ff 	mov.w	r0, #4294967295
 8008de4:	81a3      	strh	r3, [r4, #12]
 8008de6:	e03e      	b.n	8008e66 <__swsetup_r+0xba>
 8008de8:	4b25      	ldr	r3, [pc, #148]	; (8008e80 <__swsetup_r+0xd4>)
 8008dea:	429c      	cmp	r4, r3
 8008dec:	d101      	bne.n	8008df2 <__swsetup_r+0x46>
 8008dee:	68ac      	ldr	r4, [r5, #8]
 8008df0:	e7eb      	b.n	8008dca <__swsetup_r+0x1e>
 8008df2:	4b24      	ldr	r3, [pc, #144]	; (8008e84 <__swsetup_r+0xd8>)
 8008df4:	429c      	cmp	r4, r3
 8008df6:	bf08      	it	eq
 8008df8:	68ec      	ldreq	r4, [r5, #12]
 8008dfa:	e7e6      	b.n	8008dca <__swsetup_r+0x1e>
 8008dfc:	0758      	lsls	r0, r3, #29
 8008dfe:	d512      	bpl.n	8008e26 <__swsetup_r+0x7a>
 8008e00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008e02:	b141      	cbz	r1, 8008e16 <__swsetup_r+0x6a>
 8008e04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008e08:	4299      	cmp	r1, r3
 8008e0a:	d002      	beq.n	8008e12 <__swsetup_r+0x66>
 8008e0c:	4630      	mov	r0, r6
 8008e0e:	f7ff fbbb 	bl	8008588 <_free_r>
 8008e12:	2300      	movs	r3, #0
 8008e14:	6363      	str	r3, [r4, #52]	; 0x34
 8008e16:	89a3      	ldrh	r3, [r4, #12]
 8008e18:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008e1c:	81a3      	strh	r3, [r4, #12]
 8008e1e:	2300      	movs	r3, #0
 8008e20:	6063      	str	r3, [r4, #4]
 8008e22:	6923      	ldr	r3, [r4, #16]
 8008e24:	6023      	str	r3, [r4, #0]
 8008e26:	89a3      	ldrh	r3, [r4, #12]
 8008e28:	f043 0308 	orr.w	r3, r3, #8
 8008e2c:	81a3      	strh	r3, [r4, #12]
 8008e2e:	6923      	ldr	r3, [r4, #16]
 8008e30:	b94b      	cbnz	r3, 8008e46 <__swsetup_r+0x9a>
 8008e32:	89a3      	ldrh	r3, [r4, #12]
 8008e34:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008e38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e3c:	d003      	beq.n	8008e46 <__swsetup_r+0x9a>
 8008e3e:	4621      	mov	r1, r4
 8008e40:	4630      	mov	r0, r6
 8008e42:	f000 f959 	bl	80090f8 <__smakebuf_r>
 8008e46:	89a0      	ldrh	r0, [r4, #12]
 8008e48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008e4c:	f010 0301 	ands.w	r3, r0, #1
 8008e50:	d00a      	beq.n	8008e68 <__swsetup_r+0xbc>
 8008e52:	2300      	movs	r3, #0
 8008e54:	60a3      	str	r3, [r4, #8]
 8008e56:	6963      	ldr	r3, [r4, #20]
 8008e58:	425b      	negs	r3, r3
 8008e5a:	61a3      	str	r3, [r4, #24]
 8008e5c:	6923      	ldr	r3, [r4, #16]
 8008e5e:	b943      	cbnz	r3, 8008e72 <__swsetup_r+0xc6>
 8008e60:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008e64:	d1ba      	bne.n	8008ddc <__swsetup_r+0x30>
 8008e66:	bd70      	pop	{r4, r5, r6, pc}
 8008e68:	0781      	lsls	r1, r0, #30
 8008e6a:	bf58      	it	pl
 8008e6c:	6963      	ldrpl	r3, [r4, #20]
 8008e6e:	60a3      	str	r3, [r4, #8]
 8008e70:	e7f4      	b.n	8008e5c <__swsetup_r+0xb0>
 8008e72:	2000      	movs	r0, #0
 8008e74:	e7f7      	b.n	8008e66 <__swsetup_r+0xba>
 8008e76:	bf00      	nop
 8008e78:	20000080 	.word	0x20000080
 8008e7c:	0800aadc 	.word	0x0800aadc
 8008e80:	0800aafc 	.word	0x0800aafc
 8008e84:	0800aabc 	.word	0x0800aabc

08008e88 <__assert_func>:
 8008e88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008e8a:	4614      	mov	r4, r2
 8008e8c:	461a      	mov	r2, r3
 8008e8e:	4b09      	ldr	r3, [pc, #36]	; (8008eb4 <__assert_func+0x2c>)
 8008e90:	4605      	mov	r5, r0
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	68d8      	ldr	r0, [r3, #12]
 8008e96:	b14c      	cbz	r4, 8008eac <__assert_func+0x24>
 8008e98:	4b07      	ldr	r3, [pc, #28]	; (8008eb8 <__assert_func+0x30>)
 8008e9a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008e9e:	9100      	str	r1, [sp, #0]
 8008ea0:	462b      	mov	r3, r5
 8008ea2:	4906      	ldr	r1, [pc, #24]	; (8008ebc <__assert_func+0x34>)
 8008ea4:	f000 f8e0 	bl	8009068 <fiprintf>
 8008ea8:	f000 f9e3 	bl	8009272 <abort>
 8008eac:	4b04      	ldr	r3, [pc, #16]	; (8008ec0 <__assert_func+0x38>)
 8008eae:	461c      	mov	r4, r3
 8008eb0:	e7f3      	b.n	8008e9a <__assert_func+0x12>
 8008eb2:	bf00      	nop
 8008eb4:	20000080 	.word	0x20000080
 8008eb8:	0800ac8d 	.word	0x0800ac8d
 8008ebc:	0800ac9a 	.word	0x0800ac9a
 8008ec0:	0800acc8 	.word	0x0800acc8

08008ec4 <_close_r>:
 8008ec4:	b538      	push	{r3, r4, r5, lr}
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	4d05      	ldr	r5, [pc, #20]	; (8008ee0 <_close_r+0x1c>)
 8008eca:	4604      	mov	r4, r0
 8008ecc:	4608      	mov	r0, r1
 8008ece:	602b      	str	r3, [r5, #0]
 8008ed0:	f7f9 fe26 	bl	8002b20 <_close>
 8008ed4:	1c43      	adds	r3, r0, #1
 8008ed6:	d102      	bne.n	8008ede <_close_r+0x1a>
 8008ed8:	682b      	ldr	r3, [r5, #0]
 8008eda:	b103      	cbz	r3, 8008ede <_close_r+0x1a>
 8008edc:	6023      	str	r3, [r4, #0]
 8008ede:	bd38      	pop	{r3, r4, r5, pc}
 8008ee0:	20000c58 	.word	0x20000c58

08008ee4 <__sflush_r>:
 8008ee4:	898a      	ldrh	r2, [r1, #12]
 8008ee6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008eea:	4605      	mov	r5, r0
 8008eec:	0710      	lsls	r0, r2, #28
 8008eee:	460c      	mov	r4, r1
 8008ef0:	d458      	bmi.n	8008fa4 <__sflush_r+0xc0>
 8008ef2:	684b      	ldr	r3, [r1, #4]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	dc05      	bgt.n	8008f04 <__sflush_r+0x20>
 8008ef8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	dc02      	bgt.n	8008f04 <__sflush_r+0x20>
 8008efe:	2000      	movs	r0, #0
 8008f00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f06:	2e00      	cmp	r6, #0
 8008f08:	d0f9      	beq.n	8008efe <__sflush_r+0x1a>
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008f10:	682f      	ldr	r7, [r5, #0]
 8008f12:	602b      	str	r3, [r5, #0]
 8008f14:	d032      	beq.n	8008f7c <__sflush_r+0x98>
 8008f16:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008f18:	89a3      	ldrh	r3, [r4, #12]
 8008f1a:	075a      	lsls	r2, r3, #29
 8008f1c:	d505      	bpl.n	8008f2a <__sflush_r+0x46>
 8008f1e:	6863      	ldr	r3, [r4, #4]
 8008f20:	1ac0      	subs	r0, r0, r3
 8008f22:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008f24:	b10b      	cbz	r3, 8008f2a <__sflush_r+0x46>
 8008f26:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008f28:	1ac0      	subs	r0, r0, r3
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	4602      	mov	r2, r0
 8008f2e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f30:	4628      	mov	r0, r5
 8008f32:	6a21      	ldr	r1, [r4, #32]
 8008f34:	47b0      	blx	r6
 8008f36:	1c43      	adds	r3, r0, #1
 8008f38:	89a3      	ldrh	r3, [r4, #12]
 8008f3a:	d106      	bne.n	8008f4a <__sflush_r+0x66>
 8008f3c:	6829      	ldr	r1, [r5, #0]
 8008f3e:	291d      	cmp	r1, #29
 8008f40:	d82c      	bhi.n	8008f9c <__sflush_r+0xb8>
 8008f42:	4a2a      	ldr	r2, [pc, #168]	; (8008fec <__sflush_r+0x108>)
 8008f44:	40ca      	lsrs	r2, r1
 8008f46:	07d6      	lsls	r6, r2, #31
 8008f48:	d528      	bpl.n	8008f9c <__sflush_r+0xb8>
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	6062      	str	r2, [r4, #4]
 8008f4e:	6922      	ldr	r2, [r4, #16]
 8008f50:	04d9      	lsls	r1, r3, #19
 8008f52:	6022      	str	r2, [r4, #0]
 8008f54:	d504      	bpl.n	8008f60 <__sflush_r+0x7c>
 8008f56:	1c42      	adds	r2, r0, #1
 8008f58:	d101      	bne.n	8008f5e <__sflush_r+0x7a>
 8008f5a:	682b      	ldr	r3, [r5, #0]
 8008f5c:	b903      	cbnz	r3, 8008f60 <__sflush_r+0x7c>
 8008f5e:	6560      	str	r0, [r4, #84]	; 0x54
 8008f60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008f62:	602f      	str	r7, [r5, #0]
 8008f64:	2900      	cmp	r1, #0
 8008f66:	d0ca      	beq.n	8008efe <__sflush_r+0x1a>
 8008f68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f6c:	4299      	cmp	r1, r3
 8008f6e:	d002      	beq.n	8008f76 <__sflush_r+0x92>
 8008f70:	4628      	mov	r0, r5
 8008f72:	f7ff fb09 	bl	8008588 <_free_r>
 8008f76:	2000      	movs	r0, #0
 8008f78:	6360      	str	r0, [r4, #52]	; 0x34
 8008f7a:	e7c1      	b.n	8008f00 <__sflush_r+0x1c>
 8008f7c:	6a21      	ldr	r1, [r4, #32]
 8008f7e:	2301      	movs	r3, #1
 8008f80:	4628      	mov	r0, r5
 8008f82:	47b0      	blx	r6
 8008f84:	1c41      	adds	r1, r0, #1
 8008f86:	d1c7      	bne.n	8008f18 <__sflush_r+0x34>
 8008f88:	682b      	ldr	r3, [r5, #0]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d0c4      	beq.n	8008f18 <__sflush_r+0x34>
 8008f8e:	2b1d      	cmp	r3, #29
 8008f90:	d001      	beq.n	8008f96 <__sflush_r+0xb2>
 8008f92:	2b16      	cmp	r3, #22
 8008f94:	d101      	bne.n	8008f9a <__sflush_r+0xb6>
 8008f96:	602f      	str	r7, [r5, #0]
 8008f98:	e7b1      	b.n	8008efe <__sflush_r+0x1a>
 8008f9a:	89a3      	ldrh	r3, [r4, #12]
 8008f9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008fa0:	81a3      	strh	r3, [r4, #12]
 8008fa2:	e7ad      	b.n	8008f00 <__sflush_r+0x1c>
 8008fa4:	690f      	ldr	r7, [r1, #16]
 8008fa6:	2f00      	cmp	r7, #0
 8008fa8:	d0a9      	beq.n	8008efe <__sflush_r+0x1a>
 8008faa:	0793      	lsls	r3, r2, #30
 8008fac:	bf18      	it	ne
 8008fae:	2300      	movne	r3, #0
 8008fb0:	680e      	ldr	r6, [r1, #0]
 8008fb2:	bf08      	it	eq
 8008fb4:	694b      	ldreq	r3, [r1, #20]
 8008fb6:	eba6 0807 	sub.w	r8, r6, r7
 8008fba:	600f      	str	r7, [r1, #0]
 8008fbc:	608b      	str	r3, [r1, #8]
 8008fbe:	f1b8 0f00 	cmp.w	r8, #0
 8008fc2:	dd9c      	ble.n	8008efe <__sflush_r+0x1a>
 8008fc4:	4643      	mov	r3, r8
 8008fc6:	463a      	mov	r2, r7
 8008fc8:	4628      	mov	r0, r5
 8008fca:	6a21      	ldr	r1, [r4, #32]
 8008fcc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008fce:	47b0      	blx	r6
 8008fd0:	2800      	cmp	r0, #0
 8008fd2:	dc06      	bgt.n	8008fe2 <__sflush_r+0xfe>
 8008fd4:	89a3      	ldrh	r3, [r4, #12]
 8008fd6:	f04f 30ff 	mov.w	r0, #4294967295
 8008fda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008fde:	81a3      	strh	r3, [r4, #12]
 8008fe0:	e78e      	b.n	8008f00 <__sflush_r+0x1c>
 8008fe2:	4407      	add	r7, r0
 8008fe4:	eba8 0800 	sub.w	r8, r8, r0
 8008fe8:	e7e9      	b.n	8008fbe <__sflush_r+0xda>
 8008fea:	bf00      	nop
 8008fec:	20400001 	.word	0x20400001

08008ff0 <_fflush_r>:
 8008ff0:	b538      	push	{r3, r4, r5, lr}
 8008ff2:	690b      	ldr	r3, [r1, #16]
 8008ff4:	4605      	mov	r5, r0
 8008ff6:	460c      	mov	r4, r1
 8008ff8:	b913      	cbnz	r3, 8009000 <_fflush_r+0x10>
 8008ffa:	2500      	movs	r5, #0
 8008ffc:	4628      	mov	r0, r5
 8008ffe:	bd38      	pop	{r3, r4, r5, pc}
 8009000:	b118      	cbz	r0, 800900a <_fflush_r+0x1a>
 8009002:	6983      	ldr	r3, [r0, #24]
 8009004:	b90b      	cbnz	r3, 800900a <_fflush_r+0x1a>
 8009006:	f7fe fe65 	bl	8007cd4 <__sinit>
 800900a:	4b14      	ldr	r3, [pc, #80]	; (800905c <_fflush_r+0x6c>)
 800900c:	429c      	cmp	r4, r3
 800900e:	d11b      	bne.n	8009048 <_fflush_r+0x58>
 8009010:	686c      	ldr	r4, [r5, #4]
 8009012:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d0ef      	beq.n	8008ffa <_fflush_r+0xa>
 800901a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800901c:	07d0      	lsls	r0, r2, #31
 800901e:	d404      	bmi.n	800902a <_fflush_r+0x3a>
 8009020:	0599      	lsls	r1, r3, #22
 8009022:	d402      	bmi.n	800902a <_fflush_r+0x3a>
 8009024:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009026:	f7fe fef8 	bl	8007e1a <__retarget_lock_acquire_recursive>
 800902a:	4628      	mov	r0, r5
 800902c:	4621      	mov	r1, r4
 800902e:	f7ff ff59 	bl	8008ee4 <__sflush_r>
 8009032:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009034:	4605      	mov	r5, r0
 8009036:	07da      	lsls	r2, r3, #31
 8009038:	d4e0      	bmi.n	8008ffc <_fflush_r+0xc>
 800903a:	89a3      	ldrh	r3, [r4, #12]
 800903c:	059b      	lsls	r3, r3, #22
 800903e:	d4dd      	bmi.n	8008ffc <_fflush_r+0xc>
 8009040:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009042:	f7fe feeb 	bl	8007e1c <__retarget_lock_release_recursive>
 8009046:	e7d9      	b.n	8008ffc <_fflush_r+0xc>
 8009048:	4b05      	ldr	r3, [pc, #20]	; (8009060 <_fflush_r+0x70>)
 800904a:	429c      	cmp	r4, r3
 800904c:	d101      	bne.n	8009052 <_fflush_r+0x62>
 800904e:	68ac      	ldr	r4, [r5, #8]
 8009050:	e7df      	b.n	8009012 <_fflush_r+0x22>
 8009052:	4b04      	ldr	r3, [pc, #16]	; (8009064 <_fflush_r+0x74>)
 8009054:	429c      	cmp	r4, r3
 8009056:	bf08      	it	eq
 8009058:	68ec      	ldreq	r4, [r5, #12]
 800905a:	e7da      	b.n	8009012 <_fflush_r+0x22>
 800905c:	0800aadc 	.word	0x0800aadc
 8009060:	0800aafc 	.word	0x0800aafc
 8009064:	0800aabc 	.word	0x0800aabc

08009068 <fiprintf>:
 8009068:	b40e      	push	{r1, r2, r3}
 800906a:	b503      	push	{r0, r1, lr}
 800906c:	4601      	mov	r1, r0
 800906e:	ab03      	add	r3, sp, #12
 8009070:	4805      	ldr	r0, [pc, #20]	; (8009088 <fiprintf+0x20>)
 8009072:	f853 2b04 	ldr.w	r2, [r3], #4
 8009076:	6800      	ldr	r0, [r0, #0]
 8009078:	9301      	str	r3, [sp, #4]
 800907a:	f7ff fcaf 	bl	80089dc <_vfiprintf_r>
 800907e:	b002      	add	sp, #8
 8009080:	f85d eb04 	ldr.w	lr, [sp], #4
 8009084:	b003      	add	sp, #12
 8009086:	4770      	bx	lr
 8009088:	20000080 	.word	0x20000080

0800908c <_lseek_r>:
 800908c:	b538      	push	{r3, r4, r5, lr}
 800908e:	4604      	mov	r4, r0
 8009090:	4608      	mov	r0, r1
 8009092:	4611      	mov	r1, r2
 8009094:	2200      	movs	r2, #0
 8009096:	4d05      	ldr	r5, [pc, #20]	; (80090ac <_lseek_r+0x20>)
 8009098:	602a      	str	r2, [r5, #0]
 800909a:	461a      	mov	r2, r3
 800909c:	f7f9 fd64 	bl	8002b68 <_lseek>
 80090a0:	1c43      	adds	r3, r0, #1
 80090a2:	d102      	bne.n	80090aa <_lseek_r+0x1e>
 80090a4:	682b      	ldr	r3, [r5, #0]
 80090a6:	b103      	cbz	r3, 80090aa <_lseek_r+0x1e>
 80090a8:	6023      	str	r3, [r4, #0]
 80090aa:	bd38      	pop	{r3, r4, r5, pc}
 80090ac:	20000c58 	.word	0x20000c58

080090b0 <__swhatbuf_r>:
 80090b0:	b570      	push	{r4, r5, r6, lr}
 80090b2:	460e      	mov	r6, r1
 80090b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090b8:	4614      	mov	r4, r2
 80090ba:	2900      	cmp	r1, #0
 80090bc:	461d      	mov	r5, r3
 80090be:	b096      	sub	sp, #88	; 0x58
 80090c0:	da07      	bge.n	80090d2 <__swhatbuf_r+0x22>
 80090c2:	2300      	movs	r3, #0
 80090c4:	602b      	str	r3, [r5, #0]
 80090c6:	89b3      	ldrh	r3, [r6, #12]
 80090c8:	061a      	lsls	r2, r3, #24
 80090ca:	d410      	bmi.n	80090ee <__swhatbuf_r+0x3e>
 80090cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80090d0:	e00e      	b.n	80090f0 <__swhatbuf_r+0x40>
 80090d2:	466a      	mov	r2, sp
 80090d4:	f000 f8d4 	bl	8009280 <_fstat_r>
 80090d8:	2800      	cmp	r0, #0
 80090da:	dbf2      	blt.n	80090c2 <__swhatbuf_r+0x12>
 80090dc:	9a01      	ldr	r2, [sp, #4]
 80090de:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80090e2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80090e6:	425a      	negs	r2, r3
 80090e8:	415a      	adcs	r2, r3
 80090ea:	602a      	str	r2, [r5, #0]
 80090ec:	e7ee      	b.n	80090cc <__swhatbuf_r+0x1c>
 80090ee:	2340      	movs	r3, #64	; 0x40
 80090f0:	2000      	movs	r0, #0
 80090f2:	6023      	str	r3, [r4, #0]
 80090f4:	b016      	add	sp, #88	; 0x58
 80090f6:	bd70      	pop	{r4, r5, r6, pc}

080090f8 <__smakebuf_r>:
 80090f8:	898b      	ldrh	r3, [r1, #12]
 80090fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80090fc:	079d      	lsls	r5, r3, #30
 80090fe:	4606      	mov	r6, r0
 8009100:	460c      	mov	r4, r1
 8009102:	d507      	bpl.n	8009114 <__smakebuf_r+0x1c>
 8009104:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009108:	6023      	str	r3, [r4, #0]
 800910a:	6123      	str	r3, [r4, #16]
 800910c:	2301      	movs	r3, #1
 800910e:	6163      	str	r3, [r4, #20]
 8009110:	b002      	add	sp, #8
 8009112:	bd70      	pop	{r4, r5, r6, pc}
 8009114:	466a      	mov	r2, sp
 8009116:	ab01      	add	r3, sp, #4
 8009118:	f7ff ffca 	bl	80090b0 <__swhatbuf_r>
 800911c:	9900      	ldr	r1, [sp, #0]
 800911e:	4605      	mov	r5, r0
 8009120:	4630      	mov	r0, r6
 8009122:	f7ff fa7d 	bl	8008620 <_malloc_r>
 8009126:	b948      	cbnz	r0, 800913c <__smakebuf_r+0x44>
 8009128:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800912c:	059a      	lsls	r2, r3, #22
 800912e:	d4ef      	bmi.n	8009110 <__smakebuf_r+0x18>
 8009130:	f023 0303 	bic.w	r3, r3, #3
 8009134:	f043 0302 	orr.w	r3, r3, #2
 8009138:	81a3      	strh	r3, [r4, #12]
 800913a:	e7e3      	b.n	8009104 <__smakebuf_r+0xc>
 800913c:	4b0d      	ldr	r3, [pc, #52]	; (8009174 <__smakebuf_r+0x7c>)
 800913e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009140:	89a3      	ldrh	r3, [r4, #12]
 8009142:	6020      	str	r0, [r4, #0]
 8009144:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009148:	81a3      	strh	r3, [r4, #12]
 800914a:	9b00      	ldr	r3, [sp, #0]
 800914c:	6120      	str	r0, [r4, #16]
 800914e:	6163      	str	r3, [r4, #20]
 8009150:	9b01      	ldr	r3, [sp, #4]
 8009152:	b15b      	cbz	r3, 800916c <__smakebuf_r+0x74>
 8009154:	4630      	mov	r0, r6
 8009156:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800915a:	f000 f8a3 	bl	80092a4 <_isatty_r>
 800915e:	b128      	cbz	r0, 800916c <__smakebuf_r+0x74>
 8009160:	89a3      	ldrh	r3, [r4, #12]
 8009162:	f023 0303 	bic.w	r3, r3, #3
 8009166:	f043 0301 	orr.w	r3, r3, #1
 800916a:	81a3      	strh	r3, [r4, #12]
 800916c:	89a0      	ldrh	r0, [r4, #12]
 800916e:	4305      	orrs	r5, r0
 8009170:	81a5      	strh	r5, [r4, #12]
 8009172:	e7cd      	b.n	8009110 <__smakebuf_r+0x18>
 8009174:	08007c6d 	.word	0x08007c6d

08009178 <__ascii_mbtowc>:
 8009178:	b082      	sub	sp, #8
 800917a:	b901      	cbnz	r1, 800917e <__ascii_mbtowc+0x6>
 800917c:	a901      	add	r1, sp, #4
 800917e:	b142      	cbz	r2, 8009192 <__ascii_mbtowc+0x1a>
 8009180:	b14b      	cbz	r3, 8009196 <__ascii_mbtowc+0x1e>
 8009182:	7813      	ldrb	r3, [r2, #0]
 8009184:	600b      	str	r3, [r1, #0]
 8009186:	7812      	ldrb	r2, [r2, #0]
 8009188:	1e10      	subs	r0, r2, #0
 800918a:	bf18      	it	ne
 800918c:	2001      	movne	r0, #1
 800918e:	b002      	add	sp, #8
 8009190:	4770      	bx	lr
 8009192:	4610      	mov	r0, r2
 8009194:	e7fb      	b.n	800918e <__ascii_mbtowc+0x16>
 8009196:	f06f 0001 	mvn.w	r0, #1
 800919a:	e7f8      	b.n	800918e <__ascii_mbtowc+0x16>

0800919c <memmove>:
 800919c:	4288      	cmp	r0, r1
 800919e:	b510      	push	{r4, lr}
 80091a0:	eb01 0402 	add.w	r4, r1, r2
 80091a4:	d902      	bls.n	80091ac <memmove+0x10>
 80091a6:	4284      	cmp	r4, r0
 80091a8:	4623      	mov	r3, r4
 80091aa:	d807      	bhi.n	80091bc <memmove+0x20>
 80091ac:	1e43      	subs	r3, r0, #1
 80091ae:	42a1      	cmp	r1, r4
 80091b0:	d008      	beq.n	80091c4 <memmove+0x28>
 80091b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80091b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80091ba:	e7f8      	b.n	80091ae <memmove+0x12>
 80091bc:	4601      	mov	r1, r0
 80091be:	4402      	add	r2, r0
 80091c0:	428a      	cmp	r2, r1
 80091c2:	d100      	bne.n	80091c6 <memmove+0x2a>
 80091c4:	bd10      	pop	{r4, pc}
 80091c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80091ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80091ce:	e7f7      	b.n	80091c0 <memmove+0x24>

080091d0 <__malloc_lock>:
 80091d0:	4801      	ldr	r0, [pc, #4]	; (80091d8 <__malloc_lock+0x8>)
 80091d2:	f7fe be22 	b.w	8007e1a <__retarget_lock_acquire_recursive>
 80091d6:	bf00      	nop
 80091d8:	20000c50 	.word	0x20000c50

080091dc <__malloc_unlock>:
 80091dc:	4801      	ldr	r0, [pc, #4]	; (80091e4 <__malloc_unlock+0x8>)
 80091de:	f7fe be1d 	b.w	8007e1c <__retarget_lock_release_recursive>
 80091e2:	bf00      	nop
 80091e4:	20000c50 	.word	0x20000c50

080091e8 <_realloc_r>:
 80091e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091ea:	4607      	mov	r7, r0
 80091ec:	4614      	mov	r4, r2
 80091ee:	460e      	mov	r6, r1
 80091f0:	b921      	cbnz	r1, 80091fc <_realloc_r+0x14>
 80091f2:	4611      	mov	r1, r2
 80091f4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80091f8:	f7ff ba12 	b.w	8008620 <_malloc_r>
 80091fc:	b922      	cbnz	r2, 8009208 <_realloc_r+0x20>
 80091fe:	f7ff f9c3 	bl	8008588 <_free_r>
 8009202:	4625      	mov	r5, r4
 8009204:	4628      	mov	r0, r5
 8009206:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009208:	f000 f85c 	bl	80092c4 <_malloc_usable_size_r>
 800920c:	42a0      	cmp	r0, r4
 800920e:	d20f      	bcs.n	8009230 <_realloc_r+0x48>
 8009210:	4621      	mov	r1, r4
 8009212:	4638      	mov	r0, r7
 8009214:	f7ff fa04 	bl	8008620 <_malloc_r>
 8009218:	4605      	mov	r5, r0
 800921a:	2800      	cmp	r0, #0
 800921c:	d0f2      	beq.n	8009204 <_realloc_r+0x1c>
 800921e:	4631      	mov	r1, r6
 8009220:	4622      	mov	r2, r4
 8009222:	f7fe fe13 	bl	8007e4c <memcpy>
 8009226:	4631      	mov	r1, r6
 8009228:	4638      	mov	r0, r7
 800922a:	f7ff f9ad 	bl	8008588 <_free_r>
 800922e:	e7e9      	b.n	8009204 <_realloc_r+0x1c>
 8009230:	4635      	mov	r5, r6
 8009232:	e7e7      	b.n	8009204 <_realloc_r+0x1c>

08009234 <_read_r>:
 8009234:	b538      	push	{r3, r4, r5, lr}
 8009236:	4604      	mov	r4, r0
 8009238:	4608      	mov	r0, r1
 800923a:	4611      	mov	r1, r2
 800923c:	2200      	movs	r2, #0
 800923e:	4d05      	ldr	r5, [pc, #20]	; (8009254 <_read_r+0x20>)
 8009240:	602a      	str	r2, [r5, #0]
 8009242:	461a      	mov	r2, r3
 8009244:	f7f9 fc33 	bl	8002aae <_read>
 8009248:	1c43      	adds	r3, r0, #1
 800924a:	d102      	bne.n	8009252 <_read_r+0x1e>
 800924c:	682b      	ldr	r3, [r5, #0]
 800924e:	b103      	cbz	r3, 8009252 <_read_r+0x1e>
 8009250:	6023      	str	r3, [r4, #0]
 8009252:	bd38      	pop	{r3, r4, r5, pc}
 8009254:	20000c58 	.word	0x20000c58

08009258 <__ascii_wctomb>:
 8009258:	4603      	mov	r3, r0
 800925a:	4608      	mov	r0, r1
 800925c:	b141      	cbz	r1, 8009270 <__ascii_wctomb+0x18>
 800925e:	2aff      	cmp	r2, #255	; 0xff
 8009260:	d904      	bls.n	800926c <__ascii_wctomb+0x14>
 8009262:	228a      	movs	r2, #138	; 0x8a
 8009264:	f04f 30ff 	mov.w	r0, #4294967295
 8009268:	601a      	str	r2, [r3, #0]
 800926a:	4770      	bx	lr
 800926c:	2001      	movs	r0, #1
 800926e:	700a      	strb	r2, [r1, #0]
 8009270:	4770      	bx	lr

08009272 <abort>:
 8009272:	2006      	movs	r0, #6
 8009274:	b508      	push	{r3, lr}
 8009276:	f000 f855 	bl	8009324 <raise>
 800927a:	2001      	movs	r0, #1
 800927c:	f7f9 fc0d 	bl	8002a9a <_exit>

08009280 <_fstat_r>:
 8009280:	b538      	push	{r3, r4, r5, lr}
 8009282:	2300      	movs	r3, #0
 8009284:	4d06      	ldr	r5, [pc, #24]	; (80092a0 <_fstat_r+0x20>)
 8009286:	4604      	mov	r4, r0
 8009288:	4608      	mov	r0, r1
 800928a:	4611      	mov	r1, r2
 800928c:	602b      	str	r3, [r5, #0]
 800928e:	f7f9 fc52 	bl	8002b36 <_fstat>
 8009292:	1c43      	adds	r3, r0, #1
 8009294:	d102      	bne.n	800929c <_fstat_r+0x1c>
 8009296:	682b      	ldr	r3, [r5, #0]
 8009298:	b103      	cbz	r3, 800929c <_fstat_r+0x1c>
 800929a:	6023      	str	r3, [r4, #0]
 800929c:	bd38      	pop	{r3, r4, r5, pc}
 800929e:	bf00      	nop
 80092a0:	20000c58 	.word	0x20000c58

080092a4 <_isatty_r>:
 80092a4:	b538      	push	{r3, r4, r5, lr}
 80092a6:	2300      	movs	r3, #0
 80092a8:	4d05      	ldr	r5, [pc, #20]	; (80092c0 <_isatty_r+0x1c>)
 80092aa:	4604      	mov	r4, r0
 80092ac:	4608      	mov	r0, r1
 80092ae:	602b      	str	r3, [r5, #0]
 80092b0:	f7f9 fc50 	bl	8002b54 <_isatty>
 80092b4:	1c43      	adds	r3, r0, #1
 80092b6:	d102      	bne.n	80092be <_isatty_r+0x1a>
 80092b8:	682b      	ldr	r3, [r5, #0]
 80092ba:	b103      	cbz	r3, 80092be <_isatty_r+0x1a>
 80092bc:	6023      	str	r3, [r4, #0]
 80092be:	bd38      	pop	{r3, r4, r5, pc}
 80092c0:	20000c58 	.word	0x20000c58

080092c4 <_malloc_usable_size_r>:
 80092c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80092c8:	1f18      	subs	r0, r3, #4
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	bfbc      	itt	lt
 80092ce:	580b      	ldrlt	r3, [r1, r0]
 80092d0:	18c0      	addlt	r0, r0, r3
 80092d2:	4770      	bx	lr

080092d4 <_raise_r>:
 80092d4:	291f      	cmp	r1, #31
 80092d6:	b538      	push	{r3, r4, r5, lr}
 80092d8:	4604      	mov	r4, r0
 80092da:	460d      	mov	r5, r1
 80092dc:	d904      	bls.n	80092e8 <_raise_r+0x14>
 80092de:	2316      	movs	r3, #22
 80092e0:	6003      	str	r3, [r0, #0]
 80092e2:	f04f 30ff 	mov.w	r0, #4294967295
 80092e6:	bd38      	pop	{r3, r4, r5, pc}
 80092e8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80092ea:	b112      	cbz	r2, 80092f2 <_raise_r+0x1e>
 80092ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80092f0:	b94b      	cbnz	r3, 8009306 <_raise_r+0x32>
 80092f2:	4620      	mov	r0, r4
 80092f4:	f000 f830 	bl	8009358 <_getpid_r>
 80092f8:	462a      	mov	r2, r5
 80092fa:	4601      	mov	r1, r0
 80092fc:	4620      	mov	r0, r4
 80092fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009302:	f000 b817 	b.w	8009334 <_kill_r>
 8009306:	2b01      	cmp	r3, #1
 8009308:	d00a      	beq.n	8009320 <_raise_r+0x4c>
 800930a:	1c59      	adds	r1, r3, #1
 800930c:	d103      	bne.n	8009316 <_raise_r+0x42>
 800930e:	2316      	movs	r3, #22
 8009310:	6003      	str	r3, [r0, #0]
 8009312:	2001      	movs	r0, #1
 8009314:	e7e7      	b.n	80092e6 <_raise_r+0x12>
 8009316:	2400      	movs	r4, #0
 8009318:	4628      	mov	r0, r5
 800931a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800931e:	4798      	blx	r3
 8009320:	2000      	movs	r0, #0
 8009322:	e7e0      	b.n	80092e6 <_raise_r+0x12>

08009324 <raise>:
 8009324:	4b02      	ldr	r3, [pc, #8]	; (8009330 <raise+0xc>)
 8009326:	4601      	mov	r1, r0
 8009328:	6818      	ldr	r0, [r3, #0]
 800932a:	f7ff bfd3 	b.w	80092d4 <_raise_r>
 800932e:	bf00      	nop
 8009330:	20000080 	.word	0x20000080

08009334 <_kill_r>:
 8009334:	b538      	push	{r3, r4, r5, lr}
 8009336:	2300      	movs	r3, #0
 8009338:	4d06      	ldr	r5, [pc, #24]	; (8009354 <_kill_r+0x20>)
 800933a:	4604      	mov	r4, r0
 800933c:	4608      	mov	r0, r1
 800933e:	4611      	mov	r1, r2
 8009340:	602b      	str	r3, [r5, #0]
 8009342:	f7f9 fb9a 	bl	8002a7a <_kill>
 8009346:	1c43      	adds	r3, r0, #1
 8009348:	d102      	bne.n	8009350 <_kill_r+0x1c>
 800934a:	682b      	ldr	r3, [r5, #0]
 800934c:	b103      	cbz	r3, 8009350 <_kill_r+0x1c>
 800934e:	6023      	str	r3, [r4, #0]
 8009350:	bd38      	pop	{r3, r4, r5, pc}
 8009352:	bf00      	nop
 8009354:	20000c58 	.word	0x20000c58

08009358 <_getpid_r>:
 8009358:	f7f9 bb88 	b.w	8002a6c <_getpid>

0800935c <pow>:
 800935c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009360:	461f      	mov	r7, r3
 8009362:	4680      	mov	r8, r0
 8009364:	4689      	mov	r9, r1
 8009366:	4616      	mov	r6, r2
 8009368:	f000 f8a6 	bl	80094b8 <__ieee754_pow>
 800936c:	4b4d      	ldr	r3, [pc, #308]	; (80094a4 <pow+0x148>)
 800936e:	4604      	mov	r4, r0
 8009370:	f993 3000 	ldrsb.w	r3, [r3]
 8009374:	460d      	mov	r5, r1
 8009376:	3301      	adds	r3, #1
 8009378:	d015      	beq.n	80093a6 <pow+0x4a>
 800937a:	4632      	mov	r2, r6
 800937c:	463b      	mov	r3, r7
 800937e:	4630      	mov	r0, r6
 8009380:	4639      	mov	r1, r7
 8009382:	f7f7 fb43 	bl	8000a0c <__aeabi_dcmpun>
 8009386:	b970      	cbnz	r0, 80093a6 <pow+0x4a>
 8009388:	4642      	mov	r2, r8
 800938a:	464b      	mov	r3, r9
 800938c:	4640      	mov	r0, r8
 800938e:	4649      	mov	r1, r9
 8009390:	f7f7 fb3c 	bl	8000a0c <__aeabi_dcmpun>
 8009394:	2200      	movs	r2, #0
 8009396:	2300      	movs	r3, #0
 8009398:	b148      	cbz	r0, 80093ae <pow+0x52>
 800939a:	4630      	mov	r0, r6
 800939c:	4639      	mov	r1, r7
 800939e:	f7f7 fb03 	bl	80009a8 <__aeabi_dcmpeq>
 80093a2:	2800      	cmp	r0, #0
 80093a4:	d17b      	bne.n	800949e <pow+0x142>
 80093a6:	4620      	mov	r0, r4
 80093a8:	4629      	mov	r1, r5
 80093aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80093ae:	4640      	mov	r0, r8
 80093b0:	4649      	mov	r1, r9
 80093b2:	f7f7 faf9 	bl	80009a8 <__aeabi_dcmpeq>
 80093b6:	b1e0      	cbz	r0, 80093f2 <pow+0x96>
 80093b8:	2200      	movs	r2, #0
 80093ba:	2300      	movs	r3, #0
 80093bc:	4630      	mov	r0, r6
 80093be:	4639      	mov	r1, r7
 80093c0:	f7f7 faf2 	bl	80009a8 <__aeabi_dcmpeq>
 80093c4:	2800      	cmp	r0, #0
 80093c6:	d16a      	bne.n	800949e <pow+0x142>
 80093c8:	4630      	mov	r0, r6
 80093ca:	4639      	mov	r1, r7
 80093cc:	f000 fe39 	bl	800a042 <finite>
 80093d0:	2800      	cmp	r0, #0
 80093d2:	d0e8      	beq.n	80093a6 <pow+0x4a>
 80093d4:	2200      	movs	r2, #0
 80093d6:	2300      	movs	r3, #0
 80093d8:	4630      	mov	r0, r6
 80093da:	4639      	mov	r1, r7
 80093dc:	f7f7 faee 	bl	80009bc <__aeabi_dcmplt>
 80093e0:	2800      	cmp	r0, #0
 80093e2:	d0e0      	beq.n	80093a6 <pow+0x4a>
 80093e4:	f7fd f8d8 	bl	8006598 <__errno>
 80093e8:	2321      	movs	r3, #33	; 0x21
 80093ea:	2400      	movs	r4, #0
 80093ec:	6003      	str	r3, [r0, #0]
 80093ee:	4d2e      	ldr	r5, [pc, #184]	; (80094a8 <pow+0x14c>)
 80093f0:	e7d9      	b.n	80093a6 <pow+0x4a>
 80093f2:	4620      	mov	r0, r4
 80093f4:	4629      	mov	r1, r5
 80093f6:	f000 fe24 	bl	800a042 <finite>
 80093fa:	bba8      	cbnz	r0, 8009468 <pow+0x10c>
 80093fc:	4640      	mov	r0, r8
 80093fe:	4649      	mov	r1, r9
 8009400:	f000 fe1f 	bl	800a042 <finite>
 8009404:	b380      	cbz	r0, 8009468 <pow+0x10c>
 8009406:	4630      	mov	r0, r6
 8009408:	4639      	mov	r1, r7
 800940a:	f000 fe1a 	bl	800a042 <finite>
 800940e:	b358      	cbz	r0, 8009468 <pow+0x10c>
 8009410:	4622      	mov	r2, r4
 8009412:	462b      	mov	r3, r5
 8009414:	4620      	mov	r0, r4
 8009416:	4629      	mov	r1, r5
 8009418:	f7f7 faf8 	bl	8000a0c <__aeabi_dcmpun>
 800941c:	b160      	cbz	r0, 8009438 <pow+0xdc>
 800941e:	f7fd f8bb 	bl	8006598 <__errno>
 8009422:	2321      	movs	r3, #33	; 0x21
 8009424:	2200      	movs	r2, #0
 8009426:	6003      	str	r3, [r0, #0]
 8009428:	2300      	movs	r3, #0
 800942a:	4610      	mov	r0, r2
 800942c:	4619      	mov	r1, r3
 800942e:	f7f7 f97d 	bl	800072c <__aeabi_ddiv>
 8009432:	4604      	mov	r4, r0
 8009434:	460d      	mov	r5, r1
 8009436:	e7b6      	b.n	80093a6 <pow+0x4a>
 8009438:	f7fd f8ae 	bl	8006598 <__errno>
 800943c:	2322      	movs	r3, #34	; 0x22
 800943e:	2200      	movs	r2, #0
 8009440:	6003      	str	r3, [r0, #0]
 8009442:	4649      	mov	r1, r9
 8009444:	2300      	movs	r3, #0
 8009446:	4640      	mov	r0, r8
 8009448:	f7f7 fab8 	bl	80009bc <__aeabi_dcmplt>
 800944c:	2400      	movs	r4, #0
 800944e:	b148      	cbz	r0, 8009464 <pow+0x108>
 8009450:	4630      	mov	r0, r6
 8009452:	4639      	mov	r1, r7
 8009454:	f000 fe02 	bl	800a05c <rint>
 8009458:	4632      	mov	r2, r6
 800945a:	463b      	mov	r3, r7
 800945c:	f7f7 faa4 	bl	80009a8 <__aeabi_dcmpeq>
 8009460:	2800      	cmp	r0, #0
 8009462:	d0c4      	beq.n	80093ee <pow+0x92>
 8009464:	4d11      	ldr	r5, [pc, #68]	; (80094ac <pow+0x150>)
 8009466:	e79e      	b.n	80093a6 <pow+0x4a>
 8009468:	2200      	movs	r2, #0
 800946a:	2300      	movs	r3, #0
 800946c:	4620      	mov	r0, r4
 800946e:	4629      	mov	r1, r5
 8009470:	f7f7 fa9a 	bl	80009a8 <__aeabi_dcmpeq>
 8009474:	2800      	cmp	r0, #0
 8009476:	d096      	beq.n	80093a6 <pow+0x4a>
 8009478:	4640      	mov	r0, r8
 800947a:	4649      	mov	r1, r9
 800947c:	f000 fde1 	bl	800a042 <finite>
 8009480:	2800      	cmp	r0, #0
 8009482:	d090      	beq.n	80093a6 <pow+0x4a>
 8009484:	4630      	mov	r0, r6
 8009486:	4639      	mov	r1, r7
 8009488:	f000 fddb 	bl	800a042 <finite>
 800948c:	2800      	cmp	r0, #0
 800948e:	d08a      	beq.n	80093a6 <pow+0x4a>
 8009490:	f7fd f882 	bl	8006598 <__errno>
 8009494:	2322      	movs	r3, #34	; 0x22
 8009496:	2400      	movs	r4, #0
 8009498:	2500      	movs	r5, #0
 800949a:	6003      	str	r3, [r0, #0]
 800949c:	e783      	b.n	80093a6 <pow+0x4a>
 800949e:	2400      	movs	r4, #0
 80094a0:	4d03      	ldr	r5, [pc, #12]	; (80094b0 <pow+0x154>)
 80094a2:	e780      	b.n	80093a6 <pow+0x4a>
 80094a4:	20000250 	.word	0x20000250
 80094a8:	fff00000 	.word	0xfff00000
 80094ac:	7ff00000 	.word	0x7ff00000
 80094b0:	3ff00000 	.word	0x3ff00000
 80094b4:	00000000 	.word	0x00000000

080094b8 <__ieee754_pow>:
 80094b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094bc:	b093      	sub	sp, #76	; 0x4c
 80094be:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80094c2:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 80094c6:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 80094ca:	ea55 0302 	orrs.w	r3, r5, r2
 80094ce:	4607      	mov	r7, r0
 80094d0:	4688      	mov	r8, r1
 80094d2:	f000 84bf 	beq.w	8009e54 <__ieee754_pow+0x99c>
 80094d6:	4b7e      	ldr	r3, [pc, #504]	; (80096d0 <__ieee754_pow+0x218>)
 80094d8:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 80094dc:	429c      	cmp	r4, r3
 80094de:	4689      	mov	r9, r1
 80094e0:	4682      	mov	sl, r0
 80094e2:	dc09      	bgt.n	80094f8 <__ieee754_pow+0x40>
 80094e4:	d103      	bne.n	80094ee <__ieee754_pow+0x36>
 80094e6:	b978      	cbnz	r0, 8009508 <__ieee754_pow+0x50>
 80094e8:	42a5      	cmp	r5, r4
 80094ea:	dd02      	ble.n	80094f2 <__ieee754_pow+0x3a>
 80094ec:	e00c      	b.n	8009508 <__ieee754_pow+0x50>
 80094ee:	429d      	cmp	r5, r3
 80094f0:	dc02      	bgt.n	80094f8 <__ieee754_pow+0x40>
 80094f2:	429d      	cmp	r5, r3
 80094f4:	d10e      	bne.n	8009514 <__ieee754_pow+0x5c>
 80094f6:	b16a      	cbz	r2, 8009514 <__ieee754_pow+0x5c>
 80094f8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80094fc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009500:	ea54 030a 	orrs.w	r3, r4, sl
 8009504:	f000 84a6 	beq.w	8009e54 <__ieee754_pow+0x99c>
 8009508:	4872      	ldr	r0, [pc, #456]	; (80096d4 <__ieee754_pow+0x21c>)
 800950a:	b013      	add	sp, #76	; 0x4c
 800950c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009510:	f000 bd9e 	b.w	800a050 <nan>
 8009514:	f1b9 0f00 	cmp.w	r9, #0
 8009518:	da39      	bge.n	800958e <__ieee754_pow+0xd6>
 800951a:	4b6f      	ldr	r3, [pc, #444]	; (80096d8 <__ieee754_pow+0x220>)
 800951c:	429d      	cmp	r5, r3
 800951e:	dc54      	bgt.n	80095ca <__ieee754_pow+0x112>
 8009520:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8009524:	429d      	cmp	r5, r3
 8009526:	f340 84a6 	ble.w	8009e76 <__ieee754_pow+0x9be>
 800952a:	152b      	asrs	r3, r5, #20
 800952c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009530:	2b14      	cmp	r3, #20
 8009532:	dd0f      	ble.n	8009554 <__ieee754_pow+0x9c>
 8009534:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8009538:	fa22 f103 	lsr.w	r1, r2, r3
 800953c:	fa01 f303 	lsl.w	r3, r1, r3
 8009540:	4293      	cmp	r3, r2
 8009542:	f040 8498 	bne.w	8009e76 <__ieee754_pow+0x9be>
 8009546:	f001 0101 	and.w	r1, r1, #1
 800954a:	f1c1 0302 	rsb	r3, r1, #2
 800954e:	9300      	str	r3, [sp, #0]
 8009550:	b182      	cbz	r2, 8009574 <__ieee754_pow+0xbc>
 8009552:	e05e      	b.n	8009612 <__ieee754_pow+0x15a>
 8009554:	2a00      	cmp	r2, #0
 8009556:	d15a      	bne.n	800960e <__ieee754_pow+0x156>
 8009558:	f1c3 0314 	rsb	r3, r3, #20
 800955c:	fa45 f103 	asr.w	r1, r5, r3
 8009560:	fa01 f303 	lsl.w	r3, r1, r3
 8009564:	42ab      	cmp	r3, r5
 8009566:	f040 8483 	bne.w	8009e70 <__ieee754_pow+0x9b8>
 800956a:	f001 0101 	and.w	r1, r1, #1
 800956e:	f1c1 0302 	rsb	r3, r1, #2
 8009572:	9300      	str	r3, [sp, #0]
 8009574:	4b59      	ldr	r3, [pc, #356]	; (80096dc <__ieee754_pow+0x224>)
 8009576:	429d      	cmp	r5, r3
 8009578:	d130      	bne.n	80095dc <__ieee754_pow+0x124>
 800957a:	2e00      	cmp	r6, #0
 800957c:	f280 8474 	bge.w	8009e68 <__ieee754_pow+0x9b0>
 8009580:	463a      	mov	r2, r7
 8009582:	4643      	mov	r3, r8
 8009584:	2000      	movs	r0, #0
 8009586:	4955      	ldr	r1, [pc, #340]	; (80096dc <__ieee754_pow+0x224>)
 8009588:	f7f7 f8d0 	bl	800072c <__aeabi_ddiv>
 800958c:	e02f      	b.n	80095ee <__ieee754_pow+0x136>
 800958e:	2300      	movs	r3, #0
 8009590:	9300      	str	r3, [sp, #0]
 8009592:	2a00      	cmp	r2, #0
 8009594:	d13d      	bne.n	8009612 <__ieee754_pow+0x15a>
 8009596:	4b4e      	ldr	r3, [pc, #312]	; (80096d0 <__ieee754_pow+0x218>)
 8009598:	429d      	cmp	r5, r3
 800959a:	d1eb      	bne.n	8009574 <__ieee754_pow+0xbc>
 800959c:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80095a0:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80095a4:	ea53 030a 	orrs.w	r3, r3, sl
 80095a8:	f000 8454 	beq.w	8009e54 <__ieee754_pow+0x99c>
 80095ac:	4b4c      	ldr	r3, [pc, #304]	; (80096e0 <__ieee754_pow+0x228>)
 80095ae:	429c      	cmp	r4, r3
 80095b0:	dd0d      	ble.n	80095ce <__ieee754_pow+0x116>
 80095b2:	2e00      	cmp	r6, #0
 80095b4:	f280 8454 	bge.w	8009e60 <__ieee754_pow+0x9a8>
 80095b8:	f04f 0b00 	mov.w	fp, #0
 80095bc:	f04f 0c00 	mov.w	ip, #0
 80095c0:	4658      	mov	r0, fp
 80095c2:	4661      	mov	r1, ip
 80095c4:	b013      	add	sp, #76	; 0x4c
 80095c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095ca:	2302      	movs	r3, #2
 80095cc:	e7e0      	b.n	8009590 <__ieee754_pow+0xd8>
 80095ce:	2e00      	cmp	r6, #0
 80095d0:	daf2      	bge.n	80095b8 <__ieee754_pow+0x100>
 80095d2:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 80095d6:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 80095da:	e7f1      	b.n	80095c0 <__ieee754_pow+0x108>
 80095dc:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 80095e0:	d108      	bne.n	80095f4 <__ieee754_pow+0x13c>
 80095e2:	463a      	mov	r2, r7
 80095e4:	4643      	mov	r3, r8
 80095e6:	4638      	mov	r0, r7
 80095e8:	4641      	mov	r1, r8
 80095ea:	f7f6 ff75 	bl	80004d8 <__aeabi_dmul>
 80095ee:	4683      	mov	fp, r0
 80095f0:	468c      	mov	ip, r1
 80095f2:	e7e5      	b.n	80095c0 <__ieee754_pow+0x108>
 80095f4:	4b3b      	ldr	r3, [pc, #236]	; (80096e4 <__ieee754_pow+0x22c>)
 80095f6:	429e      	cmp	r6, r3
 80095f8:	d10b      	bne.n	8009612 <__ieee754_pow+0x15a>
 80095fa:	f1b9 0f00 	cmp.w	r9, #0
 80095fe:	db08      	blt.n	8009612 <__ieee754_pow+0x15a>
 8009600:	4638      	mov	r0, r7
 8009602:	4641      	mov	r1, r8
 8009604:	b013      	add	sp, #76	; 0x4c
 8009606:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800960a:	f000 bc6b 	b.w	8009ee4 <__ieee754_sqrt>
 800960e:	2300      	movs	r3, #0
 8009610:	9300      	str	r3, [sp, #0]
 8009612:	4638      	mov	r0, r7
 8009614:	4641      	mov	r1, r8
 8009616:	f000 fd11 	bl	800a03c <fabs>
 800961a:	4683      	mov	fp, r0
 800961c:	468c      	mov	ip, r1
 800961e:	f1ba 0f00 	cmp.w	sl, #0
 8009622:	d129      	bne.n	8009678 <__ieee754_pow+0x1c0>
 8009624:	b124      	cbz	r4, 8009630 <__ieee754_pow+0x178>
 8009626:	4b2d      	ldr	r3, [pc, #180]	; (80096dc <__ieee754_pow+0x224>)
 8009628:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 800962c:	429a      	cmp	r2, r3
 800962e:	d123      	bne.n	8009678 <__ieee754_pow+0x1c0>
 8009630:	2e00      	cmp	r6, #0
 8009632:	da07      	bge.n	8009644 <__ieee754_pow+0x18c>
 8009634:	465a      	mov	r2, fp
 8009636:	4663      	mov	r3, ip
 8009638:	2000      	movs	r0, #0
 800963a:	4928      	ldr	r1, [pc, #160]	; (80096dc <__ieee754_pow+0x224>)
 800963c:	f7f7 f876 	bl	800072c <__aeabi_ddiv>
 8009640:	4683      	mov	fp, r0
 8009642:	468c      	mov	ip, r1
 8009644:	f1b9 0f00 	cmp.w	r9, #0
 8009648:	daba      	bge.n	80095c0 <__ieee754_pow+0x108>
 800964a:	9b00      	ldr	r3, [sp, #0]
 800964c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009650:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009654:	4323      	orrs	r3, r4
 8009656:	d108      	bne.n	800966a <__ieee754_pow+0x1b2>
 8009658:	465a      	mov	r2, fp
 800965a:	4663      	mov	r3, ip
 800965c:	4658      	mov	r0, fp
 800965e:	4661      	mov	r1, ip
 8009660:	f7f6 fd82 	bl	8000168 <__aeabi_dsub>
 8009664:	4602      	mov	r2, r0
 8009666:	460b      	mov	r3, r1
 8009668:	e78e      	b.n	8009588 <__ieee754_pow+0xd0>
 800966a:	9b00      	ldr	r3, [sp, #0]
 800966c:	2b01      	cmp	r3, #1
 800966e:	d1a7      	bne.n	80095c0 <__ieee754_pow+0x108>
 8009670:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8009674:	469c      	mov	ip, r3
 8009676:	e7a3      	b.n	80095c0 <__ieee754_pow+0x108>
 8009678:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 800967c:	3b01      	subs	r3, #1
 800967e:	930c      	str	r3, [sp, #48]	; 0x30
 8009680:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009682:	9b00      	ldr	r3, [sp, #0]
 8009684:	4313      	orrs	r3, r2
 8009686:	d104      	bne.n	8009692 <__ieee754_pow+0x1da>
 8009688:	463a      	mov	r2, r7
 800968a:	4643      	mov	r3, r8
 800968c:	4638      	mov	r0, r7
 800968e:	4641      	mov	r1, r8
 8009690:	e7e6      	b.n	8009660 <__ieee754_pow+0x1a8>
 8009692:	4b15      	ldr	r3, [pc, #84]	; (80096e8 <__ieee754_pow+0x230>)
 8009694:	429d      	cmp	r5, r3
 8009696:	f340 80f9 	ble.w	800988c <__ieee754_pow+0x3d4>
 800969a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800969e:	429d      	cmp	r5, r3
 80096a0:	4b0f      	ldr	r3, [pc, #60]	; (80096e0 <__ieee754_pow+0x228>)
 80096a2:	dd09      	ble.n	80096b8 <__ieee754_pow+0x200>
 80096a4:	429c      	cmp	r4, r3
 80096a6:	dc0c      	bgt.n	80096c2 <__ieee754_pow+0x20a>
 80096a8:	2e00      	cmp	r6, #0
 80096aa:	da85      	bge.n	80095b8 <__ieee754_pow+0x100>
 80096ac:	a306      	add	r3, pc, #24	; (adr r3, 80096c8 <__ieee754_pow+0x210>)
 80096ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096b2:	4610      	mov	r0, r2
 80096b4:	4619      	mov	r1, r3
 80096b6:	e798      	b.n	80095ea <__ieee754_pow+0x132>
 80096b8:	429c      	cmp	r4, r3
 80096ba:	dbf5      	blt.n	80096a8 <__ieee754_pow+0x1f0>
 80096bc:	4b07      	ldr	r3, [pc, #28]	; (80096dc <__ieee754_pow+0x224>)
 80096be:	429c      	cmp	r4, r3
 80096c0:	dd14      	ble.n	80096ec <__ieee754_pow+0x234>
 80096c2:	2e00      	cmp	r6, #0
 80096c4:	dcf2      	bgt.n	80096ac <__ieee754_pow+0x1f4>
 80096c6:	e777      	b.n	80095b8 <__ieee754_pow+0x100>
 80096c8:	8800759c 	.word	0x8800759c
 80096cc:	7e37e43c 	.word	0x7e37e43c
 80096d0:	7ff00000 	.word	0x7ff00000
 80096d4:	0800acc8 	.word	0x0800acc8
 80096d8:	433fffff 	.word	0x433fffff
 80096dc:	3ff00000 	.word	0x3ff00000
 80096e0:	3fefffff 	.word	0x3fefffff
 80096e4:	3fe00000 	.word	0x3fe00000
 80096e8:	41e00000 	.word	0x41e00000
 80096ec:	4661      	mov	r1, ip
 80096ee:	2200      	movs	r2, #0
 80096f0:	4658      	mov	r0, fp
 80096f2:	4b61      	ldr	r3, [pc, #388]	; (8009878 <__ieee754_pow+0x3c0>)
 80096f4:	f7f6 fd38 	bl	8000168 <__aeabi_dsub>
 80096f8:	a355      	add	r3, pc, #340	; (adr r3, 8009850 <__ieee754_pow+0x398>)
 80096fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096fe:	4604      	mov	r4, r0
 8009700:	460d      	mov	r5, r1
 8009702:	f7f6 fee9 	bl	80004d8 <__aeabi_dmul>
 8009706:	a354      	add	r3, pc, #336	; (adr r3, 8009858 <__ieee754_pow+0x3a0>)
 8009708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800970c:	4606      	mov	r6, r0
 800970e:	460f      	mov	r7, r1
 8009710:	4620      	mov	r0, r4
 8009712:	4629      	mov	r1, r5
 8009714:	f7f6 fee0 	bl	80004d8 <__aeabi_dmul>
 8009718:	2200      	movs	r2, #0
 800971a:	4682      	mov	sl, r0
 800971c:	468b      	mov	fp, r1
 800971e:	4620      	mov	r0, r4
 8009720:	4629      	mov	r1, r5
 8009722:	4b56      	ldr	r3, [pc, #344]	; (800987c <__ieee754_pow+0x3c4>)
 8009724:	f7f6 fed8 	bl	80004d8 <__aeabi_dmul>
 8009728:	4602      	mov	r2, r0
 800972a:	460b      	mov	r3, r1
 800972c:	a14c      	add	r1, pc, #304	; (adr r1, 8009860 <__ieee754_pow+0x3a8>)
 800972e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009732:	f7f6 fd19 	bl	8000168 <__aeabi_dsub>
 8009736:	4622      	mov	r2, r4
 8009738:	462b      	mov	r3, r5
 800973a:	f7f6 fecd 	bl	80004d8 <__aeabi_dmul>
 800973e:	4602      	mov	r2, r0
 8009740:	460b      	mov	r3, r1
 8009742:	2000      	movs	r0, #0
 8009744:	494e      	ldr	r1, [pc, #312]	; (8009880 <__ieee754_pow+0x3c8>)
 8009746:	f7f6 fd0f 	bl	8000168 <__aeabi_dsub>
 800974a:	4622      	mov	r2, r4
 800974c:	462b      	mov	r3, r5
 800974e:	4680      	mov	r8, r0
 8009750:	4689      	mov	r9, r1
 8009752:	4620      	mov	r0, r4
 8009754:	4629      	mov	r1, r5
 8009756:	f7f6 febf 	bl	80004d8 <__aeabi_dmul>
 800975a:	4602      	mov	r2, r0
 800975c:	460b      	mov	r3, r1
 800975e:	4640      	mov	r0, r8
 8009760:	4649      	mov	r1, r9
 8009762:	f7f6 feb9 	bl	80004d8 <__aeabi_dmul>
 8009766:	a340      	add	r3, pc, #256	; (adr r3, 8009868 <__ieee754_pow+0x3b0>)
 8009768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800976c:	f7f6 feb4 	bl	80004d8 <__aeabi_dmul>
 8009770:	4602      	mov	r2, r0
 8009772:	460b      	mov	r3, r1
 8009774:	4650      	mov	r0, sl
 8009776:	4659      	mov	r1, fp
 8009778:	f7f6 fcf6 	bl	8000168 <__aeabi_dsub>
 800977c:	f04f 0a00 	mov.w	sl, #0
 8009780:	4602      	mov	r2, r0
 8009782:	460b      	mov	r3, r1
 8009784:	4604      	mov	r4, r0
 8009786:	460d      	mov	r5, r1
 8009788:	4630      	mov	r0, r6
 800978a:	4639      	mov	r1, r7
 800978c:	f7f6 fcee 	bl	800016c <__adddf3>
 8009790:	4632      	mov	r2, r6
 8009792:	463b      	mov	r3, r7
 8009794:	4650      	mov	r0, sl
 8009796:	468b      	mov	fp, r1
 8009798:	f7f6 fce6 	bl	8000168 <__aeabi_dsub>
 800979c:	4602      	mov	r2, r0
 800979e:	460b      	mov	r3, r1
 80097a0:	4620      	mov	r0, r4
 80097a2:	4629      	mov	r1, r5
 80097a4:	f7f6 fce0 	bl	8000168 <__aeabi_dsub>
 80097a8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80097ac:	9b00      	ldr	r3, [sp, #0]
 80097ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80097b0:	3b01      	subs	r3, #1
 80097b2:	4313      	orrs	r3, r2
 80097b4:	f04f 0600 	mov.w	r6, #0
 80097b8:	f04f 0200 	mov.w	r2, #0
 80097bc:	bf0c      	ite	eq
 80097be:	4b31      	ldreq	r3, [pc, #196]	; (8009884 <__ieee754_pow+0x3cc>)
 80097c0:	4b2d      	ldrne	r3, [pc, #180]	; (8009878 <__ieee754_pow+0x3c0>)
 80097c2:	4604      	mov	r4, r0
 80097c4:	460d      	mov	r5, r1
 80097c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80097ca:	e9cd 2300 	strd	r2, r3, [sp]
 80097ce:	4632      	mov	r2, r6
 80097d0:	463b      	mov	r3, r7
 80097d2:	f7f6 fcc9 	bl	8000168 <__aeabi_dsub>
 80097d6:	4652      	mov	r2, sl
 80097d8:	465b      	mov	r3, fp
 80097da:	f7f6 fe7d 	bl	80004d8 <__aeabi_dmul>
 80097de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80097e2:	4680      	mov	r8, r0
 80097e4:	4689      	mov	r9, r1
 80097e6:	4620      	mov	r0, r4
 80097e8:	4629      	mov	r1, r5
 80097ea:	f7f6 fe75 	bl	80004d8 <__aeabi_dmul>
 80097ee:	4602      	mov	r2, r0
 80097f0:	460b      	mov	r3, r1
 80097f2:	4640      	mov	r0, r8
 80097f4:	4649      	mov	r1, r9
 80097f6:	f7f6 fcb9 	bl	800016c <__adddf3>
 80097fa:	4632      	mov	r2, r6
 80097fc:	463b      	mov	r3, r7
 80097fe:	4680      	mov	r8, r0
 8009800:	4689      	mov	r9, r1
 8009802:	4650      	mov	r0, sl
 8009804:	4659      	mov	r1, fp
 8009806:	f7f6 fe67 	bl	80004d8 <__aeabi_dmul>
 800980a:	4604      	mov	r4, r0
 800980c:	460d      	mov	r5, r1
 800980e:	460b      	mov	r3, r1
 8009810:	4602      	mov	r2, r0
 8009812:	4649      	mov	r1, r9
 8009814:	4640      	mov	r0, r8
 8009816:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800981a:	f7f6 fca7 	bl	800016c <__adddf3>
 800981e:	4b1a      	ldr	r3, [pc, #104]	; (8009888 <__ieee754_pow+0x3d0>)
 8009820:	4682      	mov	sl, r0
 8009822:	4299      	cmp	r1, r3
 8009824:	460f      	mov	r7, r1
 8009826:	460e      	mov	r6, r1
 8009828:	f340 82ed 	ble.w	8009e06 <__ieee754_pow+0x94e>
 800982c:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8009830:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8009834:	4303      	orrs	r3, r0
 8009836:	f000 81e7 	beq.w	8009c08 <__ieee754_pow+0x750>
 800983a:	a30d      	add	r3, pc, #52	; (adr r3, 8009870 <__ieee754_pow+0x3b8>)
 800983c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009840:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009844:	f7f6 fe48 	bl	80004d8 <__aeabi_dmul>
 8009848:	a309      	add	r3, pc, #36	; (adr r3, 8009870 <__ieee754_pow+0x3b8>)
 800984a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800984e:	e6cc      	b.n	80095ea <__ieee754_pow+0x132>
 8009850:	60000000 	.word	0x60000000
 8009854:	3ff71547 	.word	0x3ff71547
 8009858:	f85ddf44 	.word	0xf85ddf44
 800985c:	3e54ae0b 	.word	0x3e54ae0b
 8009860:	55555555 	.word	0x55555555
 8009864:	3fd55555 	.word	0x3fd55555
 8009868:	652b82fe 	.word	0x652b82fe
 800986c:	3ff71547 	.word	0x3ff71547
 8009870:	8800759c 	.word	0x8800759c
 8009874:	7e37e43c 	.word	0x7e37e43c
 8009878:	3ff00000 	.word	0x3ff00000
 800987c:	3fd00000 	.word	0x3fd00000
 8009880:	3fe00000 	.word	0x3fe00000
 8009884:	bff00000 	.word	0xbff00000
 8009888:	408fffff 	.word	0x408fffff
 800988c:	4bd4      	ldr	r3, [pc, #848]	; (8009be0 <__ieee754_pow+0x728>)
 800988e:	2200      	movs	r2, #0
 8009890:	ea09 0303 	and.w	r3, r9, r3
 8009894:	b943      	cbnz	r3, 80098a8 <__ieee754_pow+0x3f0>
 8009896:	4658      	mov	r0, fp
 8009898:	4661      	mov	r1, ip
 800989a:	4bd2      	ldr	r3, [pc, #840]	; (8009be4 <__ieee754_pow+0x72c>)
 800989c:	f7f6 fe1c 	bl	80004d8 <__aeabi_dmul>
 80098a0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80098a4:	4683      	mov	fp, r0
 80098a6:	460c      	mov	r4, r1
 80098a8:	1523      	asrs	r3, r4, #20
 80098aa:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80098ae:	4413      	add	r3, r2
 80098b0:	930b      	str	r3, [sp, #44]	; 0x2c
 80098b2:	4bcd      	ldr	r3, [pc, #820]	; (8009be8 <__ieee754_pow+0x730>)
 80098b4:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80098b8:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80098bc:	429c      	cmp	r4, r3
 80098be:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80098c2:	dd08      	ble.n	80098d6 <__ieee754_pow+0x41e>
 80098c4:	4bc9      	ldr	r3, [pc, #804]	; (8009bec <__ieee754_pow+0x734>)
 80098c6:	429c      	cmp	r4, r3
 80098c8:	f340 819c 	ble.w	8009c04 <__ieee754_pow+0x74c>
 80098cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80098ce:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80098d2:	3301      	adds	r3, #1
 80098d4:	930b      	str	r3, [sp, #44]	; 0x2c
 80098d6:	2600      	movs	r6, #0
 80098d8:	00f3      	lsls	r3, r6, #3
 80098da:	930d      	str	r3, [sp, #52]	; 0x34
 80098dc:	4bc4      	ldr	r3, [pc, #784]	; (8009bf0 <__ieee754_pow+0x738>)
 80098de:	4658      	mov	r0, fp
 80098e0:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80098e4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80098e8:	4629      	mov	r1, r5
 80098ea:	461a      	mov	r2, r3
 80098ec:	e9cd 3408 	strd	r3, r4, [sp, #32]
 80098f0:	4623      	mov	r3, r4
 80098f2:	f7f6 fc39 	bl	8000168 <__aeabi_dsub>
 80098f6:	46da      	mov	sl, fp
 80098f8:	462b      	mov	r3, r5
 80098fa:	4652      	mov	r2, sl
 80098fc:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8009900:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009904:	f7f6 fc32 	bl	800016c <__adddf3>
 8009908:	4602      	mov	r2, r0
 800990a:	460b      	mov	r3, r1
 800990c:	2000      	movs	r0, #0
 800990e:	49b9      	ldr	r1, [pc, #740]	; (8009bf4 <__ieee754_pow+0x73c>)
 8009910:	f7f6 ff0c 	bl	800072c <__aeabi_ddiv>
 8009914:	4602      	mov	r2, r0
 8009916:	460b      	mov	r3, r1
 8009918:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800991c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009920:	f7f6 fdda 	bl	80004d8 <__aeabi_dmul>
 8009924:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009928:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800992c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009930:	2300      	movs	r3, #0
 8009932:	2200      	movs	r2, #0
 8009934:	46ab      	mov	fp, r5
 8009936:	106d      	asrs	r5, r5, #1
 8009938:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800993c:	9304      	str	r3, [sp, #16]
 800993e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8009942:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8009946:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800994a:	4640      	mov	r0, r8
 800994c:	4649      	mov	r1, r9
 800994e:	4614      	mov	r4, r2
 8009950:	461d      	mov	r5, r3
 8009952:	f7f6 fdc1 	bl	80004d8 <__aeabi_dmul>
 8009956:	4602      	mov	r2, r0
 8009958:	460b      	mov	r3, r1
 800995a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800995e:	f7f6 fc03 	bl	8000168 <__aeabi_dsub>
 8009962:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009966:	4606      	mov	r6, r0
 8009968:	460f      	mov	r7, r1
 800996a:	4620      	mov	r0, r4
 800996c:	4629      	mov	r1, r5
 800996e:	f7f6 fbfb 	bl	8000168 <__aeabi_dsub>
 8009972:	4602      	mov	r2, r0
 8009974:	460b      	mov	r3, r1
 8009976:	4650      	mov	r0, sl
 8009978:	4659      	mov	r1, fp
 800997a:	f7f6 fbf5 	bl	8000168 <__aeabi_dsub>
 800997e:	4642      	mov	r2, r8
 8009980:	464b      	mov	r3, r9
 8009982:	f7f6 fda9 	bl	80004d8 <__aeabi_dmul>
 8009986:	4602      	mov	r2, r0
 8009988:	460b      	mov	r3, r1
 800998a:	4630      	mov	r0, r6
 800998c:	4639      	mov	r1, r7
 800998e:	f7f6 fbeb 	bl	8000168 <__aeabi_dsub>
 8009992:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009996:	f7f6 fd9f 	bl	80004d8 <__aeabi_dmul>
 800999a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800999e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80099a2:	4610      	mov	r0, r2
 80099a4:	4619      	mov	r1, r3
 80099a6:	f7f6 fd97 	bl	80004d8 <__aeabi_dmul>
 80099aa:	a37b      	add	r3, pc, #492	; (adr r3, 8009b98 <__ieee754_pow+0x6e0>)
 80099ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099b0:	4604      	mov	r4, r0
 80099b2:	460d      	mov	r5, r1
 80099b4:	f7f6 fd90 	bl	80004d8 <__aeabi_dmul>
 80099b8:	a379      	add	r3, pc, #484	; (adr r3, 8009ba0 <__ieee754_pow+0x6e8>)
 80099ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099be:	f7f6 fbd5 	bl	800016c <__adddf3>
 80099c2:	4622      	mov	r2, r4
 80099c4:	462b      	mov	r3, r5
 80099c6:	f7f6 fd87 	bl	80004d8 <__aeabi_dmul>
 80099ca:	a377      	add	r3, pc, #476	; (adr r3, 8009ba8 <__ieee754_pow+0x6f0>)
 80099cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099d0:	f7f6 fbcc 	bl	800016c <__adddf3>
 80099d4:	4622      	mov	r2, r4
 80099d6:	462b      	mov	r3, r5
 80099d8:	f7f6 fd7e 	bl	80004d8 <__aeabi_dmul>
 80099dc:	a374      	add	r3, pc, #464	; (adr r3, 8009bb0 <__ieee754_pow+0x6f8>)
 80099de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099e2:	f7f6 fbc3 	bl	800016c <__adddf3>
 80099e6:	4622      	mov	r2, r4
 80099e8:	462b      	mov	r3, r5
 80099ea:	f7f6 fd75 	bl	80004d8 <__aeabi_dmul>
 80099ee:	a372      	add	r3, pc, #456	; (adr r3, 8009bb8 <__ieee754_pow+0x700>)
 80099f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099f4:	f7f6 fbba 	bl	800016c <__adddf3>
 80099f8:	4622      	mov	r2, r4
 80099fa:	462b      	mov	r3, r5
 80099fc:	f7f6 fd6c 	bl	80004d8 <__aeabi_dmul>
 8009a00:	a36f      	add	r3, pc, #444	; (adr r3, 8009bc0 <__ieee754_pow+0x708>)
 8009a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a06:	f7f6 fbb1 	bl	800016c <__adddf3>
 8009a0a:	4622      	mov	r2, r4
 8009a0c:	4606      	mov	r6, r0
 8009a0e:	460f      	mov	r7, r1
 8009a10:	462b      	mov	r3, r5
 8009a12:	4620      	mov	r0, r4
 8009a14:	4629      	mov	r1, r5
 8009a16:	f7f6 fd5f 	bl	80004d8 <__aeabi_dmul>
 8009a1a:	4602      	mov	r2, r0
 8009a1c:	460b      	mov	r3, r1
 8009a1e:	4630      	mov	r0, r6
 8009a20:	4639      	mov	r1, r7
 8009a22:	f7f6 fd59 	bl	80004d8 <__aeabi_dmul>
 8009a26:	4604      	mov	r4, r0
 8009a28:	460d      	mov	r5, r1
 8009a2a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009a2e:	4642      	mov	r2, r8
 8009a30:	464b      	mov	r3, r9
 8009a32:	f7f6 fb9b 	bl	800016c <__adddf3>
 8009a36:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009a3a:	f7f6 fd4d 	bl	80004d8 <__aeabi_dmul>
 8009a3e:	4622      	mov	r2, r4
 8009a40:	462b      	mov	r3, r5
 8009a42:	f7f6 fb93 	bl	800016c <__adddf3>
 8009a46:	4642      	mov	r2, r8
 8009a48:	4606      	mov	r6, r0
 8009a4a:	460f      	mov	r7, r1
 8009a4c:	464b      	mov	r3, r9
 8009a4e:	4640      	mov	r0, r8
 8009a50:	4649      	mov	r1, r9
 8009a52:	f7f6 fd41 	bl	80004d8 <__aeabi_dmul>
 8009a56:	2200      	movs	r2, #0
 8009a58:	4b67      	ldr	r3, [pc, #412]	; (8009bf8 <__ieee754_pow+0x740>)
 8009a5a:	4682      	mov	sl, r0
 8009a5c:	468b      	mov	fp, r1
 8009a5e:	f7f6 fb85 	bl	800016c <__adddf3>
 8009a62:	4632      	mov	r2, r6
 8009a64:	463b      	mov	r3, r7
 8009a66:	f7f6 fb81 	bl	800016c <__adddf3>
 8009a6a:	9c04      	ldr	r4, [sp, #16]
 8009a6c:	460d      	mov	r5, r1
 8009a6e:	4622      	mov	r2, r4
 8009a70:	460b      	mov	r3, r1
 8009a72:	4640      	mov	r0, r8
 8009a74:	4649      	mov	r1, r9
 8009a76:	f7f6 fd2f 	bl	80004d8 <__aeabi_dmul>
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	4680      	mov	r8, r0
 8009a7e:	4689      	mov	r9, r1
 8009a80:	4620      	mov	r0, r4
 8009a82:	4629      	mov	r1, r5
 8009a84:	4b5c      	ldr	r3, [pc, #368]	; (8009bf8 <__ieee754_pow+0x740>)
 8009a86:	f7f6 fb6f 	bl	8000168 <__aeabi_dsub>
 8009a8a:	4652      	mov	r2, sl
 8009a8c:	465b      	mov	r3, fp
 8009a8e:	f7f6 fb6b 	bl	8000168 <__aeabi_dsub>
 8009a92:	4602      	mov	r2, r0
 8009a94:	460b      	mov	r3, r1
 8009a96:	4630      	mov	r0, r6
 8009a98:	4639      	mov	r1, r7
 8009a9a:	f7f6 fb65 	bl	8000168 <__aeabi_dsub>
 8009a9e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009aa2:	f7f6 fd19 	bl	80004d8 <__aeabi_dmul>
 8009aa6:	4622      	mov	r2, r4
 8009aa8:	4606      	mov	r6, r0
 8009aaa:	460f      	mov	r7, r1
 8009aac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009ab0:	462b      	mov	r3, r5
 8009ab2:	f7f6 fd11 	bl	80004d8 <__aeabi_dmul>
 8009ab6:	4602      	mov	r2, r0
 8009ab8:	460b      	mov	r3, r1
 8009aba:	4630      	mov	r0, r6
 8009abc:	4639      	mov	r1, r7
 8009abe:	f7f6 fb55 	bl	800016c <__adddf3>
 8009ac2:	4606      	mov	r6, r0
 8009ac4:	460f      	mov	r7, r1
 8009ac6:	4602      	mov	r2, r0
 8009ac8:	460b      	mov	r3, r1
 8009aca:	4640      	mov	r0, r8
 8009acc:	4649      	mov	r1, r9
 8009ace:	f7f6 fb4d 	bl	800016c <__adddf3>
 8009ad2:	a33d      	add	r3, pc, #244	; (adr r3, 8009bc8 <__ieee754_pow+0x710>)
 8009ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ad8:	9c04      	ldr	r4, [sp, #16]
 8009ada:	460d      	mov	r5, r1
 8009adc:	4620      	mov	r0, r4
 8009ade:	f7f6 fcfb 	bl	80004d8 <__aeabi_dmul>
 8009ae2:	4642      	mov	r2, r8
 8009ae4:	464b      	mov	r3, r9
 8009ae6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009aea:	4620      	mov	r0, r4
 8009aec:	4629      	mov	r1, r5
 8009aee:	f7f6 fb3b 	bl	8000168 <__aeabi_dsub>
 8009af2:	4602      	mov	r2, r0
 8009af4:	460b      	mov	r3, r1
 8009af6:	4630      	mov	r0, r6
 8009af8:	4639      	mov	r1, r7
 8009afa:	f7f6 fb35 	bl	8000168 <__aeabi_dsub>
 8009afe:	a334      	add	r3, pc, #208	; (adr r3, 8009bd0 <__ieee754_pow+0x718>)
 8009b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b04:	f7f6 fce8 	bl	80004d8 <__aeabi_dmul>
 8009b08:	a333      	add	r3, pc, #204	; (adr r3, 8009bd8 <__ieee754_pow+0x720>)
 8009b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b0e:	4606      	mov	r6, r0
 8009b10:	460f      	mov	r7, r1
 8009b12:	4620      	mov	r0, r4
 8009b14:	4629      	mov	r1, r5
 8009b16:	f7f6 fcdf 	bl	80004d8 <__aeabi_dmul>
 8009b1a:	4602      	mov	r2, r0
 8009b1c:	460b      	mov	r3, r1
 8009b1e:	4630      	mov	r0, r6
 8009b20:	4639      	mov	r1, r7
 8009b22:	f7f6 fb23 	bl	800016c <__adddf3>
 8009b26:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009b28:	4b34      	ldr	r3, [pc, #208]	; (8009bfc <__ieee754_pow+0x744>)
 8009b2a:	4413      	add	r3, r2
 8009b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b30:	f7f6 fb1c 	bl	800016c <__adddf3>
 8009b34:	4680      	mov	r8, r0
 8009b36:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8009b38:	4689      	mov	r9, r1
 8009b3a:	f7f6 fc63 	bl	8000404 <__aeabi_i2d>
 8009b3e:	4604      	mov	r4, r0
 8009b40:	460d      	mov	r5, r1
 8009b42:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009b44:	4b2e      	ldr	r3, [pc, #184]	; (8009c00 <__ieee754_pow+0x748>)
 8009b46:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009b4a:	4413      	add	r3, r2
 8009b4c:	e9d3 6700 	ldrd	r6, r7, [r3]
 8009b50:	4642      	mov	r2, r8
 8009b52:	464b      	mov	r3, r9
 8009b54:	f7f6 fb0a 	bl	800016c <__adddf3>
 8009b58:	4632      	mov	r2, r6
 8009b5a:	463b      	mov	r3, r7
 8009b5c:	f7f6 fb06 	bl	800016c <__adddf3>
 8009b60:	4622      	mov	r2, r4
 8009b62:	462b      	mov	r3, r5
 8009b64:	f7f6 fb02 	bl	800016c <__adddf3>
 8009b68:	f8dd a010 	ldr.w	sl, [sp, #16]
 8009b6c:	4622      	mov	r2, r4
 8009b6e:	462b      	mov	r3, r5
 8009b70:	4650      	mov	r0, sl
 8009b72:	468b      	mov	fp, r1
 8009b74:	f7f6 faf8 	bl	8000168 <__aeabi_dsub>
 8009b78:	4632      	mov	r2, r6
 8009b7a:	463b      	mov	r3, r7
 8009b7c:	f7f6 faf4 	bl	8000168 <__aeabi_dsub>
 8009b80:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009b84:	f7f6 faf0 	bl	8000168 <__aeabi_dsub>
 8009b88:	4602      	mov	r2, r0
 8009b8a:	460b      	mov	r3, r1
 8009b8c:	4640      	mov	r0, r8
 8009b8e:	4649      	mov	r1, r9
 8009b90:	e608      	b.n	80097a4 <__ieee754_pow+0x2ec>
 8009b92:	bf00      	nop
 8009b94:	f3af 8000 	nop.w
 8009b98:	4a454eef 	.word	0x4a454eef
 8009b9c:	3fca7e28 	.word	0x3fca7e28
 8009ba0:	93c9db65 	.word	0x93c9db65
 8009ba4:	3fcd864a 	.word	0x3fcd864a
 8009ba8:	a91d4101 	.word	0xa91d4101
 8009bac:	3fd17460 	.word	0x3fd17460
 8009bb0:	518f264d 	.word	0x518f264d
 8009bb4:	3fd55555 	.word	0x3fd55555
 8009bb8:	db6fabff 	.word	0xdb6fabff
 8009bbc:	3fdb6db6 	.word	0x3fdb6db6
 8009bc0:	33333303 	.word	0x33333303
 8009bc4:	3fe33333 	.word	0x3fe33333
 8009bc8:	e0000000 	.word	0xe0000000
 8009bcc:	3feec709 	.word	0x3feec709
 8009bd0:	dc3a03fd 	.word	0xdc3a03fd
 8009bd4:	3feec709 	.word	0x3feec709
 8009bd8:	145b01f5 	.word	0x145b01f5
 8009bdc:	be3e2fe0 	.word	0xbe3e2fe0
 8009be0:	7ff00000 	.word	0x7ff00000
 8009be4:	43400000 	.word	0x43400000
 8009be8:	0003988e 	.word	0x0003988e
 8009bec:	000bb679 	.word	0x000bb679
 8009bf0:	0800add8 	.word	0x0800add8
 8009bf4:	3ff00000 	.word	0x3ff00000
 8009bf8:	40080000 	.word	0x40080000
 8009bfc:	0800adf8 	.word	0x0800adf8
 8009c00:	0800ade8 	.word	0x0800ade8
 8009c04:	2601      	movs	r6, #1
 8009c06:	e667      	b.n	80098d8 <__ieee754_pow+0x420>
 8009c08:	a39d      	add	r3, pc, #628	; (adr r3, 8009e80 <__ieee754_pow+0x9c8>)
 8009c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c0e:	4640      	mov	r0, r8
 8009c10:	4649      	mov	r1, r9
 8009c12:	f7f6 faab 	bl	800016c <__adddf3>
 8009c16:	4622      	mov	r2, r4
 8009c18:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009c1c:	462b      	mov	r3, r5
 8009c1e:	4650      	mov	r0, sl
 8009c20:	4639      	mov	r1, r7
 8009c22:	f7f6 faa1 	bl	8000168 <__aeabi_dsub>
 8009c26:	4602      	mov	r2, r0
 8009c28:	460b      	mov	r3, r1
 8009c2a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009c2e:	f7f6 fee3 	bl	80009f8 <__aeabi_dcmpgt>
 8009c32:	2800      	cmp	r0, #0
 8009c34:	f47f ae01 	bne.w	800983a <__ieee754_pow+0x382>
 8009c38:	4aa5      	ldr	r2, [pc, #660]	; (8009ed0 <__ieee754_pow+0xa18>)
 8009c3a:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8009c3e:	4293      	cmp	r3, r2
 8009c40:	f340 8103 	ble.w	8009e4a <__ieee754_pow+0x992>
 8009c44:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8009c48:	2000      	movs	r0, #0
 8009c4a:	151b      	asrs	r3, r3, #20
 8009c4c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8009c50:	fa4a f303 	asr.w	r3, sl, r3
 8009c54:	4433      	add	r3, r6
 8009c56:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8009c5a:	4f9e      	ldr	r7, [pc, #632]	; (8009ed4 <__ieee754_pow+0xa1c>)
 8009c5c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8009c60:	4117      	asrs	r7, r2
 8009c62:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8009c66:	ea23 0107 	bic.w	r1, r3, r7
 8009c6a:	f1c2 0214 	rsb	r2, r2, #20
 8009c6e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8009c72:	460b      	mov	r3, r1
 8009c74:	fa4a fa02 	asr.w	sl, sl, r2
 8009c78:	2e00      	cmp	r6, #0
 8009c7a:	4602      	mov	r2, r0
 8009c7c:	4629      	mov	r1, r5
 8009c7e:	4620      	mov	r0, r4
 8009c80:	bfb8      	it	lt
 8009c82:	f1ca 0a00 	rsblt	sl, sl, #0
 8009c86:	f7f6 fa6f 	bl	8000168 <__aeabi_dsub>
 8009c8a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009c8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c92:	2400      	movs	r4, #0
 8009c94:	4642      	mov	r2, r8
 8009c96:	464b      	mov	r3, r9
 8009c98:	f7f6 fa68 	bl	800016c <__adddf3>
 8009c9c:	a37a      	add	r3, pc, #488	; (adr r3, 8009e88 <__ieee754_pow+0x9d0>)
 8009c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ca2:	4620      	mov	r0, r4
 8009ca4:	460d      	mov	r5, r1
 8009ca6:	f7f6 fc17 	bl	80004d8 <__aeabi_dmul>
 8009caa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009cae:	4606      	mov	r6, r0
 8009cb0:	460f      	mov	r7, r1
 8009cb2:	4620      	mov	r0, r4
 8009cb4:	4629      	mov	r1, r5
 8009cb6:	f7f6 fa57 	bl	8000168 <__aeabi_dsub>
 8009cba:	4602      	mov	r2, r0
 8009cbc:	460b      	mov	r3, r1
 8009cbe:	4640      	mov	r0, r8
 8009cc0:	4649      	mov	r1, r9
 8009cc2:	f7f6 fa51 	bl	8000168 <__aeabi_dsub>
 8009cc6:	a372      	add	r3, pc, #456	; (adr r3, 8009e90 <__ieee754_pow+0x9d8>)
 8009cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ccc:	f7f6 fc04 	bl	80004d8 <__aeabi_dmul>
 8009cd0:	a371      	add	r3, pc, #452	; (adr r3, 8009e98 <__ieee754_pow+0x9e0>)
 8009cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cd6:	4680      	mov	r8, r0
 8009cd8:	4689      	mov	r9, r1
 8009cda:	4620      	mov	r0, r4
 8009cdc:	4629      	mov	r1, r5
 8009cde:	f7f6 fbfb 	bl	80004d8 <__aeabi_dmul>
 8009ce2:	4602      	mov	r2, r0
 8009ce4:	460b      	mov	r3, r1
 8009ce6:	4640      	mov	r0, r8
 8009ce8:	4649      	mov	r1, r9
 8009cea:	f7f6 fa3f 	bl	800016c <__adddf3>
 8009cee:	4604      	mov	r4, r0
 8009cf0:	460d      	mov	r5, r1
 8009cf2:	4602      	mov	r2, r0
 8009cf4:	460b      	mov	r3, r1
 8009cf6:	4630      	mov	r0, r6
 8009cf8:	4639      	mov	r1, r7
 8009cfa:	f7f6 fa37 	bl	800016c <__adddf3>
 8009cfe:	4632      	mov	r2, r6
 8009d00:	463b      	mov	r3, r7
 8009d02:	4680      	mov	r8, r0
 8009d04:	4689      	mov	r9, r1
 8009d06:	f7f6 fa2f 	bl	8000168 <__aeabi_dsub>
 8009d0a:	4602      	mov	r2, r0
 8009d0c:	460b      	mov	r3, r1
 8009d0e:	4620      	mov	r0, r4
 8009d10:	4629      	mov	r1, r5
 8009d12:	f7f6 fa29 	bl	8000168 <__aeabi_dsub>
 8009d16:	4642      	mov	r2, r8
 8009d18:	4606      	mov	r6, r0
 8009d1a:	460f      	mov	r7, r1
 8009d1c:	464b      	mov	r3, r9
 8009d1e:	4640      	mov	r0, r8
 8009d20:	4649      	mov	r1, r9
 8009d22:	f7f6 fbd9 	bl	80004d8 <__aeabi_dmul>
 8009d26:	a35e      	add	r3, pc, #376	; (adr r3, 8009ea0 <__ieee754_pow+0x9e8>)
 8009d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d2c:	4604      	mov	r4, r0
 8009d2e:	460d      	mov	r5, r1
 8009d30:	f7f6 fbd2 	bl	80004d8 <__aeabi_dmul>
 8009d34:	a35c      	add	r3, pc, #368	; (adr r3, 8009ea8 <__ieee754_pow+0x9f0>)
 8009d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d3a:	f7f6 fa15 	bl	8000168 <__aeabi_dsub>
 8009d3e:	4622      	mov	r2, r4
 8009d40:	462b      	mov	r3, r5
 8009d42:	f7f6 fbc9 	bl	80004d8 <__aeabi_dmul>
 8009d46:	a35a      	add	r3, pc, #360	; (adr r3, 8009eb0 <__ieee754_pow+0x9f8>)
 8009d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d4c:	f7f6 fa0e 	bl	800016c <__adddf3>
 8009d50:	4622      	mov	r2, r4
 8009d52:	462b      	mov	r3, r5
 8009d54:	f7f6 fbc0 	bl	80004d8 <__aeabi_dmul>
 8009d58:	a357      	add	r3, pc, #348	; (adr r3, 8009eb8 <__ieee754_pow+0xa00>)
 8009d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d5e:	f7f6 fa03 	bl	8000168 <__aeabi_dsub>
 8009d62:	4622      	mov	r2, r4
 8009d64:	462b      	mov	r3, r5
 8009d66:	f7f6 fbb7 	bl	80004d8 <__aeabi_dmul>
 8009d6a:	a355      	add	r3, pc, #340	; (adr r3, 8009ec0 <__ieee754_pow+0xa08>)
 8009d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d70:	f7f6 f9fc 	bl	800016c <__adddf3>
 8009d74:	4622      	mov	r2, r4
 8009d76:	462b      	mov	r3, r5
 8009d78:	f7f6 fbae 	bl	80004d8 <__aeabi_dmul>
 8009d7c:	4602      	mov	r2, r0
 8009d7e:	460b      	mov	r3, r1
 8009d80:	4640      	mov	r0, r8
 8009d82:	4649      	mov	r1, r9
 8009d84:	f7f6 f9f0 	bl	8000168 <__aeabi_dsub>
 8009d88:	4604      	mov	r4, r0
 8009d8a:	460d      	mov	r5, r1
 8009d8c:	4602      	mov	r2, r0
 8009d8e:	460b      	mov	r3, r1
 8009d90:	4640      	mov	r0, r8
 8009d92:	4649      	mov	r1, r9
 8009d94:	f7f6 fba0 	bl	80004d8 <__aeabi_dmul>
 8009d98:	2200      	movs	r2, #0
 8009d9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d9e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009da2:	4620      	mov	r0, r4
 8009da4:	4629      	mov	r1, r5
 8009da6:	f7f6 f9df 	bl	8000168 <__aeabi_dsub>
 8009daa:	4602      	mov	r2, r0
 8009dac:	460b      	mov	r3, r1
 8009dae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009db2:	f7f6 fcbb 	bl	800072c <__aeabi_ddiv>
 8009db6:	4632      	mov	r2, r6
 8009db8:	4604      	mov	r4, r0
 8009dba:	460d      	mov	r5, r1
 8009dbc:	463b      	mov	r3, r7
 8009dbe:	4640      	mov	r0, r8
 8009dc0:	4649      	mov	r1, r9
 8009dc2:	f7f6 fb89 	bl	80004d8 <__aeabi_dmul>
 8009dc6:	4632      	mov	r2, r6
 8009dc8:	463b      	mov	r3, r7
 8009dca:	f7f6 f9cf 	bl	800016c <__adddf3>
 8009dce:	4602      	mov	r2, r0
 8009dd0:	460b      	mov	r3, r1
 8009dd2:	4620      	mov	r0, r4
 8009dd4:	4629      	mov	r1, r5
 8009dd6:	f7f6 f9c7 	bl	8000168 <__aeabi_dsub>
 8009dda:	4642      	mov	r2, r8
 8009ddc:	464b      	mov	r3, r9
 8009dde:	f7f6 f9c3 	bl	8000168 <__aeabi_dsub>
 8009de2:	4602      	mov	r2, r0
 8009de4:	460b      	mov	r3, r1
 8009de6:	2000      	movs	r0, #0
 8009de8:	493b      	ldr	r1, [pc, #236]	; (8009ed8 <__ieee754_pow+0xa20>)
 8009dea:	f7f6 f9bd 	bl	8000168 <__aeabi_dsub>
 8009dee:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8009df2:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8009df6:	da2b      	bge.n	8009e50 <__ieee754_pow+0x998>
 8009df8:	4652      	mov	r2, sl
 8009dfa:	f000 f9b9 	bl	800a170 <scalbn>
 8009dfe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009e02:	f7ff bbf2 	b.w	80095ea <__ieee754_pow+0x132>
 8009e06:	4b35      	ldr	r3, [pc, #212]	; (8009edc <__ieee754_pow+0xa24>)
 8009e08:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8009e0c:	429f      	cmp	r7, r3
 8009e0e:	f77f af13 	ble.w	8009c38 <__ieee754_pow+0x780>
 8009e12:	4b33      	ldr	r3, [pc, #204]	; (8009ee0 <__ieee754_pow+0xa28>)
 8009e14:	440b      	add	r3, r1
 8009e16:	4303      	orrs	r3, r0
 8009e18:	d00b      	beq.n	8009e32 <__ieee754_pow+0x97a>
 8009e1a:	a32b      	add	r3, pc, #172	; (adr r3, 8009ec8 <__ieee754_pow+0xa10>)
 8009e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e20:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009e24:	f7f6 fb58 	bl	80004d8 <__aeabi_dmul>
 8009e28:	a327      	add	r3, pc, #156	; (adr r3, 8009ec8 <__ieee754_pow+0xa10>)
 8009e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e2e:	f7ff bbdc 	b.w	80095ea <__ieee754_pow+0x132>
 8009e32:	4622      	mov	r2, r4
 8009e34:	462b      	mov	r3, r5
 8009e36:	f7f6 f997 	bl	8000168 <__aeabi_dsub>
 8009e3a:	4642      	mov	r2, r8
 8009e3c:	464b      	mov	r3, r9
 8009e3e:	f7f6 fdd1 	bl	80009e4 <__aeabi_dcmpge>
 8009e42:	2800      	cmp	r0, #0
 8009e44:	f43f aef8 	beq.w	8009c38 <__ieee754_pow+0x780>
 8009e48:	e7e7      	b.n	8009e1a <__ieee754_pow+0x962>
 8009e4a:	f04f 0a00 	mov.w	sl, #0
 8009e4e:	e71e      	b.n	8009c8e <__ieee754_pow+0x7d6>
 8009e50:	4621      	mov	r1, r4
 8009e52:	e7d4      	b.n	8009dfe <__ieee754_pow+0x946>
 8009e54:	f04f 0b00 	mov.w	fp, #0
 8009e58:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8009ed8 <__ieee754_pow+0xa20>
 8009e5c:	f7ff bbb0 	b.w	80095c0 <__ieee754_pow+0x108>
 8009e60:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8009e64:	f7ff bbac 	b.w	80095c0 <__ieee754_pow+0x108>
 8009e68:	4638      	mov	r0, r7
 8009e6a:	4641      	mov	r1, r8
 8009e6c:	f7ff bbbf 	b.w	80095ee <__ieee754_pow+0x136>
 8009e70:	9200      	str	r2, [sp, #0]
 8009e72:	f7ff bb7f 	b.w	8009574 <__ieee754_pow+0xbc>
 8009e76:	2300      	movs	r3, #0
 8009e78:	f7ff bb69 	b.w	800954e <__ieee754_pow+0x96>
 8009e7c:	f3af 8000 	nop.w
 8009e80:	652b82fe 	.word	0x652b82fe
 8009e84:	3c971547 	.word	0x3c971547
 8009e88:	00000000 	.word	0x00000000
 8009e8c:	3fe62e43 	.word	0x3fe62e43
 8009e90:	fefa39ef 	.word	0xfefa39ef
 8009e94:	3fe62e42 	.word	0x3fe62e42
 8009e98:	0ca86c39 	.word	0x0ca86c39
 8009e9c:	be205c61 	.word	0xbe205c61
 8009ea0:	72bea4d0 	.word	0x72bea4d0
 8009ea4:	3e663769 	.word	0x3e663769
 8009ea8:	c5d26bf1 	.word	0xc5d26bf1
 8009eac:	3ebbbd41 	.word	0x3ebbbd41
 8009eb0:	af25de2c 	.word	0xaf25de2c
 8009eb4:	3f11566a 	.word	0x3f11566a
 8009eb8:	16bebd93 	.word	0x16bebd93
 8009ebc:	3f66c16c 	.word	0x3f66c16c
 8009ec0:	5555553e 	.word	0x5555553e
 8009ec4:	3fc55555 	.word	0x3fc55555
 8009ec8:	c2f8f359 	.word	0xc2f8f359
 8009ecc:	01a56e1f 	.word	0x01a56e1f
 8009ed0:	3fe00000 	.word	0x3fe00000
 8009ed4:	000fffff 	.word	0x000fffff
 8009ed8:	3ff00000 	.word	0x3ff00000
 8009edc:	4090cbff 	.word	0x4090cbff
 8009ee0:	3f6f3400 	.word	0x3f6f3400

08009ee4 <__ieee754_sqrt>:
 8009ee4:	f8df c150 	ldr.w	ip, [pc, #336]	; 800a038 <__ieee754_sqrt+0x154>
 8009ee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009eec:	ea3c 0c01 	bics.w	ip, ip, r1
 8009ef0:	460b      	mov	r3, r1
 8009ef2:	4606      	mov	r6, r0
 8009ef4:	460d      	mov	r5, r1
 8009ef6:	460a      	mov	r2, r1
 8009ef8:	4607      	mov	r7, r0
 8009efa:	4604      	mov	r4, r0
 8009efc:	d10e      	bne.n	8009f1c <__ieee754_sqrt+0x38>
 8009efe:	4602      	mov	r2, r0
 8009f00:	f7f6 faea 	bl	80004d8 <__aeabi_dmul>
 8009f04:	4602      	mov	r2, r0
 8009f06:	460b      	mov	r3, r1
 8009f08:	4630      	mov	r0, r6
 8009f0a:	4629      	mov	r1, r5
 8009f0c:	f7f6 f92e 	bl	800016c <__adddf3>
 8009f10:	4606      	mov	r6, r0
 8009f12:	460d      	mov	r5, r1
 8009f14:	4630      	mov	r0, r6
 8009f16:	4629      	mov	r1, r5
 8009f18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f1c:	2900      	cmp	r1, #0
 8009f1e:	dc0d      	bgt.n	8009f3c <__ieee754_sqrt+0x58>
 8009f20:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8009f24:	ea5c 0707 	orrs.w	r7, ip, r7
 8009f28:	d0f4      	beq.n	8009f14 <__ieee754_sqrt+0x30>
 8009f2a:	b139      	cbz	r1, 8009f3c <__ieee754_sqrt+0x58>
 8009f2c:	4602      	mov	r2, r0
 8009f2e:	f7f6 f91b 	bl	8000168 <__aeabi_dsub>
 8009f32:	4602      	mov	r2, r0
 8009f34:	460b      	mov	r3, r1
 8009f36:	f7f6 fbf9 	bl	800072c <__aeabi_ddiv>
 8009f3a:	e7e9      	b.n	8009f10 <__ieee754_sqrt+0x2c>
 8009f3c:	1512      	asrs	r2, r2, #20
 8009f3e:	d074      	beq.n	800a02a <__ieee754_sqrt+0x146>
 8009f40:	2000      	movs	r0, #0
 8009f42:	07d5      	lsls	r5, r2, #31
 8009f44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009f48:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 8009f4c:	bf5e      	ittt	pl
 8009f4e:	0fe3      	lsrpl	r3, r4, #31
 8009f50:	0064      	lslpl	r4, r4, #1
 8009f52:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 8009f56:	0fe3      	lsrs	r3, r4, #31
 8009f58:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8009f5c:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8009f60:	2516      	movs	r5, #22
 8009f62:	4601      	mov	r1, r0
 8009f64:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8009f68:	1076      	asrs	r6, r6, #1
 8009f6a:	0064      	lsls	r4, r4, #1
 8009f6c:	188f      	adds	r7, r1, r2
 8009f6e:	429f      	cmp	r7, r3
 8009f70:	bfde      	ittt	le
 8009f72:	1bdb      	suble	r3, r3, r7
 8009f74:	18b9      	addle	r1, r7, r2
 8009f76:	1880      	addle	r0, r0, r2
 8009f78:	005b      	lsls	r3, r3, #1
 8009f7a:	3d01      	subs	r5, #1
 8009f7c:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8009f80:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8009f84:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8009f88:	d1f0      	bne.n	8009f6c <__ieee754_sqrt+0x88>
 8009f8a:	462a      	mov	r2, r5
 8009f8c:	f04f 0e20 	mov.w	lr, #32
 8009f90:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 8009f94:	428b      	cmp	r3, r1
 8009f96:	eb07 0c05 	add.w	ip, r7, r5
 8009f9a:	dc02      	bgt.n	8009fa2 <__ieee754_sqrt+0xbe>
 8009f9c:	d113      	bne.n	8009fc6 <__ieee754_sqrt+0xe2>
 8009f9e:	45a4      	cmp	ip, r4
 8009fa0:	d811      	bhi.n	8009fc6 <__ieee754_sqrt+0xe2>
 8009fa2:	f1bc 0f00 	cmp.w	ip, #0
 8009fa6:	eb0c 0507 	add.w	r5, ip, r7
 8009faa:	da43      	bge.n	800a034 <__ieee754_sqrt+0x150>
 8009fac:	2d00      	cmp	r5, #0
 8009fae:	db41      	blt.n	800a034 <__ieee754_sqrt+0x150>
 8009fb0:	f101 0801 	add.w	r8, r1, #1
 8009fb4:	1a5b      	subs	r3, r3, r1
 8009fb6:	4641      	mov	r1, r8
 8009fb8:	45a4      	cmp	ip, r4
 8009fba:	bf88      	it	hi
 8009fbc:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8009fc0:	eba4 040c 	sub.w	r4, r4, ip
 8009fc4:	443a      	add	r2, r7
 8009fc6:	005b      	lsls	r3, r3, #1
 8009fc8:	f1be 0e01 	subs.w	lr, lr, #1
 8009fcc:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8009fd0:	ea4f 0757 	mov.w	r7, r7, lsr #1
 8009fd4:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8009fd8:	d1dc      	bne.n	8009f94 <__ieee754_sqrt+0xb0>
 8009fda:	4323      	orrs	r3, r4
 8009fdc:	d006      	beq.n	8009fec <__ieee754_sqrt+0x108>
 8009fde:	1c54      	adds	r4, r2, #1
 8009fe0:	bf0b      	itete	eq
 8009fe2:	4672      	moveq	r2, lr
 8009fe4:	3201      	addne	r2, #1
 8009fe6:	3001      	addeq	r0, #1
 8009fe8:	f022 0201 	bicne.w	r2, r2, #1
 8009fec:	1043      	asrs	r3, r0, #1
 8009fee:	07c1      	lsls	r1, r0, #31
 8009ff0:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8009ff4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8009ff8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8009ffc:	bf48      	it	mi
 8009ffe:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800a002:	4610      	mov	r0, r2
 800a004:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 800a008:	e782      	b.n	8009f10 <__ieee754_sqrt+0x2c>
 800a00a:	0ae3      	lsrs	r3, r4, #11
 800a00c:	3915      	subs	r1, #21
 800a00e:	0564      	lsls	r4, r4, #21
 800a010:	2b00      	cmp	r3, #0
 800a012:	d0fa      	beq.n	800a00a <__ieee754_sqrt+0x126>
 800a014:	02de      	lsls	r6, r3, #11
 800a016:	d50a      	bpl.n	800a02e <__ieee754_sqrt+0x14a>
 800a018:	f1c2 0020 	rsb	r0, r2, #32
 800a01c:	fa24 f000 	lsr.w	r0, r4, r0
 800a020:	1e55      	subs	r5, r2, #1
 800a022:	4094      	lsls	r4, r2
 800a024:	4303      	orrs	r3, r0
 800a026:	1b4a      	subs	r2, r1, r5
 800a028:	e78a      	b.n	8009f40 <__ieee754_sqrt+0x5c>
 800a02a:	4611      	mov	r1, r2
 800a02c:	e7f0      	b.n	800a010 <__ieee754_sqrt+0x12c>
 800a02e:	005b      	lsls	r3, r3, #1
 800a030:	3201      	adds	r2, #1
 800a032:	e7ef      	b.n	800a014 <__ieee754_sqrt+0x130>
 800a034:	4688      	mov	r8, r1
 800a036:	e7bd      	b.n	8009fb4 <__ieee754_sqrt+0xd0>
 800a038:	7ff00000 	.word	0x7ff00000

0800a03c <fabs>:
 800a03c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800a040:	4770      	bx	lr

0800a042 <finite>:
 800a042:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800a046:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800a04a:	0fc0      	lsrs	r0, r0, #31
 800a04c:	4770      	bx	lr
	...

0800a050 <nan>:
 800a050:	2000      	movs	r0, #0
 800a052:	4901      	ldr	r1, [pc, #4]	; (800a058 <nan+0x8>)
 800a054:	4770      	bx	lr
 800a056:	bf00      	nop
 800a058:	7ff80000 	.word	0x7ff80000

0800a05c <rint>:
 800a05c:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
 800a060:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a062:	f2ac 37ff 	subw	r7, ip, #1023	; 0x3ff
 800a066:	2f13      	cmp	r7, #19
 800a068:	4602      	mov	r2, r0
 800a06a:	460b      	mov	r3, r1
 800a06c:	460c      	mov	r4, r1
 800a06e:	4605      	mov	r5, r0
 800a070:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 800a074:	dc59      	bgt.n	800a12a <rint+0xce>
 800a076:	2f00      	cmp	r7, #0
 800a078:	da2a      	bge.n	800a0d0 <rint+0x74>
 800a07a:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800a07e:	4301      	orrs	r1, r0
 800a080:	d022      	beq.n	800a0c8 <rint+0x6c>
 800a082:	f3c3 0113 	ubfx	r1, r3, #0, #20
 800a086:	4301      	orrs	r1, r0
 800a088:	424d      	negs	r5, r1
 800a08a:	430d      	orrs	r5, r1
 800a08c:	4936      	ldr	r1, [pc, #216]	; (800a168 <rint+0x10c>)
 800a08e:	0c5c      	lsrs	r4, r3, #17
 800a090:	0b2d      	lsrs	r5, r5, #12
 800a092:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
 800a096:	0464      	lsls	r4, r4, #17
 800a098:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800a09c:	ea45 0304 	orr.w	r3, r5, r4
 800a0a0:	e9d1 4500 	ldrd	r4, r5, [r1]
 800a0a4:	4620      	mov	r0, r4
 800a0a6:	4629      	mov	r1, r5
 800a0a8:	f7f6 f860 	bl	800016c <__adddf3>
 800a0ac:	e9cd 0100 	strd	r0, r1, [sp]
 800a0b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a0b4:	462b      	mov	r3, r5
 800a0b6:	4622      	mov	r2, r4
 800a0b8:	f7f6 f856 	bl	8000168 <__aeabi_dsub>
 800a0bc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a0c0:	ea43 71c6 	orr.w	r1, r3, r6, lsl #31
 800a0c4:	4602      	mov	r2, r0
 800a0c6:	460b      	mov	r3, r1
 800a0c8:	4610      	mov	r0, r2
 800a0ca:	4619      	mov	r1, r3
 800a0cc:	b003      	add	sp, #12
 800a0ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a0d0:	4926      	ldr	r1, [pc, #152]	; (800a16c <rint+0x110>)
 800a0d2:	4139      	asrs	r1, r7
 800a0d4:	ea03 0001 	and.w	r0, r3, r1
 800a0d8:	4310      	orrs	r0, r2
 800a0da:	d0f5      	beq.n	800a0c8 <rint+0x6c>
 800a0dc:	084b      	lsrs	r3, r1, #1
 800a0de:	ea04 0151 	and.w	r1, r4, r1, lsr #1
 800a0e2:	ea52 0501 	orrs.w	r5, r2, r1
 800a0e6:	d00c      	beq.n	800a102 <rint+0xa6>
 800a0e8:	ea24 0303 	bic.w	r3, r4, r3
 800a0ec:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 800a0f0:	2f13      	cmp	r7, #19
 800a0f2:	bf0c      	ite	eq
 800a0f4:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
 800a0f8:	2500      	movne	r5, #0
 800a0fa:	fa44 f707 	asr.w	r7, r4, r7
 800a0fe:	ea43 0407 	orr.w	r4, r3, r7
 800a102:	4919      	ldr	r1, [pc, #100]	; (800a168 <rint+0x10c>)
 800a104:	4623      	mov	r3, r4
 800a106:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 800a10a:	462a      	mov	r2, r5
 800a10c:	e9d6 4500 	ldrd	r4, r5, [r6]
 800a110:	4620      	mov	r0, r4
 800a112:	4629      	mov	r1, r5
 800a114:	f7f6 f82a 	bl	800016c <__adddf3>
 800a118:	e9cd 0100 	strd	r0, r1, [sp]
 800a11c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a120:	4622      	mov	r2, r4
 800a122:	462b      	mov	r3, r5
 800a124:	f7f6 f820 	bl	8000168 <__aeabi_dsub>
 800a128:	e7cc      	b.n	800a0c4 <rint+0x68>
 800a12a:	2f33      	cmp	r7, #51	; 0x33
 800a12c:	dd05      	ble.n	800a13a <rint+0xde>
 800a12e:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 800a132:	d1c9      	bne.n	800a0c8 <rint+0x6c>
 800a134:	f7f6 f81a 	bl	800016c <__adddf3>
 800a138:	e7c4      	b.n	800a0c4 <rint+0x68>
 800a13a:	f04f 31ff 	mov.w	r1, #4294967295
 800a13e:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 800a142:	fa21 f10c 	lsr.w	r1, r1, ip
 800a146:	4208      	tst	r0, r1
 800a148:	d0be      	beq.n	800a0c8 <rint+0x6c>
 800a14a:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
 800a14e:	bf18      	it	ne
 800a150:	f04f 4580 	movne.w	r5, #1073741824	; 0x40000000
 800a154:	ea4f 0351 	mov.w	r3, r1, lsr #1
 800a158:	bf1e      	ittt	ne
 800a15a:	ea20 0303 	bicne.w	r3, r0, r3
 800a15e:	fa45 fc0c 	asrne.w	ip, r5, ip
 800a162:	ea43 050c 	orrne.w	r5, r3, ip
 800a166:	e7cc      	b.n	800a102 <rint+0xa6>
 800a168:	0800ae08 	.word	0x0800ae08
 800a16c:	000fffff 	.word	0x000fffff

0800a170 <scalbn>:
 800a170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a172:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800a176:	4604      	mov	r4, r0
 800a178:	460d      	mov	r5, r1
 800a17a:	4617      	mov	r7, r2
 800a17c:	460b      	mov	r3, r1
 800a17e:	b996      	cbnz	r6, 800a1a6 <scalbn+0x36>
 800a180:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a184:	4303      	orrs	r3, r0
 800a186:	d039      	beq.n	800a1fc <scalbn+0x8c>
 800a188:	4b35      	ldr	r3, [pc, #212]	; (800a260 <scalbn+0xf0>)
 800a18a:	2200      	movs	r2, #0
 800a18c:	f7f6 f9a4 	bl	80004d8 <__aeabi_dmul>
 800a190:	4b34      	ldr	r3, [pc, #208]	; (800a264 <scalbn+0xf4>)
 800a192:	4604      	mov	r4, r0
 800a194:	429f      	cmp	r7, r3
 800a196:	460d      	mov	r5, r1
 800a198:	da0f      	bge.n	800a1ba <scalbn+0x4a>
 800a19a:	a32d      	add	r3, pc, #180	; (adr r3, 800a250 <scalbn+0xe0>)
 800a19c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1a0:	f7f6 f99a 	bl	80004d8 <__aeabi_dmul>
 800a1a4:	e006      	b.n	800a1b4 <scalbn+0x44>
 800a1a6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800a1aa:	4296      	cmp	r6, r2
 800a1ac:	d10a      	bne.n	800a1c4 <scalbn+0x54>
 800a1ae:	4602      	mov	r2, r0
 800a1b0:	f7f5 ffdc 	bl	800016c <__adddf3>
 800a1b4:	4604      	mov	r4, r0
 800a1b6:	460d      	mov	r5, r1
 800a1b8:	e020      	b.n	800a1fc <scalbn+0x8c>
 800a1ba:	460b      	mov	r3, r1
 800a1bc:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800a1c0:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800a1c4:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800a1c8:	19b9      	adds	r1, r7, r6
 800a1ca:	4291      	cmp	r1, r2
 800a1cc:	dd0e      	ble.n	800a1ec <scalbn+0x7c>
 800a1ce:	a322      	add	r3, pc, #136	; (adr r3, 800a258 <scalbn+0xe8>)
 800a1d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1d4:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800a1d8:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800a1dc:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800a1e0:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800a1e4:	4820      	ldr	r0, [pc, #128]	; (800a268 <scalbn+0xf8>)
 800a1e6:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800a1ea:	e7d9      	b.n	800a1a0 <scalbn+0x30>
 800a1ec:	2900      	cmp	r1, #0
 800a1ee:	dd08      	ble.n	800a202 <scalbn+0x92>
 800a1f0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a1f4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a1f8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800a1fc:	4620      	mov	r0, r4
 800a1fe:	4629      	mov	r1, r5
 800a200:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a202:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800a206:	da16      	bge.n	800a236 <scalbn+0xc6>
 800a208:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a20c:	429f      	cmp	r7, r3
 800a20e:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800a212:	dd08      	ble.n	800a226 <scalbn+0xb6>
 800a214:	4c15      	ldr	r4, [pc, #84]	; (800a26c <scalbn+0xfc>)
 800a216:	4814      	ldr	r0, [pc, #80]	; (800a268 <scalbn+0xf8>)
 800a218:	f363 74df 	bfi	r4, r3, #31, #1
 800a21c:	a30e      	add	r3, pc, #56	; (adr r3, 800a258 <scalbn+0xe8>)
 800a21e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a222:	4621      	mov	r1, r4
 800a224:	e7bc      	b.n	800a1a0 <scalbn+0x30>
 800a226:	4c12      	ldr	r4, [pc, #72]	; (800a270 <scalbn+0x100>)
 800a228:	4812      	ldr	r0, [pc, #72]	; (800a274 <scalbn+0x104>)
 800a22a:	f363 74df 	bfi	r4, r3, #31, #1
 800a22e:	a308      	add	r3, pc, #32	; (adr r3, 800a250 <scalbn+0xe0>)
 800a230:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a234:	e7f5      	b.n	800a222 <scalbn+0xb2>
 800a236:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a23a:	3136      	adds	r1, #54	; 0x36
 800a23c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a240:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800a244:	4620      	mov	r0, r4
 800a246:	4629      	mov	r1, r5
 800a248:	2200      	movs	r2, #0
 800a24a:	4b0b      	ldr	r3, [pc, #44]	; (800a278 <scalbn+0x108>)
 800a24c:	e7a8      	b.n	800a1a0 <scalbn+0x30>
 800a24e:	bf00      	nop
 800a250:	c2f8f359 	.word	0xc2f8f359
 800a254:	01a56e1f 	.word	0x01a56e1f
 800a258:	8800759c 	.word	0x8800759c
 800a25c:	7e37e43c 	.word	0x7e37e43c
 800a260:	43500000 	.word	0x43500000
 800a264:	ffff3cb0 	.word	0xffff3cb0
 800a268:	8800759c 	.word	0x8800759c
 800a26c:	7e37e43c 	.word	0x7e37e43c
 800a270:	01a56e1f 	.word	0x01a56e1f
 800a274:	c2f8f359 	.word	0xc2f8f359
 800a278:	3c900000 	.word	0x3c900000

0800a27c <_init>:
 800a27c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a27e:	bf00      	nop
 800a280:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a282:	bc08      	pop	{r3}
 800a284:	469e      	mov	lr, r3
 800a286:	4770      	bx	lr

0800a288 <_fini>:
 800a288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a28a:	bf00      	nop
 800a28c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a28e:	bc08      	pop	{r3}
 800a290:	469e      	mov	lr, r3
 800a292:	4770      	bx	lr
