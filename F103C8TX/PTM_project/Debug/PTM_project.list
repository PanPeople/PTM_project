
PTM_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030a0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000065c  080031ac  080031ac  000131ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003808  08003808  000200e0  2**0
                  CONTENTS
  4 .ARM          00000000  08003808  08003808  000200e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003808  08003808  000200e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003808  08003808  00013808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800380c  0800380c  0001380c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e0  20000000  08003810  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000908  200000e0  080038f0  000200e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200009e8  080038f0  000209e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e60a  00000000  00000000  00020109  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002130  00000000  00000000  0002e713  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ec0  00000000  00000000  00030848  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000dc0  00000000  00000000  00031708  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017adb  00000000  00000000  000324c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c649  00000000  00000000  00049fa3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00089d8b  00000000  00000000  000565ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e0377  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000409c  00000000  00000000  000e03f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000e0 	.word	0x200000e0
 8000128:	00000000 	.word	0x00000000
 800012c:	08003194 	.word	0x08003194

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000e4 	.word	0x200000e4
 8000148:	08003194 	.word	0x08003194

0800014c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000152:	f107 0310 	add.w	r3, r7, #16
 8000156:	2200      	movs	r2, #0
 8000158:	601a      	str	r2, [r3, #0]
 800015a:	605a      	str	r2, [r3, #4]
 800015c:	609a      	str	r2, [r3, #8]
 800015e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000160:	4b37      	ldr	r3, [pc, #220]	; (8000240 <MX_GPIO_Init+0xf4>)
 8000162:	699b      	ldr	r3, [r3, #24]
 8000164:	4a36      	ldr	r2, [pc, #216]	; (8000240 <MX_GPIO_Init+0xf4>)
 8000166:	f043 0310 	orr.w	r3, r3, #16
 800016a:	6193      	str	r3, [r2, #24]
 800016c:	4b34      	ldr	r3, [pc, #208]	; (8000240 <MX_GPIO_Init+0xf4>)
 800016e:	699b      	ldr	r3, [r3, #24]
 8000170:	f003 0310 	and.w	r3, r3, #16
 8000174:	60fb      	str	r3, [r7, #12]
 8000176:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000178:	4b31      	ldr	r3, [pc, #196]	; (8000240 <MX_GPIO_Init+0xf4>)
 800017a:	699b      	ldr	r3, [r3, #24]
 800017c:	4a30      	ldr	r2, [pc, #192]	; (8000240 <MX_GPIO_Init+0xf4>)
 800017e:	f043 0320 	orr.w	r3, r3, #32
 8000182:	6193      	str	r3, [r2, #24]
 8000184:	4b2e      	ldr	r3, [pc, #184]	; (8000240 <MX_GPIO_Init+0xf4>)
 8000186:	699b      	ldr	r3, [r3, #24]
 8000188:	f003 0320 	and.w	r3, r3, #32
 800018c:	60bb      	str	r3, [r7, #8]
 800018e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000190:	4b2b      	ldr	r3, [pc, #172]	; (8000240 <MX_GPIO_Init+0xf4>)
 8000192:	699b      	ldr	r3, [r3, #24]
 8000194:	4a2a      	ldr	r2, [pc, #168]	; (8000240 <MX_GPIO_Init+0xf4>)
 8000196:	f043 0304 	orr.w	r3, r3, #4
 800019a:	6193      	str	r3, [r2, #24]
 800019c:	4b28      	ldr	r3, [pc, #160]	; (8000240 <MX_GPIO_Init+0xf4>)
 800019e:	699b      	ldr	r3, [r3, #24]
 80001a0:	f003 0304 	and.w	r3, r3, #4
 80001a4:	607b      	str	r3, [r7, #4]
 80001a6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001a8:	4b25      	ldr	r3, [pc, #148]	; (8000240 <MX_GPIO_Init+0xf4>)
 80001aa:	699b      	ldr	r3, [r3, #24]
 80001ac:	4a24      	ldr	r2, [pc, #144]	; (8000240 <MX_GPIO_Init+0xf4>)
 80001ae:	f043 0308 	orr.w	r3, r3, #8
 80001b2:	6193      	str	r3, [r2, #24]
 80001b4:	4b22      	ldr	r3, [pc, #136]	; (8000240 <MX_GPIO_Init+0xf4>)
 80001b6:	699b      	ldr	r3, [r3, #24]
 80001b8:	f003 0308 	and.w	r3, r3, #8
 80001bc:	603b      	str	r3, [r7, #0]
 80001be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80001c0:	2200      	movs	r2, #0
 80001c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001c6:	481f      	ldr	r0, [pc, #124]	; (8000244 <MX_GPIO_Init+0xf8>)
 80001c8:	f000 ffda 	bl	8001180 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80001cc:	2200      	movs	r2, #0
 80001ce:	2140      	movs	r1, #64	; 0x40
 80001d0:	481d      	ldr	r0, [pc, #116]	; (8000248 <MX_GPIO_Init+0xfc>)
 80001d2:	f000 ffd5 	bl	8001180 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RST_Pin|DC_Pin, GPIO_PIN_RESET);
 80001d6:	2200      	movs	r2, #0
 80001d8:	2103      	movs	r1, #3
 80001da:	481c      	ldr	r0, [pc, #112]	; (800024c <MX_GPIO_Init+0x100>)
 80001dc:	f000 ffd0 	bl	8001180 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80001e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001e6:	2301      	movs	r3, #1
 80001e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001ea:	2300      	movs	r3, #0
 80001ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001ee:	2302      	movs	r3, #2
 80001f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80001f2:	f107 0310 	add.w	r3, r7, #16
 80001f6:	4619      	mov	r1, r3
 80001f8:	4812      	ldr	r0, [pc, #72]	; (8000244 <MX_GPIO_Init+0xf8>)
 80001fa:	f000 fe67 	bl	8000ecc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_Pin;
 80001fe:	2340      	movs	r3, #64	; 0x40
 8000200:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000202:	2301      	movs	r3, #1
 8000204:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000206:	2300      	movs	r3, #0
 8000208:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800020a:	2302      	movs	r3, #2
 800020c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 800020e:	f107 0310 	add.w	r3, r7, #16
 8000212:	4619      	mov	r1, r3
 8000214:	480c      	ldr	r0, [pc, #48]	; (8000248 <MX_GPIO_Init+0xfc>)
 8000216:	f000 fe59 	bl	8000ecc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = RST_Pin|DC_Pin;
 800021a:	2303      	movs	r3, #3
 800021c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800021e:	2301      	movs	r3, #1
 8000220:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000222:	2300      	movs	r3, #0
 8000224:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000226:	2302      	movs	r3, #2
 8000228:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800022a:	f107 0310 	add.w	r3, r7, #16
 800022e:	4619      	mov	r1, r3
 8000230:	4806      	ldr	r0, [pc, #24]	; (800024c <MX_GPIO_Init+0x100>)
 8000232:	f000 fe4b 	bl	8000ecc <HAL_GPIO_Init>

}
 8000236:	bf00      	nop
 8000238:	3720      	adds	r7, #32
 800023a:	46bd      	mov	sp, r7
 800023c:	bd80      	pop	{r7, pc}
 800023e:	bf00      	nop
 8000240:	40021000 	.word	0x40021000
 8000244:	40011000 	.word	0x40011000
 8000248:	40010800 	.word	0x40010800
 800024c:	40010c00 	.word	0x40010c00

08000250 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000254:	4b12      	ldr	r3, [pc, #72]	; (80002a0 <MX_I2C1_Init+0x50>)
 8000256:	4a13      	ldr	r2, [pc, #76]	; (80002a4 <MX_I2C1_Init+0x54>)
 8000258:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800025a:	4b11      	ldr	r3, [pc, #68]	; (80002a0 <MX_I2C1_Init+0x50>)
 800025c:	4a12      	ldr	r2, [pc, #72]	; (80002a8 <MX_I2C1_Init+0x58>)
 800025e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000260:	4b0f      	ldr	r3, [pc, #60]	; (80002a0 <MX_I2C1_Init+0x50>)
 8000262:	2200      	movs	r2, #0
 8000264:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000266:	4b0e      	ldr	r3, [pc, #56]	; (80002a0 <MX_I2C1_Init+0x50>)
 8000268:	2200      	movs	r2, #0
 800026a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800026c:	4b0c      	ldr	r3, [pc, #48]	; (80002a0 <MX_I2C1_Init+0x50>)
 800026e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000272:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000274:	4b0a      	ldr	r3, [pc, #40]	; (80002a0 <MX_I2C1_Init+0x50>)
 8000276:	2200      	movs	r2, #0
 8000278:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800027a:	4b09      	ldr	r3, [pc, #36]	; (80002a0 <MX_I2C1_Init+0x50>)
 800027c:	2200      	movs	r2, #0
 800027e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000280:	4b07      	ldr	r3, [pc, #28]	; (80002a0 <MX_I2C1_Init+0x50>)
 8000282:	2200      	movs	r2, #0
 8000284:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000286:	4b06      	ldr	r3, [pc, #24]	; (80002a0 <MX_I2C1_Init+0x50>)
 8000288:	2200      	movs	r2, #0
 800028a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800028c:	4804      	ldr	r0, [pc, #16]	; (80002a0 <MX_I2C1_Init+0x50>)
 800028e:	f000 ffa9 	bl	80011e4 <HAL_I2C_Init>
 8000292:	4603      	mov	r3, r0
 8000294:	2b00      	cmp	r3, #0
 8000296:	d001      	beq.n	800029c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000298:	f000 fada 	bl	8000850 <Error_Handler>
  }

}
 800029c:	bf00      	nop
 800029e:	bd80      	pop	{r7, pc}
 80002a0:	2000010c 	.word	0x2000010c
 80002a4:	40005400 	.word	0x40005400
 80002a8:	000186a0 	.word	0x000186a0

080002ac <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b088      	sub	sp, #32
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002b4:	f107 0310 	add.w	r3, r7, #16
 80002b8:	2200      	movs	r2, #0
 80002ba:	601a      	str	r2, [r3, #0]
 80002bc:	605a      	str	r2, [r3, #4]
 80002be:	609a      	str	r2, [r3, #8]
 80002c0:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	4a15      	ldr	r2, [pc, #84]	; (800031c <HAL_I2C_MspInit+0x70>)
 80002c8:	4293      	cmp	r3, r2
 80002ca:	d123      	bne.n	8000314 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80002cc:	4b14      	ldr	r3, [pc, #80]	; (8000320 <HAL_I2C_MspInit+0x74>)
 80002ce:	699b      	ldr	r3, [r3, #24]
 80002d0:	4a13      	ldr	r2, [pc, #76]	; (8000320 <HAL_I2C_MspInit+0x74>)
 80002d2:	f043 0308 	orr.w	r3, r3, #8
 80002d6:	6193      	str	r3, [r2, #24]
 80002d8:	4b11      	ldr	r3, [pc, #68]	; (8000320 <HAL_I2C_MspInit+0x74>)
 80002da:	699b      	ldr	r3, [r3, #24]
 80002dc:	f003 0308 	and.w	r3, r3, #8
 80002e0:	60fb      	str	r3, [r7, #12]
 80002e2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80002e4:	23c0      	movs	r3, #192	; 0xc0
 80002e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80002e8:	2312      	movs	r3, #18
 80002ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80002ec:	2303      	movs	r3, #3
 80002ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002f0:	f107 0310 	add.w	r3, r7, #16
 80002f4:	4619      	mov	r1, r3
 80002f6:	480b      	ldr	r0, [pc, #44]	; (8000324 <HAL_I2C_MspInit+0x78>)
 80002f8:	f000 fde8 	bl	8000ecc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80002fc:	4b08      	ldr	r3, [pc, #32]	; (8000320 <HAL_I2C_MspInit+0x74>)
 80002fe:	69db      	ldr	r3, [r3, #28]
 8000300:	4a07      	ldr	r2, [pc, #28]	; (8000320 <HAL_I2C_MspInit+0x74>)
 8000302:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000306:	61d3      	str	r3, [r2, #28]
 8000308:	4b05      	ldr	r3, [pc, #20]	; (8000320 <HAL_I2C_MspInit+0x74>)
 800030a:	69db      	ldr	r3, [r3, #28]
 800030c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000310:	60bb      	str	r3, [r7, #8]
 8000312:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000314:	bf00      	nop
 8000316:	3720      	adds	r7, #32
 8000318:	46bd      	mov	sp, r7
 800031a:	bd80      	pop	{r7, pc}
 800031c:	40005400 	.word	0x40005400
 8000320:	40021000 	.word	0x40021000
 8000324:	40010c00 	.word	0x40010c00

08000328 <LCD_Initialize>:

#include "main.h"
#include "lcd_5110.h"


void LCD_Initialize(SPI_HandleTypeDef *spi){
 8000328:	b580      	push	{r7, lr}
 800032a:	b082      	sub	sp, #8
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);
 8000330:	2200      	movs	r2, #0
 8000332:	2101      	movs	r1, #1
 8000334:	4813      	ldr	r0, [pc, #76]	; (8000384 <LCD_Initialize+0x5c>)
 8000336:	f000 ff23 	bl	8001180 <HAL_GPIO_WritePin>
	HAL_Delay(1);//only needed once xD
 800033a:	2001      	movs	r0, #1
 800033c:	f000 fc96 	bl	8000c6c <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8000340:	2201      	movs	r2, #1
 8000342:	2101      	movs	r1, #1
 8000344:	480f      	ldr	r0, [pc, #60]	; (8000384 <LCD_Initialize+0x5c>)
 8000346:	f000 ff1b 	bl	8001180 <HAL_GPIO_WritePin>

    LCD_Command(spi, 0x21);
 800034a:	2121      	movs	r1, #33	; 0x21
 800034c:	6878      	ldr	r0, [r7, #4]
 800034e:	f000 f81b 	bl	8000388 <LCD_Command>
    LCD_Command(spi,0xB1);
 8000352:	21b1      	movs	r1, #177	; 0xb1
 8000354:	6878      	ldr	r0, [r7, #4]
 8000356:	f000 f817 	bl	8000388 <LCD_Command>
    LCD_Command(spi, 0x04);
 800035a:	2104      	movs	r1, #4
 800035c:	6878      	ldr	r0, [r7, #4]
 800035e:	f000 f813 	bl	8000388 <LCD_Command>
    LCD_Command(spi, 0x14);
 8000362:	2114      	movs	r1, #20
 8000364:	6878      	ldr	r0, [r7, #4]
 8000366:	f000 f80f 	bl	8000388 <LCD_Command>
    //LCD_Command(0x80 | 0x2f);
    LCD_Command(spi, 0x20);
 800036a:	2120      	movs	r1, #32
 800036c:	6878      	ldr	r0, [r7, #4]
 800036e:	f000 f80b 	bl	8000388 <LCD_Command>
    LCD_Command(spi, 0x0C);
 8000372:	210c      	movs	r1, #12
 8000374:	6878      	ldr	r0, [r7, #4]
 8000376:	f000 f807 	bl	8000388 <LCD_Command>
//	LCD_Command(0x14);
//	LCD_Command(0x80 | 0x2f); //Ustawienie kontrastu
//	LCD_Command(0x20);
//	LCD_Command(0x0c);

}
 800037a:	bf00      	nop
 800037c:	3708      	adds	r7, #8
 800037e:	46bd      	mov	sp, r7
 8000380:	bd80      	pop	{r7, pc}
 8000382:	bf00      	nop
 8000384:	40010c00 	.word	0x40010c00

08000388 <LCD_Command>:

void LCD_Command(SPI_HandleTypeDef* spi,uint8_t cmd){
 8000388:	b580      	push	{r7, lr}
 800038a:	b082      	sub	sp, #8
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
 8000390:	460b      	mov	r3, r1
 8000392:	70fb      	strb	r3, [r7, #3]

	HAL_GPIO_WritePin(LCD_CE_PORT, LCD_CE_PIN, GPIO_PIN_RESET);
 8000394:	2200      	movs	r2, #0
 8000396:	2140      	movs	r1, #64	; 0x40
 8000398:	480e      	ldr	r0, [pc, #56]	; (80003d4 <LCD_Command+0x4c>)
 800039a:	f000 fef1 	bl	8001180 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, LCD_C);
 800039e:	2200      	movs	r2, #0
 80003a0:	2102      	movs	r1, #2
 80003a2:	480d      	ldr	r0, [pc, #52]	; (80003d8 <LCD_Command+0x50>)
 80003a4:	f000 feec 	bl	8001180 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(spi, &cmd, 1, HAL_MAX_DELAY);
 80003a8:	1cf9      	adds	r1, r7, #3
 80003aa:	f04f 33ff 	mov.w	r3, #4294967295
 80003ae:	2201      	movs	r2, #1
 80003b0:	6878      	ldr	r0, [r7, #4]
 80003b2:	f001 fcdb 	bl	8001d6c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CE_PORT, LCD_CE_PIN, GPIO_PIN_SET);
 80003b6:	2201      	movs	r2, #1
 80003b8:	2140      	movs	r1, #64	; 0x40
 80003ba:	4806      	ldr	r0, [pc, #24]	; (80003d4 <LCD_Command+0x4c>)
 80003bc:	f000 fee0 	bl	8001180 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 80003c0:	2201      	movs	r2, #1
 80003c2:	2102      	movs	r1, #2
 80003c4:	4804      	ldr	r0, [pc, #16]	; (80003d8 <LCD_Command+0x50>)
 80003c6:	f000 fedb 	bl	8001180 <HAL_GPIO_WritePin>

}
 80003ca:	bf00      	nop
 80003cc:	3708      	adds	r7, #8
 80003ce:	46bd      	mov	sp, r7
 80003d0:	bd80      	pop	{r7, pc}
 80003d2:	bf00      	nop
 80003d4:	40010800 	.word	0x40010800
 80003d8:	40010c00 	.word	0x40010c00

080003dc <LCD_Data>:

void LCD_Data(SPI_HandleTypeDef *spi,uint8_t* cmd){
 80003dc:	b580      	push	{r7, lr}
 80003de:	b082      	sub	sp, #8
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
 80003e4:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, LCD_D);
 80003e6:	2201      	movs	r2, #1
 80003e8:	2102      	movs	r1, #2
 80003ea:	480c      	ldr	r0, [pc, #48]	; (800041c <LCD_Data+0x40>)
 80003ec:	f000 fec8 	bl	8001180 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CE_PORT, LCD_CE_PIN, GPIO_PIN_RESET);
 80003f0:	2200      	movs	r2, #0
 80003f2:	2140      	movs	r1, #64	; 0x40
 80003f4:	480a      	ldr	r0, [pc, #40]	; (8000420 <LCD_Data+0x44>)
 80003f6:	f000 fec3 	bl	8001180 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(spi, cmd, LCD_X*LCD_Y/8, HAL_MAX_DELAY);
 80003fa:	f04f 33ff 	mov.w	r3, #4294967295
 80003fe:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8000402:	6839      	ldr	r1, [r7, #0]
 8000404:	6878      	ldr	r0, [r7, #4]
 8000406:	f001 fcb1 	bl	8001d6c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CE_PORT, LCD_CE_PIN, GPIO_PIN_SET);
 800040a:	2201      	movs	r2, #1
 800040c:	2140      	movs	r1, #64	; 0x40
 800040e:	4804      	ldr	r0, [pc, #16]	; (8000420 <LCD_Data+0x44>)
 8000410:	f000 feb6 	bl	8001180 <HAL_GPIO_WritePin>

}
 8000414:	bf00      	nop
 8000416:	3708      	adds	r7, #8
 8000418:	46bd      	mov	sp, r7
 800041a:	bd80      	pop	{r7, pc}
 800041c:	40010c00 	.word	0x40010c00
 8000420:	40010800 	.word	0x40010800

08000424 <LCD_draw_pixel>:
		LCD_Data_Byte(spi , tmp);
	}


}
void LCD_draw_pixel(uint8_t buffer[],uint8_t x, uint8_t y){
 8000424:	b480      	push	{r7}
 8000426:	b085      	sub	sp, #20
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
 800042c:	460b      	mov	r3, r1
 800042e:	70fb      	strb	r3, [r7, #3]
 8000430:	4613      	mov	r3, r2
 8000432:	70bb      	strb	r3, [r7, #2]


    if (x >= LCD_X){
 8000434:	78fb      	ldrb	r3, [r7, #3]
 8000436:	2b53      	cmp	r3, #83	; 0x53
 8000438:	d901      	bls.n	800043e <LCD_draw_pixel+0x1a>
    	x = LCD_X-1;
 800043a:	2353      	movs	r3, #83	; 0x53
 800043c:	70fb      	strb	r3, [r7, #3]

    if (y < 0){
    	y = 0;
    }

    if (y >= LCD_Y){
 800043e:	78bb      	ldrb	r3, [r7, #2]
 8000440:	2b2f      	cmp	r3, #47	; 0x2f
 8000442:	d901      	bls.n	8000448 <LCD_draw_pixel+0x24>
    	y = LCD_Y-1;
 8000444:	232f      	movs	r3, #47	; 0x2f
 8000446:	70bb      	strb	r3, [r7, #2]
    }



    uint16_t i = (uint16_t)(y/8)*LCD_X + x;
 8000448:	78bb      	ldrb	r3, [r7, #2]
 800044a:	08db      	lsrs	r3, r3, #3
 800044c:	b2db      	uxtb	r3, r3
 800044e:	b29b      	uxth	r3, r3
 8000450:	461a      	mov	r2, r3
 8000452:	0052      	lsls	r2, r2, #1
 8000454:	4413      	add	r3, r2
 8000456:	461a      	mov	r2, r3
 8000458:	00d2      	lsls	r2, r2, #3
 800045a:	1ad3      	subs	r3, r2, r3
 800045c:	009b      	lsls	r3, r3, #2
 800045e:	b29a      	uxth	r2, r3
 8000460:	78fb      	ldrb	r3, [r7, #3]
 8000462:	b29b      	uxth	r3, r3
 8000464:	4413      	add	r3, r2
 8000466:	81fb      	strh	r3, [r7, #14]

    uint16_t bit_counter = y%8;
 8000468:	78bb      	ldrb	r3, [r7, #2]
 800046a:	b29b      	uxth	r3, r3
 800046c:	f003 0307 	and.w	r3, r3, #7
 8000470:	81bb      	strh	r3, [r7, #12]
    uint16_t bit_value = buffer[i];
 8000472:	89fb      	ldrh	r3, [r7, #14]
 8000474:	687a      	ldr	r2, [r7, #4]
 8000476:	4413      	add	r3, r2
 8000478:	781b      	ldrb	r3, [r3, #0]
 800047a:	817b      	strh	r3, [r7, #10]
    bit_value |= (1<< bit_counter);
 800047c:	89bb      	ldrh	r3, [r7, #12]
 800047e:	2201      	movs	r2, #1
 8000480:	fa02 f303 	lsl.w	r3, r2, r3
 8000484:	b21a      	sxth	r2, r3
 8000486:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800048a:	4313      	orrs	r3, r2
 800048c:	b21b      	sxth	r3, r3
 800048e:	817b      	strh	r3, [r7, #10]

    buffer[i]=(bit_value);
 8000490:	89fb      	ldrh	r3, [r7, #14]
 8000492:	687a      	ldr	r2, [r7, #4]
 8000494:	4413      	add	r3, r2
 8000496:	897a      	ldrh	r2, [r7, #10]
 8000498:	b2d2      	uxtb	r2, r2
 800049a:	701a      	strb	r2, [r3, #0]


}
 800049c:	bf00      	nop
 800049e:	3714      	adds	r7, #20
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bc80      	pop	{r7}
 80004a4:	4770      	bx	lr

080004a6 <LCD_Clear_Buffer>:



void LCD_Clear_Buffer(uint8_t buffer[]){
 80004a6:	b480      	push	{r7}
 80004a8:	b085      	sub	sp, #20
 80004aa:	af00      	add	r7, sp, #0
 80004ac:	6078      	str	r0, [r7, #4]

	for(uint16_t i = 0; i < (LCD_X*LCD_Y/8); i ++){
 80004ae:	2300      	movs	r3, #0
 80004b0:	81fb      	strh	r3, [r7, #14]
 80004b2:	e007      	b.n	80004c4 <LCD_Clear_Buffer+0x1e>
		buffer[i]= 0x00;
 80004b4:	89fb      	ldrh	r3, [r7, #14]
 80004b6:	687a      	ldr	r2, [r7, #4]
 80004b8:	4413      	add	r3, r2
 80004ba:	2200      	movs	r2, #0
 80004bc:	701a      	strb	r2, [r3, #0]
	for(uint16_t i = 0; i < (LCD_X*LCD_Y/8); i ++){
 80004be:	89fb      	ldrh	r3, [r7, #14]
 80004c0:	3301      	adds	r3, #1
 80004c2:	81fb      	strh	r3, [r7, #14]
 80004c4:	89fb      	ldrh	r3, [r7, #14]
 80004c6:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 80004ca:	d3f3      	bcc.n	80004b4 <LCD_Clear_Buffer+0xe>
	}
}
 80004cc:	bf00      	nop
 80004ce:	3714      	adds	r7, #20
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bc80      	pop	{r7}
 80004d4:	4770      	bx	lr
	...

080004d8 <lcd_draw_text>:


void lcd_draw_text(int row, int col, const char* text,uint8_t buffer[])
{
 80004d8:	b480      	push	{r7}
 80004da:	b089      	sub	sp, #36	; 0x24
 80004dc:	af00      	add	r7, sp, #0
 80004de:	60f8      	str	r0, [r7, #12]
 80004e0:	60b9      	str	r1, [r7, #8]
 80004e2:	607a      	str	r2, [r7, #4]
 80004e4:	603b      	str	r3, [r7, #0]
	int i;
	uint8_t* pbuf = &buffer[row * 84 + col];
 80004e6:	68fb      	ldr	r3, [r7, #12]
 80004e8:	2254      	movs	r2, #84	; 0x54
 80004ea:	fb02 f203 	mul.w	r2, r2, r3
 80004ee:	68bb      	ldr	r3, [r7, #8]
 80004f0:	4413      	add	r3, r2
 80004f2:	461a      	mov	r2, r3
 80004f4:	683b      	ldr	r3, [r7, #0]
 80004f6:	4413      	add	r3, r2
 80004f8:	61bb      	str	r3, [r7, #24]
	while ((*text) && (pbuf < &buffer[LCD_X*LCD_Y/8 - 6])) {
 80004fa:	e023      	b.n	8000544 <lcd_draw_text+0x6c>
		int ch = *text++;
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	1c5a      	adds	r2, r3, #1
 8000500:	607a      	str	r2, [r7, #4]
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	613b      	str	r3, [r7, #16]
		const uint8_t* font = &font_ASCII[ch - ' '][0];
 8000506:	693b      	ldr	r3, [r7, #16]
 8000508:	f1a3 0220 	sub.w	r2, r3, #32
 800050c:	4613      	mov	r3, r2
 800050e:	009b      	lsls	r3, r3, #2
 8000510:	4413      	add	r3, r2
 8000512:	4a14      	ldr	r2, [pc, #80]	; (8000564 <lcd_draw_text+0x8c>)
 8000514:	4413      	add	r3, r2
 8000516:	617b      	str	r3, [r7, #20]
		for (i = 0; i < 5; i++) {
 8000518:	2300      	movs	r3, #0
 800051a:	61fb      	str	r3, [r7, #28]
 800051c:	e00a      	b.n	8000534 <lcd_draw_text+0x5c>
			*pbuf++ = *font++;
 800051e:	697a      	ldr	r2, [r7, #20]
 8000520:	1c53      	adds	r3, r2, #1
 8000522:	617b      	str	r3, [r7, #20]
 8000524:	69bb      	ldr	r3, [r7, #24]
 8000526:	1c59      	adds	r1, r3, #1
 8000528:	61b9      	str	r1, [r7, #24]
 800052a:	7812      	ldrb	r2, [r2, #0]
 800052c:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 5; i++) {
 800052e:	69fb      	ldr	r3, [r7, #28]
 8000530:	3301      	adds	r3, #1
 8000532:	61fb      	str	r3, [r7, #28]
 8000534:	69fb      	ldr	r3, [r7, #28]
 8000536:	2b04      	cmp	r3, #4
 8000538:	ddf1      	ble.n	800051e <lcd_draw_text+0x46>
		}
		*pbuf++ = 0;
 800053a:	69bb      	ldr	r3, [r7, #24]
 800053c:	1c5a      	adds	r2, r3, #1
 800053e:	61ba      	str	r2, [r7, #24]
 8000540:	2200      	movs	r2, #0
 8000542:	701a      	strb	r2, [r3, #0]
	while ((*text) && (pbuf < &buffer[LCD_X*LCD_Y/8 - 6])) {
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	2b00      	cmp	r3, #0
 800054a:	d005      	beq.n	8000558 <lcd_draw_text+0x80>
 800054c:	683b      	ldr	r3, [r7, #0]
 800054e:	f503 73f9 	add.w	r3, r3, #498	; 0x1f2
 8000552:	69ba      	ldr	r2, [r7, #24]
 8000554:	429a      	cmp	r2, r3
 8000556:	d3d1      	bcc.n	80004fc <lcd_draw_text+0x24>
	}
}
 8000558:	bf00      	nop
 800055a:	3724      	adds	r7, #36	; 0x24
 800055c:	46bd      	mov	sp, r7
 800055e:	bc80      	pop	{r7}
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	080033e4 	.word	0x080033e4

08000568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b088      	sub	sp, #32
 800056c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	LCD_Clear_Buffer(buffer);
 800056e:	487a      	ldr	r0, [pc, #488]	; (8000758 <main+0x1f0>)
 8000570:	f7ff ff99 	bl	80004a6 <LCD_Clear_Buffer>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000574:	f000 fb18 	bl	8000ba8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000578:	f000 f90c 	bl	8000794 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057c:	f7ff fde6 	bl	800014c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000580:	f7ff fe66 	bl	8000250 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000584:	f000 f968 	bl	8000858 <MX_SPI1_Init>
  MX_TIM1_Init();
 8000588:	f000 fa7a 	bl	8000a80 <MX_TIM1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800058c:	f000 f93d 	bl	800080a <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 8000590:	4872      	ldr	r0, [pc, #456]	; (800075c <main+0x1f4>)
 8000592:	f001 fe1d 	bl	80021d0 <HAL_TIM_Base_Start_IT>

    LCD_Initialize(&hspi1);
 8000596:	4872      	ldr	r0, [pc, #456]	; (8000760 <main+0x1f8>)
 8000598:	f7ff fec6 	bl	8000328 <LCD_Initialize>
    //LCD_Clear();


    for (uint16_t i = 0; i< LCD_X*LCD_Y/8 ; i++){
 800059c:	2300      	movs	r3, #0
 800059e:	83fb      	strh	r3, [r7, #30]
 80005a0:	e008      	b.n	80005b4 <main+0x4c>
  	  buffer[i] = logo[i];
 80005a2:	8bfa      	ldrh	r2, [r7, #30]
 80005a4:	8bfb      	ldrh	r3, [r7, #30]
 80005a6:	496f      	ldr	r1, [pc, #444]	; (8000764 <main+0x1fc>)
 80005a8:	5c89      	ldrb	r1, [r1, r2]
 80005aa:	4a6b      	ldr	r2, [pc, #428]	; (8000758 <main+0x1f0>)
 80005ac:	54d1      	strb	r1, [r2, r3]
    for (uint16_t i = 0; i< LCD_X*LCD_Y/8 ; i++){
 80005ae:	8bfb      	ldrh	r3, [r7, #30]
 80005b0:	3301      	adds	r3, #1
 80005b2:	83fb      	strh	r3, [r7, #30]
 80005b4:	8bfb      	ldrh	r3, [r7, #30]
 80005b6:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 80005ba:	d3f2      	bcc.n	80005a2 <main+0x3a>
    }

    lcd_draw_text(0, 60, "v0.9", buffer);
 80005bc:	4b66      	ldr	r3, [pc, #408]	; (8000758 <main+0x1f0>)
 80005be:	4a6a      	ldr	r2, [pc, #424]	; (8000768 <main+0x200>)
 80005c0:	213c      	movs	r1, #60	; 0x3c
 80005c2:	2000      	movs	r0, #0
 80005c4:	f7ff ff88 	bl	80004d8 <lcd_draw_text>
  //  lcd_draw_text(1, 0, "Hej", buffer);
  //  char tmp[16];
  //  sprintf(tmp, "%d", 2137);
  //  lcd_draw_text(0, 60,tmp, buffer);

    LCD_Data(&hspi1, buffer);
 80005c8:	4963      	ldr	r1, [pc, #396]	; (8000758 <main+0x1f0>)
 80005ca:	4865      	ldr	r0, [pc, #404]	; (8000760 <main+0x1f8>)
 80005cc:	f7ff ff06 	bl	80003dc <LCD_Data>

    HAL_Delay(1000);
 80005d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005d4:	f000 fb4a 	bl	8000c6c <HAL_Delay>

    uint8_t r = 20;
 80005d8:	2314      	movs	r3, #20
 80005da:	753b      	strb	r3, [r7, #20]




    for (uint16_t i = 0; i< LCD_X*LCD_Y/8 ; i++){
 80005dc:	2300      	movs	r3, #0
 80005de:	83bb      	strh	r3, [r7, #28]
 80005e0:	e008      	b.n	80005f4 <main+0x8c>
  	  buffer[i] = template[i];
 80005e2:	8bba      	ldrh	r2, [r7, #28]
 80005e4:	8bbb      	ldrh	r3, [r7, #28]
 80005e6:	4961      	ldr	r1, [pc, #388]	; (800076c <main+0x204>)
 80005e8:	5c89      	ldrb	r1, [r1, r2]
 80005ea:	4a5b      	ldr	r2, [pc, #364]	; (8000758 <main+0x1f0>)
 80005ec:	54d1      	strb	r1, [r2, r3]
    for (uint16_t i = 0; i< LCD_X*LCD_Y/8 ; i++){
 80005ee:	8bbb      	ldrh	r3, [r7, #28]
 80005f0:	3301      	adds	r3, #1
 80005f2:	83bb      	strh	r3, [r7, #28]
 80005f4:	8bbb      	ldrh	r3, [r7, #28]
 80005f6:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 80005fa:	d3f2      	bcc.n	80005e2 <main+0x7a>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(flag[1] == 0){
 80005fc:	4b5c      	ldr	r3, [pc, #368]	; (8000770 <main+0x208>)
 80005fe:	785b      	ldrb	r3, [r3, #1]
 8000600:	2b00      	cmp	r3, #0
 8000602:	f040 8091 	bne.w	8000728 <main+0x1c0>


		  flag[0] = 0;
 8000606:	4b5a      	ldr	r3, [pc, #360]	; (8000770 <main+0x208>)
 8000608:	2200      	movs	r2, #0
 800060a:	701a      	strb	r2, [r3, #0]

			for(uint16_t i = 0; i < (LCD_X*LCD_Y/8); i ++){
 800060c:	2300      	movs	r3, #0
 800060e:	837b      	strh	r3, [r7, #26]
 8000610:	e006      	b.n	8000620 <main+0xb8>
				buffer[i]= 0x00;
 8000612:	8b7b      	ldrh	r3, [r7, #26]
 8000614:	4a50      	ldr	r2, [pc, #320]	; (8000758 <main+0x1f0>)
 8000616:	2100      	movs	r1, #0
 8000618:	54d1      	strb	r1, [r2, r3]
			for(uint16_t i = 0; i < (LCD_X*LCD_Y/8); i ++){
 800061a:	8b7b      	ldrh	r3, [r7, #26]
 800061c:	3301      	adds	r3, #1
 800061e:	837b      	strh	r3, [r7, #26]
 8000620:	8b7b      	ldrh	r3, [r7, #26]
 8000622:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 8000626:	d3f4      	bcc.n	8000612 <main+0xaa>
			}

			  for (uint16_t i = 0; i< LCD_X*LCD_Y/8 ; i++){
 8000628:	2300      	movs	r3, #0
 800062a:	833b      	strh	r3, [r7, #24]
 800062c:	e008      	b.n	8000640 <main+0xd8>
				  buffer[i] = template[i];
 800062e:	8b3a      	ldrh	r2, [r7, #24]
 8000630:	8b3b      	ldrh	r3, [r7, #24]
 8000632:	494e      	ldr	r1, [pc, #312]	; (800076c <main+0x204>)
 8000634:	5c89      	ldrb	r1, [r1, r2]
 8000636:	4a48      	ldr	r2, [pc, #288]	; (8000758 <main+0x1f0>)
 8000638:	54d1      	strb	r1, [r2, r3]
			  for (uint16_t i = 0; i< LCD_X*LCD_Y/8 ; i++){
 800063a:	8b3b      	ldrh	r3, [r7, #24]
 800063c:	3301      	adds	r3, #1
 800063e:	833b      	strh	r3, [r7, #24]
 8000640:	8b3b      	ldrh	r3, [r7, #24]
 8000642:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 8000646:	d3f2      	bcc.n	800062e <main+0xc6>
			  }

			for(uint8_t x = 0 ; x < LCD_X ; x++ ){
 8000648:	2300      	movs	r3, #0
 800064a:	75fb      	strb	r3, [r7, #23]
 800064c:	e00e      	b.n	800066c <main+0x104>
			  LCD_draw_pixel(buffer,x, 0);
 800064e:	7dfb      	ldrb	r3, [r7, #23]
 8000650:	2200      	movs	r2, #0
 8000652:	4619      	mov	r1, r3
 8000654:	4840      	ldr	r0, [pc, #256]	; (8000758 <main+0x1f0>)
 8000656:	f7ff fee5 	bl	8000424 <LCD_draw_pixel>
			  LCD_draw_pixel(buffer,x, LCD_Y);
 800065a:	7dfb      	ldrb	r3, [r7, #23]
 800065c:	2230      	movs	r2, #48	; 0x30
 800065e:	4619      	mov	r1, r3
 8000660:	483d      	ldr	r0, [pc, #244]	; (8000758 <main+0x1f0>)
 8000662:	f7ff fedf 	bl	8000424 <LCD_draw_pixel>
			for(uint8_t x = 0 ; x < LCD_X ; x++ ){
 8000666:	7dfb      	ldrb	r3, [r7, #23]
 8000668:	3301      	adds	r3, #1
 800066a:	75fb      	strb	r3, [r7, #23]
 800066c:	7dfb      	ldrb	r3, [r7, #23]
 800066e:	2b53      	cmp	r3, #83	; 0x53
 8000670:	d9ed      	bls.n	800064e <main+0xe6>
			}


			for(uint8_t y = 0 ; y < LCD_X ; y++ ){
 8000672:	2300      	movs	r3, #0
 8000674:	75bb      	strb	r3, [r7, #22]
 8000676:	e00e      	b.n	8000696 <main+0x12e>
			  LCD_draw_pixel(buffer,0, y);
 8000678:	7dbb      	ldrb	r3, [r7, #22]
 800067a:	461a      	mov	r2, r3
 800067c:	2100      	movs	r1, #0
 800067e:	4836      	ldr	r0, [pc, #216]	; (8000758 <main+0x1f0>)
 8000680:	f7ff fed0 	bl	8000424 <LCD_draw_pixel>
			  LCD_draw_pixel(buffer,LCD_X, y);
 8000684:	7dbb      	ldrb	r3, [r7, #22]
 8000686:	461a      	mov	r2, r3
 8000688:	2154      	movs	r1, #84	; 0x54
 800068a:	4833      	ldr	r0, [pc, #204]	; (8000758 <main+0x1f0>)
 800068c:	f7ff feca 	bl	8000424 <LCD_draw_pixel>
			for(uint8_t y = 0 ; y < LCD_X ; y++ ){
 8000690:	7dbb      	ldrb	r3, [r7, #22]
 8000692:	3301      	adds	r3, #1
 8000694:	75bb      	strb	r3, [r7, #22]
 8000696:	7dbb      	ldrb	r3, [r7, #22]
 8000698:	2b53      	cmp	r3, #83	; 0x53
 800069a:	d9ed      	bls.n	8000678 <main+0x110>
			}



			for(uint8_t i = 0; i< 54 ; i ++){
 800069c:	2300      	movs	r3, #0
 800069e:	757b      	strb	r3, [r7, #21]
 80006a0:	e014      	b.n	80006cc <main+0x164>
				LCD_draw_pixel(buffer,dron[i][0]+ 11 , dron[i][1]+r);
 80006a2:	7d7b      	ldrb	r3, [r7, #21]
 80006a4:	4a33      	ldr	r2, [pc, #204]	; (8000774 <main+0x20c>)
 80006a6:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80006aa:	330b      	adds	r3, #11
 80006ac:	b2d9      	uxtb	r1, r3
 80006ae:	7d7b      	ldrb	r3, [r7, #21]
 80006b0:	4a30      	ldr	r2, [pc, #192]	; (8000774 <main+0x20c>)
 80006b2:	005b      	lsls	r3, r3, #1
 80006b4:	4413      	add	r3, r2
 80006b6:	785a      	ldrb	r2, [r3, #1]
 80006b8:	7d3b      	ldrb	r3, [r7, #20]
 80006ba:	4413      	add	r3, r2
 80006bc:	b2db      	uxtb	r3, r3
 80006be:	461a      	mov	r2, r3
 80006c0:	4825      	ldr	r0, [pc, #148]	; (8000758 <main+0x1f0>)
 80006c2:	f7ff feaf 	bl	8000424 <LCD_draw_pixel>
			for(uint8_t i = 0; i< 54 ; i ++){
 80006c6:	7d7b      	ldrb	r3, [r7, #21]
 80006c8:	3301      	adds	r3, #1
 80006ca:	757b      	strb	r3, [r7, #21]
 80006cc:	7d7b      	ldrb	r3, [r7, #21]
 80006ce:	2b35      	cmp	r3, #53	; 0x35
 80006d0:	d9e7      	bls.n	80006a2 <main+0x13a>
			}

			  lcd_draw_text(1, 25, "Preasure:", buffer);
 80006d2:	4b21      	ldr	r3, [pc, #132]	; (8000758 <main+0x1f0>)
 80006d4:	4a28      	ldr	r2, [pc, #160]	; (8000778 <main+0x210>)
 80006d6:	2119      	movs	r1, #25
 80006d8:	2001      	movs	r0, #1
 80006da:	f7ff fefd 	bl	80004d8 <lcd_draw_text>
			  char tmp[16];
			  sprintf(tmp, "%d hPa", preasure);
 80006de:	4b27      	ldr	r3, [pc, #156]	; (800077c <main+0x214>)
 80006e0:	881b      	ldrh	r3, [r3, #0]
 80006e2:	461a      	mov	r2, r3
 80006e4:	1d3b      	adds	r3, r7, #4
 80006e6:	4926      	ldr	r1, [pc, #152]	; (8000780 <main+0x218>)
 80006e8:	4618      	mov	r0, r3
 80006ea:	f002 f941 	bl	8002970 <siprintf>
			  lcd_draw_text(2, 25,tmp, buffer);
 80006ee:	1d3a      	adds	r2, r7, #4
 80006f0:	4b19      	ldr	r3, [pc, #100]	; (8000758 <main+0x1f0>)
 80006f2:	2119      	movs	r1, #25
 80006f4:	2002      	movs	r0, #2
 80006f6:	f7ff feef 	bl	80004d8 <lcd_draw_text>
			  lcd_draw_text(3, 25, "Depth:", buffer);
 80006fa:	4b17      	ldr	r3, [pc, #92]	; (8000758 <main+0x1f0>)
 80006fc:	4a21      	ldr	r2, [pc, #132]	; (8000784 <main+0x21c>)
 80006fe:	2119      	movs	r1, #25
 8000700:	2003      	movs	r0, #3
 8000702:	f7ff fee9 	bl	80004d8 <lcd_draw_text>
			  sprintf(tmp, "%d m", depth);
 8000706:	4b20      	ldr	r3, [pc, #128]	; (8000788 <main+0x220>)
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	461a      	mov	r2, r3
 800070c:	1d3b      	adds	r3, r7, #4
 800070e:	491f      	ldr	r1, [pc, #124]	; (800078c <main+0x224>)
 8000710:	4618      	mov	r0, r3
 8000712:	f002 f92d 	bl	8002970 <siprintf>
			  lcd_draw_text(4, 25,tmp, buffer);
 8000716:	1d3a      	adds	r2, r7, #4
 8000718:	4b0f      	ldr	r3, [pc, #60]	; (8000758 <main+0x1f0>)
 800071a:	2119      	movs	r1, #25
 800071c:	2004      	movs	r0, #4
 800071e:	f7ff fedb 	bl	80004d8 <lcd_draw_text>


	  	  flag[1]=1;
 8000722:	4b13      	ldr	r3, [pc, #76]	; (8000770 <main+0x208>)
 8000724:	2201      	movs	r2, #1
 8000726:	705a      	strb	r2, [r3, #1]





	  if(flag[0] == 1 && flag[1]== 1) {
 8000728:	4b11      	ldr	r3, [pc, #68]	; (8000770 <main+0x208>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	2b01      	cmp	r3, #1
 800072e:	f47f af65 	bne.w	80005fc <main+0x94>
 8000732:	4b0f      	ldr	r3, [pc, #60]	; (8000770 <main+0x208>)
 8000734:	785b      	ldrb	r3, [r3, #1]
 8000736:	2b01      	cmp	r3, #1
 8000738:	f47f af60 	bne.w	80005fc <main+0x94>
		  LCD_Data(&hspi1, buffer);
 800073c:	4906      	ldr	r1, [pc, #24]	; (8000758 <main+0x1f0>)
 800073e:	4808      	ldr	r0, [pc, #32]	; (8000760 <main+0x1f8>)
 8000740:	f7ff fe4c 	bl	80003dc <LCD_Data>
		    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000744:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000748:	4811      	ldr	r0, [pc, #68]	; (8000790 <main+0x228>)
 800074a:	f000 fd31 	bl	80011b0 <HAL_GPIO_TogglePin>
		  flag[1] = 0;
 800074e:	4b08      	ldr	r3, [pc, #32]	; (8000770 <main+0x208>)
 8000750:	2200      	movs	r2, #0
 8000752:	705a      	strb	r2, [r3, #1]
	  if(flag[1] == 0){
 8000754:	e752      	b.n	80005fc <main+0x94>
 8000756:	bf00      	nop
 8000758:	20000160 	.word	0x20000160
 800075c:	20000998 	.word	0x20000998
 8000760:	20000940 	.word	0x20000940
 8000764:	080031ec 	.word	0x080031ec
 8000768:	080031ac 	.word	0x080031ac
 800076c:	080035c4 	.word	0x080035c4
 8000770:	200000fc 	.word	0x200000fc
 8000774:	20000000 	.word	0x20000000
 8000778:	080031b4 	.word	0x080031b4
 800077c:	2000006e 	.word	0x2000006e
 8000780:	080031c0 	.word	0x080031c0
 8000784:	080031c8 	.word	0x080031c8
 8000788:	2000006c 	.word	0x2000006c
 800078c:	080031d0 	.word	0x080031d0
 8000790:	40011000 	.word	0x40011000

08000794 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b090      	sub	sp, #64	; 0x40
 8000798:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800079a:	f107 0318 	add.w	r3, r7, #24
 800079e:	2228      	movs	r2, #40	; 0x28
 80007a0:	2100      	movs	r1, #0
 80007a2:	4618      	mov	r0, r3
 80007a4:	f002 f8dc 	bl	8002960 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a8:	1d3b      	adds	r3, r7, #4
 80007aa:	2200      	movs	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
 80007ae:	605a      	str	r2, [r3, #4]
 80007b0:	609a      	str	r2, [r3, #8]
 80007b2:	60da      	str	r2, [r3, #12]
 80007b4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007b6:	2302      	movs	r3, #2
 80007b8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007ba:	2301      	movs	r3, #1
 80007bc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007be:	2310      	movs	r3, #16
 80007c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007c2:	2300      	movs	r3, #0
 80007c4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007c6:	f107 0318 	add.w	r3, r7, #24
 80007ca:	4618      	mov	r0, r3
 80007cc:	f000 fe42 	bl	8001454 <HAL_RCC_OscConfig>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <SystemClock_Config+0x46>
  {
    Error_Handler();
 80007d6:	f000 f83b 	bl	8000850 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007da:	230f      	movs	r3, #15
 80007dc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007de:	2300      	movs	r3, #0
 80007e0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007e2:	2300      	movs	r3, #0
 80007e4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007e6:	2300      	movs	r3, #0
 80007e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007ea:	2300      	movs	r3, #0
 80007ec:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007ee:	1d3b      	adds	r3, r7, #4
 80007f0:	2100      	movs	r1, #0
 80007f2:	4618      	mov	r0, r3
 80007f4:	f001 f8ae 	bl	8001954 <HAL_RCC_ClockConfig>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80007fe:	f000 f827 	bl	8000850 <Error_Handler>
  }
}
 8000802:	bf00      	nop
 8000804:	3740      	adds	r7, #64	; 0x40
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}

0800080a <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800080a:	b580      	push	{r7, lr}
 800080c:	af00      	add	r7, sp, #0
  /* TIM1_UP_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800080e:	2200      	movs	r2, #0
 8000810:	2100      	movs	r1, #0
 8000812:	2019      	movs	r0, #25
 8000814:	f000 fb23 	bl	8000e5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000818:	2019      	movs	r0, #25
 800081a:	f000 fb3c 	bl	8000e96 <HAL_NVIC_EnableIRQ>
}
 800081e:	bf00      	nop
 8000820:	bd80      	pop	{r7, pc}
	...

08000824 <HAL_TIM_PeriodElapsedCallback>:
uint16_t map( uint16_t x, uint16_t in_min,uint16_t  in_max,uint16_t  out_min,uint16_t  out_max){
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM1){
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a05      	ldr	r2, [pc, #20]	; (8000848 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000832:	4293      	cmp	r3, r2
 8000834:	d102      	bne.n	800083c <HAL_TIM_PeriodElapsedCallback+0x18>

		flag[0] = 1;
 8000836:	4b05      	ldr	r3, [pc, #20]	; (800084c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000838:	2201      	movs	r2, #1
 800083a:	701a      	strb	r2, [r3, #0]
	}

}
 800083c:	bf00      	nop
 800083e:	370c      	adds	r7, #12
 8000840:	46bd      	mov	sp, r7
 8000842:	bc80      	pop	{r7}
 8000844:	4770      	bx	lr
 8000846:	bf00      	nop
 8000848:	40012c00 	.word	0x40012c00
 800084c:	200000fc 	.word	0x200000fc

08000850 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000854:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000856:	e7fe      	b.n	8000856 <Error_Handler+0x6>

08000858 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 800085c:	4b17      	ldr	r3, [pc, #92]	; (80008bc <MX_SPI1_Init+0x64>)
 800085e:	4a18      	ldr	r2, [pc, #96]	; (80008c0 <MX_SPI1_Init+0x68>)
 8000860:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000862:	4b16      	ldr	r3, [pc, #88]	; (80008bc <MX_SPI1_Init+0x64>)
 8000864:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000868:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800086a:	4b14      	ldr	r3, [pc, #80]	; (80008bc <MX_SPI1_Init+0x64>)
 800086c:	2200      	movs	r2, #0
 800086e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000870:	4b12      	ldr	r3, [pc, #72]	; (80008bc <MX_SPI1_Init+0x64>)
 8000872:	2200      	movs	r2, #0
 8000874:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000876:	4b11      	ldr	r3, [pc, #68]	; (80008bc <MX_SPI1_Init+0x64>)
 8000878:	2200      	movs	r2, #0
 800087a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800087c:	4b0f      	ldr	r3, [pc, #60]	; (80008bc <MX_SPI1_Init+0x64>)
 800087e:	2200      	movs	r2, #0
 8000880:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000882:	4b0e      	ldr	r3, [pc, #56]	; (80008bc <MX_SPI1_Init+0x64>)
 8000884:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000888:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800088a:	4b0c      	ldr	r3, [pc, #48]	; (80008bc <MX_SPI1_Init+0x64>)
 800088c:	2210      	movs	r2, #16
 800088e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000890:	4b0a      	ldr	r3, [pc, #40]	; (80008bc <MX_SPI1_Init+0x64>)
 8000892:	2200      	movs	r2, #0
 8000894:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000896:	4b09      	ldr	r3, [pc, #36]	; (80008bc <MX_SPI1_Init+0x64>)
 8000898:	2200      	movs	r2, #0
 800089a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800089c:	4b07      	ldr	r3, [pc, #28]	; (80008bc <MX_SPI1_Init+0x64>)
 800089e:	2200      	movs	r2, #0
 80008a0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80008a2:	4b06      	ldr	r3, [pc, #24]	; (80008bc <MX_SPI1_Init+0x64>)
 80008a4:	220a      	movs	r2, #10
 80008a6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008a8:	4804      	ldr	r0, [pc, #16]	; (80008bc <MX_SPI1_Init+0x64>)
 80008aa:	f001 f9db 	bl	8001c64 <HAL_SPI_Init>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80008b4:	f7ff ffcc 	bl	8000850 <Error_Handler>
  }

}
 80008b8:	bf00      	nop
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	20000940 	.word	0x20000940
 80008c0:	40013000 	.word	0x40013000

080008c4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b088      	sub	sp, #32
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008cc:	f107 0310 	add.w	r3, r7, #16
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
 80008d4:	605a      	str	r2, [r3, #4]
 80008d6:	609a      	str	r2, [r3, #8]
 80008d8:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	4a15      	ldr	r2, [pc, #84]	; (8000934 <HAL_SPI_MspInit+0x70>)
 80008e0:	4293      	cmp	r3, r2
 80008e2:	d123      	bne.n	800092c <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80008e4:	4b14      	ldr	r3, [pc, #80]	; (8000938 <HAL_SPI_MspInit+0x74>)
 80008e6:	699b      	ldr	r3, [r3, #24]
 80008e8:	4a13      	ldr	r2, [pc, #76]	; (8000938 <HAL_SPI_MspInit+0x74>)
 80008ea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80008ee:	6193      	str	r3, [r2, #24]
 80008f0:	4b11      	ldr	r3, [pc, #68]	; (8000938 <HAL_SPI_MspInit+0x74>)
 80008f2:	699b      	ldr	r3, [r3, #24]
 80008f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80008f8:	60fb      	str	r3, [r7, #12]
 80008fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fc:	4b0e      	ldr	r3, [pc, #56]	; (8000938 <HAL_SPI_MspInit+0x74>)
 80008fe:	699b      	ldr	r3, [r3, #24]
 8000900:	4a0d      	ldr	r2, [pc, #52]	; (8000938 <HAL_SPI_MspInit+0x74>)
 8000902:	f043 0304 	orr.w	r3, r3, #4
 8000906:	6193      	str	r3, [r2, #24]
 8000908:	4b0b      	ldr	r3, [pc, #44]	; (8000938 <HAL_SPI_MspInit+0x74>)
 800090a:	699b      	ldr	r3, [r3, #24]
 800090c:	f003 0304 	and.w	r3, r3, #4
 8000910:	60bb      	str	r3, [r7, #8]
 8000912:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000914:	23a0      	movs	r3, #160	; 0xa0
 8000916:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000918:	2302      	movs	r3, #2
 800091a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800091c:	2303      	movs	r3, #3
 800091e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000920:	f107 0310 	add.w	r3, r7, #16
 8000924:	4619      	mov	r1, r3
 8000926:	4805      	ldr	r0, [pc, #20]	; (800093c <HAL_SPI_MspInit+0x78>)
 8000928:	f000 fad0 	bl	8000ecc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800092c:	bf00      	nop
 800092e:	3720      	adds	r7, #32
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	40013000 	.word	0x40013000
 8000938:	40021000 	.word	0x40021000
 800093c:	40010800 	.word	0x40010800

08000940 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000940:	b480      	push	{r7}
 8000942:	b085      	sub	sp, #20
 8000944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000946:	4b15      	ldr	r3, [pc, #84]	; (800099c <HAL_MspInit+0x5c>)
 8000948:	699b      	ldr	r3, [r3, #24]
 800094a:	4a14      	ldr	r2, [pc, #80]	; (800099c <HAL_MspInit+0x5c>)
 800094c:	f043 0301 	orr.w	r3, r3, #1
 8000950:	6193      	str	r3, [r2, #24]
 8000952:	4b12      	ldr	r3, [pc, #72]	; (800099c <HAL_MspInit+0x5c>)
 8000954:	699b      	ldr	r3, [r3, #24]
 8000956:	f003 0301 	and.w	r3, r3, #1
 800095a:	60bb      	str	r3, [r7, #8]
 800095c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800095e:	4b0f      	ldr	r3, [pc, #60]	; (800099c <HAL_MspInit+0x5c>)
 8000960:	69db      	ldr	r3, [r3, #28]
 8000962:	4a0e      	ldr	r2, [pc, #56]	; (800099c <HAL_MspInit+0x5c>)
 8000964:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000968:	61d3      	str	r3, [r2, #28]
 800096a:	4b0c      	ldr	r3, [pc, #48]	; (800099c <HAL_MspInit+0x5c>)
 800096c:	69db      	ldr	r3, [r3, #28]
 800096e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000972:	607b      	str	r3, [r7, #4]
 8000974:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000976:	4b0a      	ldr	r3, [pc, #40]	; (80009a0 <HAL_MspInit+0x60>)
 8000978:	685b      	ldr	r3, [r3, #4]
 800097a:	60fb      	str	r3, [r7, #12]
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000982:	60fb      	str	r3, [r7, #12]
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800098a:	60fb      	str	r3, [r7, #12]
 800098c:	4a04      	ldr	r2, [pc, #16]	; (80009a0 <HAL_MspInit+0x60>)
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000992:	bf00      	nop
 8000994:	3714      	adds	r7, #20
 8000996:	46bd      	mov	sp, r7
 8000998:	bc80      	pop	{r7}
 800099a:	4770      	bx	lr
 800099c:	40021000 	.word	0x40021000
 80009a0:	40010000 	.word	0x40010000

080009a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009a8:	e7fe      	b.n	80009a8 <NMI_Handler+0x4>

080009aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009aa:	b480      	push	{r7}
 80009ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ae:	e7fe      	b.n	80009ae <HardFault_Handler+0x4>

080009b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009b4:	e7fe      	b.n	80009b4 <MemManage_Handler+0x4>

080009b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009b6:	b480      	push	{r7}
 80009b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ba:	e7fe      	b.n	80009ba <BusFault_Handler+0x4>

080009bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009c0:	e7fe      	b.n	80009c0 <UsageFault_Handler+0x4>

080009c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009c2:	b480      	push	{r7}
 80009c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009c6:	bf00      	nop
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bc80      	pop	{r7}
 80009cc:	4770      	bx	lr

080009ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ce:	b480      	push	{r7}
 80009d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009d2:	bf00      	nop
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bc80      	pop	{r7}
 80009d8:	4770      	bx	lr

080009da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009da:	b480      	push	{r7}
 80009dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009de:	bf00      	nop
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bc80      	pop	{r7}
 80009e4:	4770      	bx	lr

080009e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009e6:	b580      	push	{r7, lr}
 80009e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009ea:	f000 f923 	bl	8000c34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009ee:	bf00      	nop
 80009f0:	bd80      	pop	{r7, pc}
	...

080009f4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80009f8:	4802      	ldr	r0, [pc, #8]	; (8000a04 <TIM1_UP_IRQHandler+0x10>)
 80009fa:	f001 fc3b 	bl	8002274 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80009fe:	bf00      	nop
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	20000998 	.word	0x20000998

08000a08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b086      	sub	sp, #24
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a10:	4a14      	ldr	r2, [pc, #80]	; (8000a64 <_sbrk+0x5c>)
 8000a12:	4b15      	ldr	r3, [pc, #84]	; (8000a68 <_sbrk+0x60>)
 8000a14:	1ad3      	subs	r3, r2, r3
 8000a16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a18:	697b      	ldr	r3, [r7, #20]
 8000a1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a1c:	4b13      	ldr	r3, [pc, #76]	; (8000a6c <_sbrk+0x64>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d102      	bne.n	8000a2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a24:	4b11      	ldr	r3, [pc, #68]	; (8000a6c <_sbrk+0x64>)
 8000a26:	4a12      	ldr	r2, [pc, #72]	; (8000a70 <_sbrk+0x68>)
 8000a28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a2a:	4b10      	ldr	r3, [pc, #64]	; (8000a6c <_sbrk+0x64>)
 8000a2c:	681a      	ldr	r2, [r3, #0]
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	4413      	add	r3, r2
 8000a32:	693a      	ldr	r2, [r7, #16]
 8000a34:	429a      	cmp	r2, r3
 8000a36:	d207      	bcs.n	8000a48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a38:	f001 ff68 	bl	800290c <__errno>
 8000a3c:	4602      	mov	r2, r0
 8000a3e:	230c      	movs	r3, #12
 8000a40:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000a42:	f04f 33ff 	mov.w	r3, #4294967295
 8000a46:	e009      	b.n	8000a5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a48:	4b08      	ldr	r3, [pc, #32]	; (8000a6c <_sbrk+0x64>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a4e:	4b07      	ldr	r3, [pc, #28]	; (8000a6c <_sbrk+0x64>)
 8000a50:	681a      	ldr	r2, [r3, #0]
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	4413      	add	r3, r2
 8000a56:	4a05      	ldr	r2, [pc, #20]	; (8000a6c <_sbrk+0x64>)
 8000a58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a5a:	68fb      	ldr	r3, [r7, #12]
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	3718      	adds	r7, #24
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	20005000 	.word	0x20005000
 8000a68:	00000400 	.word	0x00000400
 8000a6c:	20000100 	.word	0x20000100
 8000a70:	200009e8 	.word	0x200009e8

08000a74 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a78:	bf00      	nop
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bc80      	pop	{r7}
 8000a7e:	4770      	bx	lr

08000a80 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b086      	sub	sp, #24
 8000a84:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a86:	f107 0308 	add.w	r3, r7, #8
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	601a      	str	r2, [r3, #0]
 8000a8e:	605a      	str	r2, [r3, #4]
 8000a90:	609a      	str	r2, [r3, #8]
 8000a92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a94:	463b      	mov	r3, r7
 8000a96:	2200      	movs	r2, #0
 8000a98:	601a      	str	r2, [r3, #0]
 8000a9a:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 8000a9c:	4b1e      	ldr	r3, [pc, #120]	; (8000b18 <MX_TIM1_Init+0x98>)
 8000a9e:	4a1f      	ldr	r2, [pc, #124]	; (8000b1c <MX_TIM1_Init+0x9c>)
 8000aa0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8000-1;
 8000aa2:	4b1d      	ldr	r3, [pc, #116]	; (8000b18 <MX_TIM1_Init+0x98>)
 8000aa4:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000aa8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aaa:	4b1b      	ldr	r3, [pc, #108]	; (8000b18 <MX_TIM1_Init+0x98>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8000ab0:	4b19      	ldr	r3, [pc, #100]	; (8000b18 <MX_TIM1_Init+0x98>)
 8000ab2:	2263      	movs	r2, #99	; 0x63
 8000ab4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ab6:	4b18      	ldr	r3, [pc, #96]	; (8000b18 <MX_TIM1_Init+0x98>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000abc:	4b16      	ldr	r3, [pc, #88]	; (8000b18 <MX_TIM1_Init+0x98>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ac2:	4b15      	ldr	r3, [pc, #84]	; (8000b18 <MX_TIM1_Init+0x98>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ac8:	4813      	ldr	r0, [pc, #76]	; (8000b18 <MX_TIM1_Init+0x98>)
 8000aca:	f001 fb31 	bl	8002130 <HAL_TIM_Base_Init>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000ad4:	f7ff febc 	bl	8000850 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ad8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000adc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ade:	f107 0308 	add.w	r3, r7, #8
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	480c      	ldr	r0, [pc, #48]	; (8000b18 <MX_TIM1_Init+0x98>)
 8000ae6:	f001 fccd 	bl	8002484 <HAL_TIM_ConfigClockSource>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000af0:	f7ff feae 	bl	8000850 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000af4:	2300      	movs	r3, #0
 8000af6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000af8:	2300      	movs	r3, #0
 8000afa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000afc:	463b      	mov	r3, r7
 8000afe:	4619      	mov	r1, r3
 8000b00:	4805      	ldr	r0, [pc, #20]	; (8000b18 <MX_TIM1_Init+0x98>)
 8000b02:	f001 fe93 	bl	800282c <HAL_TIMEx_MasterConfigSynchronization>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000b0c:	f7ff fea0 	bl	8000850 <Error_Handler>
  }

}
 8000b10:	bf00      	nop
 8000b12:	3718      	adds	r7, #24
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	20000998 	.word	0x20000998
 8000b1c:	40012c00 	.word	0x40012c00

08000b20 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b085      	sub	sp, #20
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a09      	ldr	r2, [pc, #36]	; (8000b54 <HAL_TIM_Base_MspInit+0x34>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d10b      	bne.n	8000b4a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b32:	4b09      	ldr	r3, [pc, #36]	; (8000b58 <HAL_TIM_Base_MspInit+0x38>)
 8000b34:	699b      	ldr	r3, [r3, #24]
 8000b36:	4a08      	ldr	r2, [pc, #32]	; (8000b58 <HAL_TIM_Base_MspInit+0x38>)
 8000b38:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b3c:	6193      	str	r3, [r2, #24]
 8000b3e:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <HAL_TIM_Base_MspInit+0x38>)
 8000b40:	699b      	ldr	r3, [r3, #24]
 8000b42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b46:	60fb      	str	r3, [r7, #12]
 8000b48:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000b4a:	bf00      	nop
 8000b4c:	3714      	adds	r7, #20
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bc80      	pop	{r7}
 8000b52:	4770      	bx	lr
 8000b54:	40012c00 	.word	0x40012c00
 8000b58:	40021000 	.word	0x40021000

08000b5c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000b5c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000b5e:	e003      	b.n	8000b68 <LoopCopyDataInit>

08000b60 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000b60:	4b0b      	ldr	r3, [pc, #44]	; (8000b90 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000b62:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000b64:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000b66:	3104      	adds	r1, #4

08000b68 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000b68:	480a      	ldr	r0, [pc, #40]	; (8000b94 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000b6a:	4b0b      	ldr	r3, [pc, #44]	; (8000b98 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000b6c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000b6e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000b70:	d3f6      	bcc.n	8000b60 <CopyDataInit>
  ldr r2, =_sbss
 8000b72:	4a0a      	ldr	r2, [pc, #40]	; (8000b9c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000b74:	e002      	b.n	8000b7c <LoopFillZerobss>

08000b76 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000b76:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000b78:	f842 3b04 	str.w	r3, [r2], #4

08000b7c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000b7c:	4b08      	ldr	r3, [pc, #32]	; (8000ba0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000b7e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000b80:	d3f9      	bcc.n	8000b76 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b82:	f7ff ff77 	bl	8000a74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b86:	f001 fec7 	bl	8002918 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b8a:	f7ff fced 	bl	8000568 <main>
  bx lr
 8000b8e:	4770      	bx	lr
  ldr r3, =_sidata
 8000b90:	08003810 	.word	0x08003810
  ldr r0, =_sdata
 8000b94:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000b98:	200000e0 	.word	0x200000e0
  ldr r2, =_sbss
 8000b9c:	200000e0 	.word	0x200000e0
  ldr r3, = _ebss
 8000ba0:	200009e8 	.word	0x200009e8

08000ba4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ba4:	e7fe      	b.n	8000ba4 <ADC1_2_IRQHandler>
	...

08000ba8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bac:	4b08      	ldr	r3, [pc, #32]	; (8000bd0 <HAL_Init+0x28>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a07      	ldr	r2, [pc, #28]	; (8000bd0 <HAL_Init+0x28>)
 8000bb2:	f043 0310 	orr.w	r3, r3, #16
 8000bb6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bb8:	2003      	movs	r0, #3
 8000bba:	f000 f945 	bl	8000e48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bbe:	2000      	movs	r0, #0
 8000bc0:	f000 f808 	bl	8000bd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bc4:	f7ff febc 	bl	8000940 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bc8:	2300      	movs	r3, #0
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	40022000 	.word	0x40022000

08000bd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bdc:	4b12      	ldr	r3, [pc, #72]	; (8000c28 <HAL_InitTick+0x54>)
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	4b12      	ldr	r3, [pc, #72]	; (8000c2c <HAL_InitTick+0x58>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	4619      	mov	r1, r3
 8000be6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f000 f95d 	bl	8000eb2 <HAL_SYSTICK_Config>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	e00e      	b.n	8000c20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	2b0f      	cmp	r3, #15
 8000c06:	d80a      	bhi.n	8000c1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	6879      	ldr	r1, [r7, #4]
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	f000 f925 	bl	8000e5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c14:	4a06      	ldr	r2, [pc, #24]	; (8000c30 <HAL_InitTick+0x5c>)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	e000      	b.n	8000c20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c1e:	2301      	movs	r3, #1
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	3708      	adds	r7, #8
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	20000070 	.word	0x20000070
 8000c2c:	20000078 	.word	0x20000078
 8000c30:	20000074 	.word	0x20000074

08000c34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c38:	4b05      	ldr	r3, [pc, #20]	; (8000c50 <HAL_IncTick+0x1c>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	4b05      	ldr	r3, [pc, #20]	; (8000c54 <HAL_IncTick+0x20>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4413      	add	r3, r2
 8000c44:	4a03      	ldr	r2, [pc, #12]	; (8000c54 <HAL_IncTick+0x20>)
 8000c46:	6013      	str	r3, [r2, #0]
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bc80      	pop	{r7}
 8000c4e:	4770      	bx	lr
 8000c50:	20000078 	.word	0x20000078
 8000c54:	200009e0 	.word	0x200009e0

08000c58 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c5c:	4b02      	ldr	r3, [pc, #8]	; (8000c68 <HAL_GetTick+0x10>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bc80      	pop	{r7}
 8000c66:	4770      	bx	lr
 8000c68:	200009e0 	.word	0x200009e0

08000c6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b084      	sub	sp, #16
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c74:	f7ff fff0 	bl	8000c58 <HAL_GetTick>
 8000c78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c84:	d005      	beq.n	8000c92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c86:	4b09      	ldr	r3, [pc, #36]	; (8000cac <HAL_Delay+0x40>)
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	461a      	mov	r2, r3
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	4413      	add	r3, r2
 8000c90:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c92:	bf00      	nop
 8000c94:	f7ff ffe0 	bl	8000c58 <HAL_GetTick>
 8000c98:	4602      	mov	r2, r0
 8000c9a:	68bb      	ldr	r3, [r7, #8]
 8000c9c:	1ad3      	subs	r3, r2, r3
 8000c9e:	68fa      	ldr	r2, [r7, #12]
 8000ca0:	429a      	cmp	r2, r3
 8000ca2:	d8f7      	bhi.n	8000c94 <HAL_Delay+0x28>
  {
  }
}
 8000ca4:	bf00      	nop
 8000ca6:	3710      	adds	r7, #16
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	20000078 	.word	0x20000078

08000cb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b085      	sub	sp, #20
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	f003 0307 	and.w	r3, r3, #7
 8000cbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cc0:	4b0c      	ldr	r3, [pc, #48]	; (8000cf4 <__NVIC_SetPriorityGrouping+0x44>)
 8000cc2:	68db      	ldr	r3, [r3, #12]
 8000cc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cc6:	68ba      	ldr	r2, [r7, #8]
 8000cc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ccc:	4013      	ands	r3, r2
 8000cce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ce0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ce2:	4a04      	ldr	r2, [pc, #16]	; (8000cf4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	60d3      	str	r3, [r2, #12]
}
 8000ce8:	bf00      	nop
 8000cea:	3714      	adds	r7, #20
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bc80      	pop	{r7}
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	e000ed00 	.word	0xe000ed00

08000cf8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cfc:	4b04      	ldr	r3, [pc, #16]	; (8000d10 <__NVIC_GetPriorityGrouping+0x18>)
 8000cfe:	68db      	ldr	r3, [r3, #12]
 8000d00:	0a1b      	lsrs	r3, r3, #8
 8000d02:	f003 0307 	and.w	r3, r3, #7
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bc80      	pop	{r7}
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	e000ed00 	.word	0xe000ed00

08000d14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	db0b      	blt.n	8000d3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d26:	79fb      	ldrb	r3, [r7, #7]
 8000d28:	f003 021f 	and.w	r2, r3, #31
 8000d2c:	4906      	ldr	r1, [pc, #24]	; (8000d48 <__NVIC_EnableIRQ+0x34>)
 8000d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d32:	095b      	lsrs	r3, r3, #5
 8000d34:	2001      	movs	r0, #1
 8000d36:	fa00 f202 	lsl.w	r2, r0, r2
 8000d3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d3e:	bf00      	nop
 8000d40:	370c      	adds	r7, #12
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bc80      	pop	{r7}
 8000d46:	4770      	bx	lr
 8000d48:	e000e100 	.word	0xe000e100

08000d4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	6039      	str	r1, [r7, #0]
 8000d56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	db0a      	blt.n	8000d76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	b2da      	uxtb	r2, r3
 8000d64:	490c      	ldr	r1, [pc, #48]	; (8000d98 <__NVIC_SetPriority+0x4c>)
 8000d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6a:	0112      	lsls	r2, r2, #4
 8000d6c:	b2d2      	uxtb	r2, r2
 8000d6e:	440b      	add	r3, r1
 8000d70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d74:	e00a      	b.n	8000d8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	b2da      	uxtb	r2, r3
 8000d7a:	4908      	ldr	r1, [pc, #32]	; (8000d9c <__NVIC_SetPriority+0x50>)
 8000d7c:	79fb      	ldrb	r3, [r7, #7]
 8000d7e:	f003 030f 	and.w	r3, r3, #15
 8000d82:	3b04      	subs	r3, #4
 8000d84:	0112      	lsls	r2, r2, #4
 8000d86:	b2d2      	uxtb	r2, r2
 8000d88:	440b      	add	r3, r1
 8000d8a:	761a      	strb	r2, [r3, #24]
}
 8000d8c:	bf00      	nop
 8000d8e:	370c      	adds	r7, #12
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bc80      	pop	{r7}
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	e000e100 	.word	0xe000e100
 8000d9c:	e000ed00 	.word	0xe000ed00

08000da0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b089      	sub	sp, #36	; 0x24
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	60f8      	str	r0, [r7, #12]
 8000da8:	60b9      	str	r1, [r7, #8]
 8000daa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	f003 0307 	and.w	r3, r3, #7
 8000db2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000db4:	69fb      	ldr	r3, [r7, #28]
 8000db6:	f1c3 0307 	rsb	r3, r3, #7
 8000dba:	2b04      	cmp	r3, #4
 8000dbc:	bf28      	it	cs
 8000dbe:	2304      	movcs	r3, #4
 8000dc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dc2:	69fb      	ldr	r3, [r7, #28]
 8000dc4:	3304      	adds	r3, #4
 8000dc6:	2b06      	cmp	r3, #6
 8000dc8:	d902      	bls.n	8000dd0 <NVIC_EncodePriority+0x30>
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	3b03      	subs	r3, #3
 8000dce:	e000      	b.n	8000dd2 <NVIC_EncodePriority+0x32>
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd4:	f04f 32ff 	mov.w	r2, #4294967295
 8000dd8:	69bb      	ldr	r3, [r7, #24]
 8000dda:	fa02 f303 	lsl.w	r3, r2, r3
 8000dde:	43da      	mvns	r2, r3
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	401a      	ands	r2, r3
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000de8:	f04f 31ff 	mov.w	r1, #4294967295
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	fa01 f303 	lsl.w	r3, r1, r3
 8000df2:	43d9      	mvns	r1, r3
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df8:	4313      	orrs	r3, r2
         );
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	3724      	adds	r7, #36	; 0x24
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bc80      	pop	{r7}
 8000e02:	4770      	bx	lr

08000e04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	3b01      	subs	r3, #1
 8000e10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e14:	d301      	bcc.n	8000e1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e16:	2301      	movs	r3, #1
 8000e18:	e00f      	b.n	8000e3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e1a:	4a0a      	ldr	r2, [pc, #40]	; (8000e44 <SysTick_Config+0x40>)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	3b01      	subs	r3, #1
 8000e20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e22:	210f      	movs	r1, #15
 8000e24:	f04f 30ff 	mov.w	r0, #4294967295
 8000e28:	f7ff ff90 	bl	8000d4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e2c:	4b05      	ldr	r3, [pc, #20]	; (8000e44 <SysTick_Config+0x40>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e32:	4b04      	ldr	r3, [pc, #16]	; (8000e44 <SysTick_Config+0x40>)
 8000e34:	2207      	movs	r2, #7
 8000e36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e38:	2300      	movs	r3, #0
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	e000e010 	.word	0xe000e010

08000e48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e50:	6878      	ldr	r0, [r7, #4]
 8000e52:	f7ff ff2d 	bl	8000cb0 <__NVIC_SetPriorityGrouping>
}
 8000e56:	bf00      	nop
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}

08000e5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	b086      	sub	sp, #24
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	4603      	mov	r3, r0
 8000e66:	60b9      	str	r1, [r7, #8]
 8000e68:	607a      	str	r2, [r7, #4]
 8000e6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e70:	f7ff ff42 	bl	8000cf8 <__NVIC_GetPriorityGrouping>
 8000e74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e76:	687a      	ldr	r2, [r7, #4]
 8000e78:	68b9      	ldr	r1, [r7, #8]
 8000e7a:	6978      	ldr	r0, [r7, #20]
 8000e7c:	f7ff ff90 	bl	8000da0 <NVIC_EncodePriority>
 8000e80:	4602      	mov	r2, r0
 8000e82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e86:	4611      	mov	r1, r2
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f7ff ff5f 	bl	8000d4c <__NVIC_SetPriority>
}
 8000e8e:	bf00      	nop
 8000e90:	3718      	adds	r7, #24
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}

08000e96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e96:	b580      	push	{r7, lr}
 8000e98:	b082      	sub	sp, #8
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ea0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff ff35 	bl	8000d14 <__NVIC_EnableIRQ>
}
 8000eaa:	bf00      	nop
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}

08000eb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	b082      	sub	sp, #8
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eba:	6878      	ldr	r0, [r7, #4]
 8000ebc:	f7ff ffa2 	bl	8000e04 <SysTick_Config>
 8000ec0:	4603      	mov	r3, r0
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
	...

08000ecc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b08b      	sub	sp, #44	; 0x2c
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000eda:	2300      	movs	r3, #0
 8000edc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ede:	e127      	b.n	8001130 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	69fa      	ldr	r2, [r7, #28]
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ef4:	69ba      	ldr	r2, [r7, #24]
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	f040 8116 	bne.w	800112a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	2b12      	cmp	r3, #18
 8000f04:	d034      	beq.n	8000f70 <HAL_GPIO_Init+0xa4>
 8000f06:	2b12      	cmp	r3, #18
 8000f08:	d80d      	bhi.n	8000f26 <HAL_GPIO_Init+0x5a>
 8000f0a:	2b02      	cmp	r3, #2
 8000f0c:	d02b      	beq.n	8000f66 <HAL_GPIO_Init+0x9a>
 8000f0e:	2b02      	cmp	r3, #2
 8000f10:	d804      	bhi.n	8000f1c <HAL_GPIO_Init+0x50>
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d031      	beq.n	8000f7a <HAL_GPIO_Init+0xae>
 8000f16:	2b01      	cmp	r3, #1
 8000f18:	d01c      	beq.n	8000f54 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000f1a:	e048      	b.n	8000fae <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000f1c:	2b03      	cmp	r3, #3
 8000f1e:	d043      	beq.n	8000fa8 <HAL_GPIO_Init+0xdc>
 8000f20:	2b11      	cmp	r3, #17
 8000f22:	d01b      	beq.n	8000f5c <HAL_GPIO_Init+0x90>
          break;
 8000f24:	e043      	b.n	8000fae <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000f26:	4a89      	ldr	r2, [pc, #548]	; (800114c <HAL_GPIO_Init+0x280>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d026      	beq.n	8000f7a <HAL_GPIO_Init+0xae>
 8000f2c:	4a87      	ldr	r2, [pc, #540]	; (800114c <HAL_GPIO_Init+0x280>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d806      	bhi.n	8000f40 <HAL_GPIO_Init+0x74>
 8000f32:	4a87      	ldr	r2, [pc, #540]	; (8001150 <HAL_GPIO_Init+0x284>)
 8000f34:	4293      	cmp	r3, r2
 8000f36:	d020      	beq.n	8000f7a <HAL_GPIO_Init+0xae>
 8000f38:	4a86      	ldr	r2, [pc, #536]	; (8001154 <HAL_GPIO_Init+0x288>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d01d      	beq.n	8000f7a <HAL_GPIO_Init+0xae>
          break;
 8000f3e:	e036      	b.n	8000fae <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000f40:	4a85      	ldr	r2, [pc, #532]	; (8001158 <HAL_GPIO_Init+0x28c>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d019      	beq.n	8000f7a <HAL_GPIO_Init+0xae>
 8000f46:	4a85      	ldr	r2, [pc, #532]	; (800115c <HAL_GPIO_Init+0x290>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d016      	beq.n	8000f7a <HAL_GPIO_Init+0xae>
 8000f4c:	4a84      	ldr	r2, [pc, #528]	; (8001160 <HAL_GPIO_Init+0x294>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d013      	beq.n	8000f7a <HAL_GPIO_Init+0xae>
          break;
 8000f52:	e02c      	b.n	8000fae <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	68db      	ldr	r3, [r3, #12]
 8000f58:	623b      	str	r3, [r7, #32]
          break;
 8000f5a:	e028      	b.n	8000fae <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	3304      	adds	r3, #4
 8000f62:	623b      	str	r3, [r7, #32]
          break;
 8000f64:	e023      	b.n	8000fae <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	68db      	ldr	r3, [r3, #12]
 8000f6a:	3308      	adds	r3, #8
 8000f6c:	623b      	str	r3, [r7, #32]
          break;
 8000f6e:	e01e      	b.n	8000fae <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	68db      	ldr	r3, [r3, #12]
 8000f74:	330c      	adds	r3, #12
 8000f76:	623b      	str	r3, [r7, #32]
          break;
 8000f78:	e019      	b.n	8000fae <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	689b      	ldr	r3, [r3, #8]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d102      	bne.n	8000f88 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f82:	2304      	movs	r3, #4
 8000f84:	623b      	str	r3, [r7, #32]
          break;
 8000f86:	e012      	b.n	8000fae <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	689b      	ldr	r3, [r3, #8]
 8000f8c:	2b01      	cmp	r3, #1
 8000f8e:	d105      	bne.n	8000f9c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f90:	2308      	movs	r3, #8
 8000f92:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	69fa      	ldr	r2, [r7, #28]
 8000f98:	611a      	str	r2, [r3, #16]
          break;
 8000f9a:	e008      	b.n	8000fae <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f9c:	2308      	movs	r3, #8
 8000f9e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	69fa      	ldr	r2, [r7, #28]
 8000fa4:	615a      	str	r2, [r3, #20]
          break;
 8000fa6:	e002      	b.n	8000fae <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	623b      	str	r3, [r7, #32]
          break;
 8000fac:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000fae:	69bb      	ldr	r3, [r7, #24]
 8000fb0:	2bff      	cmp	r3, #255	; 0xff
 8000fb2:	d801      	bhi.n	8000fb8 <HAL_GPIO_Init+0xec>
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	e001      	b.n	8000fbc <HAL_GPIO_Init+0xf0>
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	3304      	adds	r3, #4
 8000fbc:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000fbe:	69bb      	ldr	r3, [r7, #24]
 8000fc0:	2bff      	cmp	r3, #255	; 0xff
 8000fc2:	d802      	bhi.n	8000fca <HAL_GPIO_Init+0xfe>
 8000fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc6:	009b      	lsls	r3, r3, #2
 8000fc8:	e002      	b.n	8000fd0 <HAL_GPIO_Init+0x104>
 8000fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fcc:	3b08      	subs	r3, #8
 8000fce:	009b      	lsls	r3, r3, #2
 8000fd0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	210f      	movs	r1, #15
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	fa01 f303 	lsl.w	r3, r1, r3
 8000fde:	43db      	mvns	r3, r3
 8000fe0:	401a      	ands	r2, r3
 8000fe2:	6a39      	ldr	r1, [r7, #32]
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8000fea:	431a      	orrs	r2, r3
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	f000 8096 	beq.w	800112a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ffe:	4b59      	ldr	r3, [pc, #356]	; (8001164 <HAL_GPIO_Init+0x298>)
 8001000:	699b      	ldr	r3, [r3, #24]
 8001002:	4a58      	ldr	r2, [pc, #352]	; (8001164 <HAL_GPIO_Init+0x298>)
 8001004:	f043 0301 	orr.w	r3, r3, #1
 8001008:	6193      	str	r3, [r2, #24]
 800100a:	4b56      	ldr	r3, [pc, #344]	; (8001164 <HAL_GPIO_Init+0x298>)
 800100c:	699b      	ldr	r3, [r3, #24]
 800100e:	f003 0301 	and.w	r3, r3, #1
 8001012:	60bb      	str	r3, [r7, #8]
 8001014:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001016:	4a54      	ldr	r2, [pc, #336]	; (8001168 <HAL_GPIO_Init+0x29c>)
 8001018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800101a:	089b      	lsrs	r3, r3, #2
 800101c:	3302      	adds	r3, #2
 800101e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001022:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001026:	f003 0303 	and.w	r3, r3, #3
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	220f      	movs	r2, #15
 800102e:	fa02 f303 	lsl.w	r3, r2, r3
 8001032:	43db      	mvns	r3, r3
 8001034:	68fa      	ldr	r2, [r7, #12]
 8001036:	4013      	ands	r3, r2
 8001038:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4a4b      	ldr	r2, [pc, #300]	; (800116c <HAL_GPIO_Init+0x2a0>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d013      	beq.n	800106a <HAL_GPIO_Init+0x19e>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4a4a      	ldr	r2, [pc, #296]	; (8001170 <HAL_GPIO_Init+0x2a4>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d00d      	beq.n	8001066 <HAL_GPIO_Init+0x19a>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4a49      	ldr	r2, [pc, #292]	; (8001174 <HAL_GPIO_Init+0x2a8>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d007      	beq.n	8001062 <HAL_GPIO_Init+0x196>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4a48      	ldr	r2, [pc, #288]	; (8001178 <HAL_GPIO_Init+0x2ac>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d101      	bne.n	800105e <HAL_GPIO_Init+0x192>
 800105a:	2303      	movs	r3, #3
 800105c:	e006      	b.n	800106c <HAL_GPIO_Init+0x1a0>
 800105e:	2304      	movs	r3, #4
 8001060:	e004      	b.n	800106c <HAL_GPIO_Init+0x1a0>
 8001062:	2302      	movs	r3, #2
 8001064:	e002      	b.n	800106c <HAL_GPIO_Init+0x1a0>
 8001066:	2301      	movs	r3, #1
 8001068:	e000      	b.n	800106c <HAL_GPIO_Init+0x1a0>
 800106a:	2300      	movs	r3, #0
 800106c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800106e:	f002 0203 	and.w	r2, r2, #3
 8001072:	0092      	lsls	r2, r2, #2
 8001074:	4093      	lsls	r3, r2
 8001076:	68fa      	ldr	r2, [r7, #12]
 8001078:	4313      	orrs	r3, r2
 800107a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800107c:	493a      	ldr	r1, [pc, #232]	; (8001168 <HAL_GPIO_Init+0x29c>)
 800107e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001080:	089b      	lsrs	r3, r3, #2
 8001082:	3302      	adds	r3, #2
 8001084:	68fa      	ldr	r2, [r7, #12]
 8001086:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001092:	2b00      	cmp	r3, #0
 8001094:	d006      	beq.n	80010a4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001096:	4b39      	ldr	r3, [pc, #228]	; (800117c <HAL_GPIO_Init+0x2b0>)
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	4938      	ldr	r1, [pc, #224]	; (800117c <HAL_GPIO_Init+0x2b0>)
 800109c:	69bb      	ldr	r3, [r7, #24]
 800109e:	4313      	orrs	r3, r2
 80010a0:	600b      	str	r3, [r1, #0]
 80010a2:	e006      	b.n	80010b2 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80010a4:	4b35      	ldr	r3, [pc, #212]	; (800117c <HAL_GPIO_Init+0x2b0>)
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	69bb      	ldr	r3, [r7, #24]
 80010aa:	43db      	mvns	r3, r3
 80010ac:	4933      	ldr	r1, [pc, #204]	; (800117c <HAL_GPIO_Init+0x2b0>)
 80010ae:	4013      	ands	r3, r2
 80010b0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d006      	beq.n	80010cc <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80010be:	4b2f      	ldr	r3, [pc, #188]	; (800117c <HAL_GPIO_Init+0x2b0>)
 80010c0:	685a      	ldr	r2, [r3, #4]
 80010c2:	492e      	ldr	r1, [pc, #184]	; (800117c <HAL_GPIO_Init+0x2b0>)
 80010c4:	69bb      	ldr	r3, [r7, #24]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	604b      	str	r3, [r1, #4]
 80010ca:	e006      	b.n	80010da <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80010cc:	4b2b      	ldr	r3, [pc, #172]	; (800117c <HAL_GPIO_Init+0x2b0>)
 80010ce:	685a      	ldr	r2, [r3, #4]
 80010d0:	69bb      	ldr	r3, [r7, #24]
 80010d2:	43db      	mvns	r3, r3
 80010d4:	4929      	ldr	r1, [pc, #164]	; (800117c <HAL_GPIO_Init+0x2b0>)
 80010d6:	4013      	ands	r3, r2
 80010d8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d006      	beq.n	80010f4 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80010e6:	4b25      	ldr	r3, [pc, #148]	; (800117c <HAL_GPIO_Init+0x2b0>)
 80010e8:	689a      	ldr	r2, [r3, #8]
 80010ea:	4924      	ldr	r1, [pc, #144]	; (800117c <HAL_GPIO_Init+0x2b0>)
 80010ec:	69bb      	ldr	r3, [r7, #24]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	608b      	str	r3, [r1, #8]
 80010f2:	e006      	b.n	8001102 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80010f4:	4b21      	ldr	r3, [pc, #132]	; (800117c <HAL_GPIO_Init+0x2b0>)
 80010f6:	689a      	ldr	r2, [r3, #8]
 80010f8:	69bb      	ldr	r3, [r7, #24]
 80010fa:	43db      	mvns	r3, r3
 80010fc:	491f      	ldr	r1, [pc, #124]	; (800117c <HAL_GPIO_Init+0x2b0>)
 80010fe:	4013      	ands	r3, r2
 8001100:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800110a:	2b00      	cmp	r3, #0
 800110c:	d006      	beq.n	800111c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800110e:	4b1b      	ldr	r3, [pc, #108]	; (800117c <HAL_GPIO_Init+0x2b0>)
 8001110:	68da      	ldr	r2, [r3, #12]
 8001112:	491a      	ldr	r1, [pc, #104]	; (800117c <HAL_GPIO_Init+0x2b0>)
 8001114:	69bb      	ldr	r3, [r7, #24]
 8001116:	4313      	orrs	r3, r2
 8001118:	60cb      	str	r3, [r1, #12]
 800111a:	e006      	b.n	800112a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800111c:	4b17      	ldr	r3, [pc, #92]	; (800117c <HAL_GPIO_Init+0x2b0>)
 800111e:	68da      	ldr	r2, [r3, #12]
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	43db      	mvns	r3, r3
 8001124:	4915      	ldr	r1, [pc, #84]	; (800117c <HAL_GPIO_Init+0x2b0>)
 8001126:	4013      	ands	r3, r2
 8001128:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800112a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800112c:	3301      	adds	r3, #1
 800112e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001136:	fa22 f303 	lsr.w	r3, r2, r3
 800113a:	2b00      	cmp	r3, #0
 800113c:	f47f aed0 	bne.w	8000ee0 <HAL_GPIO_Init+0x14>
  }
}
 8001140:	bf00      	nop
 8001142:	372c      	adds	r7, #44	; 0x2c
 8001144:	46bd      	mov	sp, r7
 8001146:	bc80      	pop	{r7}
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	10210000 	.word	0x10210000
 8001150:	10110000 	.word	0x10110000
 8001154:	10120000 	.word	0x10120000
 8001158:	10310000 	.word	0x10310000
 800115c:	10320000 	.word	0x10320000
 8001160:	10220000 	.word	0x10220000
 8001164:	40021000 	.word	0x40021000
 8001168:	40010000 	.word	0x40010000
 800116c:	40010800 	.word	0x40010800
 8001170:	40010c00 	.word	0x40010c00
 8001174:	40011000 	.word	0x40011000
 8001178:	40011400 	.word	0x40011400
 800117c:	40010400 	.word	0x40010400

08001180 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	460b      	mov	r3, r1
 800118a:	807b      	strh	r3, [r7, #2]
 800118c:	4613      	mov	r3, r2
 800118e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001190:	787b      	ldrb	r3, [r7, #1]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d003      	beq.n	800119e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001196:	887a      	ldrh	r2, [r7, #2]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800119c:	e003      	b.n	80011a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800119e:	887b      	ldrh	r3, [r7, #2]
 80011a0:	041a      	lsls	r2, r3, #16
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	611a      	str	r2, [r3, #16]
}
 80011a6:	bf00      	nop
 80011a8:	370c      	adds	r7, #12
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bc80      	pop	{r7}
 80011ae:	4770      	bx	lr

080011b0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b085      	sub	sp, #20
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	460b      	mov	r3, r1
 80011ba:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011c2:	887a      	ldrh	r2, [r7, #2]
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	4013      	ands	r3, r2
 80011c8:	041a      	lsls	r2, r3, #16
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	43d9      	mvns	r1, r3
 80011ce:	887b      	ldrh	r3, [r7, #2]
 80011d0:	400b      	ands	r3, r1
 80011d2:	431a      	orrs	r2, r3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	611a      	str	r2, [r3, #16]
}
 80011d8:	bf00      	nop
 80011da:	3714      	adds	r7, #20
 80011dc:	46bd      	mov	sp, r7
 80011de:	bc80      	pop	{r7}
 80011e0:	4770      	bx	lr
	...

080011e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b084      	sub	sp, #16
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d101      	bne.n	80011f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80011f2:	2301      	movs	r3, #1
 80011f4:	e11f      	b.n	8001436 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d106      	bne.n	8001210 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2200      	movs	r2, #0
 8001206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f7ff f84e 	bl	80002ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2224      	movs	r2, #36	; 0x24
 8001214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f022 0201 	bic.w	r2, r2, #1
 8001226:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001236:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001246:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001248:	f000 fcda 	bl	8001c00 <HAL_RCC_GetPCLK1Freq>
 800124c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	4a7b      	ldr	r2, [pc, #492]	; (8001440 <HAL_I2C_Init+0x25c>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d807      	bhi.n	8001268 <HAL_I2C_Init+0x84>
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	4a7a      	ldr	r2, [pc, #488]	; (8001444 <HAL_I2C_Init+0x260>)
 800125c:	4293      	cmp	r3, r2
 800125e:	bf94      	ite	ls
 8001260:	2301      	movls	r3, #1
 8001262:	2300      	movhi	r3, #0
 8001264:	b2db      	uxtb	r3, r3
 8001266:	e006      	b.n	8001276 <HAL_I2C_Init+0x92>
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	4a77      	ldr	r2, [pc, #476]	; (8001448 <HAL_I2C_Init+0x264>)
 800126c:	4293      	cmp	r3, r2
 800126e:	bf94      	ite	ls
 8001270:	2301      	movls	r3, #1
 8001272:	2300      	movhi	r3, #0
 8001274:	b2db      	uxtb	r3, r3
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	e0db      	b.n	8001436 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	4a72      	ldr	r2, [pc, #456]	; (800144c <HAL_I2C_Init+0x268>)
 8001282:	fba2 2303 	umull	r2, r3, r2, r3
 8001286:	0c9b      	lsrs	r3, r3, #18
 8001288:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	68ba      	ldr	r2, [r7, #8]
 800129a:	430a      	orrs	r2, r1
 800129c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	6a1b      	ldr	r3, [r3, #32]
 80012a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	4a64      	ldr	r2, [pc, #400]	; (8001440 <HAL_I2C_Init+0x25c>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d802      	bhi.n	80012b8 <HAL_I2C_Init+0xd4>
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	3301      	adds	r3, #1
 80012b6:	e009      	b.n	80012cc <HAL_I2C_Init+0xe8>
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80012be:	fb02 f303 	mul.w	r3, r2, r3
 80012c2:	4a63      	ldr	r2, [pc, #396]	; (8001450 <HAL_I2C_Init+0x26c>)
 80012c4:	fba2 2303 	umull	r2, r3, r2, r3
 80012c8:	099b      	lsrs	r3, r3, #6
 80012ca:	3301      	adds	r3, #1
 80012cc:	687a      	ldr	r2, [r7, #4]
 80012ce:	6812      	ldr	r2, [r2, #0]
 80012d0:	430b      	orrs	r3, r1
 80012d2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	69db      	ldr	r3, [r3, #28]
 80012da:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80012de:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	4956      	ldr	r1, [pc, #344]	; (8001440 <HAL_I2C_Init+0x25c>)
 80012e8:	428b      	cmp	r3, r1
 80012ea:	d80d      	bhi.n	8001308 <HAL_I2C_Init+0x124>
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	1e59      	subs	r1, r3, #1
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	005b      	lsls	r3, r3, #1
 80012f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80012fa:	3301      	adds	r3, #1
 80012fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001300:	2b04      	cmp	r3, #4
 8001302:	bf38      	it	cc
 8001304:	2304      	movcc	r3, #4
 8001306:	e04f      	b.n	80013a8 <HAL_I2C_Init+0x1c4>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d111      	bne.n	8001334 <HAL_I2C_Init+0x150>
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	1e58      	subs	r0, r3, #1
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6859      	ldr	r1, [r3, #4]
 8001318:	460b      	mov	r3, r1
 800131a:	005b      	lsls	r3, r3, #1
 800131c:	440b      	add	r3, r1
 800131e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001322:	3301      	adds	r3, #1
 8001324:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001328:	2b00      	cmp	r3, #0
 800132a:	bf0c      	ite	eq
 800132c:	2301      	moveq	r3, #1
 800132e:	2300      	movne	r3, #0
 8001330:	b2db      	uxtb	r3, r3
 8001332:	e012      	b.n	800135a <HAL_I2C_Init+0x176>
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	1e58      	subs	r0, r3, #1
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6859      	ldr	r1, [r3, #4]
 800133c:	460b      	mov	r3, r1
 800133e:	009b      	lsls	r3, r3, #2
 8001340:	440b      	add	r3, r1
 8001342:	0099      	lsls	r1, r3, #2
 8001344:	440b      	add	r3, r1
 8001346:	fbb0 f3f3 	udiv	r3, r0, r3
 800134a:	3301      	adds	r3, #1
 800134c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001350:	2b00      	cmp	r3, #0
 8001352:	bf0c      	ite	eq
 8001354:	2301      	moveq	r3, #1
 8001356:	2300      	movne	r3, #0
 8001358:	b2db      	uxtb	r3, r3
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <HAL_I2C_Init+0x17e>
 800135e:	2301      	movs	r3, #1
 8001360:	e022      	b.n	80013a8 <HAL_I2C_Init+0x1c4>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d10e      	bne.n	8001388 <HAL_I2C_Init+0x1a4>
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	1e58      	subs	r0, r3, #1
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6859      	ldr	r1, [r3, #4]
 8001372:	460b      	mov	r3, r1
 8001374:	005b      	lsls	r3, r3, #1
 8001376:	440b      	add	r3, r1
 8001378:	fbb0 f3f3 	udiv	r3, r0, r3
 800137c:	3301      	adds	r3, #1
 800137e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001382:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001386:	e00f      	b.n	80013a8 <HAL_I2C_Init+0x1c4>
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	1e58      	subs	r0, r3, #1
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6859      	ldr	r1, [r3, #4]
 8001390:	460b      	mov	r3, r1
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	440b      	add	r3, r1
 8001396:	0099      	lsls	r1, r3, #2
 8001398:	440b      	add	r3, r1
 800139a:	fbb0 f3f3 	udiv	r3, r0, r3
 800139e:	3301      	adds	r3, #1
 80013a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80013a8:	6879      	ldr	r1, [r7, #4]
 80013aa:	6809      	ldr	r1, [r1, #0]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	69da      	ldr	r2, [r3, #28]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6a1b      	ldr	r3, [r3, #32]
 80013c2:	431a      	orrs	r2, r3
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	430a      	orrs	r2, r1
 80013ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80013d6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80013da:	687a      	ldr	r2, [r7, #4]
 80013dc:	6911      	ldr	r1, [r2, #16]
 80013de:	687a      	ldr	r2, [r7, #4]
 80013e0:	68d2      	ldr	r2, [r2, #12]
 80013e2:	4311      	orrs	r1, r2
 80013e4:	687a      	ldr	r2, [r7, #4]
 80013e6:	6812      	ldr	r2, [r2, #0]
 80013e8:	430b      	orrs	r3, r1
 80013ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	68db      	ldr	r3, [r3, #12]
 80013f2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	695a      	ldr	r2, [r3, #20]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	699b      	ldr	r3, [r3, #24]
 80013fe:	431a      	orrs	r2, r3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	430a      	orrs	r2, r1
 8001406:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f042 0201 	orr.w	r2, r2, #1
 8001416:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2200      	movs	r2, #0
 800141c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2220      	movs	r2, #32
 8001422:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2200      	movs	r2, #0
 800142a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2200      	movs	r2, #0
 8001430:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001434:	2300      	movs	r3, #0
}
 8001436:	4618      	mov	r0, r3
 8001438:	3710      	adds	r7, #16
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	000186a0 	.word	0x000186a0
 8001444:	001e847f 	.word	0x001e847f
 8001448:	003d08ff 	.word	0x003d08ff
 800144c:	431bde83 	.word	0x431bde83
 8001450:	10624dd3 	.word	0x10624dd3

08001454 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b086      	sub	sp, #24
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d101      	bne.n	8001466 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e26c      	b.n	8001940 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f003 0301 	and.w	r3, r3, #1
 800146e:	2b00      	cmp	r3, #0
 8001470:	f000 8087 	beq.w	8001582 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001474:	4b92      	ldr	r3, [pc, #584]	; (80016c0 <HAL_RCC_OscConfig+0x26c>)
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f003 030c 	and.w	r3, r3, #12
 800147c:	2b04      	cmp	r3, #4
 800147e:	d00c      	beq.n	800149a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001480:	4b8f      	ldr	r3, [pc, #572]	; (80016c0 <HAL_RCC_OscConfig+0x26c>)
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f003 030c 	and.w	r3, r3, #12
 8001488:	2b08      	cmp	r3, #8
 800148a:	d112      	bne.n	80014b2 <HAL_RCC_OscConfig+0x5e>
 800148c:	4b8c      	ldr	r3, [pc, #560]	; (80016c0 <HAL_RCC_OscConfig+0x26c>)
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001494:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001498:	d10b      	bne.n	80014b2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800149a:	4b89      	ldr	r3, [pc, #548]	; (80016c0 <HAL_RCC_OscConfig+0x26c>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d06c      	beq.n	8001580 <HAL_RCC_OscConfig+0x12c>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d168      	bne.n	8001580 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e246      	b.n	8001940 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014ba:	d106      	bne.n	80014ca <HAL_RCC_OscConfig+0x76>
 80014bc:	4b80      	ldr	r3, [pc, #512]	; (80016c0 <HAL_RCC_OscConfig+0x26c>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a7f      	ldr	r2, [pc, #508]	; (80016c0 <HAL_RCC_OscConfig+0x26c>)
 80014c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014c6:	6013      	str	r3, [r2, #0]
 80014c8:	e02e      	b.n	8001528 <HAL_RCC_OscConfig+0xd4>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d10c      	bne.n	80014ec <HAL_RCC_OscConfig+0x98>
 80014d2:	4b7b      	ldr	r3, [pc, #492]	; (80016c0 <HAL_RCC_OscConfig+0x26c>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a7a      	ldr	r2, [pc, #488]	; (80016c0 <HAL_RCC_OscConfig+0x26c>)
 80014d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014dc:	6013      	str	r3, [r2, #0]
 80014de:	4b78      	ldr	r3, [pc, #480]	; (80016c0 <HAL_RCC_OscConfig+0x26c>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a77      	ldr	r2, [pc, #476]	; (80016c0 <HAL_RCC_OscConfig+0x26c>)
 80014e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014e8:	6013      	str	r3, [r2, #0]
 80014ea:	e01d      	b.n	8001528 <HAL_RCC_OscConfig+0xd4>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014f4:	d10c      	bne.n	8001510 <HAL_RCC_OscConfig+0xbc>
 80014f6:	4b72      	ldr	r3, [pc, #456]	; (80016c0 <HAL_RCC_OscConfig+0x26c>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a71      	ldr	r2, [pc, #452]	; (80016c0 <HAL_RCC_OscConfig+0x26c>)
 80014fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001500:	6013      	str	r3, [r2, #0]
 8001502:	4b6f      	ldr	r3, [pc, #444]	; (80016c0 <HAL_RCC_OscConfig+0x26c>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a6e      	ldr	r2, [pc, #440]	; (80016c0 <HAL_RCC_OscConfig+0x26c>)
 8001508:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800150c:	6013      	str	r3, [r2, #0]
 800150e:	e00b      	b.n	8001528 <HAL_RCC_OscConfig+0xd4>
 8001510:	4b6b      	ldr	r3, [pc, #428]	; (80016c0 <HAL_RCC_OscConfig+0x26c>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a6a      	ldr	r2, [pc, #424]	; (80016c0 <HAL_RCC_OscConfig+0x26c>)
 8001516:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800151a:	6013      	str	r3, [r2, #0]
 800151c:	4b68      	ldr	r3, [pc, #416]	; (80016c0 <HAL_RCC_OscConfig+0x26c>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a67      	ldr	r2, [pc, #412]	; (80016c0 <HAL_RCC_OscConfig+0x26c>)
 8001522:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001526:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d013      	beq.n	8001558 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001530:	f7ff fb92 	bl	8000c58 <HAL_GetTick>
 8001534:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001536:	e008      	b.n	800154a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001538:	f7ff fb8e 	bl	8000c58 <HAL_GetTick>
 800153c:	4602      	mov	r2, r0
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	2b64      	cmp	r3, #100	; 0x64
 8001544:	d901      	bls.n	800154a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001546:	2303      	movs	r3, #3
 8001548:	e1fa      	b.n	8001940 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800154a:	4b5d      	ldr	r3, [pc, #372]	; (80016c0 <HAL_RCC_OscConfig+0x26c>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d0f0      	beq.n	8001538 <HAL_RCC_OscConfig+0xe4>
 8001556:	e014      	b.n	8001582 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001558:	f7ff fb7e 	bl	8000c58 <HAL_GetTick>
 800155c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800155e:	e008      	b.n	8001572 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001560:	f7ff fb7a 	bl	8000c58 <HAL_GetTick>
 8001564:	4602      	mov	r2, r0
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	2b64      	cmp	r3, #100	; 0x64
 800156c:	d901      	bls.n	8001572 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800156e:	2303      	movs	r3, #3
 8001570:	e1e6      	b.n	8001940 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001572:	4b53      	ldr	r3, [pc, #332]	; (80016c0 <HAL_RCC_OscConfig+0x26c>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800157a:	2b00      	cmp	r3, #0
 800157c:	d1f0      	bne.n	8001560 <HAL_RCC_OscConfig+0x10c>
 800157e:	e000      	b.n	8001582 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001580:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 0302 	and.w	r3, r3, #2
 800158a:	2b00      	cmp	r3, #0
 800158c:	d063      	beq.n	8001656 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800158e:	4b4c      	ldr	r3, [pc, #304]	; (80016c0 <HAL_RCC_OscConfig+0x26c>)
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f003 030c 	and.w	r3, r3, #12
 8001596:	2b00      	cmp	r3, #0
 8001598:	d00b      	beq.n	80015b2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800159a:	4b49      	ldr	r3, [pc, #292]	; (80016c0 <HAL_RCC_OscConfig+0x26c>)
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f003 030c 	and.w	r3, r3, #12
 80015a2:	2b08      	cmp	r3, #8
 80015a4:	d11c      	bne.n	80015e0 <HAL_RCC_OscConfig+0x18c>
 80015a6:	4b46      	ldr	r3, [pc, #280]	; (80016c0 <HAL_RCC_OscConfig+0x26c>)
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d116      	bne.n	80015e0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015b2:	4b43      	ldr	r3, [pc, #268]	; (80016c0 <HAL_RCC_OscConfig+0x26c>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 0302 	and.w	r3, r3, #2
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d005      	beq.n	80015ca <HAL_RCC_OscConfig+0x176>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	691b      	ldr	r3, [r3, #16]
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d001      	beq.n	80015ca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e1ba      	b.n	8001940 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015ca:	4b3d      	ldr	r3, [pc, #244]	; (80016c0 <HAL_RCC_OscConfig+0x26c>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	695b      	ldr	r3, [r3, #20]
 80015d6:	00db      	lsls	r3, r3, #3
 80015d8:	4939      	ldr	r1, [pc, #228]	; (80016c0 <HAL_RCC_OscConfig+0x26c>)
 80015da:	4313      	orrs	r3, r2
 80015dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015de:	e03a      	b.n	8001656 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	691b      	ldr	r3, [r3, #16]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d020      	beq.n	800162a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015e8:	4b36      	ldr	r3, [pc, #216]	; (80016c4 <HAL_RCC_OscConfig+0x270>)
 80015ea:	2201      	movs	r2, #1
 80015ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ee:	f7ff fb33 	bl	8000c58 <HAL_GetTick>
 80015f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015f4:	e008      	b.n	8001608 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015f6:	f7ff fb2f 	bl	8000c58 <HAL_GetTick>
 80015fa:	4602      	mov	r2, r0
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	1ad3      	subs	r3, r2, r3
 8001600:	2b02      	cmp	r3, #2
 8001602:	d901      	bls.n	8001608 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001604:	2303      	movs	r3, #3
 8001606:	e19b      	b.n	8001940 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001608:	4b2d      	ldr	r3, [pc, #180]	; (80016c0 <HAL_RCC_OscConfig+0x26c>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f003 0302 	and.w	r3, r3, #2
 8001610:	2b00      	cmp	r3, #0
 8001612:	d0f0      	beq.n	80015f6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001614:	4b2a      	ldr	r3, [pc, #168]	; (80016c0 <HAL_RCC_OscConfig+0x26c>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	695b      	ldr	r3, [r3, #20]
 8001620:	00db      	lsls	r3, r3, #3
 8001622:	4927      	ldr	r1, [pc, #156]	; (80016c0 <HAL_RCC_OscConfig+0x26c>)
 8001624:	4313      	orrs	r3, r2
 8001626:	600b      	str	r3, [r1, #0]
 8001628:	e015      	b.n	8001656 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800162a:	4b26      	ldr	r3, [pc, #152]	; (80016c4 <HAL_RCC_OscConfig+0x270>)
 800162c:	2200      	movs	r2, #0
 800162e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001630:	f7ff fb12 	bl	8000c58 <HAL_GetTick>
 8001634:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001636:	e008      	b.n	800164a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001638:	f7ff fb0e 	bl	8000c58 <HAL_GetTick>
 800163c:	4602      	mov	r2, r0
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	2b02      	cmp	r3, #2
 8001644:	d901      	bls.n	800164a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001646:	2303      	movs	r3, #3
 8001648:	e17a      	b.n	8001940 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800164a:	4b1d      	ldr	r3, [pc, #116]	; (80016c0 <HAL_RCC_OscConfig+0x26c>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 0302 	and.w	r3, r3, #2
 8001652:	2b00      	cmp	r3, #0
 8001654:	d1f0      	bne.n	8001638 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 0308 	and.w	r3, r3, #8
 800165e:	2b00      	cmp	r3, #0
 8001660:	d03a      	beq.n	80016d8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	699b      	ldr	r3, [r3, #24]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d019      	beq.n	800169e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800166a:	4b17      	ldr	r3, [pc, #92]	; (80016c8 <HAL_RCC_OscConfig+0x274>)
 800166c:	2201      	movs	r2, #1
 800166e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001670:	f7ff faf2 	bl	8000c58 <HAL_GetTick>
 8001674:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001676:	e008      	b.n	800168a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001678:	f7ff faee 	bl	8000c58 <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	2b02      	cmp	r3, #2
 8001684:	d901      	bls.n	800168a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e15a      	b.n	8001940 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800168a:	4b0d      	ldr	r3, [pc, #52]	; (80016c0 <HAL_RCC_OscConfig+0x26c>)
 800168c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800168e:	f003 0302 	and.w	r3, r3, #2
 8001692:	2b00      	cmp	r3, #0
 8001694:	d0f0      	beq.n	8001678 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001696:	2001      	movs	r0, #1
 8001698:	f000 fac6 	bl	8001c28 <RCC_Delay>
 800169c:	e01c      	b.n	80016d8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800169e:	4b0a      	ldr	r3, [pc, #40]	; (80016c8 <HAL_RCC_OscConfig+0x274>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016a4:	f7ff fad8 	bl	8000c58 <HAL_GetTick>
 80016a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016aa:	e00f      	b.n	80016cc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016ac:	f7ff fad4 	bl	8000c58 <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	2b02      	cmp	r3, #2
 80016b8:	d908      	bls.n	80016cc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80016ba:	2303      	movs	r3, #3
 80016bc:	e140      	b.n	8001940 <HAL_RCC_OscConfig+0x4ec>
 80016be:	bf00      	nop
 80016c0:	40021000 	.word	0x40021000
 80016c4:	42420000 	.word	0x42420000
 80016c8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016cc:	4b9e      	ldr	r3, [pc, #632]	; (8001948 <HAL_RCC_OscConfig+0x4f4>)
 80016ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d0:	f003 0302 	and.w	r3, r3, #2
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d1e9      	bne.n	80016ac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f003 0304 	and.w	r3, r3, #4
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	f000 80a6 	beq.w	8001832 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016e6:	2300      	movs	r3, #0
 80016e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016ea:	4b97      	ldr	r3, [pc, #604]	; (8001948 <HAL_RCC_OscConfig+0x4f4>)
 80016ec:	69db      	ldr	r3, [r3, #28]
 80016ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d10d      	bne.n	8001712 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016f6:	4b94      	ldr	r3, [pc, #592]	; (8001948 <HAL_RCC_OscConfig+0x4f4>)
 80016f8:	69db      	ldr	r3, [r3, #28]
 80016fa:	4a93      	ldr	r2, [pc, #588]	; (8001948 <HAL_RCC_OscConfig+0x4f4>)
 80016fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001700:	61d3      	str	r3, [r2, #28]
 8001702:	4b91      	ldr	r3, [pc, #580]	; (8001948 <HAL_RCC_OscConfig+0x4f4>)
 8001704:	69db      	ldr	r3, [r3, #28]
 8001706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800170a:	60bb      	str	r3, [r7, #8]
 800170c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800170e:	2301      	movs	r3, #1
 8001710:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001712:	4b8e      	ldr	r3, [pc, #568]	; (800194c <HAL_RCC_OscConfig+0x4f8>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800171a:	2b00      	cmp	r3, #0
 800171c:	d118      	bne.n	8001750 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800171e:	4b8b      	ldr	r3, [pc, #556]	; (800194c <HAL_RCC_OscConfig+0x4f8>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a8a      	ldr	r2, [pc, #552]	; (800194c <HAL_RCC_OscConfig+0x4f8>)
 8001724:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001728:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800172a:	f7ff fa95 	bl	8000c58 <HAL_GetTick>
 800172e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001730:	e008      	b.n	8001744 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001732:	f7ff fa91 	bl	8000c58 <HAL_GetTick>
 8001736:	4602      	mov	r2, r0
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	2b64      	cmp	r3, #100	; 0x64
 800173e:	d901      	bls.n	8001744 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001740:	2303      	movs	r3, #3
 8001742:	e0fd      	b.n	8001940 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001744:	4b81      	ldr	r3, [pc, #516]	; (800194c <HAL_RCC_OscConfig+0x4f8>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800174c:	2b00      	cmp	r3, #0
 800174e:	d0f0      	beq.n	8001732 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	2b01      	cmp	r3, #1
 8001756:	d106      	bne.n	8001766 <HAL_RCC_OscConfig+0x312>
 8001758:	4b7b      	ldr	r3, [pc, #492]	; (8001948 <HAL_RCC_OscConfig+0x4f4>)
 800175a:	6a1b      	ldr	r3, [r3, #32]
 800175c:	4a7a      	ldr	r2, [pc, #488]	; (8001948 <HAL_RCC_OscConfig+0x4f4>)
 800175e:	f043 0301 	orr.w	r3, r3, #1
 8001762:	6213      	str	r3, [r2, #32]
 8001764:	e02d      	b.n	80017c2 <HAL_RCC_OscConfig+0x36e>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	68db      	ldr	r3, [r3, #12]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d10c      	bne.n	8001788 <HAL_RCC_OscConfig+0x334>
 800176e:	4b76      	ldr	r3, [pc, #472]	; (8001948 <HAL_RCC_OscConfig+0x4f4>)
 8001770:	6a1b      	ldr	r3, [r3, #32]
 8001772:	4a75      	ldr	r2, [pc, #468]	; (8001948 <HAL_RCC_OscConfig+0x4f4>)
 8001774:	f023 0301 	bic.w	r3, r3, #1
 8001778:	6213      	str	r3, [r2, #32]
 800177a:	4b73      	ldr	r3, [pc, #460]	; (8001948 <HAL_RCC_OscConfig+0x4f4>)
 800177c:	6a1b      	ldr	r3, [r3, #32]
 800177e:	4a72      	ldr	r2, [pc, #456]	; (8001948 <HAL_RCC_OscConfig+0x4f4>)
 8001780:	f023 0304 	bic.w	r3, r3, #4
 8001784:	6213      	str	r3, [r2, #32]
 8001786:	e01c      	b.n	80017c2 <HAL_RCC_OscConfig+0x36e>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	2b05      	cmp	r3, #5
 800178e:	d10c      	bne.n	80017aa <HAL_RCC_OscConfig+0x356>
 8001790:	4b6d      	ldr	r3, [pc, #436]	; (8001948 <HAL_RCC_OscConfig+0x4f4>)
 8001792:	6a1b      	ldr	r3, [r3, #32]
 8001794:	4a6c      	ldr	r2, [pc, #432]	; (8001948 <HAL_RCC_OscConfig+0x4f4>)
 8001796:	f043 0304 	orr.w	r3, r3, #4
 800179a:	6213      	str	r3, [r2, #32]
 800179c:	4b6a      	ldr	r3, [pc, #424]	; (8001948 <HAL_RCC_OscConfig+0x4f4>)
 800179e:	6a1b      	ldr	r3, [r3, #32]
 80017a0:	4a69      	ldr	r2, [pc, #420]	; (8001948 <HAL_RCC_OscConfig+0x4f4>)
 80017a2:	f043 0301 	orr.w	r3, r3, #1
 80017a6:	6213      	str	r3, [r2, #32]
 80017a8:	e00b      	b.n	80017c2 <HAL_RCC_OscConfig+0x36e>
 80017aa:	4b67      	ldr	r3, [pc, #412]	; (8001948 <HAL_RCC_OscConfig+0x4f4>)
 80017ac:	6a1b      	ldr	r3, [r3, #32]
 80017ae:	4a66      	ldr	r2, [pc, #408]	; (8001948 <HAL_RCC_OscConfig+0x4f4>)
 80017b0:	f023 0301 	bic.w	r3, r3, #1
 80017b4:	6213      	str	r3, [r2, #32]
 80017b6:	4b64      	ldr	r3, [pc, #400]	; (8001948 <HAL_RCC_OscConfig+0x4f4>)
 80017b8:	6a1b      	ldr	r3, [r3, #32]
 80017ba:	4a63      	ldr	r2, [pc, #396]	; (8001948 <HAL_RCC_OscConfig+0x4f4>)
 80017bc:	f023 0304 	bic.w	r3, r3, #4
 80017c0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	68db      	ldr	r3, [r3, #12]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d015      	beq.n	80017f6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017ca:	f7ff fa45 	bl	8000c58 <HAL_GetTick>
 80017ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017d0:	e00a      	b.n	80017e8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017d2:	f7ff fa41 	bl	8000c58 <HAL_GetTick>
 80017d6:	4602      	mov	r2, r0
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	1ad3      	subs	r3, r2, r3
 80017dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d901      	bls.n	80017e8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80017e4:	2303      	movs	r3, #3
 80017e6:	e0ab      	b.n	8001940 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017e8:	4b57      	ldr	r3, [pc, #348]	; (8001948 <HAL_RCC_OscConfig+0x4f4>)
 80017ea:	6a1b      	ldr	r3, [r3, #32]
 80017ec:	f003 0302 	and.w	r3, r3, #2
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d0ee      	beq.n	80017d2 <HAL_RCC_OscConfig+0x37e>
 80017f4:	e014      	b.n	8001820 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017f6:	f7ff fa2f 	bl	8000c58 <HAL_GetTick>
 80017fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017fc:	e00a      	b.n	8001814 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017fe:	f7ff fa2b 	bl	8000c58 <HAL_GetTick>
 8001802:	4602      	mov	r2, r0
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	f241 3288 	movw	r2, #5000	; 0x1388
 800180c:	4293      	cmp	r3, r2
 800180e:	d901      	bls.n	8001814 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001810:	2303      	movs	r3, #3
 8001812:	e095      	b.n	8001940 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001814:	4b4c      	ldr	r3, [pc, #304]	; (8001948 <HAL_RCC_OscConfig+0x4f4>)
 8001816:	6a1b      	ldr	r3, [r3, #32]
 8001818:	f003 0302 	and.w	r3, r3, #2
 800181c:	2b00      	cmp	r3, #0
 800181e:	d1ee      	bne.n	80017fe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001820:	7dfb      	ldrb	r3, [r7, #23]
 8001822:	2b01      	cmp	r3, #1
 8001824:	d105      	bne.n	8001832 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001826:	4b48      	ldr	r3, [pc, #288]	; (8001948 <HAL_RCC_OscConfig+0x4f4>)
 8001828:	69db      	ldr	r3, [r3, #28]
 800182a:	4a47      	ldr	r2, [pc, #284]	; (8001948 <HAL_RCC_OscConfig+0x4f4>)
 800182c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001830:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	69db      	ldr	r3, [r3, #28]
 8001836:	2b00      	cmp	r3, #0
 8001838:	f000 8081 	beq.w	800193e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800183c:	4b42      	ldr	r3, [pc, #264]	; (8001948 <HAL_RCC_OscConfig+0x4f4>)
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f003 030c 	and.w	r3, r3, #12
 8001844:	2b08      	cmp	r3, #8
 8001846:	d061      	beq.n	800190c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	69db      	ldr	r3, [r3, #28]
 800184c:	2b02      	cmp	r3, #2
 800184e:	d146      	bne.n	80018de <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001850:	4b3f      	ldr	r3, [pc, #252]	; (8001950 <HAL_RCC_OscConfig+0x4fc>)
 8001852:	2200      	movs	r2, #0
 8001854:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001856:	f7ff f9ff 	bl	8000c58 <HAL_GetTick>
 800185a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800185c:	e008      	b.n	8001870 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800185e:	f7ff f9fb 	bl	8000c58 <HAL_GetTick>
 8001862:	4602      	mov	r2, r0
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	1ad3      	subs	r3, r2, r3
 8001868:	2b02      	cmp	r3, #2
 800186a:	d901      	bls.n	8001870 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800186c:	2303      	movs	r3, #3
 800186e:	e067      	b.n	8001940 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001870:	4b35      	ldr	r3, [pc, #212]	; (8001948 <HAL_RCC_OscConfig+0x4f4>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001878:	2b00      	cmp	r3, #0
 800187a:	d1f0      	bne.n	800185e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6a1b      	ldr	r3, [r3, #32]
 8001880:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001884:	d108      	bne.n	8001898 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001886:	4b30      	ldr	r3, [pc, #192]	; (8001948 <HAL_RCC_OscConfig+0x4f4>)
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	492d      	ldr	r1, [pc, #180]	; (8001948 <HAL_RCC_OscConfig+0x4f4>)
 8001894:	4313      	orrs	r3, r2
 8001896:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001898:	4b2b      	ldr	r3, [pc, #172]	; (8001948 <HAL_RCC_OscConfig+0x4f4>)
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6a19      	ldr	r1, [r3, #32]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a8:	430b      	orrs	r3, r1
 80018aa:	4927      	ldr	r1, [pc, #156]	; (8001948 <HAL_RCC_OscConfig+0x4f4>)
 80018ac:	4313      	orrs	r3, r2
 80018ae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018b0:	4b27      	ldr	r3, [pc, #156]	; (8001950 <HAL_RCC_OscConfig+0x4fc>)
 80018b2:	2201      	movs	r2, #1
 80018b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b6:	f7ff f9cf 	bl	8000c58 <HAL_GetTick>
 80018ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018bc:	e008      	b.n	80018d0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018be:	f7ff f9cb 	bl	8000c58 <HAL_GetTick>
 80018c2:	4602      	mov	r2, r0
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	2b02      	cmp	r3, #2
 80018ca:	d901      	bls.n	80018d0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80018cc:	2303      	movs	r3, #3
 80018ce:	e037      	b.n	8001940 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018d0:	4b1d      	ldr	r3, [pc, #116]	; (8001948 <HAL_RCC_OscConfig+0x4f4>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d0f0      	beq.n	80018be <HAL_RCC_OscConfig+0x46a>
 80018dc:	e02f      	b.n	800193e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018de:	4b1c      	ldr	r3, [pc, #112]	; (8001950 <HAL_RCC_OscConfig+0x4fc>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018e4:	f7ff f9b8 	bl	8000c58 <HAL_GetTick>
 80018e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018ea:	e008      	b.n	80018fe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018ec:	f7ff f9b4 	bl	8000c58 <HAL_GetTick>
 80018f0:	4602      	mov	r2, r0
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	2b02      	cmp	r3, #2
 80018f8:	d901      	bls.n	80018fe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80018fa:	2303      	movs	r3, #3
 80018fc:	e020      	b.n	8001940 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018fe:	4b12      	ldr	r3, [pc, #72]	; (8001948 <HAL_RCC_OscConfig+0x4f4>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d1f0      	bne.n	80018ec <HAL_RCC_OscConfig+0x498>
 800190a:	e018      	b.n	800193e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	69db      	ldr	r3, [r3, #28]
 8001910:	2b01      	cmp	r3, #1
 8001912:	d101      	bne.n	8001918 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001914:	2301      	movs	r3, #1
 8001916:	e013      	b.n	8001940 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001918:	4b0b      	ldr	r3, [pc, #44]	; (8001948 <HAL_RCC_OscConfig+0x4f4>)
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6a1b      	ldr	r3, [r3, #32]
 8001928:	429a      	cmp	r2, r3
 800192a:	d106      	bne.n	800193a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001936:	429a      	cmp	r2, r3
 8001938:	d001      	beq.n	800193e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e000      	b.n	8001940 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800193e:	2300      	movs	r3, #0
}
 8001940:	4618      	mov	r0, r3
 8001942:	3718      	adds	r7, #24
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	40021000 	.word	0x40021000
 800194c:	40007000 	.word	0x40007000
 8001950:	42420060 	.word	0x42420060

08001954 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d101      	bne.n	8001968 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e0d0      	b.n	8001b0a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001968:	4b6a      	ldr	r3, [pc, #424]	; (8001b14 <HAL_RCC_ClockConfig+0x1c0>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 0307 	and.w	r3, r3, #7
 8001970:	683a      	ldr	r2, [r7, #0]
 8001972:	429a      	cmp	r2, r3
 8001974:	d910      	bls.n	8001998 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001976:	4b67      	ldr	r3, [pc, #412]	; (8001b14 <HAL_RCC_ClockConfig+0x1c0>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f023 0207 	bic.w	r2, r3, #7
 800197e:	4965      	ldr	r1, [pc, #404]	; (8001b14 <HAL_RCC_ClockConfig+0x1c0>)
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	4313      	orrs	r3, r2
 8001984:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001986:	4b63      	ldr	r3, [pc, #396]	; (8001b14 <HAL_RCC_ClockConfig+0x1c0>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0307 	and.w	r3, r3, #7
 800198e:	683a      	ldr	r2, [r7, #0]
 8001990:	429a      	cmp	r2, r3
 8001992:	d001      	beq.n	8001998 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	e0b8      	b.n	8001b0a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 0302 	and.w	r3, r3, #2
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d020      	beq.n	80019e6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 0304 	and.w	r3, r3, #4
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d005      	beq.n	80019bc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019b0:	4b59      	ldr	r3, [pc, #356]	; (8001b18 <HAL_RCC_ClockConfig+0x1c4>)
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	4a58      	ldr	r2, [pc, #352]	; (8001b18 <HAL_RCC_ClockConfig+0x1c4>)
 80019b6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80019ba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 0308 	and.w	r3, r3, #8
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d005      	beq.n	80019d4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019c8:	4b53      	ldr	r3, [pc, #332]	; (8001b18 <HAL_RCC_ClockConfig+0x1c4>)
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	4a52      	ldr	r2, [pc, #328]	; (8001b18 <HAL_RCC_ClockConfig+0x1c4>)
 80019ce:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80019d2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019d4:	4b50      	ldr	r3, [pc, #320]	; (8001b18 <HAL_RCC_ClockConfig+0x1c4>)
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	494d      	ldr	r1, [pc, #308]	; (8001b18 <HAL_RCC_ClockConfig+0x1c4>)
 80019e2:	4313      	orrs	r3, r2
 80019e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0301 	and.w	r3, r3, #1
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d040      	beq.n	8001a74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d107      	bne.n	8001a0a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019fa:	4b47      	ldr	r3, [pc, #284]	; (8001b18 <HAL_RCC_ClockConfig+0x1c4>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d115      	bne.n	8001a32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e07f      	b.n	8001b0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	2b02      	cmp	r3, #2
 8001a10:	d107      	bne.n	8001a22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a12:	4b41      	ldr	r3, [pc, #260]	; (8001b18 <HAL_RCC_ClockConfig+0x1c4>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d109      	bne.n	8001a32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e073      	b.n	8001b0a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a22:	4b3d      	ldr	r3, [pc, #244]	; (8001b18 <HAL_RCC_ClockConfig+0x1c4>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0302 	and.w	r3, r3, #2
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d101      	bne.n	8001a32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e06b      	b.n	8001b0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a32:	4b39      	ldr	r3, [pc, #228]	; (8001b18 <HAL_RCC_ClockConfig+0x1c4>)
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	f023 0203 	bic.w	r2, r3, #3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	4936      	ldr	r1, [pc, #216]	; (8001b18 <HAL_RCC_ClockConfig+0x1c4>)
 8001a40:	4313      	orrs	r3, r2
 8001a42:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a44:	f7ff f908 	bl	8000c58 <HAL_GetTick>
 8001a48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a4a:	e00a      	b.n	8001a62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a4c:	f7ff f904 	bl	8000c58 <HAL_GetTick>
 8001a50:	4602      	mov	r2, r0
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d901      	bls.n	8001a62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e053      	b.n	8001b0a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a62:	4b2d      	ldr	r3, [pc, #180]	; (8001b18 <HAL_RCC_ClockConfig+0x1c4>)
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f003 020c 	and.w	r2, r3, #12
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d1eb      	bne.n	8001a4c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a74:	4b27      	ldr	r3, [pc, #156]	; (8001b14 <HAL_RCC_ClockConfig+0x1c0>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0307 	and.w	r3, r3, #7
 8001a7c:	683a      	ldr	r2, [r7, #0]
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d210      	bcs.n	8001aa4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a82:	4b24      	ldr	r3, [pc, #144]	; (8001b14 <HAL_RCC_ClockConfig+0x1c0>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f023 0207 	bic.w	r2, r3, #7
 8001a8a:	4922      	ldr	r1, [pc, #136]	; (8001b14 <HAL_RCC_ClockConfig+0x1c0>)
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a92:	4b20      	ldr	r3, [pc, #128]	; (8001b14 <HAL_RCC_ClockConfig+0x1c0>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0307 	and.w	r3, r3, #7
 8001a9a:	683a      	ldr	r2, [r7, #0]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d001      	beq.n	8001aa4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e032      	b.n	8001b0a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 0304 	and.w	r3, r3, #4
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d008      	beq.n	8001ac2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ab0:	4b19      	ldr	r3, [pc, #100]	; (8001b18 <HAL_RCC_ClockConfig+0x1c4>)
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	4916      	ldr	r1, [pc, #88]	; (8001b18 <HAL_RCC_ClockConfig+0x1c4>)
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 0308 	and.w	r3, r3, #8
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d009      	beq.n	8001ae2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ace:	4b12      	ldr	r3, [pc, #72]	; (8001b18 <HAL_RCC_ClockConfig+0x1c4>)
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	691b      	ldr	r3, [r3, #16]
 8001ada:	00db      	lsls	r3, r3, #3
 8001adc:	490e      	ldr	r1, [pc, #56]	; (8001b18 <HAL_RCC_ClockConfig+0x1c4>)
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ae2:	f000 f821 	bl	8001b28 <HAL_RCC_GetSysClockFreq>
 8001ae6:	4601      	mov	r1, r0
 8001ae8:	4b0b      	ldr	r3, [pc, #44]	; (8001b18 <HAL_RCC_ClockConfig+0x1c4>)
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	091b      	lsrs	r3, r3, #4
 8001aee:	f003 030f 	and.w	r3, r3, #15
 8001af2:	4a0a      	ldr	r2, [pc, #40]	; (8001b1c <HAL_RCC_ClockConfig+0x1c8>)
 8001af4:	5cd3      	ldrb	r3, [r2, r3]
 8001af6:	fa21 f303 	lsr.w	r3, r1, r3
 8001afa:	4a09      	ldr	r2, [pc, #36]	; (8001b20 <HAL_RCC_ClockConfig+0x1cc>)
 8001afc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001afe:	4b09      	ldr	r3, [pc, #36]	; (8001b24 <HAL_RCC_ClockConfig+0x1d0>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4618      	mov	r0, r3
 8001b04:	f7ff f866 	bl	8000bd4 <HAL_InitTick>

  return HAL_OK;
 8001b08:	2300      	movs	r3, #0
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3710      	adds	r7, #16
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	40022000 	.word	0x40022000
 8001b18:	40021000 	.word	0x40021000
 8001b1c:	080037bc 	.word	0x080037bc
 8001b20:	20000070 	.word	0x20000070
 8001b24:	20000074 	.word	0x20000074

08001b28 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b28:	b490      	push	{r4, r7}
 8001b2a:	b08a      	sub	sp, #40	; 0x28
 8001b2c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001b2e:	4b2a      	ldr	r3, [pc, #168]	; (8001bd8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001b30:	1d3c      	adds	r4, r7, #4
 8001b32:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b34:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001b38:	4b28      	ldr	r3, [pc, #160]	; (8001bdc <HAL_RCC_GetSysClockFreq+0xb4>)
 8001b3a:	881b      	ldrh	r3, [r3, #0]
 8001b3c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	61fb      	str	r3, [r7, #28]
 8001b42:	2300      	movs	r3, #0
 8001b44:	61bb      	str	r3, [r7, #24]
 8001b46:	2300      	movs	r3, #0
 8001b48:	627b      	str	r3, [r7, #36]	; 0x24
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001b52:	4b23      	ldr	r3, [pc, #140]	; (8001be0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	f003 030c 	and.w	r3, r3, #12
 8001b5e:	2b04      	cmp	r3, #4
 8001b60:	d002      	beq.n	8001b68 <HAL_RCC_GetSysClockFreq+0x40>
 8001b62:	2b08      	cmp	r3, #8
 8001b64:	d003      	beq.n	8001b6e <HAL_RCC_GetSysClockFreq+0x46>
 8001b66:	e02d      	b.n	8001bc4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b68:	4b1e      	ldr	r3, [pc, #120]	; (8001be4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001b6a:	623b      	str	r3, [r7, #32]
      break;
 8001b6c:	e02d      	b.n	8001bca <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	0c9b      	lsrs	r3, r3, #18
 8001b72:	f003 030f 	and.w	r3, r3, #15
 8001b76:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001b7a:	4413      	add	r3, r2
 8001b7c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001b80:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d013      	beq.n	8001bb4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b8c:	4b14      	ldr	r3, [pc, #80]	; (8001be0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	0c5b      	lsrs	r3, r3, #17
 8001b92:	f003 0301 	and.w	r3, r3, #1
 8001b96:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001b9a:	4413      	add	r3, r2
 8001b9c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001ba0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	4a0f      	ldr	r2, [pc, #60]	; (8001be4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ba6:	fb02 f203 	mul.w	r2, r2, r3
 8001baa:	69bb      	ldr	r3, [r7, #24]
 8001bac:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bb0:	627b      	str	r3, [r7, #36]	; 0x24
 8001bb2:	e004      	b.n	8001bbe <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	4a0c      	ldr	r2, [pc, #48]	; (8001be8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001bb8:	fb02 f303 	mul.w	r3, r2, r3
 8001bbc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc0:	623b      	str	r3, [r7, #32]
      break;
 8001bc2:	e002      	b.n	8001bca <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001bc4:	4b07      	ldr	r3, [pc, #28]	; (8001be4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001bc6:	623b      	str	r3, [r7, #32]
      break;
 8001bc8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bca:	6a3b      	ldr	r3, [r7, #32]
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3728      	adds	r7, #40	; 0x28
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bc90      	pop	{r4, r7}
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	080031d8 	.word	0x080031d8
 8001bdc:	080031e8 	.word	0x080031e8
 8001be0:	40021000 	.word	0x40021000
 8001be4:	007a1200 	.word	0x007a1200
 8001be8:	003d0900 	.word	0x003d0900

08001bec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bf0:	4b02      	ldr	r3, [pc, #8]	; (8001bfc <HAL_RCC_GetHCLKFreq+0x10>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bc80      	pop	{r7}
 8001bfa:	4770      	bx	lr
 8001bfc:	20000070 	.word	0x20000070

08001c00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c04:	f7ff fff2 	bl	8001bec <HAL_RCC_GetHCLKFreq>
 8001c08:	4601      	mov	r1, r0
 8001c0a:	4b05      	ldr	r3, [pc, #20]	; (8001c20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	0a1b      	lsrs	r3, r3, #8
 8001c10:	f003 0307 	and.w	r3, r3, #7
 8001c14:	4a03      	ldr	r2, [pc, #12]	; (8001c24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c16:	5cd3      	ldrb	r3, [r2, r3]
 8001c18:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	40021000 	.word	0x40021000
 8001c24:	080037cc 	.word	0x080037cc

08001c28 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b085      	sub	sp, #20
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001c30:	4b0a      	ldr	r3, [pc, #40]	; (8001c5c <RCC_Delay+0x34>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a0a      	ldr	r2, [pc, #40]	; (8001c60 <RCC_Delay+0x38>)
 8001c36:	fba2 2303 	umull	r2, r3, r2, r3
 8001c3a:	0a5b      	lsrs	r3, r3, #9
 8001c3c:	687a      	ldr	r2, [r7, #4]
 8001c3e:	fb02 f303 	mul.w	r3, r2, r3
 8001c42:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001c44:	bf00      	nop
  }
  while (Delay --);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	1e5a      	subs	r2, r3, #1
 8001c4a:	60fa      	str	r2, [r7, #12]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d1f9      	bne.n	8001c44 <RCC_Delay+0x1c>
}
 8001c50:	bf00      	nop
 8001c52:	3714      	adds	r7, #20
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bc80      	pop	{r7}
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	20000070 	.word	0x20000070
 8001c60:	10624dd3 	.word	0x10624dd3

08001c64 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d101      	bne.n	8001c76 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e076      	b.n	8001d64 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d108      	bne.n	8001c90 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001c86:	d009      	beq.n	8001c9c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	61da      	str	r2, [r3, #28]
 8001c8e:	e005      	b.n	8001c9c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2200      	movs	r2, #0
 8001c94:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d106      	bne.n	8001cbc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f7fe fe04 	bl	80008c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2202      	movs	r2, #2
 8001cc0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001cd2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001ce4:	431a      	orrs	r2, r3
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	68db      	ldr	r3, [r3, #12]
 8001cea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cee:	431a      	orrs	r2, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	691b      	ldr	r3, [r3, #16]
 8001cf4:	f003 0302 	and.w	r3, r3, #2
 8001cf8:	431a      	orrs	r2, r3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	695b      	ldr	r3, [r3, #20]
 8001cfe:	f003 0301 	and.w	r3, r3, #1
 8001d02:	431a      	orrs	r2, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	699b      	ldr	r3, [r3, #24]
 8001d08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d0c:	431a      	orrs	r2, r3
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	69db      	ldr	r3, [r3, #28]
 8001d12:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001d16:	431a      	orrs	r2, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6a1b      	ldr	r3, [r3, #32]
 8001d1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d20:	ea42 0103 	orr.w	r1, r2, r3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d28:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	430a      	orrs	r2, r1
 8001d32:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	699b      	ldr	r3, [r3, #24]
 8001d38:	0c1a      	lsrs	r2, r3, #16
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f002 0204 	and.w	r2, r2, #4
 8001d42:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	69da      	ldr	r2, [r3, #28]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d52:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2200      	movs	r2, #0
 8001d58:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001d62:	2300      	movs	r3, #0
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3708      	adds	r7, #8
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}

08001d6c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b088      	sub	sp, #32
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	60f8      	str	r0, [r7, #12]
 8001d74:	60b9      	str	r1, [r7, #8]
 8001d76:	603b      	str	r3, [r7, #0]
 8001d78:	4613      	mov	r3, r2
 8001d7a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d101      	bne.n	8001d8e <HAL_SPI_Transmit+0x22>
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	e126      	b.n	8001fdc <HAL_SPI_Transmit+0x270>
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	2201      	movs	r2, #1
 8001d92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001d96:	f7fe ff5f 	bl	8000c58 <HAL_GetTick>
 8001d9a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001d9c:	88fb      	ldrh	r3, [r7, #6]
 8001d9e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d002      	beq.n	8001db2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001dac:	2302      	movs	r3, #2
 8001dae:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001db0:	e10b      	b.n	8001fca <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d002      	beq.n	8001dbe <HAL_SPI_Transmit+0x52>
 8001db8:	88fb      	ldrh	r3, [r7, #6]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d102      	bne.n	8001dc4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001dc2:	e102      	b.n	8001fca <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2203      	movs	r2, #3
 8001dc8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	68ba      	ldr	r2, [r7, #8]
 8001dd6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	88fa      	ldrh	r2, [r7, #6]
 8001ddc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	88fa      	ldrh	r2, [r7, #6]
 8001de2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2200      	movs	r2, #0
 8001de8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2200      	movs	r2, #0
 8001dee:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2200      	movs	r2, #0
 8001df4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e0a:	d10f      	bne.n	8001e2c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e1a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001e2a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e36:	2b40      	cmp	r3, #64	; 0x40
 8001e38:	d007      	beq.n	8001e4a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e48:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	68db      	ldr	r3, [r3, #12]
 8001e4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e52:	d14b      	bne.n	8001eec <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d002      	beq.n	8001e62 <HAL_SPI_Transmit+0xf6>
 8001e5c:	8afb      	ldrh	r3, [r7, #22]
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d13e      	bne.n	8001ee0 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e66:	881a      	ldrh	r2, [r3, #0]
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e72:	1c9a      	adds	r2, r3, #2
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e7c:	b29b      	uxth	r3, r3
 8001e7e:	3b01      	subs	r3, #1
 8001e80:	b29a      	uxth	r2, r3
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001e86:	e02b      	b.n	8001ee0 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	f003 0302 	and.w	r3, r3, #2
 8001e92:	2b02      	cmp	r3, #2
 8001e94:	d112      	bne.n	8001ebc <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9a:	881a      	ldrh	r2, [r3, #0]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea6:	1c9a      	adds	r2, r3, #2
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001eb0:	b29b      	uxth	r3, r3
 8001eb2:	3b01      	subs	r3, #1
 8001eb4:	b29a      	uxth	r2, r3
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	86da      	strh	r2, [r3, #54]	; 0x36
 8001eba:	e011      	b.n	8001ee0 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001ebc:	f7fe fecc 	bl	8000c58 <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	69bb      	ldr	r3, [r7, #24]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	683a      	ldr	r2, [r7, #0]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d803      	bhi.n	8001ed4 <HAL_SPI_Transmit+0x168>
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ed2:	d102      	bne.n	8001eda <HAL_SPI_Transmit+0x16e>
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d102      	bne.n	8001ee0 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001ede:	e074      	b.n	8001fca <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ee4:	b29b      	uxth	r3, r3
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d1ce      	bne.n	8001e88 <HAL_SPI_Transmit+0x11c>
 8001eea:	e04c      	b.n	8001f86 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d002      	beq.n	8001efa <HAL_SPI_Transmit+0x18e>
 8001ef4:	8afb      	ldrh	r3, [r7, #22]
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d140      	bne.n	8001f7c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	330c      	adds	r3, #12
 8001f04:	7812      	ldrb	r2, [r2, #0]
 8001f06:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0c:	1c5a      	adds	r2, r3, #1
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f16:	b29b      	uxth	r3, r3
 8001f18:	3b01      	subs	r3, #1
 8001f1a:	b29a      	uxth	r2, r3
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001f20:	e02c      	b.n	8001f7c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	f003 0302 	and.w	r3, r3, #2
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d113      	bne.n	8001f58 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	330c      	adds	r3, #12
 8001f3a:	7812      	ldrb	r2, [r2, #0]
 8001f3c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f42:	1c5a      	adds	r2, r3, #1
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f4c:	b29b      	uxth	r3, r3
 8001f4e:	3b01      	subs	r3, #1
 8001f50:	b29a      	uxth	r2, r3
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	86da      	strh	r2, [r3, #54]	; 0x36
 8001f56:	e011      	b.n	8001f7c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001f58:	f7fe fe7e 	bl	8000c58 <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	683a      	ldr	r2, [r7, #0]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d803      	bhi.n	8001f70 <HAL_SPI_Transmit+0x204>
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f6e:	d102      	bne.n	8001f76 <HAL_SPI_Transmit+0x20a>
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d102      	bne.n	8001f7c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001f7a:	e026      	b.n	8001fca <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f80:	b29b      	uxth	r3, r3
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d1cd      	bne.n	8001f22 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001f86:	69ba      	ldr	r2, [r7, #24]
 8001f88:	6839      	ldr	r1, [r7, #0]
 8001f8a:	68f8      	ldr	r0, [r7, #12]
 8001f8c:	f000 f8b2 	bl	80020f4 <SPI_EndRxTxTransaction>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d002      	beq.n	8001f9c <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2220      	movs	r2, #32
 8001f9a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d10a      	bne.n	8001fba <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	613b      	str	r3, [r7, #16]
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	68db      	ldr	r3, [r3, #12]
 8001fae:	613b      	str	r3, [r7, #16]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	613b      	str	r3, [r7, #16]
 8001fb8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d002      	beq.n	8001fc8 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	77fb      	strb	r3, [r7, #31]
 8001fc6:	e000      	b.n	8001fca <HAL_SPI_Transmit+0x25e>
  }

error:
 8001fc8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2201      	movs	r2, #1
 8001fce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001fda:	7ffb      	ldrb	r3, [r7, #31]
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3720      	adds	r7, #32
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b088      	sub	sp, #32
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	60f8      	str	r0, [r7, #12]
 8001fec:	60b9      	str	r1, [r7, #8]
 8001fee:	603b      	str	r3, [r7, #0]
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001ff4:	f7fe fe30 	bl	8000c58 <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ffc:	1a9b      	subs	r3, r3, r2
 8001ffe:	683a      	ldr	r2, [r7, #0]
 8002000:	4413      	add	r3, r2
 8002002:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002004:	f7fe fe28 	bl	8000c58 <HAL_GetTick>
 8002008:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800200a:	4b39      	ldr	r3, [pc, #228]	; (80020f0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	015b      	lsls	r3, r3, #5
 8002010:	0d1b      	lsrs	r3, r3, #20
 8002012:	69fa      	ldr	r2, [r7, #28]
 8002014:	fb02 f303 	mul.w	r3, r2, r3
 8002018:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800201a:	e054      	b.n	80020c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002022:	d050      	beq.n	80020c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002024:	f7fe fe18 	bl	8000c58 <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	69fa      	ldr	r2, [r7, #28]
 8002030:	429a      	cmp	r2, r3
 8002032:	d902      	bls.n	800203a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d13d      	bne.n	80020b6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	685a      	ldr	r2, [r3, #4]
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002048:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002052:	d111      	bne.n	8002078 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800205c:	d004      	beq.n	8002068 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002066:	d107      	bne.n	8002078 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002076:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800207c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002080:	d10f      	bne.n	80020a2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002090:	601a      	str	r2, [r3, #0]
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80020a0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2201      	movs	r2, #1
 80020a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2200      	movs	r2, #0
 80020ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e017      	b.n	80020e6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d101      	bne.n	80020c0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80020bc:	2300      	movs	r3, #0
 80020be:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	3b01      	subs	r3, #1
 80020c4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	689a      	ldr	r2, [r3, #8]
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	4013      	ands	r3, r2
 80020d0:	68ba      	ldr	r2, [r7, #8]
 80020d2:	429a      	cmp	r2, r3
 80020d4:	bf0c      	ite	eq
 80020d6:	2301      	moveq	r3, #1
 80020d8:	2300      	movne	r3, #0
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	461a      	mov	r2, r3
 80020de:	79fb      	ldrb	r3, [r7, #7]
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d19b      	bne.n	800201c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80020e4:	2300      	movs	r3, #0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3720      	adds	r7, #32
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	20000070 	.word	0x20000070

080020f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b086      	sub	sp, #24
 80020f8:	af02      	add	r7, sp, #8
 80020fa:	60f8      	str	r0, [r7, #12]
 80020fc:	60b9      	str	r1, [r7, #8]
 80020fe:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	9300      	str	r3, [sp, #0]
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	2200      	movs	r2, #0
 8002108:	2180      	movs	r1, #128	; 0x80
 800210a:	68f8      	ldr	r0, [r7, #12]
 800210c:	f7ff ff6a 	bl	8001fe4 <SPI_WaitFlagStateUntilTimeout>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d007      	beq.n	8002126 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800211a:	f043 0220 	orr.w	r2, r3, #32
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e000      	b.n	8002128 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002126:	2300      	movs	r3, #0
}
 8002128:	4618      	mov	r0, r3
 800212a:	3710      	adds	r7, #16
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}

08002130 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d101      	bne.n	8002142 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e041      	b.n	80021c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002148:	b2db      	uxtb	r3, r3
 800214a:	2b00      	cmp	r3, #0
 800214c:	d106      	bne.n	800215c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2200      	movs	r2, #0
 8002152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f7fe fce2 	bl	8000b20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2202      	movs	r2, #2
 8002160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	3304      	adds	r3, #4
 800216c:	4619      	mov	r1, r3
 800216e:	4610      	mov	r0, r2
 8002170:	f000 fa64 	bl	800263c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2201      	movs	r2, #1
 8002178:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2201      	movs	r2, #1
 8002180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2201      	movs	r2, #1
 8002188:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2201      	movs	r2, #1
 8002190:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2201      	movs	r2, #1
 8002198:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2201      	movs	r2, #1
 80021a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2201      	movs	r2, #1
 80021a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2201      	movs	r2, #1
 80021b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2201      	movs	r2, #1
 80021b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2201      	movs	r2, #1
 80021c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80021c4:	2300      	movs	r3, #0
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3708      	adds	r7, #8
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
	...

080021d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b085      	sub	sp, #20
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d001      	beq.n	80021e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e03a      	b.n	800225e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2202      	movs	r2, #2
 80021ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	68da      	ldr	r2, [r3, #12]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f042 0201 	orr.w	r2, r2, #1
 80021fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a18      	ldr	r2, [pc, #96]	; (8002268 <HAL_TIM_Base_Start_IT+0x98>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d00e      	beq.n	8002228 <HAL_TIM_Base_Start_IT+0x58>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002212:	d009      	beq.n	8002228 <HAL_TIM_Base_Start_IT+0x58>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a14      	ldr	r2, [pc, #80]	; (800226c <HAL_TIM_Base_Start_IT+0x9c>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d004      	beq.n	8002228 <HAL_TIM_Base_Start_IT+0x58>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a13      	ldr	r2, [pc, #76]	; (8002270 <HAL_TIM_Base_Start_IT+0xa0>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d111      	bne.n	800224c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	f003 0307 	and.w	r3, r3, #7
 8002232:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2b06      	cmp	r3, #6
 8002238:	d010      	beq.n	800225c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f042 0201 	orr.w	r2, r2, #1
 8002248:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800224a:	e007      	b.n	800225c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f042 0201 	orr.w	r2, r2, #1
 800225a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800225c:	2300      	movs	r3, #0
}
 800225e:	4618      	mov	r0, r3
 8002260:	3714      	adds	r7, #20
 8002262:	46bd      	mov	sp, r7
 8002264:	bc80      	pop	{r7}
 8002266:	4770      	bx	lr
 8002268:	40012c00 	.word	0x40012c00
 800226c:	40000400 	.word	0x40000400
 8002270:	40000800 	.word	0x40000800

08002274 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	691b      	ldr	r3, [r3, #16]
 8002282:	f003 0302 	and.w	r3, r3, #2
 8002286:	2b02      	cmp	r3, #2
 8002288:	d122      	bne.n	80022d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	f003 0302 	and.w	r3, r3, #2
 8002294:	2b02      	cmp	r3, #2
 8002296:	d11b      	bne.n	80022d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f06f 0202 	mvn.w	r2, #2
 80022a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2201      	movs	r2, #1
 80022a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	699b      	ldr	r3, [r3, #24]
 80022ae:	f003 0303 	and.w	r3, r3, #3
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d003      	beq.n	80022be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f000 f9a4 	bl	8002604 <HAL_TIM_IC_CaptureCallback>
 80022bc:	e005      	b.n	80022ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f000 f997 	bl	80025f2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f000 f9a6 	bl	8002616 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	691b      	ldr	r3, [r3, #16]
 80022d6:	f003 0304 	and.w	r3, r3, #4
 80022da:	2b04      	cmp	r3, #4
 80022dc:	d122      	bne.n	8002324 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	f003 0304 	and.w	r3, r3, #4
 80022e8:	2b04      	cmp	r3, #4
 80022ea:	d11b      	bne.n	8002324 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f06f 0204 	mvn.w	r2, #4
 80022f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2202      	movs	r2, #2
 80022fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	699b      	ldr	r3, [r3, #24]
 8002302:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002306:	2b00      	cmp	r3, #0
 8002308:	d003      	beq.n	8002312 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f000 f97a 	bl	8002604 <HAL_TIM_IC_CaptureCallback>
 8002310:	e005      	b.n	800231e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f000 f96d 	bl	80025f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f000 f97c 	bl	8002616 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	691b      	ldr	r3, [r3, #16]
 800232a:	f003 0308 	and.w	r3, r3, #8
 800232e:	2b08      	cmp	r3, #8
 8002330:	d122      	bne.n	8002378 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	f003 0308 	and.w	r3, r3, #8
 800233c:	2b08      	cmp	r3, #8
 800233e:	d11b      	bne.n	8002378 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f06f 0208 	mvn.w	r2, #8
 8002348:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2204      	movs	r2, #4
 800234e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	69db      	ldr	r3, [r3, #28]
 8002356:	f003 0303 	and.w	r3, r3, #3
 800235a:	2b00      	cmp	r3, #0
 800235c:	d003      	beq.n	8002366 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f000 f950 	bl	8002604 <HAL_TIM_IC_CaptureCallback>
 8002364:	e005      	b.n	8002372 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f000 f943 	bl	80025f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f000 f952 	bl	8002616 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	691b      	ldr	r3, [r3, #16]
 800237e:	f003 0310 	and.w	r3, r3, #16
 8002382:	2b10      	cmp	r3, #16
 8002384:	d122      	bne.n	80023cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	f003 0310 	and.w	r3, r3, #16
 8002390:	2b10      	cmp	r3, #16
 8002392:	d11b      	bne.n	80023cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f06f 0210 	mvn.w	r2, #16
 800239c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2208      	movs	r2, #8
 80023a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	69db      	ldr	r3, [r3, #28]
 80023aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d003      	beq.n	80023ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f000 f926 	bl	8002604 <HAL_TIM_IC_CaptureCallback>
 80023b8:	e005      	b.n	80023c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f000 f919 	bl	80025f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f000 f928 	bl	8002616 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2200      	movs	r2, #0
 80023ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	691b      	ldr	r3, [r3, #16]
 80023d2:	f003 0301 	and.w	r3, r3, #1
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d10e      	bne.n	80023f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	f003 0301 	and.w	r3, r3, #1
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d107      	bne.n	80023f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f06f 0201 	mvn.w	r2, #1
 80023f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f7fe fa16 	bl	8000824 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	691b      	ldr	r3, [r3, #16]
 80023fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002402:	2b80      	cmp	r3, #128	; 0x80
 8002404:	d10e      	bne.n	8002424 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002410:	2b80      	cmp	r3, #128	; 0x80
 8002412:	d107      	bne.n	8002424 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800241c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f000 fa6b 	bl	80028fa <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	691b      	ldr	r3, [r3, #16]
 800242a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800242e:	2b40      	cmp	r3, #64	; 0x40
 8002430:	d10e      	bne.n	8002450 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800243c:	2b40      	cmp	r3, #64	; 0x40
 800243e:	d107      	bne.n	8002450 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002448:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f000 f8ec 	bl	8002628 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	691b      	ldr	r3, [r3, #16]
 8002456:	f003 0320 	and.w	r3, r3, #32
 800245a:	2b20      	cmp	r3, #32
 800245c:	d10e      	bne.n	800247c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	f003 0320 	and.w	r3, r3, #32
 8002468:	2b20      	cmp	r3, #32
 800246a:	d107      	bne.n	800247c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f06f 0220 	mvn.w	r2, #32
 8002474:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f000 fa36 	bl	80028e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800247c:	bf00      	nop
 800247e:	3708      	adds	r7, #8
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}

08002484 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002494:	2b01      	cmp	r3, #1
 8002496:	d101      	bne.n	800249c <HAL_TIM_ConfigClockSource+0x18>
 8002498:	2302      	movs	r3, #2
 800249a:	e0a6      	b.n	80025ea <HAL_TIM_ConfigClockSource+0x166>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2201      	movs	r2, #1
 80024a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2202      	movs	r2, #2
 80024a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80024ba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80024c2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	68fa      	ldr	r2, [r7, #12]
 80024ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	2b40      	cmp	r3, #64	; 0x40
 80024d2:	d067      	beq.n	80025a4 <HAL_TIM_ConfigClockSource+0x120>
 80024d4:	2b40      	cmp	r3, #64	; 0x40
 80024d6:	d80b      	bhi.n	80024f0 <HAL_TIM_ConfigClockSource+0x6c>
 80024d8:	2b10      	cmp	r3, #16
 80024da:	d073      	beq.n	80025c4 <HAL_TIM_ConfigClockSource+0x140>
 80024dc:	2b10      	cmp	r3, #16
 80024de:	d802      	bhi.n	80024e6 <HAL_TIM_ConfigClockSource+0x62>
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d06f      	beq.n	80025c4 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80024e4:	e078      	b.n	80025d8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80024e6:	2b20      	cmp	r3, #32
 80024e8:	d06c      	beq.n	80025c4 <HAL_TIM_ConfigClockSource+0x140>
 80024ea:	2b30      	cmp	r3, #48	; 0x30
 80024ec:	d06a      	beq.n	80025c4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80024ee:	e073      	b.n	80025d8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80024f0:	2b70      	cmp	r3, #112	; 0x70
 80024f2:	d00d      	beq.n	8002510 <HAL_TIM_ConfigClockSource+0x8c>
 80024f4:	2b70      	cmp	r3, #112	; 0x70
 80024f6:	d804      	bhi.n	8002502 <HAL_TIM_ConfigClockSource+0x7e>
 80024f8:	2b50      	cmp	r3, #80	; 0x50
 80024fa:	d033      	beq.n	8002564 <HAL_TIM_ConfigClockSource+0xe0>
 80024fc:	2b60      	cmp	r3, #96	; 0x60
 80024fe:	d041      	beq.n	8002584 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002500:	e06a      	b.n	80025d8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002502:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002506:	d066      	beq.n	80025d6 <HAL_TIM_ConfigClockSource+0x152>
 8002508:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800250c:	d017      	beq.n	800253e <HAL_TIM_ConfigClockSource+0xba>
      break;
 800250e:	e063      	b.n	80025d8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6818      	ldr	r0, [r3, #0]
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	6899      	ldr	r1, [r3, #8]
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	685a      	ldr	r2, [r3, #4]
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	f000 f965 	bl	80027ee <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002532:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	68fa      	ldr	r2, [r7, #12]
 800253a:	609a      	str	r2, [r3, #8]
      break;
 800253c:	e04c      	b.n	80025d8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6818      	ldr	r0, [r3, #0]
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	6899      	ldr	r1, [r3, #8]
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	685a      	ldr	r2, [r3, #4]
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	f000 f94e 	bl	80027ee <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	689a      	ldr	r2, [r3, #8]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002560:	609a      	str	r2, [r3, #8]
      break;
 8002562:	e039      	b.n	80025d8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6818      	ldr	r0, [r3, #0]
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	6859      	ldr	r1, [r3, #4]
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	461a      	mov	r2, r3
 8002572:	f000 f8c5 	bl	8002700 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	2150      	movs	r1, #80	; 0x50
 800257c:	4618      	mov	r0, r3
 800257e:	f000 f91c 	bl	80027ba <TIM_ITRx_SetConfig>
      break;
 8002582:	e029      	b.n	80025d8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6818      	ldr	r0, [r3, #0]
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	6859      	ldr	r1, [r3, #4]
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	461a      	mov	r2, r3
 8002592:	f000 f8e3 	bl	800275c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	2160      	movs	r1, #96	; 0x60
 800259c:	4618      	mov	r0, r3
 800259e:	f000 f90c 	bl	80027ba <TIM_ITRx_SetConfig>
      break;
 80025a2:	e019      	b.n	80025d8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6818      	ldr	r0, [r3, #0]
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	6859      	ldr	r1, [r3, #4]
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	461a      	mov	r2, r3
 80025b2:	f000 f8a5 	bl	8002700 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	2140      	movs	r1, #64	; 0x40
 80025bc:	4618      	mov	r0, r3
 80025be:	f000 f8fc 	bl	80027ba <TIM_ITRx_SetConfig>
      break;
 80025c2:	e009      	b.n	80025d8 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4619      	mov	r1, r3
 80025ce:	4610      	mov	r0, r2
 80025d0:	f000 f8f3 	bl	80027ba <TIM_ITRx_SetConfig>
        break;
 80025d4:	e000      	b.n	80025d8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80025d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2201      	movs	r2, #1
 80025dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2200      	movs	r2, #0
 80025e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80025e8:	2300      	movs	r3, #0
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3710      	adds	r7, #16
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}

080025f2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025f2:	b480      	push	{r7}
 80025f4:	b083      	sub	sp, #12
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80025fa:	bf00      	nop
 80025fc:	370c      	adds	r7, #12
 80025fe:	46bd      	mov	sp, r7
 8002600:	bc80      	pop	{r7}
 8002602:	4770      	bx	lr

08002604 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800260c:	bf00      	nop
 800260e:	370c      	adds	r7, #12
 8002610:	46bd      	mov	sp, r7
 8002612:	bc80      	pop	{r7}
 8002614:	4770      	bx	lr

08002616 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002616:	b480      	push	{r7}
 8002618:	b083      	sub	sp, #12
 800261a:	af00      	add	r7, sp, #0
 800261c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800261e:	bf00      	nop
 8002620:	370c      	adds	r7, #12
 8002622:	46bd      	mov	sp, r7
 8002624:	bc80      	pop	{r7}
 8002626:	4770      	bx	lr

08002628 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002630:	bf00      	nop
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	bc80      	pop	{r7}
 8002638:	4770      	bx	lr
	...

0800263c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800263c:	b480      	push	{r7}
 800263e:	b085      	sub	sp, #20
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	4a29      	ldr	r2, [pc, #164]	; (80026f4 <TIM_Base_SetConfig+0xb8>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d00b      	beq.n	800266c <TIM_Base_SetConfig+0x30>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800265a:	d007      	beq.n	800266c <TIM_Base_SetConfig+0x30>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	4a26      	ldr	r2, [pc, #152]	; (80026f8 <TIM_Base_SetConfig+0xbc>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d003      	beq.n	800266c <TIM_Base_SetConfig+0x30>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	4a25      	ldr	r2, [pc, #148]	; (80026fc <TIM_Base_SetConfig+0xc0>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d108      	bne.n	800267e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002672:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	68fa      	ldr	r2, [r7, #12]
 800267a:	4313      	orrs	r3, r2
 800267c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a1c      	ldr	r2, [pc, #112]	; (80026f4 <TIM_Base_SetConfig+0xb8>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d00b      	beq.n	800269e <TIM_Base_SetConfig+0x62>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800268c:	d007      	beq.n	800269e <TIM_Base_SetConfig+0x62>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a19      	ldr	r2, [pc, #100]	; (80026f8 <TIM_Base_SetConfig+0xbc>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d003      	beq.n	800269e <TIM_Base_SetConfig+0x62>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4a18      	ldr	r2, [pc, #96]	; (80026fc <TIM_Base_SetConfig+0xc0>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d108      	bne.n	80026b0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	68db      	ldr	r3, [r3, #12]
 80026aa:	68fa      	ldr	r2, [r7, #12]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	695b      	ldr	r3, [r3, #20]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	68fa      	ldr	r2, [r7, #12]
 80026c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	689a      	ldr	r2, [r3, #8]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	4a07      	ldr	r2, [pc, #28]	; (80026f4 <TIM_Base_SetConfig+0xb8>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d103      	bne.n	80026e4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	691a      	ldr	r2, [r3, #16]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2201      	movs	r2, #1
 80026e8:	615a      	str	r2, [r3, #20]
}
 80026ea:	bf00      	nop
 80026ec:	3714      	adds	r7, #20
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bc80      	pop	{r7}
 80026f2:	4770      	bx	lr
 80026f4:	40012c00 	.word	0x40012c00
 80026f8:	40000400 	.word	0x40000400
 80026fc:	40000800 	.word	0x40000800

08002700 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002700:	b480      	push	{r7}
 8002702:	b087      	sub	sp, #28
 8002704:	af00      	add	r7, sp, #0
 8002706:	60f8      	str	r0, [r7, #12]
 8002708:	60b9      	str	r1, [r7, #8]
 800270a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	6a1b      	ldr	r3, [r3, #32]
 8002710:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	6a1b      	ldr	r3, [r3, #32]
 8002716:	f023 0201 	bic.w	r2, r3, #1
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	699b      	ldr	r3, [r3, #24]
 8002722:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800272a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	011b      	lsls	r3, r3, #4
 8002730:	693a      	ldr	r2, [r7, #16]
 8002732:	4313      	orrs	r3, r2
 8002734:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	f023 030a 	bic.w	r3, r3, #10
 800273c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800273e:	697a      	ldr	r2, [r7, #20]
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	4313      	orrs	r3, r2
 8002744:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	693a      	ldr	r2, [r7, #16]
 800274a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	697a      	ldr	r2, [r7, #20]
 8002750:	621a      	str	r2, [r3, #32]
}
 8002752:	bf00      	nop
 8002754:	371c      	adds	r7, #28
 8002756:	46bd      	mov	sp, r7
 8002758:	bc80      	pop	{r7}
 800275a:	4770      	bx	lr

0800275c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800275c:	b480      	push	{r7}
 800275e:	b087      	sub	sp, #28
 8002760:	af00      	add	r7, sp, #0
 8002762:	60f8      	str	r0, [r7, #12]
 8002764:	60b9      	str	r1, [r7, #8]
 8002766:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6a1b      	ldr	r3, [r3, #32]
 800276c:	f023 0210 	bic.w	r2, r3, #16
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	699b      	ldr	r3, [r3, #24]
 8002778:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	6a1b      	ldr	r3, [r3, #32]
 800277e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002786:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	031b      	lsls	r3, r3, #12
 800278c:	697a      	ldr	r2, [r7, #20]
 800278e:	4313      	orrs	r3, r2
 8002790:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002798:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	011b      	lsls	r3, r3, #4
 800279e:	693a      	ldr	r2, [r7, #16]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	697a      	ldr	r2, [r7, #20]
 80027a8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	693a      	ldr	r2, [r7, #16]
 80027ae:	621a      	str	r2, [r3, #32]
}
 80027b0:	bf00      	nop
 80027b2:	371c      	adds	r7, #28
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bc80      	pop	{r7}
 80027b8:	4770      	bx	lr

080027ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80027ba:	b480      	push	{r7}
 80027bc:	b085      	sub	sp, #20
 80027be:	af00      	add	r7, sp, #0
 80027c0:	6078      	str	r0, [r7, #4]
 80027c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80027d2:	683a      	ldr	r2, [r7, #0]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	f043 0307 	orr.w	r3, r3, #7
 80027dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	68fa      	ldr	r2, [r7, #12]
 80027e2:	609a      	str	r2, [r3, #8]
}
 80027e4:	bf00      	nop
 80027e6:	3714      	adds	r7, #20
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bc80      	pop	{r7}
 80027ec:	4770      	bx	lr

080027ee <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80027ee:	b480      	push	{r7}
 80027f0:	b087      	sub	sp, #28
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	60f8      	str	r0, [r7, #12]
 80027f6:	60b9      	str	r1, [r7, #8]
 80027f8:	607a      	str	r2, [r7, #4]
 80027fa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002808:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	021a      	lsls	r2, r3, #8
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	431a      	orrs	r2, r3
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	4313      	orrs	r3, r2
 8002816:	697a      	ldr	r2, [r7, #20]
 8002818:	4313      	orrs	r3, r2
 800281a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	697a      	ldr	r2, [r7, #20]
 8002820:	609a      	str	r2, [r3, #8]
}
 8002822:	bf00      	nop
 8002824:	371c      	adds	r7, #28
 8002826:	46bd      	mov	sp, r7
 8002828:	bc80      	pop	{r7}
 800282a:	4770      	bx	lr

0800282c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800282c:	b480      	push	{r7}
 800282e:	b085      	sub	sp, #20
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800283c:	2b01      	cmp	r3, #1
 800283e:	d101      	bne.n	8002844 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002840:	2302      	movs	r3, #2
 8002842:	e046      	b.n	80028d2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2201      	movs	r2, #1
 8002848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2202      	movs	r2, #2
 8002850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800286a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	68fa      	ldr	r2, [r7, #12]
 8002872:	4313      	orrs	r3, r2
 8002874:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	68fa      	ldr	r2, [r7, #12]
 800287c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a16      	ldr	r2, [pc, #88]	; (80028dc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d00e      	beq.n	80028a6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002890:	d009      	beq.n	80028a6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a12      	ldr	r2, [pc, #72]	; (80028e0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d004      	beq.n	80028a6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a10      	ldr	r2, [pc, #64]	; (80028e4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d10c      	bne.n	80028c0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	68ba      	ldr	r2, [r7, #8]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	68ba      	ldr	r2, [r7, #8]
 80028be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2201      	movs	r2, #1
 80028c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2200      	movs	r2, #0
 80028cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80028d0:	2300      	movs	r3, #0
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3714      	adds	r7, #20
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bc80      	pop	{r7}
 80028da:	4770      	bx	lr
 80028dc:	40012c00 	.word	0x40012c00
 80028e0:	40000400 	.word	0x40000400
 80028e4:	40000800 	.word	0x40000800

080028e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80028f0:	bf00      	nop
 80028f2:	370c      	adds	r7, #12
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bc80      	pop	{r7}
 80028f8:	4770      	bx	lr

080028fa <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80028fa:	b480      	push	{r7}
 80028fc:	b083      	sub	sp, #12
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002902:	bf00      	nop
 8002904:	370c      	adds	r7, #12
 8002906:	46bd      	mov	sp, r7
 8002908:	bc80      	pop	{r7}
 800290a:	4770      	bx	lr

0800290c <__errno>:
 800290c:	4b01      	ldr	r3, [pc, #4]	; (8002914 <__errno+0x8>)
 800290e:	6818      	ldr	r0, [r3, #0]
 8002910:	4770      	bx	lr
 8002912:	bf00      	nop
 8002914:	2000007c 	.word	0x2000007c

08002918 <__libc_init_array>:
 8002918:	b570      	push	{r4, r5, r6, lr}
 800291a:	2500      	movs	r5, #0
 800291c:	4e0c      	ldr	r6, [pc, #48]	; (8002950 <__libc_init_array+0x38>)
 800291e:	4c0d      	ldr	r4, [pc, #52]	; (8002954 <__libc_init_array+0x3c>)
 8002920:	1ba4      	subs	r4, r4, r6
 8002922:	10a4      	asrs	r4, r4, #2
 8002924:	42a5      	cmp	r5, r4
 8002926:	d109      	bne.n	800293c <__libc_init_array+0x24>
 8002928:	f000 fc34 	bl	8003194 <_init>
 800292c:	2500      	movs	r5, #0
 800292e:	4e0a      	ldr	r6, [pc, #40]	; (8002958 <__libc_init_array+0x40>)
 8002930:	4c0a      	ldr	r4, [pc, #40]	; (800295c <__libc_init_array+0x44>)
 8002932:	1ba4      	subs	r4, r4, r6
 8002934:	10a4      	asrs	r4, r4, #2
 8002936:	42a5      	cmp	r5, r4
 8002938:	d105      	bne.n	8002946 <__libc_init_array+0x2e>
 800293a:	bd70      	pop	{r4, r5, r6, pc}
 800293c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002940:	4798      	blx	r3
 8002942:	3501      	adds	r5, #1
 8002944:	e7ee      	b.n	8002924 <__libc_init_array+0xc>
 8002946:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800294a:	4798      	blx	r3
 800294c:	3501      	adds	r5, #1
 800294e:	e7f2      	b.n	8002936 <__libc_init_array+0x1e>
 8002950:	08003808 	.word	0x08003808
 8002954:	08003808 	.word	0x08003808
 8002958:	08003808 	.word	0x08003808
 800295c:	0800380c 	.word	0x0800380c

08002960 <memset>:
 8002960:	4603      	mov	r3, r0
 8002962:	4402      	add	r2, r0
 8002964:	4293      	cmp	r3, r2
 8002966:	d100      	bne.n	800296a <memset+0xa>
 8002968:	4770      	bx	lr
 800296a:	f803 1b01 	strb.w	r1, [r3], #1
 800296e:	e7f9      	b.n	8002964 <memset+0x4>

08002970 <siprintf>:
 8002970:	b40e      	push	{r1, r2, r3}
 8002972:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002976:	b500      	push	{lr}
 8002978:	b09c      	sub	sp, #112	; 0x70
 800297a:	ab1d      	add	r3, sp, #116	; 0x74
 800297c:	9002      	str	r0, [sp, #8]
 800297e:	9006      	str	r0, [sp, #24]
 8002980:	9107      	str	r1, [sp, #28]
 8002982:	9104      	str	r1, [sp, #16]
 8002984:	4808      	ldr	r0, [pc, #32]	; (80029a8 <siprintf+0x38>)
 8002986:	4909      	ldr	r1, [pc, #36]	; (80029ac <siprintf+0x3c>)
 8002988:	f853 2b04 	ldr.w	r2, [r3], #4
 800298c:	9105      	str	r1, [sp, #20]
 800298e:	6800      	ldr	r0, [r0, #0]
 8002990:	a902      	add	r1, sp, #8
 8002992:	9301      	str	r3, [sp, #4]
 8002994:	f000 f866 	bl	8002a64 <_svfiprintf_r>
 8002998:	2200      	movs	r2, #0
 800299a:	9b02      	ldr	r3, [sp, #8]
 800299c:	701a      	strb	r2, [r3, #0]
 800299e:	b01c      	add	sp, #112	; 0x70
 80029a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80029a4:	b003      	add	sp, #12
 80029a6:	4770      	bx	lr
 80029a8:	2000007c 	.word	0x2000007c
 80029ac:	ffff0208 	.word	0xffff0208

080029b0 <__ssputs_r>:
 80029b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80029b4:	688e      	ldr	r6, [r1, #8]
 80029b6:	4682      	mov	sl, r0
 80029b8:	429e      	cmp	r6, r3
 80029ba:	460c      	mov	r4, r1
 80029bc:	4690      	mov	r8, r2
 80029be:	4699      	mov	r9, r3
 80029c0:	d837      	bhi.n	8002a32 <__ssputs_r+0x82>
 80029c2:	898a      	ldrh	r2, [r1, #12]
 80029c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80029c8:	d031      	beq.n	8002a2e <__ssputs_r+0x7e>
 80029ca:	2302      	movs	r3, #2
 80029cc:	6825      	ldr	r5, [r4, #0]
 80029ce:	6909      	ldr	r1, [r1, #16]
 80029d0:	1a6f      	subs	r7, r5, r1
 80029d2:	6965      	ldr	r5, [r4, #20]
 80029d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80029d8:	fb95 f5f3 	sdiv	r5, r5, r3
 80029dc:	f109 0301 	add.w	r3, r9, #1
 80029e0:	443b      	add	r3, r7
 80029e2:	429d      	cmp	r5, r3
 80029e4:	bf38      	it	cc
 80029e6:	461d      	movcc	r5, r3
 80029e8:	0553      	lsls	r3, r2, #21
 80029ea:	d530      	bpl.n	8002a4e <__ssputs_r+0x9e>
 80029ec:	4629      	mov	r1, r5
 80029ee:	f000 fb37 	bl	8003060 <_malloc_r>
 80029f2:	4606      	mov	r6, r0
 80029f4:	b950      	cbnz	r0, 8002a0c <__ssputs_r+0x5c>
 80029f6:	230c      	movs	r3, #12
 80029f8:	f04f 30ff 	mov.w	r0, #4294967295
 80029fc:	f8ca 3000 	str.w	r3, [sl]
 8002a00:	89a3      	ldrh	r3, [r4, #12]
 8002a02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a06:	81a3      	strh	r3, [r4, #12]
 8002a08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a0c:	463a      	mov	r2, r7
 8002a0e:	6921      	ldr	r1, [r4, #16]
 8002a10:	f000 fab6 	bl	8002f80 <memcpy>
 8002a14:	89a3      	ldrh	r3, [r4, #12]
 8002a16:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002a1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a1e:	81a3      	strh	r3, [r4, #12]
 8002a20:	6126      	str	r6, [r4, #16]
 8002a22:	443e      	add	r6, r7
 8002a24:	6026      	str	r6, [r4, #0]
 8002a26:	464e      	mov	r6, r9
 8002a28:	6165      	str	r5, [r4, #20]
 8002a2a:	1bed      	subs	r5, r5, r7
 8002a2c:	60a5      	str	r5, [r4, #8]
 8002a2e:	454e      	cmp	r6, r9
 8002a30:	d900      	bls.n	8002a34 <__ssputs_r+0x84>
 8002a32:	464e      	mov	r6, r9
 8002a34:	4632      	mov	r2, r6
 8002a36:	4641      	mov	r1, r8
 8002a38:	6820      	ldr	r0, [r4, #0]
 8002a3a:	f000 faac 	bl	8002f96 <memmove>
 8002a3e:	68a3      	ldr	r3, [r4, #8]
 8002a40:	2000      	movs	r0, #0
 8002a42:	1b9b      	subs	r3, r3, r6
 8002a44:	60a3      	str	r3, [r4, #8]
 8002a46:	6823      	ldr	r3, [r4, #0]
 8002a48:	441e      	add	r6, r3
 8002a4a:	6026      	str	r6, [r4, #0]
 8002a4c:	e7dc      	b.n	8002a08 <__ssputs_r+0x58>
 8002a4e:	462a      	mov	r2, r5
 8002a50:	f000 fb60 	bl	8003114 <_realloc_r>
 8002a54:	4606      	mov	r6, r0
 8002a56:	2800      	cmp	r0, #0
 8002a58:	d1e2      	bne.n	8002a20 <__ssputs_r+0x70>
 8002a5a:	6921      	ldr	r1, [r4, #16]
 8002a5c:	4650      	mov	r0, sl
 8002a5e:	f000 fab3 	bl	8002fc8 <_free_r>
 8002a62:	e7c8      	b.n	80029f6 <__ssputs_r+0x46>

08002a64 <_svfiprintf_r>:
 8002a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a68:	461d      	mov	r5, r3
 8002a6a:	898b      	ldrh	r3, [r1, #12]
 8002a6c:	b09d      	sub	sp, #116	; 0x74
 8002a6e:	061f      	lsls	r7, r3, #24
 8002a70:	4680      	mov	r8, r0
 8002a72:	460c      	mov	r4, r1
 8002a74:	4616      	mov	r6, r2
 8002a76:	d50f      	bpl.n	8002a98 <_svfiprintf_r+0x34>
 8002a78:	690b      	ldr	r3, [r1, #16]
 8002a7a:	b96b      	cbnz	r3, 8002a98 <_svfiprintf_r+0x34>
 8002a7c:	2140      	movs	r1, #64	; 0x40
 8002a7e:	f000 faef 	bl	8003060 <_malloc_r>
 8002a82:	6020      	str	r0, [r4, #0]
 8002a84:	6120      	str	r0, [r4, #16]
 8002a86:	b928      	cbnz	r0, 8002a94 <_svfiprintf_r+0x30>
 8002a88:	230c      	movs	r3, #12
 8002a8a:	f8c8 3000 	str.w	r3, [r8]
 8002a8e:	f04f 30ff 	mov.w	r0, #4294967295
 8002a92:	e0c8      	b.n	8002c26 <_svfiprintf_r+0x1c2>
 8002a94:	2340      	movs	r3, #64	; 0x40
 8002a96:	6163      	str	r3, [r4, #20]
 8002a98:	2300      	movs	r3, #0
 8002a9a:	9309      	str	r3, [sp, #36]	; 0x24
 8002a9c:	2320      	movs	r3, #32
 8002a9e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002aa2:	2330      	movs	r3, #48	; 0x30
 8002aa4:	f04f 0b01 	mov.w	fp, #1
 8002aa8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002aac:	9503      	str	r5, [sp, #12]
 8002aae:	4637      	mov	r7, r6
 8002ab0:	463d      	mov	r5, r7
 8002ab2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002ab6:	b10b      	cbz	r3, 8002abc <_svfiprintf_r+0x58>
 8002ab8:	2b25      	cmp	r3, #37	; 0x25
 8002aba:	d13e      	bne.n	8002b3a <_svfiprintf_r+0xd6>
 8002abc:	ebb7 0a06 	subs.w	sl, r7, r6
 8002ac0:	d00b      	beq.n	8002ada <_svfiprintf_r+0x76>
 8002ac2:	4653      	mov	r3, sl
 8002ac4:	4632      	mov	r2, r6
 8002ac6:	4621      	mov	r1, r4
 8002ac8:	4640      	mov	r0, r8
 8002aca:	f7ff ff71 	bl	80029b0 <__ssputs_r>
 8002ace:	3001      	adds	r0, #1
 8002ad0:	f000 80a4 	beq.w	8002c1c <_svfiprintf_r+0x1b8>
 8002ad4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002ad6:	4453      	add	r3, sl
 8002ad8:	9309      	str	r3, [sp, #36]	; 0x24
 8002ada:	783b      	ldrb	r3, [r7, #0]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	f000 809d 	beq.w	8002c1c <_svfiprintf_r+0x1b8>
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ae8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002aec:	9304      	str	r3, [sp, #16]
 8002aee:	9307      	str	r3, [sp, #28]
 8002af0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002af4:	931a      	str	r3, [sp, #104]	; 0x68
 8002af6:	462f      	mov	r7, r5
 8002af8:	2205      	movs	r2, #5
 8002afa:	f817 1b01 	ldrb.w	r1, [r7], #1
 8002afe:	4850      	ldr	r0, [pc, #320]	; (8002c40 <_svfiprintf_r+0x1dc>)
 8002b00:	f000 fa30 	bl	8002f64 <memchr>
 8002b04:	9b04      	ldr	r3, [sp, #16]
 8002b06:	b9d0      	cbnz	r0, 8002b3e <_svfiprintf_r+0xda>
 8002b08:	06d9      	lsls	r1, r3, #27
 8002b0a:	bf44      	itt	mi
 8002b0c:	2220      	movmi	r2, #32
 8002b0e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002b12:	071a      	lsls	r2, r3, #28
 8002b14:	bf44      	itt	mi
 8002b16:	222b      	movmi	r2, #43	; 0x2b
 8002b18:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002b1c:	782a      	ldrb	r2, [r5, #0]
 8002b1e:	2a2a      	cmp	r2, #42	; 0x2a
 8002b20:	d015      	beq.n	8002b4e <_svfiprintf_r+0xea>
 8002b22:	462f      	mov	r7, r5
 8002b24:	2000      	movs	r0, #0
 8002b26:	250a      	movs	r5, #10
 8002b28:	9a07      	ldr	r2, [sp, #28]
 8002b2a:	4639      	mov	r1, r7
 8002b2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002b30:	3b30      	subs	r3, #48	; 0x30
 8002b32:	2b09      	cmp	r3, #9
 8002b34:	d94d      	bls.n	8002bd2 <_svfiprintf_r+0x16e>
 8002b36:	b1b8      	cbz	r0, 8002b68 <_svfiprintf_r+0x104>
 8002b38:	e00f      	b.n	8002b5a <_svfiprintf_r+0xf6>
 8002b3a:	462f      	mov	r7, r5
 8002b3c:	e7b8      	b.n	8002ab0 <_svfiprintf_r+0x4c>
 8002b3e:	4a40      	ldr	r2, [pc, #256]	; (8002c40 <_svfiprintf_r+0x1dc>)
 8002b40:	463d      	mov	r5, r7
 8002b42:	1a80      	subs	r0, r0, r2
 8002b44:	fa0b f000 	lsl.w	r0, fp, r0
 8002b48:	4318      	orrs	r0, r3
 8002b4a:	9004      	str	r0, [sp, #16]
 8002b4c:	e7d3      	b.n	8002af6 <_svfiprintf_r+0x92>
 8002b4e:	9a03      	ldr	r2, [sp, #12]
 8002b50:	1d11      	adds	r1, r2, #4
 8002b52:	6812      	ldr	r2, [r2, #0]
 8002b54:	9103      	str	r1, [sp, #12]
 8002b56:	2a00      	cmp	r2, #0
 8002b58:	db01      	blt.n	8002b5e <_svfiprintf_r+0xfa>
 8002b5a:	9207      	str	r2, [sp, #28]
 8002b5c:	e004      	b.n	8002b68 <_svfiprintf_r+0x104>
 8002b5e:	4252      	negs	r2, r2
 8002b60:	f043 0302 	orr.w	r3, r3, #2
 8002b64:	9207      	str	r2, [sp, #28]
 8002b66:	9304      	str	r3, [sp, #16]
 8002b68:	783b      	ldrb	r3, [r7, #0]
 8002b6a:	2b2e      	cmp	r3, #46	; 0x2e
 8002b6c:	d10c      	bne.n	8002b88 <_svfiprintf_r+0x124>
 8002b6e:	787b      	ldrb	r3, [r7, #1]
 8002b70:	2b2a      	cmp	r3, #42	; 0x2a
 8002b72:	d133      	bne.n	8002bdc <_svfiprintf_r+0x178>
 8002b74:	9b03      	ldr	r3, [sp, #12]
 8002b76:	3702      	adds	r7, #2
 8002b78:	1d1a      	adds	r2, r3, #4
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	9203      	str	r2, [sp, #12]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	bfb8      	it	lt
 8002b82:	f04f 33ff 	movlt.w	r3, #4294967295
 8002b86:	9305      	str	r3, [sp, #20]
 8002b88:	4d2e      	ldr	r5, [pc, #184]	; (8002c44 <_svfiprintf_r+0x1e0>)
 8002b8a:	2203      	movs	r2, #3
 8002b8c:	7839      	ldrb	r1, [r7, #0]
 8002b8e:	4628      	mov	r0, r5
 8002b90:	f000 f9e8 	bl	8002f64 <memchr>
 8002b94:	b138      	cbz	r0, 8002ba6 <_svfiprintf_r+0x142>
 8002b96:	2340      	movs	r3, #64	; 0x40
 8002b98:	1b40      	subs	r0, r0, r5
 8002b9a:	fa03 f000 	lsl.w	r0, r3, r0
 8002b9e:	9b04      	ldr	r3, [sp, #16]
 8002ba0:	3701      	adds	r7, #1
 8002ba2:	4303      	orrs	r3, r0
 8002ba4:	9304      	str	r3, [sp, #16]
 8002ba6:	7839      	ldrb	r1, [r7, #0]
 8002ba8:	2206      	movs	r2, #6
 8002baa:	4827      	ldr	r0, [pc, #156]	; (8002c48 <_svfiprintf_r+0x1e4>)
 8002bac:	1c7e      	adds	r6, r7, #1
 8002bae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002bb2:	f000 f9d7 	bl	8002f64 <memchr>
 8002bb6:	2800      	cmp	r0, #0
 8002bb8:	d038      	beq.n	8002c2c <_svfiprintf_r+0x1c8>
 8002bba:	4b24      	ldr	r3, [pc, #144]	; (8002c4c <_svfiprintf_r+0x1e8>)
 8002bbc:	bb13      	cbnz	r3, 8002c04 <_svfiprintf_r+0x1a0>
 8002bbe:	9b03      	ldr	r3, [sp, #12]
 8002bc0:	3307      	adds	r3, #7
 8002bc2:	f023 0307 	bic.w	r3, r3, #7
 8002bc6:	3308      	adds	r3, #8
 8002bc8:	9303      	str	r3, [sp, #12]
 8002bca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002bcc:	444b      	add	r3, r9
 8002bce:	9309      	str	r3, [sp, #36]	; 0x24
 8002bd0:	e76d      	b.n	8002aae <_svfiprintf_r+0x4a>
 8002bd2:	fb05 3202 	mla	r2, r5, r2, r3
 8002bd6:	2001      	movs	r0, #1
 8002bd8:	460f      	mov	r7, r1
 8002bda:	e7a6      	b.n	8002b2a <_svfiprintf_r+0xc6>
 8002bdc:	2300      	movs	r3, #0
 8002bde:	250a      	movs	r5, #10
 8002be0:	4619      	mov	r1, r3
 8002be2:	3701      	adds	r7, #1
 8002be4:	9305      	str	r3, [sp, #20]
 8002be6:	4638      	mov	r0, r7
 8002be8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002bec:	3a30      	subs	r2, #48	; 0x30
 8002bee:	2a09      	cmp	r2, #9
 8002bf0:	d903      	bls.n	8002bfa <_svfiprintf_r+0x196>
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d0c8      	beq.n	8002b88 <_svfiprintf_r+0x124>
 8002bf6:	9105      	str	r1, [sp, #20]
 8002bf8:	e7c6      	b.n	8002b88 <_svfiprintf_r+0x124>
 8002bfa:	fb05 2101 	mla	r1, r5, r1, r2
 8002bfe:	2301      	movs	r3, #1
 8002c00:	4607      	mov	r7, r0
 8002c02:	e7f0      	b.n	8002be6 <_svfiprintf_r+0x182>
 8002c04:	ab03      	add	r3, sp, #12
 8002c06:	9300      	str	r3, [sp, #0]
 8002c08:	4622      	mov	r2, r4
 8002c0a:	4b11      	ldr	r3, [pc, #68]	; (8002c50 <_svfiprintf_r+0x1ec>)
 8002c0c:	a904      	add	r1, sp, #16
 8002c0e:	4640      	mov	r0, r8
 8002c10:	f3af 8000 	nop.w
 8002c14:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002c18:	4681      	mov	r9, r0
 8002c1a:	d1d6      	bne.n	8002bca <_svfiprintf_r+0x166>
 8002c1c:	89a3      	ldrh	r3, [r4, #12]
 8002c1e:	065b      	lsls	r3, r3, #25
 8002c20:	f53f af35 	bmi.w	8002a8e <_svfiprintf_r+0x2a>
 8002c24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002c26:	b01d      	add	sp, #116	; 0x74
 8002c28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c2c:	ab03      	add	r3, sp, #12
 8002c2e:	9300      	str	r3, [sp, #0]
 8002c30:	4622      	mov	r2, r4
 8002c32:	4b07      	ldr	r3, [pc, #28]	; (8002c50 <_svfiprintf_r+0x1ec>)
 8002c34:	a904      	add	r1, sp, #16
 8002c36:	4640      	mov	r0, r8
 8002c38:	f000 f882 	bl	8002d40 <_printf_i>
 8002c3c:	e7ea      	b.n	8002c14 <_svfiprintf_r+0x1b0>
 8002c3e:	bf00      	nop
 8002c40:	080037d4 	.word	0x080037d4
 8002c44:	080037da 	.word	0x080037da
 8002c48:	080037de 	.word	0x080037de
 8002c4c:	00000000 	.word	0x00000000
 8002c50:	080029b1 	.word	0x080029b1

08002c54 <_printf_common>:
 8002c54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c58:	4691      	mov	r9, r2
 8002c5a:	461f      	mov	r7, r3
 8002c5c:	688a      	ldr	r2, [r1, #8]
 8002c5e:	690b      	ldr	r3, [r1, #16]
 8002c60:	4606      	mov	r6, r0
 8002c62:	4293      	cmp	r3, r2
 8002c64:	bfb8      	it	lt
 8002c66:	4613      	movlt	r3, r2
 8002c68:	f8c9 3000 	str.w	r3, [r9]
 8002c6c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002c70:	460c      	mov	r4, r1
 8002c72:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002c76:	b112      	cbz	r2, 8002c7e <_printf_common+0x2a>
 8002c78:	3301      	adds	r3, #1
 8002c7a:	f8c9 3000 	str.w	r3, [r9]
 8002c7e:	6823      	ldr	r3, [r4, #0]
 8002c80:	0699      	lsls	r1, r3, #26
 8002c82:	bf42      	ittt	mi
 8002c84:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002c88:	3302      	addmi	r3, #2
 8002c8a:	f8c9 3000 	strmi.w	r3, [r9]
 8002c8e:	6825      	ldr	r5, [r4, #0]
 8002c90:	f015 0506 	ands.w	r5, r5, #6
 8002c94:	d107      	bne.n	8002ca6 <_printf_common+0x52>
 8002c96:	f104 0a19 	add.w	sl, r4, #25
 8002c9a:	68e3      	ldr	r3, [r4, #12]
 8002c9c:	f8d9 2000 	ldr.w	r2, [r9]
 8002ca0:	1a9b      	subs	r3, r3, r2
 8002ca2:	42ab      	cmp	r3, r5
 8002ca4:	dc29      	bgt.n	8002cfa <_printf_common+0xa6>
 8002ca6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002caa:	6822      	ldr	r2, [r4, #0]
 8002cac:	3300      	adds	r3, #0
 8002cae:	bf18      	it	ne
 8002cb0:	2301      	movne	r3, #1
 8002cb2:	0692      	lsls	r2, r2, #26
 8002cb4:	d42e      	bmi.n	8002d14 <_printf_common+0xc0>
 8002cb6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002cba:	4639      	mov	r1, r7
 8002cbc:	4630      	mov	r0, r6
 8002cbe:	47c0      	blx	r8
 8002cc0:	3001      	adds	r0, #1
 8002cc2:	d021      	beq.n	8002d08 <_printf_common+0xb4>
 8002cc4:	6823      	ldr	r3, [r4, #0]
 8002cc6:	68e5      	ldr	r5, [r4, #12]
 8002cc8:	f003 0306 	and.w	r3, r3, #6
 8002ccc:	2b04      	cmp	r3, #4
 8002cce:	bf18      	it	ne
 8002cd0:	2500      	movne	r5, #0
 8002cd2:	f8d9 2000 	ldr.w	r2, [r9]
 8002cd6:	f04f 0900 	mov.w	r9, #0
 8002cda:	bf08      	it	eq
 8002cdc:	1aad      	subeq	r5, r5, r2
 8002cde:	68a3      	ldr	r3, [r4, #8]
 8002ce0:	6922      	ldr	r2, [r4, #16]
 8002ce2:	bf08      	it	eq
 8002ce4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	bfc4      	itt	gt
 8002cec:	1a9b      	subgt	r3, r3, r2
 8002cee:	18ed      	addgt	r5, r5, r3
 8002cf0:	341a      	adds	r4, #26
 8002cf2:	454d      	cmp	r5, r9
 8002cf4:	d11a      	bne.n	8002d2c <_printf_common+0xd8>
 8002cf6:	2000      	movs	r0, #0
 8002cf8:	e008      	b.n	8002d0c <_printf_common+0xb8>
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	4652      	mov	r2, sl
 8002cfe:	4639      	mov	r1, r7
 8002d00:	4630      	mov	r0, r6
 8002d02:	47c0      	blx	r8
 8002d04:	3001      	adds	r0, #1
 8002d06:	d103      	bne.n	8002d10 <_printf_common+0xbc>
 8002d08:	f04f 30ff 	mov.w	r0, #4294967295
 8002d0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d10:	3501      	adds	r5, #1
 8002d12:	e7c2      	b.n	8002c9a <_printf_common+0x46>
 8002d14:	2030      	movs	r0, #48	; 0x30
 8002d16:	18e1      	adds	r1, r4, r3
 8002d18:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002d1c:	1c5a      	adds	r2, r3, #1
 8002d1e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002d22:	4422      	add	r2, r4
 8002d24:	3302      	adds	r3, #2
 8002d26:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002d2a:	e7c4      	b.n	8002cb6 <_printf_common+0x62>
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	4622      	mov	r2, r4
 8002d30:	4639      	mov	r1, r7
 8002d32:	4630      	mov	r0, r6
 8002d34:	47c0      	blx	r8
 8002d36:	3001      	adds	r0, #1
 8002d38:	d0e6      	beq.n	8002d08 <_printf_common+0xb4>
 8002d3a:	f109 0901 	add.w	r9, r9, #1
 8002d3e:	e7d8      	b.n	8002cf2 <_printf_common+0x9e>

08002d40 <_printf_i>:
 8002d40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002d44:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002d48:	460c      	mov	r4, r1
 8002d4a:	7e09      	ldrb	r1, [r1, #24]
 8002d4c:	b085      	sub	sp, #20
 8002d4e:	296e      	cmp	r1, #110	; 0x6e
 8002d50:	4617      	mov	r7, r2
 8002d52:	4606      	mov	r6, r0
 8002d54:	4698      	mov	r8, r3
 8002d56:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002d58:	f000 80b3 	beq.w	8002ec2 <_printf_i+0x182>
 8002d5c:	d822      	bhi.n	8002da4 <_printf_i+0x64>
 8002d5e:	2963      	cmp	r1, #99	; 0x63
 8002d60:	d036      	beq.n	8002dd0 <_printf_i+0x90>
 8002d62:	d80a      	bhi.n	8002d7a <_printf_i+0x3a>
 8002d64:	2900      	cmp	r1, #0
 8002d66:	f000 80b9 	beq.w	8002edc <_printf_i+0x19c>
 8002d6a:	2958      	cmp	r1, #88	; 0x58
 8002d6c:	f000 8083 	beq.w	8002e76 <_printf_i+0x136>
 8002d70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002d74:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002d78:	e032      	b.n	8002de0 <_printf_i+0xa0>
 8002d7a:	2964      	cmp	r1, #100	; 0x64
 8002d7c:	d001      	beq.n	8002d82 <_printf_i+0x42>
 8002d7e:	2969      	cmp	r1, #105	; 0x69
 8002d80:	d1f6      	bne.n	8002d70 <_printf_i+0x30>
 8002d82:	6820      	ldr	r0, [r4, #0]
 8002d84:	6813      	ldr	r3, [r2, #0]
 8002d86:	0605      	lsls	r5, r0, #24
 8002d88:	f103 0104 	add.w	r1, r3, #4
 8002d8c:	d52a      	bpl.n	8002de4 <_printf_i+0xa4>
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	6011      	str	r1, [r2, #0]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	da03      	bge.n	8002d9e <_printf_i+0x5e>
 8002d96:	222d      	movs	r2, #45	; 0x2d
 8002d98:	425b      	negs	r3, r3
 8002d9a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002d9e:	486f      	ldr	r0, [pc, #444]	; (8002f5c <_printf_i+0x21c>)
 8002da0:	220a      	movs	r2, #10
 8002da2:	e039      	b.n	8002e18 <_printf_i+0xd8>
 8002da4:	2973      	cmp	r1, #115	; 0x73
 8002da6:	f000 809d 	beq.w	8002ee4 <_printf_i+0x1a4>
 8002daa:	d808      	bhi.n	8002dbe <_printf_i+0x7e>
 8002dac:	296f      	cmp	r1, #111	; 0x6f
 8002dae:	d020      	beq.n	8002df2 <_printf_i+0xb2>
 8002db0:	2970      	cmp	r1, #112	; 0x70
 8002db2:	d1dd      	bne.n	8002d70 <_printf_i+0x30>
 8002db4:	6823      	ldr	r3, [r4, #0]
 8002db6:	f043 0320 	orr.w	r3, r3, #32
 8002dba:	6023      	str	r3, [r4, #0]
 8002dbc:	e003      	b.n	8002dc6 <_printf_i+0x86>
 8002dbe:	2975      	cmp	r1, #117	; 0x75
 8002dc0:	d017      	beq.n	8002df2 <_printf_i+0xb2>
 8002dc2:	2978      	cmp	r1, #120	; 0x78
 8002dc4:	d1d4      	bne.n	8002d70 <_printf_i+0x30>
 8002dc6:	2378      	movs	r3, #120	; 0x78
 8002dc8:	4865      	ldr	r0, [pc, #404]	; (8002f60 <_printf_i+0x220>)
 8002dca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002dce:	e055      	b.n	8002e7c <_printf_i+0x13c>
 8002dd0:	6813      	ldr	r3, [r2, #0]
 8002dd2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002dd6:	1d19      	adds	r1, r3, #4
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	6011      	str	r1, [r2, #0]
 8002ddc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002de0:	2301      	movs	r3, #1
 8002de2:	e08c      	b.n	8002efe <_printf_i+0x1be>
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002dea:	6011      	str	r1, [r2, #0]
 8002dec:	bf18      	it	ne
 8002dee:	b21b      	sxthne	r3, r3
 8002df0:	e7cf      	b.n	8002d92 <_printf_i+0x52>
 8002df2:	6813      	ldr	r3, [r2, #0]
 8002df4:	6825      	ldr	r5, [r4, #0]
 8002df6:	1d18      	adds	r0, r3, #4
 8002df8:	6010      	str	r0, [r2, #0]
 8002dfa:	0628      	lsls	r0, r5, #24
 8002dfc:	d501      	bpl.n	8002e02 <_printf_i+0xc2>
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	e002      	b.n	8002e08 <_printf_i+0xc8>
 8002e02:	0668      	lsls	r0, r5, #25
 8002e04:	d5fb      	bpl.n	8002dfe <_printf_i+0xbe>
 8002e06:	881b      	ldrh	r3, [r3, #0]
 8002e08:	296f      	cmp	r1, #111	; 0x6f
 8002e0a:	bf14      	ite	ne
 8002e0c:	220a      	movne	r2, #10
 8002e0e:	2208      	moveq	r2, #8
 8002e10:	4852      	ldr	r0, [pc, #328]	; (8002f5c <_printf_i+0x21c>)
 8002e12:	2100      	movs	r1, #0
 8002e14:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002e18:	6865      	ldr	r5, [r4, #4]
 8002e1a:	2d00      	cmp	r5, #0
 8002e1c:	60a5      	str	r5, [r4, #8]
 8002e1e:	f2c0 8095 	blt.w	8002f4c <_printf_i+0x20c>
 8002e22:	6821      	ldr	r1, [r4, #0]
 8002e24:	f021 0104 	bic.w	r1, r1, #4
 8002e28:	6021      	str	r1, [r4, #0]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d13d      	bne.n	8002eaa <_printf_i+0x16a>
 8002e2e:	2d00      	cmp	r5, #0
 8002e30:	f040 808e 	bne.w	8002f50 <_printf_i+0x210>
 8002e34:	4665      	mov	r5, ip
 8002e36:	2a08      	cmp	r2, #8
 8002e38:	d10b      	bne.n	8002e52 <_printf_i+0x112>
 8002e3a:	6823      	ldr	r3, [r4, #0]
 8002e3c:	07db      	lsls	r3, r3, #31
 8002e3e:	d508      	bpl.n	8002e52 <_printf_i+0x112>
 8002e40:	6923      	ldr	r3, [r4, #16]
 8002e42:	6862      	ldr	r2, [r4, #4]
 8002e44:	429a      	cmp	r2, r3
 8002e46:	bfde      	ittt	le
 8002e48:	2330      	movle	r3, #48	; 0x30
 8002e4a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002e4e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002e52:	ebac 0305 	sub.w	r3, ip, r5
 8002e56:	6123      	str	r3, [r4, #16]
 8002e58:	f8cd 8000 	str.w	r8, [sp]
 8002e5c:	463b      	mov	r3, r7
 8002e5e:	aa03      	add	r2, sp, #12
 8002e60:	4621      	mov	r1, r4
 8002e62:	4630      	mov	r0, r6
 8002e64:	f7ff fef6 	bl	8002c54 <_printf_common>
 8002e68:	3001      	adds	r0, #1
 8002e6a:	d14d      	bne.n	8002f08 <_printf_i+0x1c8>
 8002e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e70:	b005      	add	sp, #20
 8002e72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002e76:	4839      	ldr	r0, [pc, #228]	; (8002f5c <_printf_i+0x21c>)
 8002e78:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002e7c:	6813      	ldr	r3, [r2, #0]
 8002e7e:	6821      	ldr	r1, [r4, #0]
 8002e80:	1d1d      	adds	r5, r3, #4
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	6015      	str	r5, [r2, #0]
 8002e86:	060a      	lsls	r2, r1, #24
 8002e88:	d50b      	bpl.n	8002ea2 <_printf_i+0x162>
 8002e8a:	07ca      	lsls	r2, r1, #31
 8002e8c:	bf44      	itt	mi
 8002e8e:	f041 0120 	orrmi.w	r1, r1, #32
 8002e92:	6021      	strmi	r1, [r4, #0]
 8002e94:	b91b      	cbnz	r3, 8002e9e <_printf_i+0x15e>
 8002e96:	6822      	ldr	r2, [r4, #0]
 8002e98:	f022 0220 	bic.w	r2, r2, #32
 8002e9c:	6022      	str	r2, [r4, #0]
 8002e9e:	2210      	movs	r2, #16
 8002ea0:	e7b7      	b.n	8002e12 <_printf_i+0xd2>
 8002ea2:	064d      	lsls	r5, r1, #25
 8002ea4:	bf48      	it	mi
 8002ea6:	b29b      	uxthmi	r3, r3
 8002ea8:	e7ef      	b.n	8002e8a <_printf_i+0x14a>
 8002eaa:	4665      	mov	r5, ip
 8002eac:	fbb3 f1f2 	udiv	r1, r3, r2
 8002eb0:	fb02 3311 	mls	r3, r2, r1, r3
 8002eb4:	5cc3      	ldrb	r3, [r0, r3]
 8002eb6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002eba:	460b      	mov	r3, r1
 8002ebc:	2900      	cmp	r1, #0
 8002ebe:	d1f5      	bne.n	8002eac <_printf_i+0x16c>
 8002ec0:	e7b9      	b.n	8002e36 <_printf_i+0xf6>
 8002ec2:	6813      	ldr	r3, [r2, #0]
 8002ec4:	6825      	ldr	r5, [r4, #0]
 8002ec6:	1d18      	adds	r0, r3, #4
 8002ec8:	6961      	ldr	r1, [r4, #20]
 8002eca:	6010      	str	r0, [r2, #0]
 8002ecc:	0628      	lsls	r0, r5, #24
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	d501      	bpl.n	8002ed6 <_printf_i+0x196>
 8002ed2:	6019      	str	r1, [r3, #0]
 8002ed4:	e002      	b.n	8002edc <_printf_i+0x19c>
 8002ed6:	066a      	lsls	r2, r5, #25
 8002ed8:	d5fb      	bpl.n	8002ed2 <_printf_i+0x192>
 8002eda:	8019      	strh	r1, [r3, #0]
 8002edc:	2300      	movs	r3, #0
 8002ede:	4665      	mov	r5, ip
 8002ee0:	6123      	str	r3, [r4, #16]
 8002ee2:	e7b9      	b.n	8002e58 <_printf_i+0x118>
 8002ee4:	6813      	ldr	r3, [r2, #0]
 8002ee6:	1d19      	adds	r1, r3, #4
 8002ee8:	6011      	str	r1, [r2, #0]
 8002eea:	681d      	ldr	r5, [r3, #0]
 8002eec:	6862      	ldr	r2, [r4, #4]
 8002eee:	2100      	movs	r1, #0
 8002ef0:	4628      	mov	r0, r5
 8002ef2:	f000 f837 	bl	8002f64 <memchr>
 8002ef6:	b108      	cbz	r0, 8002efc <_printf_i+0x1bc>
 8002ef8:	1b40      	subs	r0, r0, r5
 8002efa:	6060      	str	r0, [r4, #4]
 8002efc:	6863      	ldr	r3, [r4, #4]
 8002efe:	6123      	str	r3, [r4, #16]
 8002f00:	2300      	movs	r3, #0
 8002f02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002f06:	e7a7      	b.n	8002e58 <_printf_i+0x118>
 8002f08:	6923      	ldr	r3, [r4, #16]
 8002f0a:	462a      	mov	r2, r5
 8002f0c:	4639      	mov	r1, r7
 8002f0e:	4630      	mov	r0, r6
 8002f10:	47c0      	blx	r8
 8002f12:	3001      	adds	r0, #1
 8002f14:	d0aa      	beq.n	8002e6c <_printf_i+0x12c>
 8002f16:	6823      	ldr	r3, [r4, #0]
 8002f18:	079b      	lsls	r3, r3, #30
 8002f1a:	d413      	bmi.n	8002f44 <_printf_i+0x204>
 8002f1c:	68e0      	ldr	r0, [r4, #12]
 8002f1e:	9b03      	ldr	r3, [sp, #12]
 8002f20:	4298      	cmp	r0, r3
 8002f22:	bfb8      	it	lt
 8002f24:	4618      	movlt	r0, r3
 8002f26:	e7a3      	b.n	8002e70 <_printf_i+0x130>
 8002f28:	2301      	movs	r3, #1
 8002f2a:	464a      	mov	r2, r9
 8002f2c:	4639      	mov	r1, r7
 8002f2e:	4630      	mov	r0, r6
 8002f30:	47c0      	blx	r8
 8002f32:	3001      	adds	r0, #1
 8002f34:	d09a      	beq.n	8002e6c <_printf_i+0x12c>
 8002f36:	3501      	adds	r5, #1
 8002f38:	68e3      	ldr	r3, [r4, #12]
 8002f3a:	9a03      	ldr	r2, [sp, #12]
 8002f3c:	1a9b      	subs	r3, r3, r2
 8002f3e:	42ab      	cmp	r3, r5
 8002f40:	dcf2      	bgt.n	8002f28 <_printf_i+0x1e8>
 8002f42:	e7eb      	b.n	8002f1c <_printf_i+0x1dc>
 8002f44:	2500      	movs	r5, #0
 8002f46:	f104 0919 	add.w	r9, r4, #25
 8002f4a:	e7f5      	b.n	8002f38 <_printf_i+0x1f8>
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d1ac      	bne.n	8002eaa <_printf_i+0x16a>
 8002f50:	7803      	ldrb	r3, [r0, #0]
 8002f52:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002f56:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002f5a:	e76c      	b.n	8002e36 <_printf_i+0xf6>
 8002f5c:	080037e5 	.word	0x080037e5
 8002f60:	080037f6 	.word	0x080037f6

08002f64 <memchr>:
 8002f64:	b510      	push	{r4, lr}
 8002f66:	b2c9      	uxtb	r1, r1
 8002f68:	4402      	add	r2, r0
 8002f6a:	4290      	cmp	r0, r2
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	d101      	bne.n	8002f74 <memchr+0x10>
 8002f70:	2300      	movs	r3, #0
 8002f72:	e003      	b.n	8002f7c <memchr+0x18>
 8002f74:	781c      	ldrb	r4, [r3, #0]
 8002f76:	3001      	adds	r0, #1
 8002f78:	428c      	cmp	r4, r1
 8002f7a:	d1f6      	bne.n	8002f6a <memchr+0x6>
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	bd10      	pop	{r4, pc}

08002f80 <memcpy>:
 8002f80:	b510      	push	{r4, lr}
 8002f82:	1e43      	subs	r3, r0, #1
 8002f84:	440a      	add	r2, r1
 8002f86:	4291      	cmp	r1, r2
 8002f88:	d100      	bne.n	8002f8c <memcpy+0xc>
 8002f8a:	bd10      	pop	{r4, pc}
 8002f8c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002f90:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002f94:	e7f7      	b.n	8002f86 <memcpy+0x6>

08002f96 <memmove>:
 8002f96:	4288      	cmp	r0, r1
 8002f98:	b510      	push	{r4, lr}
 8002f9a:	eb01 0302 	add.w	r3, r1, r2
 8002f9e:	d807      	bhi.n	8002fb0 <memmove+0x1a>
 8002fa0:	1e42      	subs	r2, r0, #1
 8002fa2:	4299      	cmp	r1, r3
 8002fa4:	d00a      	beq.n	8002fbc <memmove+0x26>
 8002fa6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002faa:	f802 4f01 	strb.w	r4, [r2, #1]!
 8002fae:	e7f8      	b.n	8002fa2 <memmove+0xc>
 8002fb0:	4283      	cmp	r3, r0
 8002fb2:	d9f5      	bls.n	8002fa0 <memmove+0xa>
 8002fb4:	1881      	adds	r1, r0, r2
 8002fb6:	1ad2      	subs	r2, r2, r3
 8002fb8:	42d3      	cmn	r3, r2
 8002fba:	d100      	bne.n	8002fbe <memmove+0x28>
 8002fbc:	bd10      	pop	{r4, pc}
 8002fbe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002fc2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8002fc6:	e7f7      	b.n	8002fb8 <memmove+0x22>

08002fc8 <_free_r>:
 8002fc8:	b538      	push	{r3, r4, r5, lr}
 8002fca:	4605      	mov	r5, r0
 8002fcc:	2900      	cmp	r1, #0
 8002fce:	d043      	beq.n	8003058 <_free_r+0x90>
 8002fd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002fd4:	1f0c      	subs	r4, r1, #4
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	bfb8      	it	lt
 8002fda:	18e4      	addlt	r4, r4, r3
 8002fdc:	f000 f8d0 	bl	8003180 <__malloc_lock>
 8002fe0:	4a1e      	ldr	r2, [pc, #120]	; (800305c <_free_r+0x94>)
 8002fe2:	6813      	ldr	r3, [r2, #0]
 8002fe4:	4610      	mov	r0, r2
 8002fe6:	b933      	cbnz	r3, 8002ff6 <_free_r+0x2e>
 8002fe8:	6063      	str	r3, [r4, #4]
 8002fea:	6014      	str	r4, [r2, #0]
 8002fec:	4628      	mov	r0, r5
 8002fee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002ff2:	f000 b8c6 	b.w	8003182 <__malloc_unlock>
 8002ff6:	42a3      	cmp	r3, r4
 8002ff8:	d90b      	bls.n	8003012 <_free_r+0x4a>
 8002ffa:	6821      	ldr	r1, [r4, #0]
 8002ffc:	1862      	adds	r2, r4, r1
 8002ffe:	4293      	cmp	r3, r2
 8003000:	bf01      	itttt	eq
 8003002:	681a      	ldreq	r2, [r3, #0]
 8003004:	685b      	ldreq	r3, [r3, #4]
 8003006:	1852      	addeq	r2, r2, r1
 8003008:	6022      	streq	r2, [r4, #0]
 800300a:	6063      	str	r3, [r4, #4]
 800300c:	6004      	str	r4, [r0, #0]
 800300e:	e7ed      	b.n	8002fec <_free_r+0x24>
 8003010:	4613      	mov	r3, r2
 8003012:	685a      	ldr	r2, [r3, #4]
 8003014:	b10a      	cbz	r2, 800301a <_free_r+0x52>
 8003016:	42a2      	cmp	r2, r4
 8003018:	d9fa      	bls.n	8003010 <_free_r+0x48>
 800301a:	6819      	ldr	r1, [r3, #0]
 800301c:	1858      	adds	r0, r3, r1
 800301e:	42a0      	cmp	r0, r4
 8003020:	d10b      	bne.n	800303a <_free_r+0x72>
 8003022:	6820      	ldr	r0, [r4, #0]
 8003024:	4401      	add	r1, r0
 8003026:	1858      	adds	r0, r3, r1
 8003028:	4282      	cmp	r2, r0
 800302a:	6019      	str	r1, [r3, #0]
 800302c:	d1de      	bne.n	8002fec <_free_r+0x24>
 800302e:	6810      	ldr	r0, [r2, #0]
 8003030:	6852      	ldr	r2, [r2, #4]
 8003032:	4401      	add	r1, r0
 8003034:	6019      	str	r1, [r3, #0]
 8003036:	605a      	str	r2, [r3, #4]
 8003038:	e7d8      	b.n	8002fec <_free_r+0x24>
 800303a:	d902      	bls.n	8003042 <_free_r+0x7a>
 800303c:	230c      	movs	r3, #12
 800303e:	602b      	str	r3, [r5, #0]
 8003040:	e7d4      	b.n	8002fec <_free_r+0x24>
 8003042:	6820      	ldr	r0, [r4, #0]
 8003044:	1821      	adds	r1, r4, r0
 8003046:	428a      	cmp	r2, r1
 8003048:	bf01      	itttt	eq
 800304a:	6811      	ldreq	r1, [r2, #0]
 800304c:	6852      	ldreq	r2, [r2, #4]
 800304e:	1809      	addeq	r1, r1, r0
 8003050:	6021      	streq	r1, [r4, #0]
 8003052:	6062      	str	r2, [r4, #4]
 8003054:	605c      	str	r4, [r3, #4]
 8003056:	e7c9      	b.n	8002fec <_free_r+0x24>
 8003058:	bd38      	pop	{r3, r4, r5, pc}
 800305a:	bf00      	nop
 800305c:	20000104 	.word	0x20000104

08003060 <_malloc_r>:
 8003060:	b570      	push	{r4, r5, r6, lr}
 8003062:	1ccd      	adds	r5, r1, #3
 8003064:	f025 0503 	bic.w	r5, r5, #3
 8003068:	3508      	adds	r5, #8
 800306a:	2d0c      	cmp	r5, #12
 800306c:	bf38      	it	cc
 800306e:	250c      	movcc	r5, #12
 8003070:	2d00      	cmp	r5, #0
 8003072:	4606      	mov	r6, r0
 8003074:	db01      	blt.n	800307a <_malloc_r+0x1a>
 8003076:	42a9      	cmp	r1, r5
 8003078:	d903      	bls.n	8003082 <_malloc_r+0x22>
 800307a:	230c      	movs	r3, #12
 800307c:	6033      	str	r3, [r6, #0]
 800307e:	2000      	movs	r0, #0
 8003080:	bd70      	pop	{r4, r5, r6, pc}
 8003082:	f000 f87d 	bl	8003180 <__malloc_lock>
 8003086:	4a21      	ldr	r2, [pc, #132]	; (800310c <_malloc_r+0xac>)
 8003088:	6814      	ldr	r4, [r2, #0]
 800308a:	4621      	mov	r1, r4
 800308c:	b991      	cbnz	r1, 80030b4 <_malloc_r+0x54>
 800308e:	4c20      	ldr	r4, [pc, #128]	; (8003110 <_malloc_r+0xb0>)
 8003090:	6823      	ldr	r3, [r4, #0]
 8003092:	b91b      	cbnz	r3, 800309c <_malloc_r+0x3c>
 8003094:	4630      	mov	r0, r6
 8003096:	f000 f863 	bl	8003160 <_sbrk_r>
 800309a:	6020      	str	r0, [r4, #0]
 800309c:	4629      	mov	r1, r5
 800309e:	4630      	mov	r0, r6
 80030a0:	f000 f85e 	bl	8003160 <_sbrk_r>
 80030a4:	1c43      	adds	r3, r0, #1
 80030a6:	d124      	bne.n	80030f2 <_malloc_r+0x92>
 80030a8:	230c      	movs	r3, #12
 80030aa:	4630      	mov	r0, r6
 80030ac:	6033      	str	r3, [r6, #0]
 80030ae:	f000 f868 	bl	8003182 <__malloc_unlock>
 80030b2:	e7e4      	b.n	800307e <_malloc_r+0x1e>
 80030b4:	680b      	ldr	r3, [r1, #0]
 80030b6:	1b5b      	subs	r3, r3, r5
 80030b8:	d418      	bmi.n	80030ec <_malloc_r+0x8c>
 80030ba:	2b0b      	cmp	r3, #11
 80030bc:	d90f      	bls.n	80030de <_malloc_r+0x7e>
 80030be:	600b      	str	r3, [r1, #0]
 80030c0:	18cc      	adds	r4, r1, r3
 80030c2:	50cd      	str	r5, [r1, r3]
 80030c4:	4630      	mov	r0, r6
 80030c6:	f000 f85c 	bl	8003182 <__malloc_unlock>
 80030ca:	f104 000b 	add.w	r0, r4, #11
 80030ce:	1d23      	adds	r3, r4, #4
 80030d0:	f020 0007 	bic.w	r0, r0, #7
 80030d4:	1ac3      	subs	r3, r0, r3
 80030d6:	d0d3      	beq.n	8003080 <_malloc_r+0x20>
 80030d8:	425a      	negs	r2, r3
 80030da:	50e2      	str	r2, [r4, r3]
 80030dc:	e7d0      	b.n	8003080 <_malloc_r+0x20>
 80030de:	684b      	ldr	r3, [r1, #4]
 80030e0:	428c      	cmp	r4, r1
 80030e2:	bf16      	itet	ne
 80030e4:	6063      	strne	r3, [r4, #4]
 80030e6:	6013      	streq	r3, [r2, #0]
 80030e8:	460c      	movne	r4, r1
 80030ea:	e7eb      	b.n	80030c4 <_malloc_r+0x64>
 80030ec:	460c      	mov	r4, r1
 80030ee:	6849      	ldr	r1, [r1, #4]
 80030f0:	e7cc      	b.n	800308c <_malloc_r+0x2c>
 80030f2:	1cc4      	adds	r4, r0, #3
 80030f4:	f024 0403 	bic.w	r4, r4, #3
 80030f8:	42a0      	cmp	r0, r4
 80030fa:	d005      	beq.n	8003108 <_malloc_r+0xa8>
 80030fc:	1a21      	subs	r1, r4, r0
 80030fe:	4630      	mov	r0, r6
 8003100:	f000 f82e 	bl	8003160 <_sbrk_r>
 8003104:	3001      	adds	r0, #1
 8003106:	d0cf      	beq.n	80030a8 <_malloc_r+0x48>
 8003108:	6025      	str	r5, [r4, #0]
 800310a:	e7db      	b.n	80030c4 <_malloc_r+0x64>
 800310c:	20000104 	.word	0x20000104
 8003110:	20000108 	.word	0x20000108

08003114 <_realloc_r>:
 8003114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003116:	4607      	mov	r7, r0
 8003118:	4614      	mov	r4, r2
 800311a:	460e      	mov	r6, r1
 800311c:	b921      	cbnz	r1, 8003128 <_realloc_r+0x14>
 800311e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003122:	4611      	mov	r1, r2
 8003124:	f7ff bf9c 	b.w	8003060 <_malloc_r>
 8003128:	b922      	cbnz	r2, 8003134 <_realloc_r+0x20>
 800312a:	f7ff ff4d 	bl	8002fc8 <_free_r>
 800312e:	4625      	mov	r5, r4
 8003130:	4628      	mov	r0, r5
 8003132:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003134:	f000 f826 	bl	8003184 <_malloc_usable_size_r>
 8003138:	42a0      	cmp	r0, r4
 800313a:	d20f      	bcs.n	800315c <_realloc_r+0x48>
 800313c:	4621      	mov	r1, r4
 800313e:	4638      	mov	r0, r7
 8003140:	f7ff ff8e 	bl	8003060 <_malloc_r>
 8003144:	4605      	mov	r5, r0
 8003146:	2800      	cmp	r0, #0
 8003148:	d0f2      	beq.n	8003130 <_realloc_r+0x1c>
 800314a:	4631      	mov	r1, r6
 800314c:	4622      	mov	r2, r4
 800314e:	f7ff ff17 	bl	8002f80 <memcpy>
 8003152:	4631      	mov	r1, r6
 8003154:	4638      	mov	r0, r7
 8003156:	f7ff ff37 	bl	8002fc8 <_free_r>
 800315a:	e7e9      	b.n	8003130 <_realloc_r+0x1c>
 800315c:	4635      	mov	r5, r6
 800315e:	e7e7      	b.n	8003130 <_realloc_r+0x1c>

08003160 <_sbrk_r>:
 8003160:	b538      	push	{r3, r4, r5, lr}
 8003162:	2300      	movs	r3, #0
 8003164:	4c05      	ldr	r4, [pc, #20]	; (800317c <_sbrk_r+0x1c>)
 8003166:	4605      	mov	r5, r0
 8003168:	4608      	mov	r0, r1
 800316a:	6023      	str	r3, [r4, #0]
 800316c:	f7fd fc4c 	bl	8000a08 <_sbrk>
 8003170:	1c43      	adds	r3, r0, #1
 8003172:	d102      	bne.n	800317a <_sbrk_r+0x1a>
 8003174:	6823      	ldr	r3, [r4, #0]
 8003176:	b103      	cbz	r3, 800317a <_sbrk_r+0x1a>
 8003178:	602b      	str	r3, [r5, #0]
 800317a:	bd38      	pop	{r3, r4, r5, pc}
 800317c:	200009e4 	.word	0x200009e4

08003180 <__malloc_lock>:
 8003180:	4770      	bx	lr

08003182 <__malloc_unlock>:
 8003182:	4770      	bx	lr

08003184 <_malloc_usable_size_r>:
 8003184:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003188:	1f18      	subs	r0, r3, #4
 800318a:	2b00      	cmp	r3, #0
 800318c:	bfbc      	itt	lt
 800318e:	580b      	ldrlt	r3, [r1, r0]
 8003190:	18c0      	addlt	r0, r0, r3
 8003192:	4770      	bx	lr

08003194 <_init>:
 8003194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003196:	bf00      	nop
 8003198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800319a:	bc08      	pop	{r3}
 800319c:	469e      	mov	lr, r3
 800319e:	4770      	bx	lr

080031a0 <_fini>:
 80031a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031a2:	bf00      	nop
 80031a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031a6:	bc08      	pop	{r3}
 80031a8:	469e      	mov	lr, r3
 80031aa:	4770      	bx	lr
