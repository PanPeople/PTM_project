
PTM_project_master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030c0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000065c  080031cc  080031cc  000131cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003828  08003828  000200e0  2**0
                  CONTENTS
  4 .ARM          00000000  08003828  08003828  000200e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003828  08003828  000200e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003828  08003828  00013828  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800382c  0800382c  0001382c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e0  20000000  08003830  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000094c  200000e0  08003910  000200e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a2c  08003910  00020a2c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d31a  00000000  00000000  00020109  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002123  00000000  00000000  0002d423  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e00  00000000  00000000  0002f548  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000cd8  00000000  00000000  00030348  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017aa3  00000000  00000000  00031020  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ba37  00000000  00000000  00048ac3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00089a1d  00000000  00000000  000544fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ddf17  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003cb4  00000000  00000000  000ddf94  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000e0 	.word	0x200000e0
 8000128:	00000000 	.word	0x00000000
 800012c:	080031b4 	.word	0x080031b4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000e4 	.word	0x200000e4
 8000148:	080031b4 	.word	0x080031b4

0800014c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000152:	f107 0310 	add.w	r3, r7, #16
 8000156:	2200      	movs	r2, #0
 8000158:	601a      	str	r2, [r3, #0]
 800015a:	605a      	str	r2, [r3, #4]
 800015c:	609a      	str	r2, [r3, #8]
 800015e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000160:	4b2d      	ldr	r3, [pc, #180]	; (8000218 <MX_GPIO_Init+0xcc>)
 8000162:	699b      	ldr	r3, [r3, #24]
 8000164:	4a2c      	ldr	r2, [pc, #176]	; (8000218 <MX_GPIO_Init+0xcc>)
 8000166:	f043 0310 	orr.w	r3, r3, #16
 800016a:	6193      	str	r3, [r2, #24]
 800016c:	4b2a      	ldr	r3, [pc, #168]	; (8000218 <MX_GPIO_Init+0xcc>)
 800016e:	699b      	ldr	r3, [r3, #24]
 8000170:	f003 0310 	and.w	r3, r3, #16
 8000174:	60fb      	str	r3, [r7, #12]
 8000176:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000178:	4b27      	ldr	r3, [pc, #156]	; (8000218 <MX_GPIO_Init+0xcc>)
 800017a:	699b      	ldr	r3, [r3, #24]
 800017c:	4a26      	ldr	r2, [pc, #152]	; (8000218 <MX_GPIO_Init+0xcc>)
 800017e:	f043 0320 	orr.w	r3, r3, #32
 8000182:	6193      	str	r3, [r2, #24]
 8000184:	4b24      	ldr	r3, [pc, #144]	; (8000218 <MX_GPIO_Init+0xcc>)
 8000186:	699b      	ldr	r3, [r3, #24]
 8000188:	f003 0320 	and.w	r3, r3, #32
 800018c:	60bb      	str	r3, [r7, #8]
 800018e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000190:	4b21      	ldr	r3, [pc, #132]	; (8000218 <MX_GPIO_Init+0xcc>)
 8000192:	699b      	ldr	r3, [r3, #24]
 8000194:	4a20      	ldr	r2, [pc, #128]	; (8000218 <MX_GPIO_Init+0xcc>)
 8000196:	f043 0304 	orr.w	r3, r3, #4
 800019a:	6193      	str	r3, [r2, #24]
 800019c:	4b1e      	ldr	r3, [pc, #120]	; (8000218 <MX_GPIO_Init+0xcc>)
 800019e:	699b      	ldr	r3, [r3, #24]
 80001a0:	f003 0304 	and.w	r3, r3, #4
 80001a4:	607b      	str	r3, [r7, #4]
 80001a6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001a8:	4b1b      	ldr	r3, [pc, #108]	; (8000218 <MX_GPIO_Init+0xcc>)
 80001aa:	699b      	ldr	r3, [r3, #24]
 80001ac:	4a1a      	ldr	r2, [pc, #104]	; (8000218 <MX_GPIO_Init+0xcc>)
 80001ae:	f043 0308 	orr.w	r3, r3, #8
 80001b2:	6193      	str	r3, [r2, #24]
 80001b4:	4b18      	ldr	r3, [pc, #96]	; (8000218 <MX_GPIO_Init+0xcc>)
 80001b6:	699b      	ldr	r3, [r3, #24]
 80001b8:	f003 0308 	and.w	r3, r3, #8
 80001bc:	603b      	str	r3, [r7, #0]
 80001be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 80001c0:	2200      	movs	r2, #0
 80001c2:	210e      	movs	r1, #14
 80001c4:	4815      	ldr	r0, [pc, #84]	; (800021c <MX_GPIO_Init+0xd0>)
 80001c6:	f001 f82b 	bl	8001220 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80001ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80001d0:	4b13      	ldr	r3, [pc, #76]	; (8000220 <MX_GPIO_Init+0xd4>)
 80001d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001d4:	2300      	movs	r3, #0
 80001d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80001d8:	f107 0310 	add.w	r3, r7, #16
 80001dc:	4619      	mov	r1, r3
 80001de:	480f      	ldr	r0, [pc, #60]	; (800021c <MX_GPIO_Init+0xd0>)
 80001e0:	f000 fec4 	bl	8000f6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80001e4:	230e      	movs	r3, #14
 80001e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001e8:	2301      	movs	r3, #1
 80001ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001ec:	2300      	movs	r3, #0
 80001ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001f0:	2302      	movs	r3, #2
 80001f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80001f4:	f107 0310 	add.w	r3, r7, #16
 80001f8:	4619      	mov	r1, r3
 80001fa:	4808      	ldr	r0, [pc, #32]	; (800021c <MX_GPIO_Init+0xd0>)
 80001fc:	f000 feb6 	bl	8000f6c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000200:	2200      	movs	r2, #0
 8000202:	2100      	movs	r1, #0
 8000204:	2028      	movs	r0, #40	; 0x28
 8000206:	f000 fe7a 	bl	8000efe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800020a:	2028      	movs	r0, #40	; 0x28
 800020c:	f000 fe93 	bl	8000f36 <HAL_NVIC_EnableIRQ>

}
 8000210:	bf00      	nop
 8000212:	3720      	adds	r7, #32
 8000214:	46bd      	mov	sp, r7
 8000216:	bd80      	pop	{r7, pc}
 8000218:	40021000 	.word	0x40021000
 800021c:	40011000 	.word	0x40011000
 8000220:	10110000 	.word	0x10110000

08000224 <LCD_Initialize>:

#include "main.h"
#include "lcd_5110.h"


void LCD_Initialize(SPI_HandleTypeDef *spi){
 8000224:	b580      	push	{r7, lr}
 8000226:	b082      	sub	sp, #8
 8000228:	af00      	add	r7, sp, #0
 800022a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);
 800022c:	2200      	movs	r2, #0
 800022e:	2108      	movs	r1, #8
 8000230:	4813      	ldr	r0, [pc, #76]	; (8000280 <LCD_Initialize+0x5c>)
 8000232:	f000 fff5 	bl	8001220 <HAL_GPIO_WritePin>
	HAL_Delay(1);//only needed once xD
 8000236:	2001      	movs	r0, #1
 8000238:	f000 fd68 	bl	8000d0c <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 800023c:	2201      	movs	r2, #1
 800023e:	2108      	movs	r1, #8
 8000240:	480f      	ldr	r0, [pc, #60]	; (8000280 <LCD_Initialize+0x5c>)
 8000242:	f000 ffed 	bl	8001220 <HAL_GPIO_WritePin>

    LCD_Command(spi, 0x21);
 8000246:	2121      	movs	r1, #33	; 0x21
 8000248:	6878      	ldr	r0, [r7, #4]
 800024a:	f000 f81b 	bl	8000284 <LCD_Command>
    LCD_Command(spi,0xB1);
 800024e:	21b1      	movs	r1, #177	; 0xb1
 8000250:	6878      	ldr	r0, [r7, #4]
 8000252:	f000 f817 	bl	8000284 <LCD_Command>
    LCD_Command(spi, 0x04);
 8000256:	2104      	movs	r1, #4
 8000258:	6878      	ldr	r0, [r7, #4]
 800025a:	f000 f813 	bl	8000284 <LCD_Command>
    LCD_Command(spi, 0x14);
 800025e:	2114      	movs	r1, #20
 8000260:	6878      	ldr	r0, [r7, #4]
 8000262:	f000 f80f 	bl	8000284 <LCD_Command>
    //LCD_Command(0x80 | 0x2f);
    LCD_Command(spi, 0x20);
 8000266:	2120      	movs	r1, #32
 8000268:	6878      	ldr	r0, [r7, #4]
 800026a:	f000 f80b 	bl	8000284 <LCD_Command>
    LCD_Command(spi, 0x0C);
 800026e:	210c      	movs	r1, #12
 8000270:	6878      	ldr	r0, [r7, #4]
 8000272:	f000 f807 	bl	8000284 <LCD_Command>
//	LCD_Command(0x14);
//	LCD_Command(0x80 | 0x2f); //Ustawienie kontrastu
//	LCD_Command(0x20);
//	LCD_Command(0x0c);

}
 8000276:	bf00      	nop
 8000278:	3708      	adds	r7, #8
 800027a:	46bd      	mov	sp, r7
 800027c:	bd80      	pop	{r7, pc}
 800027e:	bf00      	nop
 8000280:	40011000 	.word	0x40011000

08000284 <LCD_Command>:

void LCD_Command(SPI_HandleTypeDef* spi,uint8_t cmd){
 8000284:	b580      	push	{r7, lr}
 8000286:	b082      	sub	sp, #8
 8000288:	af00      	add	r7, sp, #0
 800028a:	6078      	str	r0, [r7, #4]
 800028c:	460b      	mov	r3, r1
 800028e:	70fb      	strb	r3, [r7, #3]

	HAL_GPIO_WritePin(LCD_CE_PORT, LCD_CE_PIN, GPIO_PIN_RESET);
 8000290:	2200      	movs	r2, #0
 8000292:	2104      	movs	r1, #4
 8000294:	480e      	ldr	r0, [pc, #56]	; (80002d0 <LCD_Command+0x4c>)
 8000296:	f000 ffc3 	bl	8001220 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, LCD_C);
 800029a:	2200      	movs	r2, #0
 800029c:	2102      	movs	r1, #2
 800029e:	480c      	ldr	r0, [pc, #48]	; (80002d0 <LCD_Command+0x4c>)
 80002a0:	f000 ffbe 	bl	8001220 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(spi, &cmd, 1, HAL_MAX_DELAY);
 80002a4:	1cf9      	adds	r1, r7, #3
 80002a6:	f04f 33ff 	mov.w	r3, #4294967295
 80002aa:	2201      	movs	r2, #1
 80002ac:	6878      	ldr	r0, [r7, #4]
 80002ae:	f001 fc91 	bl	8001bd4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CE_PORT, LCD_CE_PIN, GPIO_PIN_SET);
 80002b2:	2201      	movs	r2, #1
 80002b4:	2104      	movs	r1, #4
 80002b6:	4806      	ldr	r0, [pc, #24]	; (80002d0 <LCD_Command+0x4c>)
 80002b8:	f000 ffb2 	bl	8001220 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 80002bc:	2201      	movs	r2, #1
 80002be:	2102      	movs	r1, #2
 80002c0:	4803      	ldr	r0, [pc, #12]	; (80002d0 <LCD_Command+0x4c>)
 80002c2:	f000 ffad 	bl	8001220 <HAL_GPIO_WritePin>

}
 80002c6:	bf00      	nop
 80002c8:	3708      	adds	r7, #8
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bd80      	pop	{r7, pc}
 80002ce:	bf00      	nop
 80002d0:	40011000 	.word	0x40011000

080002d4 <LCD_Data>:

void LCD_Data(SPI_HandleTypeDef *spi,uint8_t* cmd){
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b082      	sub	sp, #8
 80002d8:	af00      	add	r7, sp, #0
 80002da:	6078      	str	r0, [r7, #4]
 80002dc:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, LCD_D);
 80002de:	2201      	movs	r2, #1
 80002e0:	2102      	movs	r1, #2
 80002e2:	480c      	ldr	r0, [pc, #48]	; (8000314 <LCD_Data+0x40>)
 80002e4:	f000 ff9c 	bl	8001220 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CE_PORT, LCD_CE_PIN, GPIO_PIN_RESET);
 80002e8:	2200      	movs	r2, #0
 80002ea:	2104      	movs	r1, #4
 80002ec:	4809      	ldr	r0, [pc, #36]	; (8000314 <LCD_Data+0x40>)
 80002ee:	f000 ff97 	bl	8001220 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(spi, cmd, LCD_X*LCD_Y/8, HAL_MAX_DELAY);
 80002f2:	f04f 33ff 	mov.w	r3, #4294967295
 80002f6:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 80002fa:	6839      	ldr	r1, [r7, #0]
 80002fc:	6878      	ldr	r0, [r7, #4]
 80002fe:	f001 fc69 	bl	8001bd4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CE_PORT, LCD_CE_PIN, GPIO_PIN_SET);
 8000302:	2201      	movs	r2, #1
 8000304:	2104      	movs	r1, #4
 8000306:	4803      	ldr	r0, [pc, #12]	; (8000314 <LCD_Data+0x40>)
 8000308:	f000 ff8a 	bl	8001220 <HAL_GPIO_WritePin>

}
 800030c:	bf00      	nop
 800030e:	3708      	adds	r7, #8
 8000310:	46bd      	mov	sp, r7
 8000312:	bd80      	pop	{r7, pc}
 8000314:	40011000 	.word	0x40011000

08000318 <LCD_draw_pixel>:
		LCD_Data_Byte(spi , tmp);
	}


}
void LCD_draw_pixel(uint8_t buffer[],uint8_t x, uint8_t y){
 8000318:	b480      	push	{r7}
 800031a:	b085      	sub	sp, #20
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]
 8000320:	460b      	mov	r3, r1
 8000322:	70fb      	strb	r3, [r7, #3]
 8000324:	4613      	mov	r3, r2
 8000326:	70bb      	strb	r3, [r7, #2]


    if (x >= LCD_X){
 8000328:	78fb      	ldrb	r3, [r7, #3]
 800032a:	2b53      	cmp	r3, #83	; 0x53
 800032c:	d901      	bls.n	8000332 <LCD_draw_pixel+0x1a>
    	x = LCD_X-1;
 800032e:	2353      	movs	r3, #83	; 0x53
 8000330:	70fb      	strb	r3, [r7, #3]

    if (y < 0){
    	y = 0;
    }

    if (y >= LCD_Y){
 8000332:	78bb      	ldrb	r3, [r7, #2]
 8000334:	2b2f      	cmp	r3, #47	; 0x2f
 8000336:	d901      	bls.n	800033c <LCD_draw_pixel+0x24>
    	y = LCD_Y-1;
 8000338:	232f      	movs	r3, #47	; 0x2f
 800033a:	70bb      	strb	r3, [r7, #2]
    }



    uint16_t i = (uint16_t)(y/8)*LCD_X + x;
 800033c:	78bb      	ldrb	r3, [r7, #2]
 800033e:	08db      	lsrs	r3, r3, #3
 8000340:	b2db      	uxtb	r3, r3
 8000342:	b29b      	uxth	r3, r3
 8000344:	461a      	mov	r2, r3
 8000346:	0052      	lsls	r2, r2, #1
 8000348:	4413      	add	r3, r2
 800034a:	461a      	mov	r2, r3
 800034c:	00d2      	lsls	r2, r2, #3
 800034e:	1ad3      	subs	r3, r2, r3
 8000350:	009b      	lsls	r3, r3, #2
 8000352:	b29a      	uxth	r2, r3
 8000354:	78fb      	ldrb	r3, [r7, #3]
 8000356:	b29b      	uxth	r3, r3
 8000358:	4413      	add	r3, r2
 800035a:	81fb      	strh	r3, [r7, #14]

    uint16_t bit_counter = y%8;
 800035c:	78bb      	ldrb	r3, [r7, #2]
 800035e:	b29b      	uxth	r3, r3
 8000360:	f003 0307 	and.w	r3, r3, #7
 8000364:	81bb      	strh	r3, [r7, #12]
    uint16_t bit_value = buffer[i];
 8000366:	89fb      	ldrh	r3, [r7, #14]
 8000368:	687a      	ldr	r2, [r7, #4]
 800036a:	4413      	add	r3, r2
 800036c:	781b      	ldrb	r3, [r3, #0]
 800036e:	817b      	strh	r3, [r7, #10]
    bit_value |= (1<< bit_counter);
 8000370:	89bb      	ldrh	r3, [r7, #12]
 8000372:	2201      	movs	r2, #1
 8000374:	fa02 f303 	lsl.w	r3, r2, r3
 8000378:	b21a      	sxth	r2, r3
 800037a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800037e:	4313      	orrs	r3, r2
 8000380:	b21b      	sxth	r3, r3
 8000382:	817b      	strh	r3, [r7, #10]

    buffer[i]=(bit_value);
 8000384:	89fb      	ldrh	r3, [r7, #14]
 8000386:	687a      	ldr	r2, [r7, #4]
 8000388:	4413      	add	r3, r2
 800038a:	897a      	ldrh	r2, [r7, #10]
 800038c:	b2d2      	uxtb	r2, r2
 800038e:	701a      	strb	r2, [r3, #0]


}
 8000390:	bf00      	nop
 8000392:	3714      	adds	r7, #20
 8000394:	46bd      	mov	sp, r7
 8000396:	bc80      	pop	{r7}
 8000398:	4770      	bx	lr

0800039a <LCD_Clear_Buffer>:



void LCD_Clear_Buffer(uint8_t buffer[]){
 800039a:	b480      	push	{r7}
 800039c:	b085      	sub	sp, #20
 800039e:	af00      	add	r7, sp, #0
 80003a0:	6078      	str	r0, [r7, #4]

	for(uint16_t i = 0; i < (LCD_X*LCD_Y/8); i ++){
 80003a2:	2300      	movs	r3, #0
 80003a4:	81fb      	strh	r3, [r7, #14]
 80003a6:	e007      	b.n	80003b8 <LCD_Clear_Buffer+0x1e>
		buffer[i]= 0x00;
 80003a8:	89fb      	ldrh	r3, [r7, #14]
 80003aa:	687a      	ldr	r2, [r7, #4]
 80003ac:	4413      	add	r3, r2
 80003ae:	2200      	movs	r2, #0
 80003b0:	701a      	strb	r2, [r3, #0]
	for(uint16_t i = 0; i < (LCD_X*LCD_Y/8); i ++){
 80003b2:	89fb      	ldrh	r3, [r7, #14]
 80003b4:	3301      	adds	r3, #1
 80003b6:	81fb      	strh	r3, [r7, #14]
 80003b8:	89fb      	ldrh	r3, [r7, #14]
 80003ba:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 80003be:	d3f3      	bcc.n	80003a8 <LCD_Clear_Buffer+0xe>
	}
}
 80003c0:	bf00      	nop
 80003c2:	3714      	adds	r7, #20
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bc80      	pop	{r7}
 80003c8:	4770      	bx	lr
	...

080003cc <lcd_draw_text>:


void lcd_draw_text(int row, int col, const char* text,uint8_t buffer[])
{
 80003cc:	b480      	push	{r7}
 80003ce:	b089      	sub	sp, #36	; 0x24
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	60f8      	str	r0, [r7, #12]
 80003d4:	60b9      	str	r1, [r7, #8]
 80003d6:	607a      	str	r2, [r7, #4]
 80003d8:	603b      	str	r3, [r7, #0]
	int i;
	uint8_t* pbuf = &buffer[row * 84 + col];
 80003da:	68fb      	ldr	r3, [r7, #12]
 80003dc:	2254      	movs	r2, #84	; 0x54
 80003de:	fb02 f203 	mul.w	r2, r2, r3
 80003e2:	68bb      	ldr	r3, [r7, #8]
 80003e4:	4413      	add	r3, r2
 80003e6:	461a      	mov	r2, r3
 80003e8:	683b      	ldr	r3, [r7, #0]
 80003ea:	4413      	add	r3, r2
 80003ec:	61bb      	str	r3, [r7, #24]
	while ((*text) && (pbuf < &buffer[LCD_X*LCD_Y/8 - 6])) {
 80003ee:	e023      	b.n	8000438 <lcd_draw_text+0x6c>
		int ch = *text++;
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	1c5a      	adds	r2, r3, #1
 80003f4:	607a      	str	r2, [r7, #4]
 80003f6:	781b      	ldrb	r3, [r3, #0]
 80003f8:	613b      	str	r3, [r7, #16]
		const uint8_t* font = &font_ASCII[ch - ' '][0];
 80003fa:	693b      	ldr	r3, [r7, #16]
 80003fc:	f1a3 0220 	sub.w	r2, r3, #32
 8000400:	4613      	mov	r3, r2
 8000402:	009b      	lsls	r3, r3, #2
 8000404:	4413      	add	r3, r2
 8000406:	4a14      	ldr	r2, [pc, #80]	; (8000458 <lcd_draw_text+0x8c>)
 8000408:	4413      	add	r3, r2
 800040a:	617b      	str	r3, [r7, #20]
		for (i = 0; i < 5; i++) {
 800040c:	2300      	movs	r3, #0
 800040e:	61fb      	str	r3, [r7, #28]
 8000410:	e00a      	b.n	8000428 <lcd_draw_text+0x5c>
			*pbuf++ = *font++;
 8000412:	697a      	ldr	r2, [r7, #20]
 8000414:	1c53      	adds	r3, r2, #1
 8000416:	617b      	str	r3, [r7, #20]
 8000418:	69bb      	ldr	r3, [r7, #24]
 800041a:	1c59      	adds	r1, r3, #1
 800041c:	61b9      	str	r1, [r7, #24]
 800041e:	7812      	ldrb	r2, [r2, #0]
 8000420:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 5; i++) {
 8000422:	69fb      	ldr	r3, [r7, #28]
 8000424:	3301      	adds	r3, #1
 8000426:	61fb      	str	r3, [r7, #28]
 8000428:	69fb      	ldr	r3, [r7, #28]
 800042a:	2b04      	cmp	r3, #4
 800042c:	ddf1      	ble.n	8000412 <lcd_draw_text+0x46>
		}
		*pbuf++ = 0;
 800042e:	69bb      	ldr	r3, [r7, #24]
 8000430:	1c5a      	adds	r2, r3, #1
 8000432:	61ba      	str	r2, [r7, #24]
 8000434:	2200      	movs	r2, #0
 8000436:	701a      	strb	r2, [r3, #0]
	while ((*text) && (pbuf < &buffer[LCD_X*LCD_Y/8 - 6])) {
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	781b      	ldrb	r3, [r3, #0]
 800043c:	2b00      	cmp	r3, #0
 800043e:	d005      	beq.n	800044c <lcd_draw_text+0x80>
 8000440:	683b      	ldr	r3, [r7, #0]
 8000442:	f503 73f9 	add.w	r3, r3, #498	; 0x1f2
 8000446:	69ba      	ldr	r2, [r7, #24]
 8000448:	429a      	cmp	r2, r3
 800044a:	d3d1      	bcc.n	80003f0 <lcd_draw_text+0x24>
	}
}
 800044c:	bf00      	nop
 800044e:	3724      	adds	r7, #36	; 0x24
 8000450:	46bd      	mov	sp, r7
 8000452:	bc80      	pop	{r7}
 8000454:	4770      	bx	lr
 8000456:	bf00      	nop
 8000458:	08003404 	.word	0x08003404

0800045c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b088      	sub	sp, #32
 8000460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	LCD_Clear_Buffer(buffer);
 8000462:	4878      	ldr	r0, [pc, #480]	; (8000644 <main+0x1e8>)
 8000464:	f7ff ff99 	bl	800039a <LCD_Clear_Buffer>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000468:	f000 fbee 	bl	8000c48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800046c:	f000 f906 	bl	800067c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000470:	f7ff fe6c 	bl	800014c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000474:	f000 fb5a 	bl	8000b2c <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8000478:	f000 f99e 	bl	80007b8 <MX_SPI2_Init>
  MX_SPI1_Init();
 800047c:	f000 f966 	bl	800074c <MX_SPI1_Init>
  MX_TIM1_Init();
 8000480:	f000 fae6 	bl	8000a50 <MX_TIM1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000484:	f000 f93b 	bl	80006fe <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 8000488:	486f      	ldr	r0, [pc, #444]	; (8000648 <main+0x1ec>)
 800048a:	f001 fdd5 	bl	8002038 <HAL_TIM_Base_Start_IT>

  LCD_Initialize(&hspi1);
 800048e:	486f      	ldr	r0, [pc, #444]	; (800064c <main+0x1f0>)
 8000490:	f7ff fec8 	bl	8000224 <LCD_Initialize>
  //LCD_Clear();


  for (uint16_t i = 0; i< LCD_X*LCD_Y/8 ; i++){
 8000494:	2300      	movs	r3, #0
 8000496:	83fb      	strh	r3, [r7, #30]
 8000498:	e008      	b.n	80004ac <main+0x50>
	  buffer[i] = logo[i];
 800049a:	8bfa      	ldrh	r2, [r7, #30]
 800049c:	8bfb      	ldrh	r3, [r7, #30]
 800049e:	496c      	ldr	r1, [pc, #432]	; (8000650 <main+0x1f4>)
 80004a0:	5c89      	ldrb	r1, [r1, r2]
 80004a2:	4a68      	ldr	r2, [pc, #416]	; (8000644 <main+0x1e8>)
 80004a4:	54d1      	strb	r1, [r2, r3]
  for (uint16_t i = 0; i< LCD_X*LCD_Y/8 ; i++){
 80004a6:	8bfb      	ldrh	r3, [r7, #30]
 80004a8:	3301      	adds	r3, #1
 80004aa:	83fb      	strh	r3, [r7, #30]
 80004ac:	8bfb      	ldrh	r3, [r7, #30]
 80004ae:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 80004b2:	d3f2      	bcc.n	800049a <main+0x3e>
  }

  lcd_draw_text(0, 60, "v0.9", buffer);
 80004b4:	4b63      	ldr	r3, [pc, #396]	; (8000644 <main+0x1e8>)
 80004b6:	4a67      	ldr	r2, [pc, #412]	; (8000654 <main+0x1f8>)
 80004b8:	213c      	movs	r1, #60	; 0x3c
 80004ba:	2000      	movs	r0, #0
 80004bc:	f7ff ff86 	bl	80003cc <lcd_draw_text>
//  lcd_draw_text(1, 0, "Hej", buffer);
//  char tmp[16];
//  sprintf(tmp, "%d", 2137);
//  lcd_draw_text(0, 60,tmp, buffer);

  LCD_Data(&hspi1, buffer);
 80004c0:	4960      	ldr	r1, [pc, #384]	; (8000644 <main+0x1e8>)
 80004c2:	4862      	ldr	r0, [pc, #392]	; (800064c <main+0x1f0>)
 80004c4:	f7ff ff06 	bl	80002d4 <LCD_Data>
  HAL_Delay(1000);
 80004c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004cc:	f000 fc1e 	bl	8000d0c <HAL_Delay>

  uint8_t r = 20;
 80004d0:	2314      	movs	r3, #20
 80004d2:	753b      	strb	r3, [r7, #20]




  for (uint16_t i = 0; i< LCD_X*LCD_Y/8 ; i++){
 80004d4:	2300      	movs	r3, #0
 80004d6:	83bb      	strh	r3, [r7, #28]
 80004d8:	e008      	b.n	80004ec <main+0x90>
	  buffer[i] = template[i];
 80004da:	8bba      	ldrh	r2, [r7, #28]
 80004dc:	8bbb      	ldrh	r3, [r7, #28]
 80004de:	495e      	ldr	r1, [pc, #376]	; (8000658 <main+0x1fc>)
 80004e0:	5c89      	ldrb	r1, [r1, r2]
 80004e2:	4a58      	ldr	r2, [pc, #352]	; (8000644 <main+0x1e8>)
 80004e4:	54d1      	strb	r1, [r2, r3]
  for (uint16_t i = 0; i< LCD_X*LCD_Y/8 ; i++){
 80004e6:	8bbb      	ldrh	r3, [r7, #28]
 80004e8:	3301      	adds	r3, #1
 80004ea:	83bb      	strh	r3, [r7, #28]
 80004ec:	8bbb      	ldrh	r3, [r7, #28]
 80004ee:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 80004f2:	d3f2      	bcc.n	80004da <main+0x7e>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  if(flag[1] == 0){
 80004f4:	4b59      	ldr	r3, [pc, #356]	; (800065c <main+0x200>)
 80004f6:	785b      	ldrb	r3, [r3, #1]
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	f040 8091 	bne.w	8000620 <main+0x1c4>


		  flag[0] = 0;
 80004fe:	4b57      	ldr	r3, [pc, #348]	; (800065c <main+0x200>)
 8000500:	2200      	movs	r2, #0
 8000502:	701a      	strb	r2, [r3, #0]

			for(uint16_t i = 0; i < (LCD_X*LCD_Y/8); i ++){
 8000504:	2300      	movs	r3, #0
 8000506:	837b      	strh	r3, [r7, #26]
 8000508:	e006      	b.n	8000518 <main+0xbc>
				buffer[i]= 0x00;
 800050a:	8b7b      	ldrh	r3, [r7, #26]
 800050c:	4a4d      	ldr	r2, [pc, #308]	; (8000644 <main+0x1e8>)
 800050e:	2100      	movs	r1, #0
 8000510:	54d1      	strb	r1, [r2, r3]
			for(uint16_t i = 0; i < (LCD_X*LCD_Y/8); i ++){
 8000512:	8b7b      	ldrh	r3, [r7, #26]
 8000514:	3301      	adds	r3, #1
 8000516:	837b      	strh	r3, [r7, #26]
 8000518:	8b7b      	ldrh	r3, [r7, #26]
 800051a:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 800051e:	d3f4      	bcc.n	800050a <main+0xae>
			}

			  for (uint16_t i = 0; i< LCD_X*LCD_Y/8 ; i++){
 8000520:	2300      	movs	r3, #0
 8000522:	833b      	strh	r3, [r7, #24]
 8000524:	e008      	b.n	8000538 <main+0xdc>
				  buffer[i] = template[i];
 8000526:	8b3a      	ldrh	r2, [r7, #24]
 8000528:	8b3b      	ldrh	r3, [r7, #24]
 800052a:	494b      	ldr	r1, [pc, #300]	; (8000658 <main+0x1fc>)
 800052c:	5c89      	ldrb	r1, [r1, r2]
 800052e:	4a45      	ldr	r2, [pc, #276]	; (8000644 <main+0x1e8>)
 8000530:	54d1      	strb	r1, [r2, r3]
			  for (uint16_t i = 0; i< LCD_X*LCD_Y/8 ; i++){
 8000532:	8b3b      	ldrh	r3, [r7, #24]
 8000534:	3301      	adds	r3, #1
 8000536:	833b      	strh	r3, [r7, #24]
 8000538:	8b3b      	ldrh	r3, [r7, #24]
 800053a:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 800053e:	d3f2      	bcc.n	8000526 <main+0xca>
			  }

			for(uint8_t x = 0 ; x < LCD_X ; x++ ){
 8000540:	2300      	movs	r3, #0
 8000542:	75fb      	strb	r3, [r7, #23]
 8000544:	e00e      	b.n	8000564 <main+0x108>
			  LCD_draw_pixel(buffer,x, 0);
 8000546:	7dfb      	ldrb	r3, [r7, #23]
 8000548:	2200      	movs	r2, #0
 800054a:	4619      	mov	r1, r3
 800054c:	483d      	ldr	r0, [pc, #244]	; (8000644 <main+0x1e8>)
 800054e:	f7ff fee3 	bl	8000318 <LCD_draw_pixel>
			  LCD_draw_pixel(buffer,x, LCD_Y);
 8000552:	7dfb      	ldrb	r3, [r7, #23]
 8000554:	2230      	movs	r2, #48	; 0x30
 8000556:	4619      	mov	r1, r3
 8000558:	483a      	ldr	r0, [pc, #232]	; (8000644 <main+0x1e8>)
 800055a:	f7ff fedd 	bl	8000318 <LCD_draw_pixel>
			for(uint8_t x = 0 ; x < LCD_X ; x++ ){
 800055e:	7dfb      	ldrb	r3, [r7, #23]
 8000560:	3301      	adds	r3, #1
 8000562:	75fb      	strb	r3, [r7, #23]
 8000564:	7dfb      	ldrb	r3, [r7, #23]
 8000566:	2b53      	cmp	r3, #83	; 0x53
 8000568:	d9ed      	bls.n	8000546 <main+0xea>
			}


			for(uint8_t y = 0 ; y < LCD_X ; y++ ){
 800056a:	2300      	movs	r3, #0
 800056c:	75bb      	strb	r3, [r7, #22]
 800056e:	e00e      	b.n	800058e <main+0x132>
			  LCD_draw_pixel(buffer,0, y);
 8000570:	7dbb      	ldrb	r3, [r7, #22]
 8000572:	461a      	mov	r2, r3
 8000574:	2100      	movs	r1, #0
 8000576:	4833      	ldr	r0, [pc, #204]	; (8000644 <main+0x1e8>)
 8000578:	f7ff fece 	bl	8000318 <LCD_draw_pixel>
			  LCD_draw_pixel(buffer,LCD_X, y);
 800057c:	7dbb      	ldrb	r3, [r7, #22]
 800057e:	461a      	mov	r2, r3
 8000580:	2154      	movs	r1, #84	; 0x54
 8000582:	4830      	ldr	r0, [pc, #192]	; (8000644 <main+0x1e8>)
 8000584:	f7ff fec8 	bl	8000318 <LCD_draw_pixel>
			for(uint8_t y = 0 ; y < LCD_X ; y++ ){
 8000588:	7dbb      	ldrb	r3, [r7, #22]
 800058a:	3301      	adds	r3, #1
 800058c:	75bb      	strb	r3, [r7, #22]
 800058e:	7dbb      	ldrb	r3, [r7, #22]
 8000590:	2b53      	cmp	r3, #83	; 0x53
 8000592:	d9ed      	bls.n	8000570 <main+0x114>
			}



			for(uint8_t i = 0; i< 54 ; i ++){
 8000594:	2300      	movs	r3, #0
 8000596:	757b      	strb	r3, [r7, #21]
 8000598:	e014      	b.n	80005c4 <main+0x168>
				LCD_draw_pixel(buffer,dron[i][0]+ 11 , dron[i][1]+r);
 800059a:	7d7b      	ldrb	r3, [r7, #21]
 800059c:	4a30      	ldr	r2, [pc, #192]	; (8000660 <main+0x204>)
 800059e:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80005a2:	330b      	adds	r3, #11
 80005a4:	b2d9      	uxtb	r1, r3
 80005a6:	7d7b      	ldrb	r3, [r7, #21]
 80005a8:	4a2d      	ldr	r2, [pc, #180]	; (8000660 <main+0x204>)
 80005aa:	005b      	lsls	r3, r3, #1
 80005ac:	4413      	add	r3, r2
 80005ae:	785a      	ldrb	r2, [r3, #1]
 80005b0:	7d3b      	ldrb	r3, [r7, #20]
 80005b2:	4413      	add	r3, r2
 80005b4:	b2db      	uxtb	r3, r3
 80005b6:	461a      	mov	r2, r3
 80005b8:	4822      	ldr	r0, [pc, #136]	; (8000644 <main+0x1e8>)
 80005ba:	f7ff fead 	bl	8000318 <LCD_draw_pixel>
			for(uint8_t i = 0; i< 54 ; i ++){
 80005be:	7d7b      	ldrb	r3, [r7, #21]
 80005c0:	3301      	adds	r3, #1
 80005c2:	757b      	strb	r3, [r7, #21]
 80005c4:	7d7b      	ldrb	r3, [r7, #21]
 80005c6:	2b35      	cmp	r3, #53	; 0x35
 80005c8:	d9e7      	bls.n	800059a <main+0x13e>
			}

			  lcd_draw_text(1, 25, "Preasure", buffer);
 80005ca:	4b1e      	ldr	r3, [pc, #120]	; (8000644 <main+0x1e8>)
 80005cc:	4a25      	ldr	r2, [pc, #148]	; (8000664 <main+0x208>)
 80005ce:	2119      	movs	r1, #25
 80005d0:	2001      	movs	r0, #1
 80005d2:	f7ff fefb 	bl	80003cc <lcd_draw_text>
			  char tmp[16];
			  sprintf(tmp, "%d hPa", preasure);
 80005d6:	4b24      	ldr	r3, [pc, #144]	; (8000668 <main+0x20c>)
 80005d8:	881b      	ldrh	r3, [r3, #0]
 80005da:	461a      	mov	r2, r3
 80005dc:	1d3b      	adds	r3, r7, #4
 80005de:	4923      	ldr	r1, [pc, #140]	; (800066c <main+0x210>)
 80005e0:	4618      	mov	r0, r3
 80005e2:	f002 f9d5 	bl	8002990 <siprintf>
			  lcd_draw_text(2, 25,tmp, buffer);
 80005e6:	1d3a      	adds	r2, r7, #4
 80005e8:	4b16      	ldr	r3, [pc, #88]	; (8000644 <main+0x1e8>)
 80005ea:	2119      	movs	r1, #25
 80005ec:	2002      	movs	r0, #2
 80005ee:	f7ff feed 	bl	80003cc <lcd_draw_text>
			  lcd_draw_text(3, 25, "Depth", buffer);
 80005f2:	4b14      	ldr	r3, [pc, #80]	; (8000644 <main+0x1e8>)
 80005f4:	4a1e      	ldr	r2, [pc, #120]	; (8000670 <main+0x214>)
 80005f6:	2119      	movs	r1, #25
 80005f8:	2003      	movs	r0, #3
 80005fa:	f7ff fee7 	bl	80003cc <lcd_draw_text>
			  sprintf(tmp, "%d m", depth);
 80005fe:	4b1d      	ldr	r3, [pc, #116]	; (8000674 <main+0x218>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	461a      	mov	r2, r3
 8000604:	1d3b      	adds	r3, r7, #4
 8000606:	491c      	ldr	r1, [pc, #112]	; (8000678 <main+0x21c>)
 8000608:	4618      	mov	r0, r3
 800060a:	f002 f9c1 	bl	8002990 <siprintf>
			  lcd_draw_text(4, 25,tmp, buffer);
 800060e:	1d3a      	adds	r2, r7, #4
 8000610:	4b0c      	ldr	r3, [pc, #48]	; (8000644 <main+0x1e8>)
 8000612:	2119      	movs	r1, #25
 8000614:	2004      	movs	r0, #4
 8000616:	f7ff fed9 	bl	80003cc <lcd_draw_text>


	  	  flag[1]=1;
 800061a:	4b10      	ldr	r3, [pc, #64]	; (800065c <main+0x200>)
 800061c:	2201      	movs	r2, #1
 800061e:	705a      	strb	r2, [r3, #1]





	  if(flag[0] == 1 && flag[1]== 1) {
 8000620:	4b0e      	ldr	r3, [pc, #56]	; (800065c <main+0x200>)
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	2b01      	cmp	r3, #1
 8000626:	f47f af65 	bne.w	80004f4 <main+0x98>
 800062a:	4b0c      	ldr	r3, [pc, #48]	; (800065c <main+0x200>)
 800062c:	785b      	ldrb	r3, [r3, #1]
 800062e:	2b01      	cmp	r3, #1
 8000630:	f47f af60 	bne.w	80004f4 <main+0x98>
		  LCD_Data(&hspi1, buffer);
 8000634:	4903      	ldr	r1, [pc, #12]	; (8000644 <main+0x1e8>)
 8000636:	4805      	ldr	r0, [pc, #20]	; (800064c <main+0x1f0>)
 8000638:	f7ff fe4c 	bl	80002d4 <LCD_Data>
		  flag[1] = 0;
 800063c:	4b07      	ldr	r3, [pc, #28]	; (800065c <main+0x200>)
 800063e:	2200      	movs	r2, #0
 8000640:	705a      	strb	r2, [r3, #1]
	  if(flag[1] == 0){
 8000642:	e757      	b.n	80004f4 <main+0x98>
 8000644:	2000010c 	.word	0x2000010c
 8000648:	2000099c 	.word	0x2000099c
 800064c:	20000944 	.word	0x20000944
 8000650:	0800320c 	.word	0x0800320c
 8000654:	080031cc 	.word	0x080031cc
 8000658:	080035e4 	.word	0x080035e4
 800065c:	200000fc 	.word	0x200000fc
 8000660:	20000000 	.word	0x20000000
 8000664:	080031d4 	.word	0x080031d4
 8000668:	2000006e 	.word	0x2000006e
 800066c:	080031e0 	.word	0x080031e0
 8000670:	080031e8 	.word	0x080031e8
 8000674:	2000006c 	.word	0x2000006c
 8000678:	080031f0 	.word	0x080031f0

0800067c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b090      	sub	sp, #64	; 0x40
 8000680:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000682:	f107 0318 	add.w	r3, r7, #24
 8000686:	2228      	movs	r2, #40	; 0x28
 8000688:	2100      	movs	r1, #0
 800068a:	4618      	mov	r0, r3
 800068c:	f002 f978 	bl	8002980 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000690:	1d3b      	adds	r3, r7, #4
 8000692:	2200      	movs	r2, #0
 8000694:	601a      	str	r2, [r3, #0]
 8000696:	605a      	str	r2, [r3, #4]
 8000698:	609a      	str	r2, [r3, #8]
 800069a:	60da      	str	r2, [r3, #12]
 800069c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800069e:	2302      	movs	r3, #2
 80006a0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a2:	2301      	movs	r3, #1
 80006a4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006a6:	2310      	movs	r3, #16
 80006a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006aa:	2302      	movs	r3, #2
 80006ac:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80006ae:	2300      	movs	r3, #0
 80006b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80006b2:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80006b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b8:	f107 0318 	add.w	r3, r7, #24
 80006bc:	4618      	mov	r0, r3
 80006be:	f000 fde9 	bl	8001294 <HAL_RCC_OscConfig>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <SystemClock_Config+0x50>
  {
    Error_Handler();
 80006c8:	f000 f83c 	bl	8000744 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006cc:	230f      	movs	r3, #15
 80006ce:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d0:	2302      	movs	r3, #2
 80006d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d4:	2300      	movs	r3, #0
 80006d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006de:	2300      	movs	r3, #0
 80006e0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006e2:	1d3b      	adds	r3, r7, #4
 80006e4:	2102      	movs	r1, #2
 80006e6:	4618      	mov	r0, r3
 80006e8:	f001 f854 	bl	8001794 <HAL_RCC_ClockConfig>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80006f2:	f000 f827 	bl	8000744 <Error_Handler>
  }
}
 80006f6:	bf00      	nop
 80006f8:	3740      	adds	r7, #64	; 0x40
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}

080006fe <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80006fe:	b580      	push	{r7, lr}
 8000700:	af00      	add	r7, sp, #0
  /* TIM1_UP_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000702:	2200      	movs	r2, #0
 8000704:	2100      	movs	r1, #0
 8000706:	2019      	movs	r0, #25
 8000708:	f000 fbf9 	bl	8000efe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800070c:	2019      	movs	r0, #25
 800070e:	f000 fc12 	bl	8000f36 <HAL_NVIC_EnableIRQ>
}
 8000712:	bf00      	nop
 8000714:	bd80      	pop	{r7, pc}
	...

08000718 <HAL_TIM_PeriodElapsedCallback>:
uint16_t map( uint16_t x, uint16_t in_min,uint16_t  in_max,uint16_t  out_min,uint16_t  out_max){
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM1){
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a05      	ldr	r2, [pc, #20]	; (800073c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000726:	4293      	cmp	r3, r2
 8000728:	d102      	bne.n	8000730 <HAL_TIM_PeriodElapsedCallback+0x18>

		flag[0] = 1;
 800072a:	4b05      	ldr	r3, [pc, #20]	; (8000740 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800072c:	2201      	movs	r2, #1
 800072e:	701a      	strb	r2, [r3, #0]
	}

}
 8000730:	bf00      	nop
 8000732:	370c      	adds	r7, #12
 8000734:	46bd      	mov	sp, r7
 8000736:	bc80      	pop	{r7}
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop
 800073c:	40012c00 	.word	0x40012c00
 8000740:	200000fc 	.word	0x200000fc

08000744 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000748:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800074a:	e7fe      	b.n	800074a <Error_Handler+0x6>

0800074c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8000750:	4b17      	ldr	r3, [pc, #92]	; (80007b0 <MX_SPI1_Init+0x64>)
 8000752:	4a18      	ldr	r2, [pc, #96]	; (80007b4 <MX_SPI1_Init+0x68>)
 8000754:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000756:	4b16      	ldr	r3, [pc, #88]	; (80007b0 <MX_SPI1_Init+0x64>)
 8000758:	f44f 7282 	mov.w	r2, #260	; 0x104
 800075c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800075e:	4b14      	ldr	r3, [pc, #80]	; (80007b0 <MX_SPI1_Init+0x64>)
 8000760:	2200      	movs	r2, #0
 8000762:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000764:	4b12      	ldr	r3, [pc, #72]	; (80007b0 <MX_SPI1_Init+0x64>)
 8000766:	2200      	movs	r2, #0
 8000768:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800076a:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <MX_SPI1_Init+0x64>)
 800076c:	2200      	movs	r2, #0
 800076e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000770:	4b0f      	ldr	r3, [pc, #60]	; (80007b0 <MX_SPI1_Init+0x64>)
 8000772:	2200      	movs	r2, #0
 8000774:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000776:	4b0e      	ldr	r3, [pc, #56]	; (80007b0 <MX_SPI1_Init+0x64>)
 8000778:	f44f 7200 	mov.w	r2, #512	; 0x200
 800077c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800077e:	4b0c      	ldr	r3, [pc, #48]	; (80007b0 <MX_SPI1_Init+0x64>)
 8000780:	2228      	movs	r2, #40	; 0x28
 8000782:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000784:	4b0a      	ldr	r3, [pc, #40]	; (80007b0 <MX_SPI1_Init+0x64>)
 8000786:	2200      	movs	r2, #0
 8000788:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800078a:	4b09      	ldr	r3, [pc, #36]	; (80007b0 <MX_SPI1_Init+0x64>)
 800078c:	2200      	movs	r2, #0
 800078e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000790:	4b07      	ldr	r3, [pc, #28]	; (80007b0 <MX_SPI1_Init+0x64>)
 8000792:	2200      	movs	r2, #0
 8000794:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000796:	4b06      	ldr	r3, [pc, #24]	; (80007b0 <MX_SPI1_Init+0x64>)
 8000798:	220a      	movs	r2, #10
 800079a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800079c:	4804      	ldr	r0, [pc, #16]	; (80007b0 <MX_SPI1_Init+0x64>)
 800079e:	f001 f995 	bl	8001acc <HAL_SPI_Init>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007a8:	f7ff ffcc 	bl	8000744 <Error_Handler>
  }

}
 80007ac:	bf00      	nop
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	20000944 	.word	0x20000944
 80007b4:	40013000 	.word	0x40013000

080007b8 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 80007bc:	4b17      	ldr	r3, [pc, #92]	; (800081c <MX_SPI2_Init+0x64>)
 80007be:	4a18      	ldr	r2, [pc, #96]	; (8000820 <MX_SPI2_Init+0x68>)
 80007c0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80007c2:	4b16      	ldr	r3, [pc, #88]	; (800081c <MX_SPI2_Init+0x64>)
 80007c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007c8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80007ca:	4b14      	ldr	r3, [pc, #80]	; (800081c <MX_SPI2_Init+0x64>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80007d0:	4b12      	ldr	r3, [pc, #72]	; (800081c <MX_SPI2_Init+0x64>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007d6:	4b11      	ldr	r3, [pc, #68]	; (800081c <MX_SPI2_Init+0x64>)
 80007d8:	2200      	movs	r2, #0
 80007da:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007dc:	4b0f      	ldr	r3, [pc, #60]	; (800081c <MX_SPI2_Init+0x64>)
 80007de:	2200      	movs	r2, #0
 80007e0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80007e2:	4b0e      	ldr	r3, [pc, #56]	; (800081c <MX_SPI2_Init+0x64>)
 80007e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007e8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80007ea:	4b0c      	ldr	r3, [pc, #48]	; (800081c <MX_SPI2_Init+0x64>)
 80007ec:	2220      	movs	r2, #32
 80007ee:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007f0:	4b0a      	ldr	r3, [pc, #40]	; (800081c <MX_SPI2_Init+0x64>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80007f6:	4b09      	ldr	r3, [pc, #36]	; (800081c <MX_SPI2_Init+0x64>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007fc:	4b07      	ldr	r3, [pc, #28]	; (800081c <MX_SPI2_Init+0x64>)
 80007fe:	2200      	movs	r2, #0
 8000800:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000802:	4b06      	ldr	r3, [pc, #24]	; (800081c <MX_SPI2_Init+0x64>)
 8000804:	220a      	movs	r2, #10
 8000806:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000808:	4804      	ldr	r0, [pc, #16]	; (800081c <MX_SPI2_Init+0x64>)
 800080a:	f001 f95f 	bl	8001acc <HAL_SPI_Init>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000814:	f7ff ff96 	bl	8000744 <Error_Handler>
  }

}
 8000818:	bf00      	nop
 800081a:	bd80      	pop	{r7, pc}
 800081c:	200008ec 	.word	0x200008ec
 8000820:	40003800 	.word	0x40003800

08000824 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b08a      	sub	sp, #40	; 0x28
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082c:	f107 0318 	add.w	r3, r7, #24
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	4a2b      	ldr	r2, [pc, #172]	; (80008ec <HAL_SPI_MspInit+0xc8>)
 8000840:	4293      	cmp	r3, r2
 8000842:	d124      	bne.n	800088e <HAL_SPI_MspInit+0x6a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000844:	4b2a      	ldr	r3, [pc, #168]	; (80008f0 <HAL_SPI_MspInit+0xcc>)
 8000846:	699b      	ldr	r3, [r3, #24]
 8000848:	4a29      	ldr	r2, [pc, #164]	; (80008f0 <HAL_SPI_MspInit+0xcc>)
 800084a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800084e:	6193      	str	r3, [r2, #24]
 8000850:	4b27      	ldr	r3, [pc, #156]	; (80008f0 <HAL_SPI_MspInit+0xcc>)
 8000852:	699b      	ldr	r3, [r3, #24]
 8000854:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000858:	617b      	str	r3, [r7, #20]
 800085a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800085c:	4b24      	ldr	r3, [pc, #144]	; (80008f0 <HAL_SPI_MspInit+0xcc>)
 800085e:	699b      	ldr	r3, [r3, #24]
 8000860:	4a23      	ldr	r2, [pc, #140]	; (80008f0 <HAL_SPI_MspInit+0xcc>)
 8000862:	f043 0304 	orr.w	r3, r3, #4
 8000866:	6193      	str	r3, [r2, #24]
 8000868:	4b21      	ldr	r3, [pc, #132]	; (80008f0 <HAL_SPI_MspInit+0xcc>)
 800086a:	699b      	ldr	r3, [r3, #24]
 800086c:	f003 0304 	and.w	r3, r3, #4
 8000870:	613b      	str	r3, [r7, #16]
 8000872:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000874:	23a0      	movs	r3, #160	; 0xa0
 8000876:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000878:	2302      	movs	r3, #2
 800087a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800087c:	2303      	movs	r3, #3
 800087e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000880:	f107 0318 	add.w	r3, r7, #24
 8000884:	4619      	mov	r1, r3
 8000886:	481b      	ldr	r0, [pc, #108]	; (80008f4 <HAL_SPI_MspInit+0xd0>)
 8000888:	f000 fb70 	bl	8000f6c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800088c:	e029      	b.n	80008e2 <HAL_SPI_MspInit+0xbe>
  else if(spiHandle->Instance==SPI2)
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	4a19      	ldr	r2, [pc, #100]	; (80008f8 <HAL_SPI_MspInit+0xd4>)
 8000894:	4293      	cmp	r3, r2
 8000896:	d124      	bne.n	80008e2 <HAL_SPI_MspInit+0xbe>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000898:	4b15      	ldr	r3, [pc, #84]	; (80008f0 <HAL_SPI_MspInit+0xcc>)
 800089a:	69db      	ldr	r3, [r3, #28]
 800089c:	4a14      	ldr	r2, [pc, #80]	; (80008f0 <HAL_SPI_MspInit+0xcc>)
 800089e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008a2:	61d3      	str	r3, [r2, #28]
 80008a4:	4b12      	ldr	r3, [pc, #72]	; (80008f0 <HAL_SPI_MspInit+0xcc>)
 80008a6:	69db      	ldr	r3, [r3, #28]
 80008a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008ac:	60fb      	str	r3, [r7, #12]
 80008ae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b0:	4b0f      	ldr	r3, [pc, #60]	; (80008f0 <HAL_SPI_MspInit+0xcc>)
 80008b2:	699b      	ldr	r3, [r3, #24]
 80008b4:	4a0e      	ldr	r2, [pc, #56]	; (80008f0 <HAL_SPI_MspInit+0xcc>)
 80008b6:	f043 0308 	orr.w	r3, r3, #8
 80008ba:	6193      	str	r3, [r2, #24]
 80008bc:	4b0c      	ldr	r3, [pc, #48]	; (80008f0 <HAL_SPI_MspInit+0xcc>)
 80008be:	699b      	ldr	r3, [r3, #24]
 80008c0:	f003 0308 	and.w	r3, r3, #8
 80008c4:	60bb      	str	r3, [r7, #8]
 80008c6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80008c8:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80008cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ce:	2302      	movs	r3, #2
 80008d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008d2:	2303      	movs	r3, #3
 80008d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008d6:	f107 0318 	add.w	r3, r7, #24
 80008da:	4619      	mov	r1, r3
 80008dc:	4807      	ldr	r0, [pc, #28]	; (80008fc <HAL_SPI_MspInit+0xd8>)
 80008de:	f000 fb45 	bl	8000f6c <HAL_GPIO_Init>
}
 80008e2:	bf00      	nop
 80008e4:	3728      	adds	r7, #40	; 0x28
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	40013000 	.word	0x40013000
 80008f0:	40021000 	.word	0x40021000
 80008f4:	40010800 	.word	0x40010800
 80008f8:	40003800 	.word	0x40003800
 80008fc:	40010c00 	.word	0x40010c00

08000900 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000900:	b480      	push	{r7}
 8000902:	b085      	sub	sp, #20
 8000904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000906:	4b15      	ldr	r3, [pc, #84]	; (800095c <HAL_MspInit+0x5c>)
 8000908:	699b      	ldr	r3, [r3, #24]
 800090a:	4a14      	ldr	r2, [pc, #80]	; (800095c <HAL_MspInit+0x5c>)
 800090c:	f043 0301 	orr.w	r3, r3, #1
 8000910:	6193      	str	r3, [r2, #24]
 8000912:	4b12      	ldr	r3, [pc, #72]	; (800095c <HAL_MspInit+0x5c>)
 8000914:	699b      	ldr	r3, [r3, #24]
 8000916:	f003 0301 	and.w	r3, r3, #1
 800091a:	60bb      	str	r3, [r7, #8]
 800091c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800091e:	4b0f      	ldr	r3, [pc, #60]	; (800095c <HAL_MspInit+0x5c>)
 8000920:	69db      	ldr	r3, [r3, #28]
 8000922:	4a0e      	ldr	r2, [pc, #56]	; (800095c <HAL_MspInit+0x5c>)
 8000924:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000928:	61d3      	str	r3, [r2, #28]
 800092a:	4b0c      	ldr	r3, [pc, #48]	; (800095c <HAL_MspInit+0x5c>)
 800092c:	69db      	ldr	r3, [r3, #28]
 800092e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000932:	607b      	str	r3, [r7, #4]
 8000934:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000936:	4b0a      	ldr	r3, [pc, #40]	; (8000960 <HAL_MspInit+0x60>)
 8000938:	685b      	ldr	r3, [r3, #4]
 800093a:	60fb      	str	r3, [r7, #12]
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000942:	60fb      	str	r3, [r7, #12]
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800094a:	60fb      	str	r3, [r7, #12]
 800094c:	4a04      	ldr	r2, [pc, #16]	; (8000960 <HAL_MspInit+0x60>)
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000952:	bf00      	nop
 8000954:	3714      	adds	r7, #20
 8000956:	46bd      	mov	sp, r7
 8000958:	bc80      	pop	{r7}
 800095a:	4770      	bx	lr
 800095c:	40021000 	.word	0x40021000
 8000960:	40010000 	.word	0x40010000

08000964 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000968:	e7fe      	b.n	8000968 <NMI_Handler+0x4>

0800096a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800096a:	b480      	push	{r7}
 800096c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800096e:	e7fe      	b.n	800096e <HardFault_Handler+0x4>

08000970 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000974:	e7fe      	b.n	8000974 <MemManage_Handler+0x4>

08000976 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000976:	b480      	push	{r7}
 8000978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800097a:	e7fe      	b.n	800097a <BusFault_Handler+0x4>

0800097c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000980:	e7fe      	b.n	8000980 <UsageFault_Handler+0x4>

08000982 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000982:	b480      	push	{r7}
 8000984:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000986:	bf00      	nop
 8000988:	46bd      	mov	sp, r7
 800098a:	bc80      	pop	{r7}
 800098c:	4770      	bx	lr

0800098e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800098e:	b480      	push	{r7}
 8000990:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000992:	bf00      	nop
 8000994:	46bd      	mov	sp, r7
 8000996:	bc80      	pop	{r7}
 8000998:	4770      	bx	lr

0800099a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800099a:	b480      	push	{r7}
 800099c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800099e:	bf00      	nop
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bc80      	pop	{r7}
 80009a4:	4770      	bx	lr

080009a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009a6:	b580      	push	{r7, lr}
 80009a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009aa:	f000 f993 	bl	8000cd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009ae:	bf00      	nop
 80009b0:	bd80      	pop	{r7, pc}
	...

080009b4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80009b8:	4802      	ldr	r0, [pc, #8]	; (80009c4 <TIM1_UP_IRQHandler+0x10>)
 80009ba:	f001 fb8f 	bl	80020dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	2000099c 	.word	0x2000099c

080009c8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80009cc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80009d0:	f000 fc3e 	bl	8001250 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80009d4:	bf00      	nop
 80009d6:	bd80      	pop	{r7, pc}

080009d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b086      	sub	sp, #24
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009e0:	4a14      	ldr	r2, [pc, #80]	; (8000a34 <_sbrk+0x5c>)
 80009e2:	4b15      	ldr	r3, [pc, #84]	; (8000a38 <_sbrk+0x60>)
 80009e4:	1ad3      	subs	r3, r2, r3
 80009e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009ec:	4b13      	ldr	r3, [pc, #76]	; (8000a3c <_sbrk+0x64>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d102      	bne.n	80009fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009f4:	4b11      	ldr	r3, [pc, #68]	; (8000a3c <_sbrk+0x64>)
 80009f6:	4a12      	ldr	r2, [pc, #72]	; (8000a40 <_sbrk+0x68>)
 80009f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009fa:	4b10      	ldr	r3, [pc, #64]	; (8000a3c <_sbrk+0x64>)
 80009fc:	681a      	ldr	r2, [r3, #0]
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	4413      	add	r3, r2
 8000a02:	693a      	ldr	r2, [r7, #16]
 8000a04:	429a      	cmp	r2, r3
 8000a06:	d207      	bcs.n	8000a18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a08:	f001 ff90 	bl	800292c <__errno>
 8000a0c:	4602      	mov	r2, r0
 8000a0e:	230c      	movs	r3, #12
 8000a10:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000a12:	f04f 33ff 	mov.w	r3, #4294967295
 8000a16:	e009      	b.n	8000a2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a18:	4b08      	ldr	r3, [pc, #32]	; (8000a3c <_sbrk+0x64>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a1e:	4b07      	ldr	r3, [pc, #28]	; (8000a3c <_sbrk+0x64>)
 8000a20:	681a      	ldr	r2, [r3, #0]
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	4413      	add	r3, r2
 8000a26:	4a05      	ldr	r2, [pc, #20]	; (8000a3c <_sbrk+0x64>)
 8000a28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a2a:	68fb      	ldr	r3, [r7, #12]
}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	3718      	adds	r7, #24
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	20005000 	.word	0x20005000
 8000a38:	00000400 	.word	0x00000400
 8000a3c:	20000100 	.word	0x20000100
 8000a40:	20000a30 	.word	0x20000a30

08000a44 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a48:	bf00      	nop
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bc80      	pop	{r7}
 8000a4e:	4770      	bx	lr

08000a50 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b086      	sub	sp, #24
 8000a54:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a56:	f107 0308 	add.w	r3, r7, #8
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	601a      	str	r2, [r3, #0]
 8000a5e:	605a      	str	r2, [r3, #4]
 8000a60:	609a      	str	r2, [r3, #8]
 8000a62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a64:	463b      	mov	r3, r7
 8000a66:	2200      	movs	r2, #0
 8000a68:	601a      	str	r2, [r3, #0]
 8000a6a:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 8000a6c:	4b1e      	ldr	r3, [pc, #120]	; (8000ae8 <MX_TIM1_Init+0x98>)
 8000a6e:	4a1f      	ldr	r2, [pc, #124]	; (8000aec <MX_TIM1_Init+0x9c>)
 8000a70:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 64000-1;
 8000a72:	4b1d      	ldr	r3, [pc, #116]	; (8000ae8 <MX_TIM1_Init+0x98>)
 8000a74:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000a78:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a7a:	4b1b      	ldr	r3, [pc, #108]	; (8000ae8 <MX_TIM1_Init+0x98>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 33-1;
 8000a80:	4b19      	ldr	r3, [pc, #100]	; (8000ae8 <MX_TIM1_Init+0x98>)
 8000a82:	2220      	movs	r2, #32
 8000a84:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a86:	4b18      	ldr	r3, [pc, #96]	; (8000ae8 <MX_TIM1_Init+0x98>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a8c:	4b16      	ldr	r3, [pc, #88]	; (8000ae8 <MX_TIM1_Init+0x98>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a92:	4b15      	ldr	r3, [pc, #84]	; (8000ae8 <MX_TIM1_Init+0x98>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a98:	4813      	ldr	r0, [pc, #76]	; (8000ae8 <MX_TIM1_Init+0x98>)
 8000a9a:	f001 fa7d 	bl	8001f98 <HAL_TIM_Base_Init>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000aa4:	f7ff fe4e 	bl	8000744 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000aa8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000aae:	f107 0308 	add.w	r3, r7, #8
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	480c      	ldr	r0, [pc, #48]	; (8000ae8 <MX_TIM1_Init+0x98>)
 8000ab6:	f001 fc19 	bl	80022ec <HAL_TIM_ConfigClockSource>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000ac0:	f7ff fe40 	bl	8000744 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000acc:	463b      	mov	r3, r7
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4805      	ldr	r0, [pc, #20]	; (8000ae8 <MX_TIM1_Init+0x98>)
 8000ad2:	f001 fddf 	bl	8002694 <HAL_TIMEx_MasterConfigSynchronization>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000adc:	f7ff fe32 	bl	8000744 <Error_Handler>
  }

}
 8000ae0:	bf00      	nop
 8000ae2:	3718      	adds	r7, #24
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	2000099c 	.word	0x2000099c
 8000aec:	40012c00 	.word	0x40012c00

08000af0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b085      	sub	sp, #20
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a09      	ldr	r2, [pc, #36]	; (8000b24 <HAL_TIM_Base_MspInit+0x34>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d10b      	bne.n	8000b1a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b02:	4b09      	ldr	r3, [pc, #36]	; (8000b28 <HAL_TIM_Base_MspInit+0x38>)
 8000b04:	699b      	ldr	r3, [r3, #24]
 8000b06:	4a08      	ldr	r2, [pc, #32]	; (8000b28 <HAL_TIM_Base_MspInit+0x38>)
 8000b08:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b0c:	6193      	str	r3, [r2, #24]
 8000b0e:	4b06      	ldr	r3, [pc, #24]	; (8000b28 <HAL_TIM_Base_MspInit+0x38>)
 8000b10:	699b      	ldr	r3, [r3, #24]
 8000b12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b16:	60fb      	str	r3, [r7, #12]
 8000b18:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000b1a:	bf00      	nop
 8000b1c:	3714      	adds	r7, #20
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bc80      	pop	{r7}
 8000b22:	4770      	bx	lr
 8000b24:	40012c00 	.word	0x40012c00
 8000b28:	40021000 	.word	0x40021000

08000b2c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000b30:	4b11      	ldr	r3, [pc, #68]	; (8000b78 <MX_USART2_UART_Init+0x4c>)
 8000b32:	4a12      	ldr	r2, [pc, #72]	; (8000b7c <MX_USART2_UART_Init+0x50>)
 8000b34:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b36:	4b10      	ldr	r3, [pc, #64]	; (8000b78 <MX_USART2_UART_Init+0x4c>)
 8000b38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b3c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b3e:	4b0e      	ldr	r3, [pc, #56]	; (8000b78 <MX_USART2_UART_Init+0x4c>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b44:	4b0c      	ldr	r3, [pc, #48]	; (8000b78 <MX_USART2_UART_Init+0x4c>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b4a:	4b0b      	ldr	r3, [pc, #44]	; (8000b78 <MX_USART2_UART_Init+0x4c>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b50:	4b09      	ldr	r3, [pc, #36]	; (8000b78 <MX_USART2_UART_Init+0x4c>)
 8000b52:	220c      	movs	r2, #12
 8000b54:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b56:	4b08      	ldr	r3, [pc, #32]	; (8000b78 <MX_USART2_UART_Init+0x4c>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b5c:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <MX_USART2_UART_Init+0x4c>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b62:	4805      	ldr	r0, [pc, #20]	; (8000b78 <MX_USART2_UART_Init+0x4c>)
 8000b64:	f001 fe06 	bl	8002774 <HAL_UART_Init>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b6e:	f7ff fde9 	bl	8000744 <Error_Handler>
  }

}
 8000b72:	bf00      	nop
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	200009e4 	.word	0x200009e4
 8000b7c:	40004400 	.word	0x40004400

08000b80 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b088      	sub	sp, #32
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b88:	f107 0310 	add.w	r3, r7, #16
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	601a      	str	r2, [r3, #0]
 8000b90:	605a      	str	r2, [r3, #4]
 8000b92:	609a      	str	r2, [r3, #8]
 8000b94:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4a15      	ldr	r2, [pc, #84]	; (8000bf0 <HAL_UART_MspInit+0x70>)
 8000b9c:	4293      	cmp	r3, r2
 8000b9e:	d123      	bne.n	8000be8 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ba0:	4b14      	ldr	r3, [pc, #80]	; (8000bf4 <HAL_UART_MspInit+0x74>)
 8000ba2:	69db      	ldr	r3, [r3, #28]
 8000ba4:	4a13      	ldr	r2, [pc, #76]	; (8000bf4 <HAL_UART_MspInit+0x74>)
 8000ba6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000baa:	61d3      	str	r3, [r2, #28]
 8000bac:	4b11      	ldr	r3, [pc, #68]	; (8000bf4 <HAL_UART_MspInit+0x74>)
 8000bae:	69db      	ldr	r3, [r3, #28]
 8000bb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bb4:	60fb      	str	r3, [r7, #12]
 8000bb6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb8:	4b0e      	ldr	r3, [pc, #56]	; (8000bf4 <HAL_UART_MspInit+0x74>)
 8000bba:	699b      	ldr	r3, [r3, #24]
 8000bbc:	4a0d      	ldr	r2, [pc, #52]	; (8000bf4 <HAL_UART_MspInit+0x74>)
 8000bbe:	f043 0304 	orr.w	r3, r3, #4
 8000bc2:	6193      	str	r3, [r2, #24]
 8000bc4:	4b0b      	ldr	r3, [pc, #44]	; (8000bf4 <HAL_UART_MspInit+0x74>)
 8000bc6:	699b      	ldr	r3, [r3, #24]
 8000bc8:	f003 0304 	and.w	r3, r3, #4
 8000bcc:	60bb      	str	r3, [r7, #8]
 8000bce:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000bd0:	230c      	movs	r3, #12
 8000bd2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd4:	2302      	movs	r3, #2
 8000bd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd8:	2302      	movs	r3, #2
 8000bda:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bdc:	f107 0310 	add.w	r3, r7, #16
 8000be0:	4619      	mov	r1, r3
 8000be2:	4805      	ldr	r0, [pc, #20]	; (8000bf8 <HAL_UART_MspInit+0x78>)
 8000be4:	f000 f9c2 	bl	8000f6c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000be8:	bf00      	nop
 8000bea:	3720      	adds	r7, #32
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	40004400 	.word	0x40004400
 8000bf4:	40021000 	.word	0x40021000
 8000bf8:	40010800 	.word	0x40010800

08000bfc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000bfc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000bfe:	e003      	b.n	8000c08 <LoopCopyDataInit>

08000c00 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000c00:	4b0b      	ldr	r3, [pc, #44]	; (8000c30 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000c02:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000c04:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000c06:	3104      	adds	r1, #4

08000c08 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000c08:	480a      	ldr	r0, [pc, #40]	; (8000c34 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000c0a:	4b0b      	ldr	r3, [pc, #44]	; (8000c38 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000c0c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000c0e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000c10:	d3f6      	bcc.n	8000c00 <CopyDataInit>
  ldr r2, =_sbss
 8000c12:	4a0a      	ldr	r2, [pc, #40]	; (8000c3c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000c14:	e002      	b.n	8000c1c <LoopFillZerobss>

08000c16 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000c16:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000c18:	f842 3b04 	str.w	r3, [r2], #4

08000c1c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000c1c:	4b08      	ldr	r3, [pc, #32]	; (8000c40 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000c1e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000c20:	d3f9      	bcc.n	8000c16 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000c22:	f7ff ff0f 	bl	8000a44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c26:	f001 fe87 	bl	8002938 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c2a:	f7ff fc17 	bl	800045c <main>
  bx lr
 8000c2e:	4770      	bx	lr
  ldr r3, =_sidata
 8000c30:	08003830 	.word	0x08003830
  ldr r0, =_sdata
 8000c34:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000c38:	200000e0 	.word	0x200000e0
  ldr r2, =_sbss
 8000c3c:	200000e0 	.word	0x200000e0
  ldr r3, = _ebss
 8000c40:	20000a2c 	.word	0x20000a2c

08000c44 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c44:	e7fe      	b.n	8000c44 <ADC1_2_IRQHandler>
	...

08000c48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c4c:	4b08      	ldr	r3, [pc, #32]	; (8000c70 <HAL_Init+0x28>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a07      	ldr	r2, [pc, #28]	; (8000c70 <HAL_Init+0x28>)
 8000c52:	f043 0310 	orr.w	r3, r3, #16
 8000c56:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c58:	2003      	movs	r0, #3
 8000c5a:	f000 f945 	bl	8000ee8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c5e:	2000      	movs	r0, #0
 8000c60:	f000 f808 	bl	8000c74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c64:	f7ff fe4c 	bl	8000900 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c68:	2300      	movs	r3, #0
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40022000 	.word	0x40022000

08000c74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c7c:	4b12      	ldr	r3, [pc, #72]	; (8000cc8 <HAL_InitTick+0x54>)
 8000c7e:	681a      	ldr	r2, [r3, #0]
 8000c80:	4b12      	ldr	r3, [pc, #72]	; (8000ccc <HAL_InitTick+0x58>)
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	4619      	mov	r1, r3
 8000c86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c92:	4618      	mov	r0, r3
 8000c94:	f000 f95d 	bl	8000f52 <HAL_SYSTICK_Config>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	e00e      	b.n	8000cc0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	2b0f      	cmp	r3, #15
 8000ca6:	d80a      	bhi.n	8000cbe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ca8:	2200      	movs	r2, #0
 8000caa:	6879      	ldr	r1, [r7, #4]
 8000cac:	f04f 30ff 	mov.w	r0, #4294967295
 8000cb0:	f000 f925 	bl	8000efe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cb4:	4a06      	ldr	r2, [pc, #24]	; (8000cd0 <HAL_InitTick+0x5c>)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	e000      	b.n	8000cc0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cbe:	2301      	movs	r3, #1
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	3708      	adds	r7, #8
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	20000070 	.word	0x20000070
 8000ccc:	20000078 	.word	0x20000078
 8000cd0:	20000074 	.word	0x20000074

08000cd4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cd8:	4b05      	ldr	r3, [pc, #20]	; (8000cf0 <HAL_IncTick+0x1c>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	461a      	mov	r2, r3
 8000cde:	4b05      	ldr	r3, [pc, #20]	; (8000cf4 <HAL_IncTick+0x20>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4413      	add	r3, r2
 8000ce4:	4a03      	ldr	r2, [pc, #12]	; (8000cf4 <HAL_IncTick+0x20>)
 8000ce6:	6013      	str	r3, [r2, #0]
}
 8000ce8:	bf00      	nop
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bc80      	pop	{r7}
 8000cee:	4770      	bx	lr
 8000cf0:	20000078 	.word	0x20000078
 8000cf4:	20000a24 	.word	0x20000a24

08000cf8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  return uwTick;
 8000cfc:	4b02      	ldr	r3, [pc, #8]	; (8000d08 <HAL_GetTick+0x10>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bc80      	pop	{r7}
 8000d06:	4770      	bx	lr
 8000d08:	20000a24 	.word	0x20000a24

08000d0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d14:	f7ff fff0 	bl	8000cf8 <HAL_GetTick>
 8000d18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d24:	d005      	beq.n	8000d32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d26:	4b09      	ldr	r3, [pc, #36]	; (8000d4c <HAL_Delay+0x40>)
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	4413      	add	r3, r2
 8000d30:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d32:	bf00      	nop
 8000d34:	f7ff ffe0 	bl	8000cf8 <HAL_GetTick>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	68bb      	ldr	r3, [r7, #8]
 8000d3c:	1ad3      	subs	r3, r2, r3
 8000d3e:	68fa      	ldr	r2, [r7, #12]
 8000d40:	429a      	cmp	r2, r3
 8000d42:	d8f7      	bhi.n	8000d34 <HAL_Delay+0x28>
  {
  }
}
 8000d44:	bf00      	nop
 8000d46:	3710      	adds	r7, #16
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	20000078 	.word	0x20000078

08000d50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b085      	sub	sp, #20
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	f003 0307 	and.w	r3, r3, #7
 8000d5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d60:	4b0c      	ldr	r3, [pc, #48]	; (8000d94 <__NVIC_SetPriorityGrouping+0x44>)
 8000d62:	68db      	ldr	r3, [r3, #12]
 8000d64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d66:	68ba      	ldr	r2, [r7, #8]
 8000d68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d82:	4a04      	ldr	r2, [pc, #16]	; (8000d94 <__NVIC_SetPriorityGrouping+0x44>)
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	60d3      	str	r3, [r2, #12]
}
 8000d88:	bf00      	nop
 8000d8a:	3714      	adds	r7, #20
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bc80      	pop	{r7}
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	e000ed00 	.word	0xe000ed00

08000d98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d9c:	4b04      	ldr	r3, [pc, #16]	; (8000db0 <__NVIC_GetPriorityGrouping+0x18>)
 8000d9e:	68db      	ldr	r3, [r3, #12]
 8000da0:	0a1b      	lsrs	r3, r3, #8
 8000da2:	f003 0307 	and.w	r3, r3, #7
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bc80      	pop	{r7}
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	e000ed00 	.word	0xe000ed00

08000db4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	4603      	mov	r3, r0
 8000dbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	db0b      	blt.n	8000dde <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dc6:	79fb      	ldrb	r3, [r7, #7]
 8000dc8:	f003 021f 	and.w	r2, r3, #31
 8000dcc:	4906      	ldr	r1, [pc, #24]	; (8000de8 <__NVIC_EnableIRQ+0x34>)
 8000dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd2:	095b      	lsrs	r3, r3, #5
 8000dd4:	2001      	movs	r0, #1
 8000dd6:	fa00 f202 	lsl.w	r2, r0, r2
 8000dda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dde:	bf00      	nop
 8000de0:	370c      	adds	r7, #12
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bc80      	pop	{r7}
 8000de6:	4770      	bx	lr
 8000de8:	e000e100 	.word	0xe000e100

08000dec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	4603      	mov	r3, r0
 8000df4:	6039      	str	r1, [r7, #0]
 8000df6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000df8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	db0a      	blt.n	8000e16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	b2da      	uxtb	r2, r3
 8000e04:	490c      	ldr	r1, [pc, #48]	; (8000e38 <__NVIC_SetPriority+0x4c>)
 8000e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0a:	0112      	lsls	r2, r2, #4
 8000e0c:	b2d2      	uxtb	r2, r2
 8000e0e:	440b      	add	r3, r1
 8000e10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e14:	e00a      	b.n	8000e2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	b2da      	uxtb	r2, r3
 8000e1a:	4908      	ldr	r1, [pc, #32]	; (8000e3c <__NVIC_SetPriority+0x50>)
 8000e1c:	79fb      	ldrb	r3, [r7, #7]
 8000e1e:	f003 030f 	and.w	r3, r3, #15
 8000e22:	3b04      	subs	r3, #4
 8000e24:	0112      	lsls	r2, r2, #4
 8000e26:	b2d2      	uxtb	r2, r2
 8000e28:	440b      	add	r3, r1
 8000e2a:	761a      	strb	r2, [r3, #24]
}
 8000e2c:	bf00      	nop
 8000e2e:	370c      	adds	r7, #12
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bc80      	pop	{r7}
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	e000e100 	.word	0xe000e100
 8000e3c:	e000ed00 	.word	0xe000ed00

08000e40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b089      	sub	sp, #36	; 0x24
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	60f8      	str	r0, [r7, #12]
 8000e48:	60b9      	str	r1, [r7, #8]
 8000e4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	f003 0307 	and.w	r3, r3, #7
 8000e52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e54:	69fb      	ldr	r3, [r7, #28]
 8000e56:	f1c3 0307 	rsb	r3, r3, #7
 8000e5a:	2b04      	cmp	r3, #4
 8000e5c:	bf28      	it	cs
 8000e5e:	2304      	movcs	r3, #4
 8000e60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	3304      	adds	r3, #4
 8000e66:	2b06      	cmp	r3, #6
 8000e68:	d902      	bls.n	8000e70 <NVIC_EncodePriority+0x30>
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	3b03      	subs	r3, #3
 8000e6e:	e000      	b.n	8000e72 <NVIC_EncodePriority+0x32>
 8000e70:	2300      	movs	r3, #0
 8000e72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e74:	f04f 32ff 	mov.w	r2, #4294967295
 8000e78:	69bb      	ldr	r3, [r7, #24]
 8000e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7e:	43da      	mvns	r2, r3
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	401a      	ands	r2, r3
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e88:	f04f 31ff 	mov.w	r1, #4294967295
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e92:	43d9      	mvns	r1, r3
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e98:	4313      	orrs	r3, r2
         );
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3724      	adds	r7, #36	; 0x24
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bc80      	pop	{r7}
 8000ea2:	4770      	bx	lr

08000ea4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	3b01      	subs	r3, #1
 8000eb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000eb4:	d301      	bcc.n	8000eba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	e00f      	b.n	8000eda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eba:	4a0a      	ldr	r2, [pc, #40]	; (8000ee4 <SysTick_Config+0x40>)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	3b01      	subs	r3, #1
 8000ec0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ec2:	210f      	movs	r1, #15
 8000ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ec8:	f7ff ff90 	bl	8000dec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ecc:	4b05      	ldr	r3, [pc, #20]	; (8000ee4 <SysTick_Config+0x40>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ed2:	4b04      	ldr	r3, [pc, #16]	; (8000ee4 <SysTick_Config+0x40>)
 8000ed4:	2207      	movs	r2, #7
 8000ed6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ed8:	2300      	movs	r3, #0
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	e000e010 	.word	0xe000e010

08000ee8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ef0:	6878      	ldr	r0, [r7, #4]
 8000ef2:	f7ff ff2d 	bl	8000d50 <__NVIC_SetPriorityGrouping>
}
 8000ef6:	bf00      	nop
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}

08000efe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000efe:	b580      	push	{r7, lr}
 8000f00:	b086      	sub	sp, #24
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	4603      	mov	r3, r0
 8000f06:	60b9      	str	r1, [r7, #8]
 8000f08:	607a      	str	r2, [r7, #4]
 8000f0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f10:	f7ff ff42 	bl	8000d98 <__NVIC_GetPriorityGrouping>
 8000f14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f16:	687a      	ldr	r2, [r7, #4]
 8000f18:	68b9      	ldr	r1, [r7, #8]
 8000f1a:	6978      	ldr	r0, [r7, #20]
 8000f1c:	f7ff ff90 	bl	8000e40 <NVIC_EncodePriority>
 8000f20:	4602      	mov	r2, r0
 8000f22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f26:	4611      	mov	r1, r2
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f7ff ff5f 	bl	8000dec <__NVIC_SetPriority>
}
 8000f2e:	bf00      	nop
 8000f30:	3718      	adds	r7, #24
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}

08000f36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f36:	b580      	push	{r7, lr}
 8000f38:	b082      	sub	sp, #8
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff ff35 	bl	8000db4 <__NVIC_EnableIRQ>
}
 8000f4a:	bf00      	nop
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}

08000f52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f52:	b580      	push	{r7, lr}
 8000f54:	b082      	sub	sp, #8
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	f7ff ffa2 	bl	8000ea4 <SysTick_Config>
 8000f60:	4603      	mov	r3, r0
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
	...

08000f6c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b08b      	sub	sp, #44	; 0x2c
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
 8000f74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f76:	2300      	movs	r3, #0
 8000f78:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f7e:	e127      	b.n	80011d0 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000f80:	2201      	movs	r2, #1
 8000f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	69fa      	ldr	r2, [r7, #28]
 8000f90:	4013      	ands	r3, r2
 8000f92:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	f040 8116 	bne.w	80011ca <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	2b12      	cmp	r3, #18
 8000fa4:	d034      	beq.n	8001010 <HAL_GPIO_Init+0xa4>
 8000fa6:	2b12      	cmp	r3, #18
 8000fa8:	d80d      	bhi.n	8000fc6 <HAL_GPIO_Init+0x5a>
 8000faa:	2b02      	cmp	r3, #2
 8000fac:	d02b      	beq.n	8001006 <HAL_GPIO_Init+0x9a>
 8000fae:	2b02      	cmp	r3, #2
 8000fb0:	d804      	bhi.n	8000fbc <HAL_GPIO_Init+0x50>
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d031      	beq.n	800101a <HAL_GPIO_Init+0xae>
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d01c      	beq.n	8000ff4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000fba:	e048      	b.n	800104e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000fbc:	2b03      	cmp	r3, #3
 8000fbe:	d043      	beq.n	8001048 <HAL_GPIO_Init+0xdc>
 8000fc0:	2b11      	cmp	r3, #17
 8000fc2:	d01b      	beq.n	8000ffc <HAL_GPIO_Init+0x90>
          break;
 8000fc4:	e043      	b.n	800104e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000fc6:	4a89      	ldr	r2, [pc, #548]	; (80011ec <HAL_GPIO_Init+0x280>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d026      	beq.n	800101a <HAL_GPIO_Init+0xae>
 8000fcc:	4a87      	ldr	r2, [pc, #540]	; (80011ec <HAL_GPIO_Init+0x280>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d806      	bhi.n	8000fe0 <HAL_GPIO_Init+0x74>
 8000fd2:	4a87      	ldr	r2, [pc, #540]	; (80011f0 <HAL_GPIO_Init+0x284>)
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	d020      	beq.n	800101a <HAL_GPIO_Init+0xae>
 8000fd8:	4a86      	ldr	r2, [pc, #536]	; (80011f4 <HAL_GPIO_Init+0x288>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d01d      	beq.n	800101a <HAL_GPIO_Init+0xae>
          break;
 8000fde:	e036      	b.n	800104e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000fe0:	4a85      	ldr	r2, [pc, #532]	; (80011f8 <HAL_GPIO_Init+0x28c>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d019      	beq.n	800101a <HAL_GPIO_Init+0xae>
 8000fe6:	4a85      	ldr	r2, [pc, #532]	; (80011fc <HAL_GPIO_Init+0x290>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d016      	beq.n	800101a <HAL_GPIO_Init+0xae>
 8000fec:	4a84      	ldr	r2, [pc, #528]	; (8001200 <HAL_GPIO_Init+0x294>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d013      	beq.n	800101a <HAL_GPIO_Init+0xae>
          break;
 8000ff2:	e02c      	b.n	800104e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	68db      	ldr	r3, [r3, #12]
 8000ff8:	623b      	str	r3, [r7, #32]
          break;
 8000ffa:	e028      	b.n	800104e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	3304      	adds	r3, #4
 8001002:	623b      	str	r3, [r7, #32]
          break;
 8001004:	e023      	b.n	800104e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	68db      	ldr	r3, [r3, #12]
 800100a:	3308      	adds	r3, #8
 800100c:	623b      	str	r3, [r7, #32]
          break;
 800100e:	e01e      	b.n	800104e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	68db      	ldr	r3, [r3, #12]
 8001014:	330c      	adds	r3, #12
 8001016:	623b      	str	r3, [r7, #32]
          break;
 8001018:	e019      	b.n	800104e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	689b      	ldr	r3, [r3, #8]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d102      	bne.n	8001028 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001022:	2304      	movs	r3, #4
 8001024:	623b      	str	r3, [r7, #32]
          break;
 8001026:	e012      	b.n	800104e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	689b      	ldr	r3, [r3, #8]
 800102c:	2b01      	cmp	r3, #1
 800102e:	d105      	bne.n	800103c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001030:	2308      	movs	r3, #8
 8001032:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	69fa      	ldr	r2, [r7, #28]
 8001038:	611a      	str	r2, [r3, #16]
          break;
 800103a:	e008      	b.n	800104e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800103c:	2308      	movs	r3, #8
 800103e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	69fa      	ldr	r2, [r7, #28]
 8001044:	615a      	str	r2, [r3, #20]
          break;
 8001046:	e002      	b.n	800104e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001048:	2300      	movs	r3, #0
 800104a:	623b      	str	r3, [r7, #32]
          break;
 800104c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800104e:	69bb      	ldr	r3, [r7, #24]
 8001050:	2bff      	cmp	r3, #255	; 0xff
 8001052:	d801      	bhi.n	8001058 <HAL_GPIO_Init+0xec>
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	e001      	b.n	800105c <HAL_GPIO_Init+0xf0>
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	3304      	adds	r3, #4
 800105c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800105e:	69bb      	ldr	r3, [r7, #24]
 8001060:	2bff      	cmp	r3, #255	; 0xff
 8001062:	d802      	bhi.n	800106a <HAL_GPIO_Init+0xfe>
 8001064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	e002      	b.n	8001070 <HAL_GPIO_Init+0x104>
 800106a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800106c:	3b08      	subs	r3, #8
 800106e:	009b      	lsls	r3, r3, #2
 8001070:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	210f      	movs	r1, #15
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	fa01 f303 	lsl.w	r3, r1, r3
 800107e:	43db      	mvns	r3, r3
 8001080:	401a      	ands	r2, r3
 8001082:	6a39      	ldr	r1, [r7, #32]
 8001084:	693b      	ldr	r3, [r7, #16]
 8001086:	fa01 f303 	lsl.w	r3, r1, r3
 800108a:	431a      	orrs	r2, r3
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001098:	2b00      	cmp	r3, #0
 800109a:	f000 8096 	beq.w	80011ca <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800109e:	4b59      	ldr	r3, [pc, #356]	; (8001204 <HAL_GPIO_Init+0x298>)
 80010a0:	699b      	ldr	r3, [r3, #24]
 80010a2:	4a58      	ldr	r2, [pc, #352]	; (8001204 <HAL_GPIO_Init+0x298>)
 80010a4:	f043 0301 	orr.w	r3, r3, #1
 80010a8:	6193      	str	r3, [r2, #24]
 80010aa:	4b56      	ldr	r3, [pc, #344]	; (8001204 <HAL_GPIO_Init+0x298>)
 80010ac:	699b      	ldr	r3, [r3, #24]
 80010ae:	f003 0301 	and.w	r3, r3, #1
 80010b2:	60bb      	str	r3, [r7, #8]
 80010b4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80010b6:	4a54      	ldr	r2, [pc, #336]	; (8001208 <HAL_GPIO_Init+0x29c>)
 80010b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ba:	089b      	lsrs	r3, r3, #2
 80010bc:	3302      	adds	r3, #2
 80010be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010c2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80010c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c6:	f003 0303 	and.w	r3, r3, #3
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	220f      	movs	r2, #15
 80010ce:	fa02 f303 	lsl.w	r3, r2, r3
 80010d2:	43db      	mvns	r3, r3
 80010d4:	68fa      	ldr	r2, [r7, #12]
 80010d6:	4013      	ands	r3, r2
 80010d8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4a4b      	ldr	r2, [pc, #300]	; (800120c <HAL_GPIO_Init+0x2a0>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d013      	beq.n	800110a <HAL_GPIO_Init+0x19e>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a4a      	ldr	r2, [pc, #296]	; (8001210 <HAL_GPIO_Init+0x2a4>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d00d      	beq.n	8001106 <HAL_GPIO_Init+0x19a>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a49      	ldr	r2, [pc, #292]	; (8001214 <HAL_GPIO_Init+0x2a8>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d007      	beq.n	8001102 <HAL_GPIO_Init+0x196>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4a48      	ldr	r2, [pc, #288]	; (8001218 <HAL_GPIO_Init+0x2ac>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d101      	bne.n	80010fe <HAL_GPIO_Init+0x192>
 80010fa:	2303      	movs	r3, #3
 80010fc:	e006      	b.n	800110c <HAL_GPIO_Init+0x1a0>
 80010fe:	2304      	movs	r3, #4
 8001100:	e004      	b.n	800110c <HAL_GPIO_Init+0x1a0>
 8001102:	2302      	movs	r3, #2
 8001104:	e002      	b.n	800110c <HAL_GPIO_Init+0x1a0>
 8001106:	2301      	movs	r3, #1
 8001108:	e000      	b.n	800110c <HAL_GPIO_Init+0x1a0>
 800110a:	2300      	movs	r3, #0
 800110c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800110e:	f002 0203 	and.w	r2, r2, #3
 8001112:	0092      	lsls	r2, r2, #2
 8001114:	4093      	lsls	r3, r2
 8001116:	68fa      	ldr	r2, [r7, #12]
 8001118:	4313      	orrs	r3, r2
 800111a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800111c:	493a      	ldr	r1, [pc, #232]	; (8001208 <HAL_GPIO_Init+0x29c>)
 800111e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001120:	089b      	lsrs	r3, r3, #2
 8001122:	3302      	adds	r3, #2
 8001124:	68fa      	ldr	r2, [r7, #12]
 8001126:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001132:	2b00      	cmp	r3, #0
 8001134:	d006      	beq.n	8001144 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001136:	4b39      	ldr	r3, [pc, #228]	; (800121c <HAL_GPIO_Init+0x2b0>)
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	4938      	ldr	r1, [pc, #224]	; (800121c <HAL_GPIO_Init+0x2b0>)
 800113c:	69bb      	ldr	r3, [r7, #24]
 800113e:	4313      	orrs	r3, r2
 8001140:	600b      	str	r3, [r1, #0]
 8001142:	e006      	b.n	8001152 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001144:	4b35      	ldr	r3, [pc, #212]	; (800121c <HAL_GPIO_Init+0x2b0>)
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	69bb      	ldr	r3, [r7, #24]
 800114a:	43db      	mvns	r3, r3
 800114c:	4933      	ldr	r1, [pc, #204]	; (800121c <HAL_GPIO_Init+0x2b0>)
 800114e:	4013      	ands	r3, r2
 8001150:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800115a:	2b00      	cmp	r3, #0
 800115c:	d006      	beq.n	800116c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800115e:	4b2f      	ldr	r3, [pc, #188]	; (800121c <HAL_GPIO_Init+0x2b0>)
 8001160:	685a      	ldr	r2, [r3, #4]
 8001162:	492e      	ldr	r1, [pc, #184]	; (800121c <HAL_GPIO_Init+0x2b0>)
 8001164:	69bb      	ldr	r3, [r7, #24]
 8001166:	4313      	orrs	r3, r2
 8001168:	604b      	str	r3, [r1, #4]
 800116a:	e006      	b.n	800117a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800116c:	4b2b      	ldr	r3, [pc, #172]	; (800121c <HAL_GPIO_Init+0x2b0>)
 800116e:	685a      	ldr	r2, [r3, #4]
 8001170:	69bb      	ldr	r3, [r7, #24]
 8001172:	43db      	mvns	r3, r3
 8001174:	4929      	ldr	r1, [pc, #164]	; (800121c <HAL_GPIO_Init+0x2b0>)
 8001176:	4013      	ands	r3, r2
 8001178:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001182:	2b00      	cmp	r3, #0
 8001184:	d006      	beq.n	8001194 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001186:	4b25      	ldr	r3, [pc, #148]	; (800121c <HAL_GPIO_Init+0x2b0>)
 8001188:	689a      	ldr	r2, [r3, #8]
 800118a:	4924      	ldr	r1, [pc, #144]	; (800121c <HAL_GPIO_Init+0x2b0>)
 800118c:	69bb      	ldr	r3, [r7, #24]
 800118e:	4313      	orrs	r3, r2
 8001190:	608b      	str	r3, [r1, #8]
 8001192:	e006      	b.n	80011a2 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001194:	4b21      	ldr	r3, [pc, #132]	; (800121c <HAL_GPIO_Init+0x2b0>)
 8001196:	689a      	ldr	r2, [r3, #8]
 8001198:	69bb      	ldr	r3, [r7, #24]
 800119a:	43db      	mvns	r3, r3
 800119c:	491f      	ldr	r1, [pc, #124]	; (800121c <HAL_GPIO_Init+0x2b0>)
 800119e:	4013      	ands	r3, r2
 80011a0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d006      	beq.n	80011bc <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80011ae:	4b1b      	ldr	r3, [pc, #108]	; (800121c <HAL_GPIO_Init+0x2b0>)
 80011b0:	68da      	ldr	r2, [r3, #12]
 80011b2:	491a      	ldr	r1, [pc, #104]	; (800121c <HAL_GPIO_Init+0x2b0>)
 80011b4:	69bb      	ldr	r3, [r7, #24]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	60cb      	str	r3, [r1, #12]
 80011ba:	e006      	b.n	80011ca <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80011bc:	4b17      	ldr	r3, [pc, #92]	; (800121c <HAL_GPIO_Init+0x2b0>)
 80011be:	68da      	ldr	r2, [r3, #12]
 80011c0:	69bb      	ldr	r3, [r7, #24]
 80011c2:	43db      	mvns	r3, r3
 80011c4:	4915      	ldr	r1, [pc, #84]	; (800121c <HAL_GPIO_Init+0x2b0>)
 80011c6:	4013      	ands	r3, r2
 80011c8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80011ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011cc:	3301      	adds	r3, #1
 80011ce:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d6:	fa22 f303 	lsr.w	r3, r2, r3
 80011da:	2b00      	cmp	r3, #0
 80011dc:	f47f aed0 	bne.w	8000f80 <HAL_GPIO_Init+0x14>
  }
}
 80011e0:	bf00      	nop
 80011e2:	372c      	adds	r7, #44	; 0x2c
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bc80      	pop	{r7}
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	10210000 	.word	0x10210000
 80011f0:	10110000 	.word	0x10110000
 80011f4:	10120000 	.word	0x10120000
 80011f8:	10310000 	.word	0x10310000
 80011fc:	10320000 	.word	0x10320000
 8001200:	10220000 	.word	0x10220000
 8001204:	40021000 	.word	0x40021000
 8001208:	40010000 	.word	0x40010000
 800120c:	40010800 	.word	0x40010800
 8001210:	40010c00 	.word	0x40010c00
 8001214:	40011000 	.word	0x40011000
 8001218:	40011400 	.word	0x40011400
 800121c:	40010400 	.word	0x40010400

08001220 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	460b      	mov	r3, r1
 800122a:	807b      	strh	r3, [r7, #2]
 800122c:	4613      	mov	r3, r2
 800122e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001230:	787b      	ldrb	r3, [r7, #1]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d003      	beq.n	800123e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001236:	887a      	ldrh	r2, [r7, #2]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800123c:	e003      	b.n	8001246 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800123e:	887b      	ldrh	r3, [r7, #2]
 8001240:	041a      	lsls	r2, r3, #16
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	611a      	str	r2, [r3, #16]
}
 8001246:	bf00      	nop
 8001248:	370c      	adds	r7, #12
 800124a:	46bd      	mov	sp, r7
 800124c:	bc80      	pop	{r7}
 800124e:	4770      	bx	lr

08001250 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	4603      	mov	r3, r0
 8001258:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800125a:	4b08      	ldr	r3, [pc, #32]	; (800127c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800125c:	695a      	ldr	r2, [r3, #20]
 800125e:	88fb      	ldrh	r3, [r7, #6]
 8001260:	4013      	ands	r3, r2
 8001262:	2b00      	cmp	r3, #0
 8001264:	d006      	beq.n	8001274 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001266:	4a05      	ldr	r2, [pc, #20]	; (800127c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001268:	88fb      	ldrh	r3, [r7, #6]
 800126a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800126c:	88fb      	ldrh	r3, [r7, #6]
 800126e:	4618      	mov	r0, r3
 8001270:	f000 f806 	bl	8001280 <HAL_GPIO_EXTI_Callback>
  }
}
 8001274:	bf00      	nop
 8001276:	3708      	adds	r7, #8
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	40010400 	.word	0x40010400

08001280 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800128a:	bf00      	nop
 800128c:	370c      	adds	r7, #12
 800128e:	46bd      	mov	sp, r7
 8001290:	bc80      	pop	{r7}
 8001292:	4770      	bx	lr

08001294 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b086      	sub	sp, #24
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d101      	bne.n	80012a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	e26c      	b.n	8001780 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f003 0301 	and.w	r3, r3, #1
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	f000 8087 	beq.w	80013c2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80012b4:	4b92      	ldr	r3, [pc, #584]	; (8001500 <HAL_RCC_OscConfig+0x26c>)
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f003 030c 	and.w	r3, r3, #12
 80012bc:	2b04      	cmp	r3, #4
 80012be:	d00c      	beq.n	80012da <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80012c0:	4b8f      	ldr	r3, [pc, #572]	; (8001500 <HAL_RCC_OscConfig+0x26c>)
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f003 030c 	and.w	r3, r3, #12
 80012c8:	2b08      	cmp	r3, #8
 80012ca:	d112      	bne.n	80012f2 <HAL_RCC_OscConfig+0x5e>
 80012cc:	4b8c      	ldr	r3, [pc, #560]	; (8001500 <HAL_RCC_OscConfig+0x26c>)
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012d8:	d10b      	bne.n	80012f2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012da:	4b89      	ldr	r3, [pc, #548]	; (8001500 <HAL_RCC_OscConfig+0x26c>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d06c      	beq.n	80013c0 <HAL_RCC_OscConfig+0x12c>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d168      	bne.n	80013c0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e246      	b.n	8001780 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012fa:	d106      	bne.n	800130a <HAL_RCC_OscConfig+0x76>
 80012fc:	4b80      	ldr	r3, [pc, #512]	; (8001500 <HAL_RCC_OscConfig+0x26c>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a7f      	ldr	r2, [pc, #508]	; (8001500 <HAL_RCC_OscConfig+0x26c>)
 8001302:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001306:	6013      	str	r3, [r2, #0]
 8001308:	e02e      	b.n	8001368 <HAL_RCC_OscConfig+0xd4>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d10c      	bne.n	800132c <HAL_RCC_OscConfig+0x98>
 8001312:	4b7b      	ldr	r3, [pc, #492]	; (8001500 <HAL_RCC_OscConfig+0x26c>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a7a      	ldr	r2, [pc, #488]	; (8001500 <HAL_RCC_OscConfig+0x26c>)
 8001318:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800131c:	6013      	str	r3, [r2, #0]
 800131e:	4b78      	ldr	r3, [pc, #480]	; (8001500 <HAL_RCC_OscConfig+0x26c>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a77      	ldr	r2, [pc, #476]	; (8001500 <HAL_RCC_OscConfig+0x26c>)
 8001324:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001328:	6013      	str	r3, [r2, #0]
 800132a:	e01d      	b.n	8001368 <HAL_RCC_OscConfig+0xd4>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001334:	d10c      	bne.n	8001350 <HAL_RCC_OscConfig+0xbc>
 8001336:	4b72      	ldr	r3, [pc, #456]	; (8001500 <HAL_RCC_OscConfig+0x26c>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a71      	ldr	r2, [pc, #452]	; (8001500 <HAL_RCC_OscConfig+0x26c>)
 800133c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001340:	6013      	str	r3, [r2, #0]
 8001342:	4b6f      	ldr	r3, [pc, #444]	; (8001500 <HAL_RCC_OscConfig+0x26c>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a6e      	ldr	r2, [pc, #440]	; (8001500 <HAL_RCC_OscConfig+0x26c>)
 8001348:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800134c:	6013      	str	r3, [r2, #0]
 800134e:	e00b      	b.n	8001368 <HAL_RCC_OscConfig+0xd4>
 8001350:	4b6b      	ldr	r3, [pc, #428]	; (8001500 <HAL_RCC_OscConfig+0x26c>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a6a      	ldr	r2, [pc, #424]	; (8001500 <HAL_RCC_OscConfig+0x26c>)
 8001356:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800135a:	6013      	str	r3, [r2, #0]
 800135c:	4b68      	ldr	r3, [pc, #416]	; (8001500 <HAL_RCC_OscConfig+0x26c>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a67      	ldr	r2, [pc, #412]	; (8001500 <HAL_RCC_OscConfig+0x26c>)
 8001362:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001366:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d013      	beq.n	8001398 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001370:	f7ff fcc2 	bl	8000cf8 <HAL_GetTick>
 8001374:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001376:	e008      	b.n	800138a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001378:	f7ff fcbe 	bl	8000cf8 <HAL_GetTick>
 800137c:	4602      	mov	r2, r0
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	2b64      	cmp	r3, #100	; 0x64
 8001384:	d901      	bls.n	800138a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001386:	2303      	movs	r3, #3
 8001388:	e1fa      	b.n	8001780 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800138a:	4b5d      	ldr	r3, [pc, #372]	; (8001500 <HAL_RCC_OscConfig+0x26c>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001392:	2b00      	cmp	r3, #0
 8001394:	d0f0      	beq.n	8001378 <HAL_RCC_OscConfig+0xe4>
 8001396:	e014      	b.n	80013c2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001398:	f7ff fcae 	bl	8000cf8 <HAL_GetTick>
 800139c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800139e:	e008      	b.n	80013b2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013a0:	f7ff fcaa 	bl	8000cf8 <HAL_GetTick>
 80013a4:	4602      	mov	r2, r0
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	2b64      	cmp	r3, #100	; 0x64
 80013ac:	d901      	bls.n	80013b2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80013ae:	2303      	movs	r3, #3
 80013b0:	e1e6      	b.n	8001780 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013b2:	4b53      	ldr	r3, [pc, #332]	; (8001500 <HAL_RCC_OscConfig+0x26c>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d1f0      	bne.n	80013a0 <HAL_RCC_OscConfig+0x10c>
 80013be:	e000      	b.n	80013c2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 0302 	and.w	r3, r3, #2
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d063      	beq.n	8001496 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80013ce:	4b4c      	ldr	r3, [pc, #304]	; (8001500 <HAL_RCC_OscConfig+0x26c>)
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f003 030c 	and.w	r3, r3, #12
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d00b      	beq.n	80013f2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80013da:	4b49      	ldr	r3, [pc, #292]	; (8001500 <HAL_RCC_OscConfig+0x26c>)
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f003 030c 	and.w	r3, r3, #12
 80013e2:	2b08      	cmp	r3, #8
 80013e4:	d11c      	bne.n	8001420 <HAL_RCC_OscConfig+0x18c>
 80013e6:	4b46      	ldr	r3, [pc, #280]	; (8001500 <HAL_RCC_OscConfig+0x26c>)
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d116      	bne.n	8001420 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013f2:	4b43      	ldr	r3, [pc, #268]	; (8001500 <HAL_RCC_OscConfig+0x26c>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f003 0302 	and.w	r3, r3, #2
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d005      	beq.n	800140a <HAL_RCC_OscConfig+0x176>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	691b      	ldr	r3, [r3, #16]
 8001402:	2b01      	cmp	r3, #1
 8001404:	d001      	beq.n	800140a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	e1ba      	b.n	8001780 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800140a:	4b3d      	ldr	r3, [pc, #244]	; (8001500 <HAL_RCC_OscConfig+0x26c>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	695b      	ldr	r3, [r3, #20]
 8001416:	00db      	lsls	r3, r3, #3
 8001418:	4939      	ldr	r1, [pc, #228]	; (8001500 <HAL_RCC_OscConfig+0x26c>)
 800141a:	4313      	orrs	r3, r2
 800141c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800141e:	e03a      	b.n	8001496 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	691b      	ldr	r3, [r3, #16]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d020      	beq.n	800146a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001428:	4b36      	ldr	r3, [pc, #216]	; (8001504 <HAL_RCC_OscConfig+0x270>)
 800142a:	2201      	movs	r2, #1
 800142c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800142e:	f7ff fc63 	bl	8000cf8 <HAL_GetTick>
 8001432:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001434:	e008      	b.n	8001448 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001436:	f7ff fc5f 	bl	8000cf8 <HAL_GetTick>
 800143a:	4602      	mov	r2, r0
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	2b02      	cmp	r3, #2
 8001442:	d901      	bls.n	8001448 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001444:	2303      	movs	r3, #3
 8001446:	e19b      	b.n	8001780 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001448:	4b2d      	ldr	r3, [pc, #180]	; (8001500 <HAL_RCC_OscConfig+0x26c>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f003 0302 	and.w	r3, r3, #2
 8001450:	2b00      	cmp	r3, #0
 8001452:	d0f0      	beq.n	8001436 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001454:	4b2a      	ldr	r3, [pc, #168]	; (8001500 <HAL_RCC_OscConfig+0x26c>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	695b      	ldr	r3, [r3, #20]
 8001460:	00db      	lsls	r3, r3, #3
 8001462:	4927      	ldr	r1, [pc, #156]	; (8001500 <HAL_RCC_OscConfig+0x26c>)
 8001464:	4313      	orrs	r3, r2
 8001466:	600b      	str	r3, [r1, #0]
 8001468:	e015      	b.n	8001496 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800146a:	4b26      	ldr	r3, [pc, #152]	; (8001504 <HAL_RCC_OscConfig+0x270>)
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001470:	f7ff fc42 	bl	8000cf8 <HAL_GetTick>
 8001474:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001476:	e008      	b.n	800148a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001478:	f7ff fc3e 	bl	8000cf8 <HAL_GetTick>
 800147c:	4602      	mov	r2, r0
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	2b02      	cmp	r3, #2
 8001484:	d901      	bls.n	800148a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001486:	2303      	movs	r3, #3
 8001488:	e17a      	b.n	8001780 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800148a:	4b1d      	ldr	r3, [pc, #116]	; (8001500 <HAL_RCC_OscConfig+0x26c>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f003 0302 	and.w	r3, r3, #2
 8001492:	2b00      	cmp	r3, #0
 8001494:	d1f0      	bne.n	8001478 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f003 0308 	and.w	r3, r3, #8
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d03a      	beq.n	8001518 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	699b      	ldr	r3, [r3, #24]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d019      	beq.n	80014de <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014aa:	4b17      	ldr	r3, [pc, #92]	; (8001508 <HAL_RCC_OscConfig+0x274>)
 80014ac:	2201      	movs	r2, #1
 80014ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014b0:	f7ff fc22 	bl	8000cf8 <HAL_GetTick>
 80014b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014b6:	e008      	b.n	80014ca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014b8:	f7ff fc1e 	bl	8000cf8 <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d901      	bls.n	80014ca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80014c6:	2303      	movs	r3, #3
 80014c8:	e15a      	b.n	8001780 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014ca:	4b0d      	ldr	r3, [pc, #52]	; (8001500 <HAL_RCC_OscConfig+0x26c>)
 80014cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ce:	f003 0302 	and.w	r3, r3, #2
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d0f0      	beq.n	80014b8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80014d6:	2001      	movs	r0, #1
 80014d8:	f000 fada 	bl	8001a90 <RCC_Delay>
 80014dc:	e01c      	b.n	8001518 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014de:	4b0a      	ldr	r3, [pc, #40]	; (8001508 <HAL_RCC_OscConfig+0x274>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014e4:	f7ff fc08 	bl	8000cf8 <HAL_GetTick>
 80014e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014ea:	e00f      	b.n	800150c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014ec:	f7ff fc04 	bl	8000cf8 <HAL_GetTick>
 80014f0:	4602      	mov	r2, r0
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	d908      	bls.n	800150c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80014fa:	2303      	movs	r3, #3
 80014fc:	e140      	b.n	8001780 <HAL_RCC_OscConfig+0x4ec>
 80014fe:	bf00      	nop
 8001500:	40021000 	.word	0x40021000
 8001504:	42420000 	.word	0x42420000
 8001508:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800150c:	4b9e      	ldr	r3, [pc, #632]	; (8001788 <HAL_RCC_OscConfig+0x4f4>)
 800150e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001510:	f003 0302 	and.w	r3, r3, #2
 8001514:	2b00      	cmp	r3, #0
 8001516:	d1e9      	bne.n	80014ec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 0304 	and.w	r3, r3, #4
 8001520:	2b00      	cmp	r3, #0
 8001522:	f000 80a6 	beq.w	8001672 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001526:	2300      	movs	r3, #0
 8001528:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800152a:	4b97      	ldr	r3, [pc, #604]	; (8001788 <HAL_RCC_OscConfig+0x4f4>)
 800152c:	69db      	ldr	r3, [r3, #28]
 800152e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001532:	2b00      	cmp	r3, #0
 8001534:	d10d      	bne.n	8001552 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001536:	4b94      	ldr	r3, [pc, #592]	; (8001788 <HAL_RCC_OscConfig+0x4f4>)
 8001538:	69db      	ldr	r3, [r3, #28]
 800153a:	4a93      	ldr	r2, [pc, #588]	; (8001788 <HAL_RCC_OscConfig+0x4f4>)
 800153c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001540:	61d3      	str	r3, [r2, #28]
 8001542:	4b91      	ldr	r3, [pc, #580]	; (8001788 <HAL_RCC_OscConfig+0x4f4>)
 8001544:	69db      	ldr	r3, [r3, #28]
 8001546:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800154a:	60bb      	str	r3, [r7, #8]
 800154c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800154e:	2301      	movs	r3, #1
 8001550:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001552:	4b8e      	ldr	r3, [pc, #568]	; (800178c <HAL_RCC_OscConfig+0x4f8>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800155a:	2b00      	cmp	r3, #0
 800155c:	d118      	bne.n	8001590 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800155e:	4b8b      	ldr	r3, [pc, #556]	; (800178c <HAL_RCC_OscConfig+0x4f8>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a8a      	ldr	r2, [pc, #552]	; (800178c <HAL_RCC_OscConfig+0x4f8>)
 8001564:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001568:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800156a:	f7ff fbc5 	bl	8000cf8 <HAL_GetTick>
 800156e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001570:	e008      	b.n	8001584 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001572:	f7ff fbc1 	bl	8000cf8 <HAL_GetTick>
 8001576:	4602      	mov	r2, r0
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	1ad3      	subs	r3, r2, r3
 800157c:	2b64      	cmp	r3, #100	; 0x64
 800157e:	d901      	bls.n	8001584 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001580:	2303      	movs	r3, #3
 8001582:	e0fd      	b.n	8001780 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001584:	4b81      	ldr	r3, [pc, #516]	; (800178c <HAL_RCC_OscConfig+0x4f8>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800158c:	2b00      	cmp	r3, #0
 800158e:	d0f0      	beq.n	8001572 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	2b01      	cmp	r3, #1
 8001596:	d106      	bne.n	80015a6 <HAL_RCC_OscConfig+0x312>
 8001598:	4b7b      	ldr	r3, [pc, #492]	; (8001788 <HAL_RCC_OscConfig+0x4f4>)
 800159a:	6a1b      	ldr	r3, [r3, #32]
 800159c:	4a7a      	ldr	r2, [pc, #488]	; (8001788 <HAL_RCC_OscConfig+0x4f4>)
 800159e:	f043 0301 	orr.w	r3, r3, #1
 80015a2:	6213      	str	r3, [r2, #32]
 80015a4:	e02d      	b.n	8001602 <HAL_RCC_OscConfig+0x36e>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	68db      	ldr	r3, [r3, #12]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d10c      	bne.n	80015c8 <HAL_RCC_OscConfig+0x334>
 80015ae:	4b76      	ldr	r3, [pc, #472]	; (8001788 <HAL_RCC_OscConfig+0x4f4>)
 80015b0:	6a1b      	ldr	r3, [r3, #32]
 80015b2:	4a75      	ldr	r2, [pc, #468]	; (8001788 <HAL_RCC_OscConfig+0x4f4>)
 80015b4:	f023 0301 	bic.w	r3, r3, #1
 80015b8:	6213      	str	r3, [r2, #32]
 80015ba:	4b73      	ldr	r3, [pc, #460]	; (8001788 <HAL_RCC_OscConfig+0x4f4>)
 80015bc:	6a1b      	ldr	r3, [r3, #32]
 80015be:	4a72      	ldr	r2, [pc, #456]	; (8001788 <HAL_RCC_OscConfig+0x4f4>)
 80015c0:	f023 0304 	bic.w	r3, r3, #4
 80015c4:	6213      	str	r3, [r2, #32]
 80015c6:	e01c      	b.n	8001602 <HAL_RCC_OscConfig+0x36e>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	2b05      	cmp	r3, #5
 80015ce:	d10c      	bne.n	80015ea <HAL_RCC_OscConfig+0x356>
 80015d0:	4b6d      	ldr	r3, [pc, #436]	; (8001788 <HAL_RCC_OscConfig+0x4f4>)
 80015d2:	6a1b      	ldr	r3, [r3, #32]
 80015d4:	4a6c      	ldr	r2, [pc, #432]	; (8001788 <HAL_RCC_OscConfig+0x4f4>)
 80015d6:	f043 0304 	orr.w	r3, r3, #4
 80015da:	6213      	str	r3, [r2, #32]
 80015dc:	4b6a      	ldr	r3, [pc, #424]	; (8001788 <HAL_RCC_OscConfig+0x4f4>)
 80015de:	6a1b      	ldr	r3, [r3, #32]
 80015e0:	4a69      	ldr	r2, [pc, #420]	; (8001788 <HAL_RCC_OscConfig+0x4f4>)
 80015e2:	f043 0301 	orr.w	r3, r3, #1
 80015e6:	6213      	str	r3, [r2, #32]
 80015e8:	e00b      	b.n	8001602 <HAL_RCC_OscConfig+0x36e>
 80015ea:	4b67      	ldr	r3, [pc, #412]	; (8001788 <HAL_RCC_OscConfig+0x4f4>)
 80015ec:	6a1b      	ldr	r3, [r3, #32]
 80015ee:	4a66      	ldr	r2, [pc, #408]	; (8001788 <HAL_RCC_OscConfig+0x4f4>)
 80015f0:	f023 0301 	bic.w	r3, r3, #1
 80015f4:	6213      	str	r3, [r2, #32]
 80015f6:	4b64      	ldr	r3, [pc, #400]	; (8001788 <HAL_RCC_OscConfig+0x4f4>)
 80015f8:	6a1b      	ldr	r3, [r3, #32]
 80015fa:	4a63      	ldr	r2, [pc, #396]	; (8001788 <HAL_RCC_OscConfig+0x4f4>)
 80015fc:	f023 0304 	bic.w	r3, r3, #4
 8001600:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	68db      	ldr	r3, [r3, #12]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d015      	beq.n	8001636 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800160a:	f7ff fb75 	bl	8000cf8 <HAL_GetTick>
 800160e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001610:	e00a      	b.n	8001628 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001612:	f7ff fb71 	bl	8000cf8 <HAL_GetTick>
 8001616:	4602      	mov	r2, r0
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001620:	4293      	cmp	r3, r2
 8001622:	d901      	bls.n	8001628 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001624:	2303      	movs	r3, #3
 8001626:	e0ab      	b.n	8001780 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001628:	4b57      	ldr	r3, [pc, #348]	; (8001788 <HAL_RCC_OscConfig+0x4f4>)
 800162a:	6a1b      	ldr	r3, [r3, #32]
 800162c:	f003 0302 	and.w	r3, r3, #2
 8001630:	2b00      	cmp	r3, #0
 8001632:	d0ee      	beq.n	8001612 <HAL_RCC_OscConfig+0x37e>
 8001634:	e014      	b.n	8001660 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001636:	f7ff fb5f 	bl	8000cf8 <HAL_GetTick>
 800163a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800163c:	e00a      	b.n	8001654 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800163e:	f7ff fb5b 	bl	8000cf8 <HAL_GetTick>
 8001642:	4602      	mov	r2, r0
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	1ad3      	subs	r3, r2, r3
 8001648:	f241 3288 	movw	r2, #5000	; 0x1388
 800164c:	4293      	cmp	r3, r2
 800164e:	d901      	bls.n	8001654 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001650:	2303      	movs	r3, #3
 8001652:	e095      	b.n	8001780 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001654:	4b4c      	ldr	r3, [pc, #304]	; (8001788 <HAL_RCC_OscConfig+0x4f4>)
 8001656:	6a1b      	ldr	r3, [r3, #32]
 8001658:	f003 0302 	and.w	r3, r3, #2
 800165c:	2b00      	cmp	r3, #0
 800165e:	d1ee      	bne.n	800163e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001660:	7dfb      	ldrb	r3, [r7, #23]
 8001662:	2b01      	cmp	r3, #1
 8001664:	d105      	bne.n	8001672 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001666:	4b48      	ldr	r3, [pc, #288]	; (8001788 <HAL_RCC_OscConfig+0x4f4>)
 8001668:	69db      	ldr	r3, [r3, #28]
 800166a:	4a47      	ldr	r2, [pc, #284]	; (8001788 <HAL_RCC_OscConfig+0x4f4>)
 800166c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001670:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	69db      	ldr	r3, [r3, #28]
 8001676:	2b00      	cmp	r3, #0
 8001678:	f000 8081 	beq.w	800177e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800167c:	4b42      	ldr	r3, [pc, #264]	; (8001788 <HAL_RCC_OscConfig+0x4f4>)
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f003 030c 	and.w	r3, r3, #12
 8001684:	2b08      	cmp	r3, #8
 8001686:	d061      	beq.n	800174c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	69db      	ldr	r3, [r3, #28]
 800168c:	2b02      	cmp	r3, #2
 800168e:	d146      	bne.n	800171e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001690:	4b3f      	ldr	r3, [pc, #252]	; (8001790 <HAL_RCC_OscConfig+0x4fc>)
 8001692:	2200      	movs	r2, #0
 8001694:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001696:	f7ff fb2f 	bl	8000cf8 <HAL_GetTick>
 800169a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800169c:	e008      	b.n	80016b0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800169e:	f7ff fb2b 	bl	8000cf8 <HAL_GetTick>
 80016a2:	4602      	mov	r2, r0
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d901      	bls.n	80016b0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80016ac:	2303      	movs	r3, #3
 80016ae:	e067      	b.n	8001780 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016b0:	4b35      	ldr	r3, [pc, #212]	; (8001788 <HAL_RCC_OscConfig+0x4f4>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d1f0      	bne.n	800169e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6a1b      	ldr	r3, [r3, #32]
 80016c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016c4:	d108      	bne.n	80016d8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80016c6:	4b30      	ldr	r3, [pc, #192]	; (8001788 <HAL_RCC_OscConfig+0x4f4>)
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	492d      	ldr	r1, [pc, #180]	; (8001788 <HAL_RCC_OscConfig+0x4f4>)
 80016d4:	4313      	orrs	r3, r2
 80016d6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016d8:	4b2b      	ldr	r3, [pc, #172]	; (8001788 <HAL_RCC_OscConfig+0x4f4>)
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6a19      	ldr	r1, [r3, #32]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e8:	430b      	orrs	r3, r1
 80016ea:	4927      	ldr	r1, [pc, #156]	; (8001788 <HAL_RCC_OscConfig+0x4f4>)
 80016ec:	4313      	orrs	r3, r2
 80016ee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016f0:	4b27      	ldr	r3, [pc, #156]	; (8001790 <HAL_RCC_OscConfig+0x4fc>)
 80016f2:	2201      	movs	r2, #1
 80016f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f6:	f7ff faff 	bl	8000cf8 <HAL_GetTick>
 80016fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016fc:	e008      	b.n	8001710 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016fe:	f7ff fafb 	bl	8000cf8 <HAL_GetTick>
 8001702:	4602      	mov	r2, r0
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	1ad3      	subs	r3, r2, r3
 8001708:	2b02      	cmp	r3, #2
 800170a:	d901      	bls.n	8001710 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800170c:	2303      	movs	r3, #3
 800170e:	e037      	b.n	8001780 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001710:	4b1d      	ldr	r3, [pc, #116]	; (8001788 <HAL_RCC_OscConfig+0x4f4>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001718:	2b00      	cmp	r3, #0
 800171a:	d0f0      	beq.n	80016fe <HAL_RCC_OscConfig+0x46a>
 800171c:	e02f      	b.n	800177e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800171e:	4b1c      	ldr	r3, [pc, #112]	; (8001790 <HAL_RCC_OscConfig+0x4fc>)
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001724:	f7ff fae8 	bl	8000cf8 <HAL_GetTick>
 8001728:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800172a:	e008      	b.n	800173e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800172c:	f7ff fae4 	bl	8000cf8 <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	2b02      	cmp	r3, #2
 8001738:	d901      	bls.n	800173e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e020      	b.n	8001780 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800173e:	4b12      	ldr	r3, [pc, #72]	; (8001788 <HAL_RCC_OscConfig+0x4f4>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d1f0      	bne.n	800172c <HAL_RCC_OscConfig+0x498>
 800174a:	e018      	b.n	800177e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	69db      	ldr	r3, [r3, #28]
 8001750:	2b01      	cmp	r3, #1
 8001752:	d101      	bne.n	8001758 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	e013      	b.n	8001780 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001758:	4b0b      	ldr	r3, [pc, #44]	; (8001788 <HAL_RCC_OscConfig+0x4f4>)
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6a1b      	ldr	r3, [r3, #32]
 8001768:	429a      	cmp	r2, r3
 800176a:	d106      	bne.n	800177a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001776:	429a      	cmp	r2, r3
 8001778:	d001      	beq.n	800177e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e000      	b.n	8001780 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800177e:	2300      	movs	r3, #0
}
 8001780:	4618      	mov	r0, r3
 8001782:	3718      	adds	r7, #24
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	40021000 	.word	0x40021000
 800178c:	40007000 	.word	0x40007000
 8001790:	42420060 	.word	0x42420060

08001794 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d101      	bne.n	80017a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e0d0      	b.n	800194a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017a8:	4b6a      	ldr	r3, [pc, #424]	; (8001954 <HAL_RCC_ClockConfig+0x1c0>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 0307 	and.w	r3, r3, #7
 80017b0:	683a      	ldr	r2, [r7, #0]
 80017b2:	429a      	cmp	r2, r3
 80017b4:	d910      	bls.n	80017d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017b6:	4b67      	ldr	r3, [pc, #412]	; (8001954 <HAL_RCC_ClockConfig+0x1c0>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f023 0207 	bic.w	r2, r3, #7
 80017be:	4965      	ldr	r1, [pc, #404]	; (8001954 <HAL_RCC_ClockConfig+0x1c0>)
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017c6:	4b63      	ldr	r3, [pc, #396]	; (8001954 <HAL_RCC_ClockConfig+0x1c0>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0307 	and.w	r3, r3, #7
 80017ce:	683a      	ldr	r2, [r7, #0]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d001      	beq.n	80017d8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80017d4:	2301      	movs	r3, #1
 80017d6:	e0b8      	b.n	800194a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 0302 	and.w	r3, r3, #2
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d020      	beq.n	8001826 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 0304 	and.w	r3, r3, #4
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d005      	beq.n	80017fc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017f0:	4b59      	ldr	r3, [pc, #356]	; (8001958 <HAL_RCC_ClockConfig+0x1c4>)
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	4a58      	ldr	r2, [pc, #352]	; (8001958 <HAL_RCC_ClockConfig+0x1c4>)
 80017f6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80017fa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f003 0308 	and.w	r3, r3, #8
 8001804:	2b00      	cmp	r3, #0
 8001806:	d005      	beq.n	8001814 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001808:	4b53      	ldr	r3, [pc, #332]	; (8001958 <HAL_RCC_ClockConfig+0x1c4>)
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	4a52      	ldr	r2, [pc, #328]	; (8001958 <HAL_RCC_ClockConfig+0x1c4>)
 800180e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001812:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001814:	4b50      	ldr	r3, [pc, #320]	; (8001958 <HAL_RCC_ClockConfig+0x1c4>)
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	494d      	ldr	r1, [pc, #308]	; (8001958 <HAL_RCC_ClockConfig+0x1c4>)
 8001822:	4313      	orrs	r3, r2
 8001824:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 0301 	and.w	r3, r3, #1
 800182e:	2b00      	cmp	r3, #0
 8001830:	d040      	beq.n	80018b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	2b01      	cmp	r3, #1
 8001838:	d107      	bne.n	800184a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800183a:	4b47      	ldr	r3, [pc, #284]	; (8001958 <HAL_RCC_ClockConfig+0x1c4>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d115      	bne.n	8001872 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e07f      	b.n	800194a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	2b02      	cmp	r3, #2
 8001850:	d107      	bne.n	8001862 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001852:	4b41      	ldr	r3, [pc, #260]	; (8001958 <HAL_RCC_ClockConfig+0x1c4>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d109      	bne.n	8001872 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e073      	b.n	800194a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001862:	4b3d      	ldr	r3, [pc, #244]	; (8001958 <HAL_RCC_ClockConfig+0x1c4>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 0302 	and.w	r3, r3, #2
 800186a:	2b00      	cmp	r3, #0
 800186c:	d101      	bne.n	8001872 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e06b      	b.n	800194a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001872:	4b39      	ldr	r3, [pc, #228]	; (8001958 <HAL_RCC_ClockConfig+0x1c4>)
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	f023 0203 	bic.w	r2, r3, #3
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	4936      	ldr	r1, [pc, #216]	; (8001958 <HAL_RCC_ClockConfig+0x1c4>)
 8001880:	4313      	orrs	r3, r2
 8001882:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001884:	f7ff fa38 	bl	8000cf8 <HAL_GetTick>
 8001888:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800188a:	e00a      	b.n	80018a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800188c:	f7ff fa34 	bl	8000cf8 <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	f241 3288 	movw	r2, #5000	; 0x1388
 800189a:	4293      	cmp	r3, r2
 800189c:	d901      	bls.n	80018a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800189e:	2303      	movs	r3, #3
 80018a0:	e053      	b.n	800194a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018a2:	4b2d      	ldr	r3, [pc, #180]	; (8001958 <HAL_RCC_ClockConfig+0x1c4>)
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f003 020c 	and.w	r2, r3, #12
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d1eb      	bne.n	800188c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80018b4:	4b27      	ldr	r3, [pc, #156]	; (8001954 <HAL_RCC_ClockConfig+0x1c0>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 0307 	and.w	r3, r3, #7
 80018bc:	683a      	ldr	r2, [r7, #0]
 80018be:	429a      	cmp	r2, r3
 80018c0:	d210      	bcs.n	80018e4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018c2:	4b24      	ldr	r3, [pc, #144]	; (8001954 <HAL_RCC_ClockConfig+0x1c0>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f023 0207 	bic.w	r2, r3, #7
 80018ca:	4922      	ldr	r1, [pc, #136]	; (8001954 <HAL_RCC_ClockConfig+0x1c0>)
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	4313      	orrs	r3, r2
 80018d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018d2:	4b20      	ldr	r3, [pc, #128]	; (8001954 <HAL_RCC_ClockConfig+0x1c0>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0307 	and.w	r3, r3, #7
 80018da:	683a      	ldr	r2, [r7, #0]
 80018dc:	429a      	cmp	r2, r3
 80018de:	d001      	beq.n	80018e4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	e032      	b.n	800194a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 0304 	and.w	r3, r3, #4
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d008      	beq.n	8001902 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018f0:	4b19      	ldr	r3, [pc, #100]	; (8001958 <HAL_RCC_ClockConfig+0x1c4>)
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	4916      	ldr	r1, [pc, #88]	; (8001958 <HAL_RCC_ClockConfig+0x1c4>)
 80018fe:	4313      	orrs	r3, r2
 8001900:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 0308 	and.w	r3, r3, #8
 800190a:	2b00      	cmp	r3, #0
 800190c:	d009      	beq.n	8001922 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800190e:	4b12      	ldr	r3, [pc, #72]	; (8001958 <HAL_RCC_ClockConfig+0x1c4>)
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	691b      	ldr	r3, [r3, #16]
 800191a:	00db      	lsls	r3, r3, #3
 800191c:	490e      	ldr	r1, [pc, #56]	; (8001958 <HAL_RCC_ClockConfig+0x1c4>)
 800191e:	4313      	orrs	r3, r2
 8001920:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001922:	f000 f821 	bl	8001968 <HAL_RCC_GetSysClockFreq>
 8001926:	4601      	mov	r1, r0
 8001928:	4b0b      	ldr	r3, [pc, #44]	; (8001958 <HAL_RCC_ClockConfig+0x1c4>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	091b      	lsrs	r3, r3, #4
 800192e:	f003 030f 	and.w	r3, r3, #15
 8001932:	4a0a      	ldr	r2, [pc, #40]	; (800195c <HAL_RCC_ClockConfig+0x1c8>)
 8001934:	5cd3      	ldrb	r3, [r2, r3]
 8001936:	fa21 f303 	lsr.w	r3, r1, r3
 800193a:	4a09      	ldr	r2, [pc, #36]	; (8001960 <HAL_RCC_ClockConfig+0x1cc>)
 800193c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800193e:	4b09      	ldr	r3, [pc, #36]	; (8001964 <HAL_RCC_ClockConfig+0x1d0>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4618      	mov	r0, r3
 8001944:	f7ff f996 	bl	8000c74 <HAL_InitTick>

  return HAL_OK;
 8001948:	2300      	movs	r3, #0
}
 800194a:	4618      	mov	r0, r3
 800194c:	3710      	adds	r7, #16
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	40022000 	.word	0x40022000
 8001958:	40021000 	.word	0x40021000
 800195c:	080037dc 	.word	0x080037dc
 8001960:	20000070 	.word	0x20000070
 8001964:	20000074 	.word	0x20000074

08001968 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001968:	b490      	push	{r4, r7}
 800196a:	b08a      	sub	sp, #40	; 0x28
 800196c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800196e:	4b2a      	ldr	r3, [pc, #168]	; (8001a18 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001970:	1d3c      	adds	r4, r7, #4
 8001972:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001974:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001978:	4b28      	ldr	r3, [pc, #160]	; (8001a1c <HAL_RCC_GetSysClockFreq+0xb4>)
 800197a:	881b      	ldrh	r3, [r3, #0]
 800197c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800197e:	2300      	movs	r3, #0
 8001980:	61fb      	str	r3, [r7, #28]
 8001982:	2300      	movs	r3, #0
 8001984:	61bb      	str	r3, [r7, #24]
 8001986:	2300      	movs	r3, #0
 8001988:	627b      	str	r3, [r7, #36]	; 0x24
 800198a:	2300      	movs	r3, #0
 800198c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800198e:	2300      	movs	r3, #0
 8001990:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001992:	4b23      	ldr	r3, [pc, #140]	; (8001a20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	f003 030c 	and.w	r3, r3, #12
 800199e:	2b04      	cmp	r3, #4
 80019a0:	d002      	beq.n	80019a8 <HAL_RCC_GetSysClockFreq+0x40>
 80019a2:	2b08      	cmp	r3, #8
 80019a4:	d003      	beq.n	80019ae <HAL_RCC_GetSysClockFreq+0x46>
 80019a6:	e02d      	b.n	8001a04 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80019a8:	4b1e      	ldr	r3, [pc, #120]	; (8001a24 <HAL_RCC_GetSysClockFreq+0xbc>)
 80019aa:	623b      	str	r3, [r7, #32]
      break;
 80019ac:	e02d      	b.n	8001a0a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	0c9b      	lsrs	r3, r3, #18
 80019b2:	f003 030f 	and.w	r3, r3, #15
 80019b6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80019ba:	4413      	add	r3, r2
 80019bc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80019c0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d013      	beq.n	80019f4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80019cc:	4b14      	ldr	r3, [pc, #80]	; (8001a20 <HAL_RCC_GetSysClockFreq+0xb8>)
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	0c5b      	lsrs	r3, r3, #17
 80019d2:	f003 0301 	and.w	r3, r3, #1
 80019d6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80019da:	4413      	add	r3, r2
 80019dc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80019e0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	4a0f      	ldr	r2, [pc, #60]	; (8001a24 <HAL_RCC_GetSysClockFreq+0xbc>)
 80019e6:	fb02 f203 	mul.w	r2, r2, r3
 80019ea:	69bb      	ldr	r3, [r7, #24]
 80019ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80019f0:	627b      	str	r3, [r7, #36]	; 0x24
 80019f2:	e004      	b.n	80019fe <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	4a0c      	ldr	r2, [pc, #48]	; (8001a28 <HAL_RCC_GetSysClockFreq+0xc0>)
 80019f8:	fb02 f303 	mul.w	r3, r2, r3
 80019fc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80019fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a00:	623b      	str	r3, [r7, #32]
      break;
 8001a02:	e002      	b.n	8001a0a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a04:	4b07      	ldr	r3, [pc, #28]	; (8001a24 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001a06:	623b      	str	r3, [r7, #32]
      break;
 8001a08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a0a:	6a3b      	ldr	r3, [r7, #32]
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3728      	adds	r7, #40	; 0x28
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bc90      	pop	{r4, r7}
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	080031f8 	.word	0x080031f8
 8001a1c:	08003208 	.word	0x08003208
 8001a20:	40021000 	.word	0x40021000
 8001a24:	007a1200 	.word	0x007a1200
 8001a28:	003d0900 	.word	0x003d0900

08001a2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a30:	4b02      	ldr	r3, [pc, #8]	; (8001a3c <HAL_RCC_GetHCLKFreq+0x10>)
 8001a32:	681b      	ldr	r3, [r3, #0]
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bc80      	pop	{r7}
 8001a3a:	4770      	bx	lr
 8001a3c:	20000070 	.word	0x20000070

08001a40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a44:	f7ff fff2 	bl	8001a2c <HAL_RCC_GetHCLKFreq>
 8001a48:	4601      	mov	r1, r0
 8001a4a:	4b05      	ldr	r3, [pc, #20]	; (8001a60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	0a1b      	lsrs	r3, r3, #8
 8001a50:	f003 0307 	and.w	r3, r3, #7
 8001a54:	4a03      	ldr	r2, [pc, #12]	; (8001a64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a56:	5cd3      	ldrb	r3, [r2, r3]
 8001a58:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	40021000 	.word	0x40021000
 8001a64:	080037ec 	.word	0x080037ec

08001a68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a6c:	f7ff ffde 	bl	8001a2c <HAL_RCC_GetHCLKFreq>
 8001a70:	4601      	mov	r1, r0
 8001a72:	4b05      	ldr	r3, [pc, #20]	; (8001a88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	0adb      	lsrs	r3, r3, #11
 8001a78:	f003 0307 	and.w	r3, r3, #7
 8001a7c:	4a03      	ldr	r2, [pc, #12]	; (8001a8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a7e:	5cd3      	ldrb	r3, [r2, r3]
 8001a80:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	40021000 	.word	0x40021000
 8001a8c:	080037ec 	.word	0x080037ec

08001a90 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b085      	sub	sp, #20
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001a98:	4b0a      	ldr	r3, [pc, #40]	; (8001ac4 <RCC_Delay+0x34>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a0a      	ldr	r2, [pc, #40]	; (8001ac8 <RCC_Delay+0x38>)
 8001a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001aa2:	0a5b      	lsrs	r3, r3, #9
 8001aa4:	687a      	ldr	r2, [r7, #4]
 8001aa6:	fb02 f303 	mul.w	r3, r2, r3
 8001aaa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001aac:	bf00      	nop
  }
  while (Delay --);
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	1e5a      	subs	r2, r3, #1
 8001ab2:	60fa      	str	r2, [r7, #12]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d1f9      	bne.n	8001aac <RCC_Delay+0x1c>
}
 8001ab8:	bf00      	nop
 8001aba:	3714      	adds	r7, #20
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bc80      	pop	{r7}
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	20000070 	.word	0x20000070
 8001ac8:	10624dd3 	.word	0x10624dd3

08001acc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d101      	bne.n	8001ade <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e076      	b.n	8001bcc <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d108      	bne.n	8001af8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001aee:	d009      	beq.n	8001b04 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2200      	movs	r2, #0
 8001af4:	61da      	str	r2, [r3, #28]
 8001af6:	e005      	b.n	8001b04 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2200      	movs	r2, #0
 8001afc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2200      	movs	r2, #0
 8001b02:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2200      	movs	r2, #0
 8001b08:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d106      	bne.n	8001b24 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f7fe fe80 	bl	8000824 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2202      	movs	r2, #2
 8001b28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b3a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001b4c:	431a      	orrs	r2, r3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	68db      	ldr	r3, [r3, #12]
 8001b52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b56:	431a      	orrs	r2, r3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	691b      	ldr	r3, [r3, #16]
 8001b5c:	f003 0302 	and.w	r3, r3, #2
 8001b60:	431a      	orrs	r2, r3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	695b      	ldr	r3, [r3, #20]
 8001b66:	f003 0301 	and.w	r3, r3, #1
 8001b6a:	431a      	orrs	r2, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	699b      	ldr	r3, [r3, #24]
 8001b70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b74:	431a      	orrs	r2, r3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	69db      	ldr	r3, [r3, #28]
 8001b7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001b7e:	431a      	orrs	r2, r3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6a1b      	ldr	r3, [r3, #32]
 8001b84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b88:	ea42 0103 	orr.w	r1, r2, r3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b90:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	430a      	orrs	r2, r1
 8001b9a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	699b      	ldr	r3, [r3, #24]
 8001ba0:	0c1a      	lsrs	r2, r3, #16
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f002 0204 	and.w	r2, r2, #4
 8001baa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	69da      	ldr	r2, [r3, #28]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001bba:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001bca:	2300      	movs	r3, #0
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3708      	adds	r7, #8
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}

08001bd4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b088      	sub	sp, #32
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	60f8      	str	r0, [r7, #12]
 8001bdc:	60b9      	str	r1, [r7, #8]
 8001bde:	603b      	str	r3, [r7, #0]
 8001be0:	4613      	mov	r3, r2
 8001be2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001be4:	2300      	movs	r3, #0
 8001be6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d101      	bne.n	8001bf6 <HAL_SPI_Transmit+0x22>
 8001bf2:	2302      	movs	r3, #2
 8001bf4:	e126      	b.n	8001e44 <HAL_SPI_Transmit+0x270>
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001bfe:	f7ff f87b 	bl	8000cf8 <HAL_GetTick>
 8001c02:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001c04:	88fb      	ldrh	r3, [r7, #6]
 8001c06:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d002      	beq.n	8001c1a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001c14:	2302      	movs	r3, #2
 8001c16:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001c18:	e10b      	b.n	8001e32 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d002      	beq.n	8001c26 <HAL_SPI_Transmit+0x52>
 8001c20:	88fb      	ldrh	r3, [r7, #6]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d102      	bne.n	8001c2c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001c2a:	e102      	b.n	8001e32 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2203      	movs	r2, #3
 8001c30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2200      	movs	r2, #0
 8001c38:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	68ba      	ldr	r2, [r7, #8]
 8001c3e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	88fa      	ldrh	r2, [r7, #6]
 8001c44:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	88fa      	ldrh	r2, [r7, #6]
 8001c4a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	2200      	movs	r2, #0
 8001c56:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	2200      	movs	r2, #0
 8001c62:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	2200      	movs	r2, #0
 8001c68:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c72:	d10f      	bne.n	8001c94 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c82:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001c92:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c9e:	2b40      	cmp	r3, #64	; 0x40
 8001ca0:	d007      	beq.n	8001cb2 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001cb0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	68db      	ldr	r3, [r3, #12]
 8001cb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001cba:	d14b      	bne.n	8001d54 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d002      	beq.n	8001cca <HAL_SPI_Transmit+0xf6>
 8001cc4:	8afb      	ldrh	r3, [r7, #22]
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d13e      	bne.n	8001d48 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cce:	881a      	ldrh	r2, [r3, #0]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cda:	1c9a      	adds	r2, r3, #2
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ce4:	b29b      	uxth	r3, r3
 8001ce6:	3b01      	subs	r3, #1
 8001ce8:	b29a      	uxth	r2, r3
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001cee:	e02b      	b.n	8001d48 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	f003 0302 	and.w	r3, r3, #2
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d112      	bne.n	8001d24 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d02:	881a      	ldrh	r2, [r3, #0]
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0e:	1c9a      	adds	r2, r3, #2
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d18:	b29b      	uxth	r3, r3
 8001d1a:	3b01      	subs	r3, #1
 8001d1c:	b29a      	uxth	r2, r3
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	86da      	strh	r2, [r3, #54]	; 0x36
 8001d22:	e011      	b.n	8001d48 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001d24:	f7fe ffe8 	bl	8000cf8 <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	69bb      	ldr	r3, [r7, #24]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	683a      	ldr	r2, [r7, #0]
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d803      	bhi.n	8001d3c <HAL_SPI_Transmit+0x168>
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d3a:	d102      	bne.n	8001d42 <HAL_SPI_Transmit+0x16e>
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d102      	bne.n	8001d48 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8001d42:	2303      	movs	r3, #3
 8001d44:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001d46:	e074      	b.n	8001e32 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d4c:	b29b      	uxth	r3, r3
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d1ce      	bne.n	8001cf0 <HAL_SPI_Transmit+0x11c>
 8001d52:	e04c      	b.n	8001dee <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d002      	beq.n	8001d62 <HAL_SPI_Transmit+0x18e>
 8001d5c:	8afb      	ldrh	r3, [r7, #22]
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d140      	bne.n	8001de4 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	330c      	adds	r3, #12
 8001d6c:	7812      	ldrb	r2, [r2, #0]
 8001d6e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d74:	1c5a      	adds	r2, r3, #1
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d7e:	b29b      	uxth	r3, r3
 8001d80:	3b01      	subs	r3, #1
 8001d82:	b29a      	uxth	r2, r3
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001d88:	e02c      	b.n	8001de4 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	f003 0302 	and.w	r3, r3, #2
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d113      	bne.n	8001dc0 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	330c      	adds	r3, #12
 8001da2:	7812      	ldrb	r2, [r2, #0]
 8001da4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001daa:	1c5a      	adds	r2, r3, #1
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001db4:	b29b      	uxth	r3, r3
 8001db6:	3b01      	subs	r3, #1
 8001db8:	b29a      	uxth	r2, r3
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	86da      	strh	r2, [r3, #54]	; 0x36
 8001dbe:	e011      	b.n	8001de4 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001dc0:	f7fe ff9a 	bl	8000cf8 <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	69bb      	ldr	r3, [r7, #24]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	683a      	ldr	r2, [r7, #0]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d803      	bhi.n	8001dd8 <HAL_SPI_Transmit+0x204>
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dd6:	d102      	bne.n	8001dde <HAL_SPI_Transmit+0x20a>
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d102      	bne.n	8001de4 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8001dde:	2303      	movs	r3, #3
 8001de0:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001de2:	e026      	b.n	8001e32 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001de8:	b29b      	uxth	r3, r3
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d1cd      	bne.n	8001d8a <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001dee:	69ba      	ldr	r2, [r7, #24]
 8001df0:	6839      	ldr	r1, [r7, #0]
 8001df2:	68f8      	ldr	r0, [r7, #12]
 8001df4:	f000 f8b2 	bl	8001f5c <SPI_EndRxTxTransaction>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d002      	beq.n	8001e04 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	2220      	movs	r2, #32
 8001e02:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d10a      	bne.n	8001e22 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	613b      	str	r3, [r7, #16]
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	613b      	str	r3, [r7, #16]
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	613b      	str	r3, [r7, #16]
 8001e20:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d002      	beq.n	8001e30 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	77fb      	strb	r3, [r7, #31]
 8001e2e:	e000      	b.n	8001e32 <HAL_SPI_Transmit+0x25e>
  }

error:
 8001e30:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	2201      	movs	r2, #1
 8001e36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001e42:	7ffb      	ldrb	r3, [r7, #31]
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3720      	adds	r7, #32
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}

08001e4c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b088      	sub	sp, #32
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	60f8      	str	r0, [r7, #12]
 8001e54:	60b9      	str	r1, [r7, #8]
 8001e56:	603b      	str	r3, [r7, #0]
 8001e58:	4613      	mov	r3, r2
 8001e5a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001e5c:	f7fe ff4c 	bl	8000cf8 <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e64:	1a9b      	subs	r3, r3, r2
 8001e66:	683a      	ldr	r2, [r7, #0]
 8001e68:	4413      	add	r3, r2
 8001e6a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001e6c:	f7fe ff44 	bl	8000cf8 <HAL_GetTick>
 8001e70:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001e72:	4b39      	ldr	r3, [pc, #228]	; (8001f58 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	015b      	lsls	r3, r3, #5
 8001e78:	0d1b      	lsrs	r3, r3, #20
 8001e7a:	69fa      	ldr	r2, [r7, #28]
 8001e7c:	fb02 f303 	mul.w	r3, r2, r3
 8001e80:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001e82:	e054      	b.n	8001f2e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e8a:	d050      	beq.n	8001f2e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001e8c:	f7fe ff34 	bl	8000cf8 <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	69bb      	ldr	r3, [r7, #24]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	69fa      	ldr	r2, [r7, #28]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d902      	bls.n	8001ea2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d13d      	bne.n	8001f1e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	685a      	ldr	r2, [r3, #4]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001eb0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001eba:	d111      	bne.n	8001ee0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ec4:	d004      	beq.n	8001ed0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ece:	d107      	bne.n	8001ee0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ede:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ee8:	d10f      	bne.n	8001f0a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ef8:	601a      	str	r2, [r3, #0]
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f08:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2200      	movs	r2, #0
 8001f16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e017      	b.n	8001f4e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d101      	bne.n	8001f28 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8001f24:	2300      	movs	r3, #0
 8001f26:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	3b01      	subs	r3, #1
 8001f2c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	689a      	ldr	r2, [r3, #8]
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	4013      	ands	r3, r2
 8001f38:	68ba      	ldr	r2, [r7, #8]
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	bf0c      	ite	eq
 8001f3e:	2301      	moveq	r3, #1
 8001f40:	2300      	movne	r3, #0
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	461a      	mov	r2, r3
 8001f46:	79fb      	ldrb	r3, [r7, #7]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d19b      	bne.n	8001e84 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001f4c:	2300      	movs	r3, #0
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3720      	adds	r7, #32
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	20000070 	.word	0x20000070

08001f5c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b086      	sub	sp, #24
 8001f60:	af02      	add	r7, sp, #8
 8001f62:	60f8      	str	r0, [r7, #12]
 8001f64:	60b9      	str	r1, [r7, #8]
 8001f66:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	9300      	str	r3, [sp, #0]
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	2180      	movs	r1, #128	; 0x80
 8001f72:	68f8      	ldr	r0, [r7, #12]
 8001f74:	f7ff ff6a 	bl	8001e4c <SPI_WaitFlagStateUntilTimeout>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d007      	beq.n	8001f8e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f82:	f043 0220 	orr.w	r2, r3, #32
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	e000      	b.n	8001f90 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8001f8e:	2300      	movs	r3, #0
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3710      	adds	r7, #16
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d101      	bne.n	8001faa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e041      	b.n	800202e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d106      	bne.n	8001fc4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f7fe fd96 	bl	8000af0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2202      	movs	r2, #2
 8001fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	3304      	adds	r3, #4
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	4610      	mov	r0, r2
 8001fd8:	f000 fa64 	bl	80024a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2201      	movs	r2, #1
 8001fe0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2201      	movs	r2, #1
 8002000:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2201      	movs	r2, #1
 8002008:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2201      	movs	r2, #1
 8002010:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2201      	movs	r2, #1
 8002018:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2201      	movs	r2, #1
 8002020:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2201      	movs	r2, #1
 8002028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800202c:	2300      	movs	r3, #0
}
 800202e:	4618      	mov	r0, r3
 8002030:	3708      	adds	r7, #8
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
	...

08002038 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002038:	b480      	push	{r7}
 800203a:	b085      	sub	sp, #20
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002046:	b2db      	uxtb	r3, r3
 8002048:	2b01      	cmp	r3, #1
 800204a:	d001      	beq.n	8002050 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e03a      	b.n	80020c6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2202      	movs	r2, #2
 8002054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	68da      	ldr	r2, [r3, #12]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f042 0201 	orr.w	r2, r2, #1
 8002066:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a18      	ldr	r2, [pc, #96]	; (80020d0 <HAL_TIM_Base_Start_IT+0x98>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d00e      	beq.n	8002090 <HAL_TIM_Base_Start_IT+0x58>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800207a:	d009      	beq.n	8002090 <HAL_TIM_Base_Start_IT+0x58>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a14      	ldr	r2, [pc, #80]	; (80020d4 <HAL_TIM_Base_Start_IT+0x9c>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d004      	beq.n	8002090 <HAL_TIM_Base_Start_IT+0x58>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a13      	ldr	r2, [pc, #76]	; (80020d8 <HAL_TIM_Base_Start_IT+0xa0>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d111      	bne.n	80020b4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	f003 0307 	and.w	r3, r3, #7
 800209a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	2b06      	cmp	r3, #6
 80020a0:	d010      	beq.n	80020c4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f042 0201 	orr.w	r2, r2, #1
 80020b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020b2:	e007      	b.n	80020c4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f042 0201 	orr.w	r2, r2, #1
 80020c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80020c4:	2300      	movs	r3, #0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3714      	adds	r7, #20
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bc80      	pop	{r7}
 80020ce:	4770      	bx	lr
 80020d0:	40012c00 	.word	0x40012c00
 80020d4:	40000400 	.word	0x40000400
 80020d8:	40000800 	.word	0x40000800

080020dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	691b      	ldr	r3, [r3, #16]
 80020ea:	f003 0302 	and.w	r3, r3, #2
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d122      	bne.n	8002138 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	f003 0302 	and.w	r3, r3, #2
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	d11b      	bne.n	8002138 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f06f 0202 	mvn.w	r2, #2
 8002108:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2201      	movs	r2, #1
 800210e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	699b      	ldr	r3, [r3, #24]
 8002116:	f003 0303 	and.w	r3, r3, #3
 800211a:	2b00      	cmp	r3, #0
 800211c:	d003      	beq.n	8002126 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f000 f9a4 	bl	800246c <HAL_TIM_IC_CaptureCallback>
 8002124:	e005      	b.n	8002132 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f000 f997 	bl	800245a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f000 f9a6 	bl	800247e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2200      	movs	r2, #0
 8002136:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	691b      	ldr	r3, [r3, #16]
 800213e:	f003 0304 	and.w	r3, r3, #4
 8002142:	2b04      	cmp	r3, #4
 8002144:	d122      	bne.n	800218c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	f003 0304 	and.w	r3, r3, #4
 8002150:	2b04      	cmp	r3, #4
 8002152:	d11b      	bne.n	800218c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f06f 0204 	mvn.w	r2, #4
 800215c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2202      	movs	r2, #2
 8002162:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	699b      	ldr	r3, [r3, #24]
 800216a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800216e:	2b00      	cmp	r3, #0
 8002170:	d003      	beq.n	800217a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f000 f97a 	bl	800246c <HAL_TIM_IC_CaptureCallback>
 8002178:	e005      	b.n	8002186 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f000 f96d 	bl	800245a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f000 f97c 	bl	800247e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2200      	movs	r2, #0
 800218a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	691b      	ldr	r3, [r3, #16]
 8002192:	f003 0308 	and.w	r3, r3, #8
 8002196:	2b08      	cmp	r3, #8
 8002198:	d122      	bne.n	80021e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	f003 0308 	and.w	r3, r3, #8
 80021a4:	2b08      	cmp	r3, #8
 80021a6:	d11b      	bne.n	80021e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f06f 0208 	mvn.w	r2, #8
 80021b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2204      	movs	r2, #4
 80021b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	69db      	ldr	r3, [r3, #28]
 80021be:	f003 0303 	and.w	r3, r3, #3
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d003      	beq.n	80021ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f000 f950 	bl	800246c <HAL_TIM_IC_CaptureCallback>
 80021cc:	e005      	b.n	80021da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f000 f943 	bl	800245a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f000 f952 	bl	800247e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	691b      	ldr	r3, [r3, #16]
 80021e6:	f003 0310 	and.w	r3, r3, #16
 80021ea:	2b10      	cmp	r3, #16
 80021ec:	d122      	bne.n	8002234 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	f003 0310 	and.w	r3, r3, #16
 80021f8:	2b10      	cmp	r3, #16
 80021fa:	d11b      	bne.n	8002234 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f06f 0210 	mvn.w	r2, #16
 8002204:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2208      	movs	r2, #8
 800220a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	69db      	ldr	r3, [r3, #28]
 8002212:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002216:	2b00      	cmp	r3, #0
 8002218:	d003      	beq.n	8002222 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f000 f926 	bl	800246c <HAL_TIM_IC_CaptureCallback>
 8002220:	e005      	b.n	800222e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f000 f919 	bl	800245a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f000 f928 	bl	800247e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2200      	movs	r2, #0
 8002232:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	691b      	ldr	r3, [r3, #16]
 800223a:	f003 0301 	and.w	r3, r3, #1
 800223e:	2b01      	cmp	r3, #1
 8002240:	d10e      	bne.n	8002260 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	f003 0301 	and.w	r3, r3, #1
 800224c:	2b01      	cmp	r3, #1
 800224e:	d107      	bne.n	8002260 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f06f 0201 	mvn.w	r2, #1
 8002258:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f7fe fa5c 	bl	8000718 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	691b      	ldr	r3, [r3, #16]
 8002266:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800226a:	2b80      	cmp	r3, #128	; 0x80
 800226c:	d10e      	bne.n	800228c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002278:	2b80      	cmp	r3, #128	; 0x80
 800227a:	d107      	bne.n	800228c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002284:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f000 fa6b 	bl	8002762 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	691b      	ldr	r3, [r3, #16]
 8002292:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002296:	2b40      	cmp	r3, #64	; 0x40
 8002298:	d10e      	bne.n	80022b8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022a4:	2b40      	cmp	r3, #64	; 0x40
 80022a6:	d107      	bne.n	80022b8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80022b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f000 f8ec 	bl	8002490 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	691b      	ldr	r3, [r3, #16]
 80022be:	f003 0320 	and.w	r3, r3, #32
 80022c2:	2b20      	cmp	r3, #32
 80022c4:	d10e      	bne.n	80022e4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	f003 0320 	and.w	r3, r3, #32
 80022d0:	2b20      	cmp	r3, #32
 80022d2:	d107      	bne.n	80022e4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f06f 0220 	mvn.w	r2, #32
 80022dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f000 fa36 	bl	8002750 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80022e4:	bf00      	nop
 80022e6:	3708      	adds	r7, #8
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}

080022ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d101      	bne.n	8002304 <HAL_TIM_ConfigClockSource+0x18>
 8002300:	2302      	movs	r3, #2
 8002302:	e0a6      	b.n	8002452 <HAL_TIM_ConfigClockSource+0x166>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2201      	movs	r2, #1
 8002308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2202      	movs	r2, #2
 8002310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002322:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800232a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	68fa      	ldr	r2, [r7, #12]
 8002332:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2b40      	cmp	r3, #64	; 0x40
 800233a:	d067      	beq.n	800240c <HAL_TIM_ConfigClockSource+0x120>
 800233c:	2b40      	cmp	r3, #64	; 0x40
 800233e:	d80b      	bhi.n	8002358 <HAL_TIM_ConfigClockSource+0x6c>
 8002340:	2b10      	cmp	r3, #16
 8002342:	d073      	beq.n	800242c <HAL_TIM_ConfigClockSource+0x140>
 8002344:	2b10      	cmp	r3, #16
 8002346:	d802      	bhi.n	800234e <HAL_TIM_ConfigClockSource+0x62>
 8002348:	2b00      	cmp	r3, #0
 800234a:	d06f      	beq.n	800242c <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800234c:	e078      	b.n	8002440 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800234e:	2b20      	cmp	r3, #32
 8002350:	d06c      	beq.n	800242c <HAL_TIM_ConfigClockSource+0x140>
 8002352:	2b30      	cmp	r3, #48	; 0x30
 8002354:	d06a      	beq.n	800242c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002356:	e073      	b.n	8002440 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002358:	2b70      	cmp	r3, #112	; 0x70
 800235a:	d00d      	beq.n	8002378 <HAL_TIM_ConfigClockSource+0x8c>
 800235c:	2b70      	cmp	r3, #112	; 0x70
 800235e:	d804      	bhi.n	800236a <HAL_TIM_ConfigClockSource+0x7e>
 8002360:	2b50      	cmp	r3, #80	; 0x50
 8002362:	d033      	beq.n	80023cc <HAL_TIM_ConfigClockSource+0xe0>
 8002364:	2b60      	cmp	r3, #96	; 0x60
 8002366:	d041      	beq.n	80023ec <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002368:	e06a      	b.n	8002440 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800236a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800236e:	d066      	beq.n	800243e <HAL_TIM_ConfigClockSource+0x152>
 8002370:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002374:	d017      	beq.n	80023a6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002376:	e063      	b.n	8002440 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6818      	ldr	r0, [r3, #0]
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	6899      	ldr	r1, [r3, #8]
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	685a      	ldr	r2, [r3, #4]
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	f000 f965 	bl	8002656 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800239a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	68fa      	ldr	r2, [r7, #12]
 80023a2:	609a      	str	r2, [r3, #8]
      break;
 80023a4:	e04c      	b.n	8002440 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6818      	ldr	r0, [r3, #0]
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	6899      	ldr	r1, [r3, #8]
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	685a      	ldr	r2, [r3, #4]
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	68db      	ldr	r3, [r3, #12]
 80023b6:	f000 f94e 	bl	8002656 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	689a      	ldr	r2, [r3, #8]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80023c8:	609a      	str	r2, [r3, #8]
      break;
 80023ca:	e039      	b.n	8002440 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6818      	ldr	r0, [r3, #0]
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	6859      	ldr	r1, [r3, #4]
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	461a      	mov	r2, r3
 80023da:	f000 f8c5 	bl	8002568 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	2150      	movs	r1, #80	; 0x50
 80023e4:	4618      	mov	r0, r3
 80023e6:	f000 f91c 	bl	8002622 <TIM_ITRx_SetConfig>
      break;
 80023ea:	e029      	b.n	8002440 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6818      	ldr	r0, [r3, #0]
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	6859      	ldr	r1, [r3, #4]
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	461a      	mov	r2, r3
 80023fa:	f000 f8e3 	bl	80025c4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	2160      	movs	r1, #96	; 0x60
 8002404:	4618      	mov	r0, r3
 8002406:	f000 f90c 	bl	8002622 <TIM_ITRx_SetConfig>
      break;
 800240a:	e019      	b.n	8002440 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6818      	ldr	r0, [r3, #0]
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	6859      	ldr	r1, [r3, #4]
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	461a      	mov	r2, r3
 800241a:	f000 f8a5 	bl	8002568 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	2140      	movs	r1, #64	; 0x40
 8002424:	4618      	mov	r0, r3
 8002426:	f000 f8fc 	bl	8002622 <TIM_ITRx_SetConfig>
      break;
 800242a:	e009      	b.n	8002440 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4619      	mov	r1, r3
 8002436:	4610      	mov	r0, r2
 8002438:	f000 f8f3 	bl	8002622 <TIM_ITRx_SetConfig>
        break;
 800243c:	e000      	b.n	8002440 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800243e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2201      	movs	r2, #1
 8002444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2200      	movs	r2, #0
 800244c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002450:	2300      	movs	r3, #0
}
 8002452:	4618      	mov	r0, r3
 8002454:	3710      	adds	r7, #16
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}

0800245a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800245a:	b480      	push	{r7}
 800245c:	b083      	sub	sp, #12
 800245e:	af00      	add	r7, sp, #0
 8002460:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002462:	bf00      	nop
 8002464:	370c      	adds	r7, #12
 8002466:	46bd      	mov	sp, r7
 8002468:	bc80      	pop	{r7}
 800246a:	4770      	bx	lr

0800246c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002474:	bf00      	nop
 8002476:	370c      	adds	r7, #12
 8002478:	46bd      	mov	sp, r7
 800247a:	bc80      	pop	{r7}
 800247c:	4770      	bx	lr

0800247e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800247e:	b480      	push	{r7}
 8002480:	b083      	sub	sp, #12
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002486:	bf00      	nop
 8002488:	370c      	adds	r7, #12
 800248a:	46bd      	mov	sp, r7
 800248c:	bc80      	pop	{r7}
 800248e:	4770      	bx	lr

08002490 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002498:	bf00      	nop
 800249a:	370c      	adds	r7, #12
 800249c:	46bd      	mov	sp, r7
 800249e:	bc80      	pop	{r7}
 80024a0:	4770      	bx	lr
	...

080024a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b085      	sub	sp, #20
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	4a29      	ldr	r2, [pc, #164]	; (800255c <TIM_Base_SetConfig+0xb8>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d00b      	beq.n	80024d4 <TIM_Base_SetConfig+0x30>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024c2:	d007      	beq.n	80024d4 <TIM_Base_SetConfig+0x30>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	4a26      	ldr	r2, [pc, #152]	; (8002560 <TIM_Base_SetConfig+0xbc>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d003      	beq.n	80024d4 <TIM_Base_SetConfig+0x30>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	4a25      	ldr	r2, [pc, #148]	; (8002564 <TIM_Base_SetConfig+0xc0>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d108      	bne.n	80024e6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	68fa      	ldr	r2, [r7, #12]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4a1c      	ldr	r2, [pc, #112]	; (800255c <TIM_Base_SetConfig+0xb8>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d00b      	beq.n	8002506 <TIM_Base_SetConfig+0x62>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024f4:	d007      	beq.n	8002506 <TIM_Base_SetConfig+0x62>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4a19      	ldr	r2, [pc, #100]	; (8002560 <TIM_Base_SetConfig+0xbc>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d003      	beq.n	8002506 <TIM_Base_SetConfig+0x62>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4a18      	ldr	r2, [pc, #96]	; (8002564 <TIM_Base_SetConfig+0xc0>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d108      	bne.n	8002518 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800250c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	68db      	ldr	r3, [r3, #12]
 8002512:	68fa      	ldr	r2, [r7, #12]
 8002514:	4313      	orrs	r3, r2
 8002516:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	695b      	ldr	r3, [r3, #20]
 8002522:	4313      	orrs	r3, r2
 8002524:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	68fa      	ldr	r2, [r7, #12]
 800252a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	689a      	ldr	r2, [r3, #8]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	4a07      	ldr	r2, [pc, #28]	; (800255c <TIM_Base_SetConfig+0xb8>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d103      	bne.n	800254c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	691a      	ldr	r2, [r3, #16]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2201      	movs	r2, #1
 8002550:	615a      	str	r2, [r3, #20]
}
 8002552:	bf00      	nop
 8002554:	3714      	adds	r7, #20
 8002556:	46bd      	mov	sp, r7
 8002558:	bc80      	pop	{r7}
 800255a:	4770      	bx	lr
 800255c:	40012c00 	.word	0x40012c00
 8002560:	40000400 	.word	0x40000400
 8002564:	40000800 	.word	0x40000800

08002568 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002568:	b480      	push	{r7}
 800256a:	b087      	sub	sp, #28
 800256c:	af00      	add	r7, sp, #0
 800256e:	60f8      	str	r0, [r7, #12]
 8002570:	60b9      	str	r1, [r7, #8]
 8002572:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	6a1b      	ldr	r3, [r3, #32]
 8002578:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	6a1b      	ldr	r3, [r3, #32]
 800257e:	f023 0201 	bic.w	r2, r3, #1
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	699b      	ldr	r3, [r3, #24]
 800258a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002592:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	011b      	lsls	r3, r3, #4
 8002598:	693a      	ldr	r2, [r7, #16]
 800259a:	4313      	orrs	r3, r2
 800259c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	f023 030a 	bic.w	r3, r3, #10
 80025a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80025a6:	697a      	ldr	r2, [r7, #20]
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	693a      	ldr	r2, [r7, #16]
 80025b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	697a      	ldr	r2, [r7, #20]
 80025b8:	621a      	str	r2, [r3, #32]
}
 80025ba:	bf00      	nop
 80025bc:	371c      	adds	r7, #28
 80025be:	46bd      	mov	sp, r7
 80025c0:	bc80      	pop	{r7}
 80025c2:	4770      	bx	lr

080025c4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b087      	sub	sp, #28
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	60f8      	str	r0, [r7, #12]
 80025cc:	60b9      	str	r1, [r7, #8]
 80025ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	6a1b      	ldr	r3, [r3, #32]
 80025d4:	f023 0210 	bic.w	r2, r3, #16
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	699b      	ldr	r3, [r3, #24]
 80025e0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	6a1b      	ldr	r3, [r3, #32]
 80025e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80025ee:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	031b      	lsls	r3, r3, #12
 80025f4:	697a      	ldr	r2, [r7, #20]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002600:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	011b      	lsls	r3, r3, #4
 8002606:	693a      	ldr	r2, [r7, #16]
 8002608:	4313      	orrs	r3, r2
 800260a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	697a      	ldr	r2, [r7, #20]
 8002610:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	693a      	ldr	r2, [r7, #16]
 8002616:	621a      	str	r2, [r3, #32]
}
 8002618:	bf00      	nop
 800261a:	371c      	adds	r7, #28
 800261c:	46bd      	mov	sp, r7
 800261e:	bc80      	pop	{r7}
 8002620:	4770      	bx	lr

08002622 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002622:	b480      	push	{r7}
 8002624:	b085      	sub	sp, #20
 8002626:	af00      	add	r7, sp, #0
 8002628:	6078      	str	r0, [r7, #4]
 800262a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002638:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800263a:	683a      	ldr	r2, [r7, #0]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	4313      	orrs	r3, r2
 8002640:	f043 0307 	orr.w	r3, r3, #7
 8002644:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	68fa      	ldr	r2, [r7, #12]
 800264a:	609a      	str	r2, [r3, #8]
}
 800264c:	bf00      	nop
 800264e:	3714      	adds	r7, #20
 8002650:	46bd      	mov	sp, r7
 8002652:	bc80      	pop	{r7}
 8002654:	4770      	bx	lr

08002656 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002656:	b480      	push	{r7}
 8002658:	b087      	sub	sp, #28
 800265a:	af00      	add	r7, sp, #0
 800265c:	60f8      	str	r0, [r7, #12]
 800265e:	60b9      	str	r1, [r7, #8]
 8002660:	607a      	str	r2, [r7, #4]
 8002662:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002670:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	021a      	lsls	r2, r3, #8
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	431a      	orrs	r2, r3
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	4313      	orrs	r3, r2
 800267e:	697a      	ldr	r2, [r7, #20]
 8002680:	4313      	orrs	r3, r2
 8002682:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	697a      	ldr	r2, [r7, #20]
 8002688:	609a      	str	r2, [r3, #8]
}
 800268a:	bf00      	nop
 800268c:	371c      	adds	r7, #28
 800268e:	46bd      	mov	sp, r7
 8002690:	bc80      	pop	{r7}
 8002692:	4770      	bx	lr

08002694 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002694:	b480      	push	{r7}
 8002696:	b085      	sub	sp, #20
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d101      	bne.n	80026ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80026a8:	2302      	movs	r3, #2
 80026aa:	e046      	b.n	800273a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2201      	movs	r2, #1
 80026b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2202      	movs	r2, #2
 80026b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	68fa      	ldr	r2, [r7, #12]
 80026da:	4313      	orrs	r3, r2
 80026dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	68fa      	ldr	r2, [r7, #12]
 80026e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a16      	ldr	r2, [pc, #88]	; (8002744 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d00e      	beq.n	800270e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026f8:	d009      	beq.n	800270e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a12      	ldr	r2, [pc, #72]	; (8002748 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d004      	beq.n	800270e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a10      	ldr	r2, [pc, #64]	; (800274c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d10c      	bne.n	8002728 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002714:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	68ba      	ldr	r2, [r7, #8]
 800271c:	4313      	orrs	r3, r2
 800271e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	68ba      	ldr	r2, [r7, #8]
 8002726:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2201      	movs	r2, #1
 800272c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2200      	movs	r2, #0
 8002734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002738:	2300      	movs	r3, #0
}
 800273a:	4618      	mov	r0, r3
 800273c:	3714      	adds	r7, #20
 800273e:	46bd      	mov	sp, r7
 8002740:	bc80      	pop	{r7}
 8002742:	4770      	bx	lr
 8002744:	40012c00 	.word	0x40012c00
 8002748:	40000400 	.word	0x40000400
 800274c:	40000800 	.word	0x40000800

08002750 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002758:	bf00      	nop
 800275a:	370c      	adds	r7, #12
 800275c:	46bd      	mov	sp, r7
 800275e:	bc80      	pop	{r7}
 8002760:	4770      	bx	lr

08002762 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002762:	b480      	push	{r7}
 8002764:	b083      	sub	sp, #12
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800276a:	bf00      	nop
 800276c:	370c      	adds	r7, #12
 800276e:	46bd      	mov	sp, r7
 8002770:	bc80      	pop	{r7}
 8002772:	4770      	bx	lr

08002774 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d101      	bne.n	8002786 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e03f      	b.n	8002806 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800278c:	b2db      	uxtb	r3, r3
 800278e:	2b00      	cmp	r3, #0
 8002790:	d106      	bne.n	80027a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f7fe f9f0 	bl	8000b80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2224      	movs	r2, #36	; 0x24
 80027a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	68da      	ldr	r2, [r3, #12]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80027b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f000 f829 	bl	8002810 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	691a      	ldr	r2, [r3, #16]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80027cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	695a      	ldr	r2, [r3, #20]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80027dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	68da      	ldr	r2, [r3, #12]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80027ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2220      	movs	r2, #32
 80027f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2220      	movs	r2, #32
 8002800:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002804:	2300      	movs	r3, #0
}
 8002806:	4618      	mov	r0, r3
 8002808:	3708      	adds	r7, #8
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
	...

08002810 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	691b      	ldr	r3, [r3, #16]
 800281e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	68da      	ldr	r2, [r3, #12]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	430a      	orrs	r2, r1
 800282c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	689a      	ldr	r2, [r3, #8]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	691b      	ldr	r3, [r3, #16]
 8002836:	431a      	orrs	r2, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	695b      	ldr	r3, [r3, #20]
 800283c:	4313      	orrs	r3, r2
 800283e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800284a:	f023 030c 	bic.w	r3, r3, #12
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	6812      	ldr	r2, [r2, #0]
 8002852:	68b9      	ldr	r1, [r7, #8]
 8002854:	430b      	orrs	r3, r1
 8002856:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	695b      	ldr	r3, [r3, #20]
 800285e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	699a      	ldr	r2, [r3, #24]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	430a      	orrs	r2, r1
 800286c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a2c      	ldr	r2, [pc, #176]	; (8002924 <UART_SetConfig+0x114>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d103      	bne.n	8002880 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002878:	f7ff f8f6 	bl	8001a68 <HAL_RCC_GetPCLK2Freq>
 800287c:	60f8      	str	r0, [r7, #12]
 800287e:	e002      	b.n	8002886 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002880:	f7ff f8de 	bl	8001a40 <HAL_RCC_GetPCLK1Freq>
 8002884:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002886:	68fa      	ldr	r2, [r7, #12]
 8002888:	4613      	mov	r3, r2
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	4413      	add	r3, r2
 800288e:	009a      	lsls	r2, r3, #2
 8002890:	441a      	add	r2, r3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	fbb2 f3f3 	udiv	r3, r2, r3
 800289c:	4a22      	ldr	r2, [pc, #136]	; (8002928 <UART_SetConfig+0x118>)
 800289e:	fba2 2303 	umull	r2, r3, r2, r3
 80028a2:	095b      	lsrs	r3, r3, #5
 80028a4:	0119      	lsls	r1, r3, #4
 80028a6:	68fa      	ldr	r2, [r7, #12]
 80028a8:	4613      	mov	r3, r2
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	4413      	add	r3, r2
 80028ae:	009a      	lsls	r2, r3, #2
 80028b0:	441a      	add	r2, r3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80028bc:	4b1a      	ldr	r3, [pc, #104]	; (8002928 <UART_SetConfig+0x118>)
 80028be:	fba3 0302 	umull	r0, r3, r3, r2
 80028c2:	095b      	lsrs	r3, r3, #5
 80028c4:	2064      	movs	r0, #100	; 0x64
 80028c6:	fb00 f303 	mul.w	r3, r0, r3
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	011b      	lsls	r3, r3, #4
 80028ce:	3332      	adds	r3, #50	; 0x32
 80028d0:	4a15      	ldr	r2, [pc, #84]	; (8002928 <UART_SetConfig+0x118>)
 80028d2:	fba2 2303 	umull	r2, r3, r2, r3
 80028d6:	095b      	lsrs	r3, r3, #5
 80028d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028dc:	4419      	add	r1, r3
 80028de:	68fa      	ldr	r2, [r7, #12]
 80028e0:	4613      	mov	r3, r2
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	4413      	add	r3, r2
 80028e6:	009a      	lsls	r2, r3, #2
 80028e8:	441a      	add	r2, r3
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80028f4:	4b0c      	ldr	r3, [pc, #48]	; (8002928 <UART_SetConfig+0x118>)
 80028f6:	fba3 0302 	umull	r0, r3, r3, r2
 80028fa:	095b      	lsrs	r3, r3, #5
 80028fc:	2064      	movs	r0, #100	; 0x64
 80028fe:	fb00 f303 	mul.w	r3, r0, r3
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	011b      	lsls	r3, r3, #4
 8002906:	3332      	adds	r3, #50	; 0x32
 8002908:	4a07      	ldr	r2, [pc, #28]	; (8002928 <UART_SetConfig+0x118>)
 800290a:	fba2 2303 	umull	r2, r3, r2, r3
 800290e:	095b      	lsrs	r3, r3, #5
 8002910:	f003 020f 	and.w	r2, r3, #15
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	440a      	add	r2, r1
 800291a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800291c:	bf00      	nop
 800291e:	3710      	adds	r7, #16
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	40013800 	.word	0x40013800
 8002928:	51eb851f 	.word	0x51eb851f

0800292c <__errno>:
 800292c:	4b01      	ldr	r3, [pc, #4]	; (8002934 <__errno+0x8>)
 800292e:	6818      	ldr	r0, [r3, #0]
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	2000007c 	.word	0x2000007c

08002938 <__libc_init_array>:
 8002938:	b570      	push	{r4, r5, r6, lr}
 800293a:	2500      	movs	r5, #0
 800293c:	4e0c      	ldr	r6, [pc, #48]	; (8002970 <__libc_init_array+0x38>)
 800293e:	4c0d      	ldr	r4, [pc, #52]	; (8002974 <__libc_init_array+0x3c>)
 8002940:	1ba4      	subs	r4, r4, r6
 8002942:	10a4      	asrs	r4, r4, #2
 8002944:	42a5      	cmp	r5, r4
 8002946:	d109      	bne.n	800295c <__libc_init_array+0x24>
 8002948:	f000 fc34 	bl	80031b4 <_init>
 800294c:	2500      	movs	r5, #0
 800294e:	4e0a      	ldr	r6, [pc, #40]	; (8002978 <__libc_init_array+0x40>)
 8002950:	4c0a      	ldr	r4, [pc, #40]	; (800297c <__libc_init_array+0x44>)
 8002952:	1ba4      	subs	r4, r4, r6
 8002954:	10a4      	asrs	r4, r4, #2
 8002956:	42a5      	cmp	r5, r4
 8002958:	d105      	bne.n	8002966 <__libc_init_array+0x2e>
 800295a:	bd70      	pop	{r4, r5, r6, pc}
 800295c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002960:	4798      	blx	r3
 8002962:	3501      	adds	r5, #1
 8002964:	e7ee      	b.n	8002944 <__libc_init_array+0xc>
 8002966:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800296a:	4798      	blx	r3
 800296c:	3501      	adds	r5, #1
 800296e:	e7f2      	b.n	8002956 <__libc_init_array+0x1e>
 8002970:	08003828 	.word	0x08003828
 8002974:	08003828 	.word	0x08003828
 8002978:	08003828 	.word	0x08003828
 800297c:	0800382c 	.word	0x0800382c

08002980 <memset>:
 8002980:	4603      	mov	r3, r0
 8002982:	4402      	add	r2, r0
 8002984:	4293      	cmp	r3, r2
 8002986:	d100      	bne.n	800298a <memset+0xa>
 8002988:	4770      	bx	lr
 800298a:	f803 1b01 	strb.w	r1, [r3], #1
 800298e:	e7f9      	b.n	8002984 <memset+0x4>

08002990 <siprintf>:
 8002990:	b40e      	push	{r1, r2, r3}
 8002992:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002996:	b500      	push	{lr}
 8002998:	b09c      	sub	sp, #112	; 0x70
 800299a:	ab1d      	add	r3, sp, #116	; 0x74
 800299c:	9002      	str	r0, [sp, #8]
 800299e:	9006      	str	r0, [sp, #24]
 80029a0:	9107      	str	r1, [sp, #28]
 80029a2:	9104      	str	r1, [sp, #16]
 80029a4:	4808      	ldr	r0, [pc, #32]	; (80029c8 <siprintf+0x38>)
 80029a6:	4909      	ldr	r1, [pc, #36]	; (80029cc <siprintf+0x3c>)
 80029a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80029ac:	9105      	str	r1, [sp, #20]
 80029ae:	6800      	ldr	r0, [r0, #0]
 80029b0:	a902      	add	r1, sp, #8
 80029b2:	9301      	str	r3, [sp, #4]
 80029b4:	f000 f866 	bl	8002a84 <_svfiprintf_r>
 80029b8:	2200      	movs	r2, #0
 80029ba:	9b02      	ldr	r3, [sp, #8]
 80029bc:	701a      	strb	r2, [r3, #0]
 80029be:	b01c      	add	sp, #112	; 0x70
 80029c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80029c4:	b003      	add	sp, #12
 80029c6:	4770      	bx	lr
 80029c8:	2000007c 	.word	0x2000007c
 80029cc:	ffff0208 	.word	0xffff0208

080029d0 <__ssputs_r>:
 80029d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80029d4:	688e      	ldr	r6, [r1, #8]
 80029d6:	4682      	mov	sl, r0
 80029d8:	429e      	cmp	r6, r3
 80029da:	460c      	mov	r4, r1
 80029dc:	4690      	mov	r8, r2
 80029de:	4699      	mov	r9, r3
 80029e0:	d837      	bhi.n	8002a52 <__ssputs_r+0x82>
 80029e2:	898a      	ldrh	r2, [r1, #12]
 80029e4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80029e8:	d031      	beq.n	8002a4e <__ssputs_r+0x7e>
 80029ea:	2302      	movs	r3, #2
 80029ec:	6825      	ldr	r5, [r4, #0]
 80029ee:	6909      	ldr	r1, [r1, #16]
 80029f0:	1a6f      	subs	r7, r5, r1
 80029f2:	6965      	ldr	r5, [r4, #20]
 80029f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80029f8:	fb95 f5f3 	sdiv	r5, r5, r3
 80029fc:	f109 0301 	add.w	r3, r9, #1
 8002a00:	443b      	add	r3, r7
 8002a02:	429d      	cmp	r5, r3
 8002a04:	bf38      	it	cc
 8002a06:	461d      	movcc	r5, r3
 8002a08:	0553      	lsls	r3, r2, #21
 8002a0a:	d530      	bpl.n	8002a6e <__ssputs_r+0x9e>
 8002a0c:	4629      	mov	r1, r5
 8002a0e:	f000 fb37 	bl	8003080 <_malloc_r>
 8002a12:	4606      	mov	r6, r0
 8002a14:	b950      	cbnz	r0, 8002a2c <__ssputs_r+0x5c>
 8002a16:	230c      	movs	r3, #12
 8002a18:	f04f 30ff 	mov.w	r0, #4294967295
 8002a1c:	f8ca 3000 	str.w	r3, [sl]
 8002a20:	89a3      	ldrh	r3, [r4, #12]
 8002a22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a26:	81a3      	strh	r3, [r4, #12]
 8002a28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a2c:	463a      	mov	r2, r7
 8002a2e:	6921      	ldr	r1, [r4, #16]
 8002a30:	f000 fab6 	bl	8002fa0 <memcpy>
 8002a34:	89a3      	ldrh	r3, [r4, #12]
 8002a36:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002a3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a3e:	81a3      	strh	r3, [r4, #12]
 8002a40:	6126      	str	r6, [r4, #16]
 8002a42:	443e      	add	r6, r7
 8002a44:	6026      	str	r6, [r4, #0]
 8002a46:	464e      	mov	r6, r9
 8002a48:	6165      	str	r5, [r4, #20]
 8002a4a:	1bed      	subs	r5, r5, r7
 8002a4c:	60a5      	str	r5, [r4, #8]
 8002a4e:	454e      	cmp	r6, r9
 8002a50:	d900      	bls.n	8002a54 <__ssputs_r+0x84>
 8002a52:	464e      	mov	r6, r9
 8002a54:	4632      	mov	r2, r6
 8002a56:	4641      	mov	r1, r8
 8002a58:	6820      	ldr	r0, [r4, #0]
 8002a5a:	f000 faac 	bl	8002fb6 <memmove>
 8002a5e:	68a3      	ldr	r3, [r4, #8]
 8002a60:	2000      	movs	r0, #0
 8002a62:	1b9b      	subs	r3, r3, r6
 8002a64:	60a3      	str	r3, [r4, #8]
 8002a66:	6823      	ldr	r3, [r4, #0]
 8002a68:	441e      	add	r6, r3
 8002a6a:	6026      	str	r6, [r4, #0]
 8002a6c:	e7dc      	b.n	8002a28 <__ssputs_r+0x58>
 8002a6e:	462a      	mov	r2, r5
 8002a70:	f000 fb60 	bl	8003134 <_realloc_r>
 8002a74:	4606      	mov	r6, r0
 8002a76:	2800      	cmp	r0, #0
 8002a78:	d1e2      	bne.n	8002a40 <__ssputs_r+0x70>
 8002a7a:	6921      	ldr	r1, [r4, #16]
 8002a7c:	4650      	mov	r0, sl
 8002a7e:	f000 fab3 	bl	8002fe8 <_free_r>
 8002a82:	e7c8      	b.n	8002a16 <__ssputs_r+0x46>

08002a84 <_svfiprintf_r>:
 8002a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a88:	461d      	mov	r5, r3
 8002a8a:	898b      	ldrh	r3, [r1, #12]
 8002a8c:	b09d      	sub	sp, #116	; 0x74
 8002a8e:	061f      	lsls	r7, r3, #24
 8002a90:	4680      	mov	r8, r0
 8002a92:	460c      	mov	r4, r1
 8002a94:	4616      	mov	r6, r2
 8002a96:	d50f      	bpl.n	8002ab8 <_svfiprintf_r+0x34>
 8002a98:	690b      	ldr	r3, [r1, #16]
 8002a9a:	b96b      	cbnz	r3, 8002ab8 <_svfiprintf_r+0x34>
 8002a9c:	2140      	movs	r1, #64	; 0x40
 8002a9e:	f000 faef 	bl	8003080 <_malloc_r>
 8002aa2:	6020      	str	r0, [r4, #0]
 8002aa4:	6120      	str	r0, [r4, #16]
 8002aa6:	b928      	cbnz	r0, 8002ab4 <_svfiprintf_r+0x30>
 8002aa8:	230c      	movs	r3, #12
 8002aaa:	f8c8 3000 	str.w	r3, [r8]
 8002aae:	f04f 30ff 	mov.w	r0, #4294967295
 8002ab2:	e0c8      	b.n	8002c46 <_svfiprintf_r+0x1c2>
 8002ab4:	2340      	movs	r3, #64	; 0x40
 8002ab6:	6163      	str	r3, [r4, #20]
 8002ab8:	2300      	movs	r3, #0
 8002aba:	9309      	str	r3, [sp, #36]	; 0x24
 8002abc:	2320      	movs	r3, #32
 8002abe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002ac2:	2330      	movs	r3, #48	; 0x30
 8002ac4:	f04f 0b01 	mov.w	fp, #1
 8002ac8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002acc:	9503      	str	r5, [sp, #12]
 8002ace:	4637      	mov	r7, r6
 8002ad0:	463d      	mov	r5, r7
 8002ad2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002ad6:	b10b      	cbz	r3, 8002adc <_svfiprintf_r+0x58>
 8002ad8:	2b25      	cmp	r3, #37	; 0x25
 8002ada:	d13e      	bne.n	8002b5a <_svfiprintf_r+0xd6>
 8002adc:	ebb7 0a06 	subs.w	sl, r7, r6
 8002ae0:	d00b      	beq.n	8002afa <_svfiprintf_r+0x76>
 8002ae2:	4653      	mov	r3, sl
 8002ae4:	4632      	mov	r2, r6
 8002ae6:	4621      	mov	r1, r4
 8002ae8:	4640      	mov	r0, r8
 8002aea:	f7ff ff71 	bl	80029d0 <__ssputs_r>
 8002aee:	3001      	adds	r0, #1
 8002af0:	f000 80a4 	beq.w	8002c3c <_svfiprintf_r+0x1b8>
 8002af4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002af6:	4453      	add	r3, sl
 8002af8:	9309      	str	r3, [sp, #36]	; 0x24
 8002afa:	783b      	ldrb	r3, [r7, #0]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	f000 809d 	beq.w	8002c3c <_svfiprintf_r+0x1b8>
 8002b02:	2300      	movs	r3, #0
 8002b04:	f04f 32ff 	mov.w	r2, #4294967295
 8002b08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002b0c:	9304      	str	r3, [sp, #16]
 8002b0e:	9307      	str	r3, [sp, #28]
 8002b10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002b14:	931a      	str	r3, [sp, #104]	; 0x68
 8002b16:	462f      	mov	r7, r5
 8002b18:	2205      	movs	r2, #5
 8002b1a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8002b1e:	4850      	ldr	r0, [pc, #320]	; (8002c60 <_svfiprintf_r+0x1dc>)
 8002b20:	f000 fa30 	bl	8002f84 <memchr>
 8002b24:	9b04      	ldr	r3, [sp, #16]
 8002b26:	b9d0      	cbnz	r0, 8002b5e <_svfiprintf_r+0xda>
 8002b28:	06d9      	lsls	r1, r3, #27
 8002b2a:	bf44      	itt	mi
 8002b2c:	2220      	movmi	r2, #32
 8002b2e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002b32:	071a      	lsls	r2, r3, #28
 8002b34:	bf44      	itt	mi
 8002b36:	222b      	movmi	r2, #43	; 0x2b
 8002b38:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002b3c:	782a      	ldrb	r2, [r5, #0]
 8002b3e:	2a2a      	cmp	r2, #42	; 0x2a
 8002b40:	d015      	beq.n	8002b6e <_svfiprintf_r+0xea>
 8002b42:	462f      	mov	r7, r5
 8002b44:	2000      	movs	r0, #0
 8002b46:	250a      	movs	r5, #10
 8002b48:	9a07      	ldr	r2, [sp, #28]
 8002b4a:	4639      	mov	r1, r7
 8002b4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002b50:	3b30      	subs	r3, #48	; 0x30
 8002b52:	2b09      	cmp	r3, #9
 8002b54:	d94d      	bls.n	8002bf2 <_svfiprintf_r+0x16e>
 8002b56:	b1b8      	cbz	r0, 8002b88 <_svfiprintf_r+0x104>
 8002b58:	e00f      	b.n	8002b7a <_svfiprintf_r+0xf6>
 8002b5a:	462f      	mov	r7, r5
 8002b5c:	e7b8      	b.n	8002ad0 <_svfiprintf_r+0x4c>
 8002b5e:	4a40      	ldr	r2, [pc, #256]	; (8002c60 <_svfiprintf_r+0x1dc>)
 8002b60:	463d      	mov	r5, r7
 8002b62:	1a80      	subs	r0, r0, r2
 8002b64:	fa0b f000 	lsl.w	r0, fp, r0
 8002b68:	4318      	orrs	r0, r3
 8002b6a:	9004      	str	r0, [sp, #16]
 8002b6c:	e7d3      	b.n	8002b16 <_svfiprintf_r+0x92>
 8002b6e:	9a03      	ldr	r2, [sp, #12]
 8002b70:	1d11      	adds	r1, r2, #4
 8002b72:	6812      	ldr	r2, [r2, #0]
 8002b74:	9103      	str	r1, [sp, #12]
 8002b76:	2a00      	cmp	r2, #0
 8002b78:	db01      	blt.n	8002b7e <_svfiprintf_r+0xfa>
 8002b7a:	9207      	str	r2, [sp, #28]
 8002b7c:	e004      	b.n	8002b88 <_svfiprintf_r+0x104>
 8002b7e:	4252      	negs	r2, r2
 8002b80:	f043 0302 	orr.w	r3, r3, #2
 8002b84:	9207      	str	r2, [sp, #28]
 8002b86:	9304      	str	r3, [sp, #16]
 8002b88:	783b      	ldrb	r3, [r7, #0]
 8002b8a:	2b2e      	cmp	r3, #46	; 0x2e
 8002b8c:	d10c      	bne.n	8002ba8 <_svfiprintf_r+0x124>
 8002b8e:	787b      	ldrb	r3, [r7, #1]
 8002b90:	2b2a      	cmp	r3, #42	; 0x2a
 8002b92:	d133      	bne.n	8002bfc <_svfiprintf_r+0x178>
 8002b94:	9b03      	ldr	r3, [sp, #12]
 8002b96:	3702      	adds	r7, #2
 8002b98:	1d1a      	adds	r2, r3, #4
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	9203      	str	r2, [sp, #12]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	bfb8      	it	lt
 8002ba2:	f04f 33ff 	movlt.w	r3, #4294967295
 8002ba6:	9305      	str	r3, [sp, #20]
 8002ba8:	4d2e      	ldr	r5, [pc, #184]	; (8002c64 <_svfiprintf_r+0x1e0>)
 8002baa:	2203      	movs	r2, #3
 8002bac:	7839      	ldrb	r1, [r7, #0]
 8002bae:	4628      	mov	r0, r5
 8002bb0:	f000 f9e8 	bl	8002f84 <memchr>
 8002bb4:	b138      	cbz	r0, 8002bc6 <_svfiprintf_r+0x142>
 8002bb6:	2340      	movs	r3, #64	; 0x40
 8002bb8:	1b40      	subs	r0, r0, r5
 8002bba:	fa03 f000 	lsl.w	r0, r3, r0
 8002bbe:	9b04      	ldr	r3, [sp, #16]
 8002bc0:	3701      	adds	r7, #1
 8002bc2:	4303      	orrs	r3, r0
 8002bc4:	9304      	str	r3, [sp, #16]
 8002bc6:	7839      	ldrb	r1, [r7, #0]
 8002bc8:	2206      	movs	r2, #6
 8002bca:	4827      	ldr	r0, [pc, #156]	; (8002c68 <_svfiprintf_r+0x1e4>)
 8002bcc:	1c7e      	adds	r6, r7, #1
 8002bce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002bd2:	f000 f9d7 	bl	8002f84 <memchr>
 8002bd6:	2800      	cmp	r0, #0
 8002bd8:	d038      	beq.n	8002c4c <_svfiprintf_r+0x1c8>
 8002bda:	4b24      	ldr	r3, [pc, #144]	; (8002c6c <_svfiprintf_r+0x1e8>)
 8002bdc:	bb13      	cbnz	r3, 8002c24 <_svfiprintf_r+0x1a0>
 8002bde:	9b03      	ldr	r3, [sp, #12]
 8002be0:	3307      	adds	r3, #7
 8002be2:	f023 0307 	bic.w	r3, r3, #7
 8002be6:	3308      	adds	r3, #8
 8002be8:	9303      	str	r3, [sp, #12]
 8002bea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002bec:	444b      	add	r3, r9
 8002bee:	9309      	str	r3, [sp, #36]	; 0x24
 8002bf0:	e76d      	b.n	8002ace <_svfiprintf_r+0x4a>
 8002bf2:	fb05 3202 	mla	r2, r5, r2, r3
 8002bf6:	2001      	movs	r0, #1
 8002bf8:	460f      	mov	r7, r1
 8002bfa:	e7a6      	b.n	8002b4a <_svfiprintf_r+0xc6>
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	250a      	movs	r5, #10
 8002c00:	4619      	mov	r1, r3
 8002c02:	3701      	adds	r7, #1
 8002c04:	9305      	str	r3, [sp, #20]
 8002c06:	4638      	mov	r0, r7
 8002c08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002c0c:	3a30      	subs	r2, #48	; 0x30
 8002c0e:	2a09      	cmp	r2, #9
 8002c10:	d903      	bls.n	8002c1a <_svfiprintf_r+0x196>
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d0c8      	beq.n	8002ba8 <_svfiprintf_r+0x124>
 8002c16:	9105      	str	r1, [sp, #20]
 8002c18:	e7c6      	b.n	8002ba8 <_svfiprintf_r+0x124>
 8002c1a:	fb05 2101 	mla	r1, r5, r1, r2
 8002c1e:	2301      	movs	r3, #1
 8002c20:	4607      	mov	r7, r0
 8002c22:	e7f0      	b.n	8002c06 <_svfiprintf_r+0x182>
 8002c24:	ab03      	add	r3, sp, #12
 8002c26:	9300      	str	r3, [sp, #0]
 8002c28:	4622      	mov	r2, r4
 8002c2a:	4b11      	ldr	r3, [pc, #68]	; (8002c70 <_svfiprintf_r+0x1ec>)
 8002c2c:	a904      	add	r1, sp, #16
 8002c2e:	4640      	mov	r0, r8
 8002c30:	f3af 8000 	nop.w
 8002c34:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002c38:	4681      	mov	r9, r0
 8002c3a:	d1d6      	bne.n	8002bea <_svfiprintf_r+0x166>
 8002c3c:	89a3      	ldrh	r3, [r4, #12]
 8002c3e:	065b      	lsls	r3, r3, #25
 8002c40:	f53f af35 	bmi.w	8002aae <_svfiprintf_r+0x2a>
 8002c44:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002c46:	b01d      	add	sp, #116	; 0x74
 8002c48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c4c:	ab03      	add	r3, sp, #12
 8002c4e:	9300      	str	r3, [sp, #0]
 8002c50:	4622      	mov	r2, r4
 8002c52:	4b07      	ldr	r3, [pc, #28]	; (8002c70 <_svfiprintf_r+0x1ec>)
 8002c54:	a904      	add	r1, sp, #16
 8002c56:	4640      	mov	r0, r8
 8002c58:	f000 f882 	bl	8002d60 <_printf_i>
 8002c5c:	e7ea      	b.n	8002c34 <_svfiprintf_r+0x1b0>
 8002c5e:	bf00      	nop
 8002c60:	080037f4 	.word	0x080037f4
 8002c64:	080037fa 	.word	0x080037fa
 8002c68:	080037fe 	.word	0x080037fe
 8002c6c:	00000000 	.word	0x00000000
 8002c70:	080029d1 	.word	0x080029d1

08002c74 <_printf_common>:
 8002c74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c78:	4691      	mov	r9, r2
 8002c7a:	461f      	mov	r7, r3
 8002c7c:	688a      	ldr	r2, [r1, #8]
 8002c7e:	690b      	ldr	r3, [r1, #16]
 8002c80:	4606      	mov	r6, r0
 8002c82:	4293      	cmp	r3, r2
 8002c84:	bfb8      	it	lt
 8002c86:	4613      	movlt	r3, r2
 8002c88:	f8c9 3000 	str.w	r3, [r9]
 8002c8c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002c90:	460c      	mov	r4, r1
 8002c92:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002c96:	b112      	cbz	r2, 8002c9e <_printf_common+0x2a>
 8002c98:	3301      	adds	r3, #1
 8002c9a:	f8c9 3000 	str.w	r3, [r9]
 8002c9e:	6823      	ldr	r3, [r4, #0]
 8002ca0:	0699      	lsls	r1, r3, #26
 8002ca2:	bf42      	ittt	mi
 8002ca4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002ca8:	3302      	addmi	r3, #2
 8002caa:	f8c9 3000 	strmi.w	r3, [r9]
 8002cae:	6825      	ldr	r5, [r4, #0]
 8002cb0:	f015 0506 	ands.w	r5, r5, #6
 8002cb4:	d107      	bne.n	8002cc6 <_printf_common+0x52>
 8002cb6:	f104 0a19 	add.w	sl, r4, #25
 8002cba:	68e3      	ldr	r3, [r4, #12]
 8002cbc:	f8d9 2000 	ldr.w	r2, [r9]
 8002cc0:	1a9b      	subs	r3, r3, r2
 8002cc2:	42ab      	cmp	r3, r5
 8002cc4:	dc29      	bgt.n	8002d1a <_printf_common+0xa6>
 8002cc6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002cca:	6822      	ldr	r2, [r4, #0]
 8002ccc:	3300      	adds	r3, #0
 8002cce:	bf18      	it	ne
 8002cd0:	2301      	movne	r3, #1
 8002cd2:	0692      	lsls	r2, r2, #26
 8002cd4:	d42e      	bmi.n	8002d34 <_printf_common+0xc0>
 8002cd6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002cda:	4639      	mov	r1, r7
 8002cdc:	4630      	mov	r0, r6
 8002cde:	47c0      	blx	r8
 8002ce0:	3001      	adds	r0, #1
 8002ce2:	d021      	beq.n	8002d28 <_printf_common+0xb4>
 8002ce4:	6823      	ldr	r3, [r4, #0]
 8002ce6:	68e5      	ldr	r5, [r4, #12]
 8002ce8:	f003 0306 	and.w	r3, r3, #6
 8002cec:	2b04      	cmp	r3, #4
 8002cee:	bf18      	it	ne
 8002cf0:	2500      	movne	r5, #0
 8002cf2:	f8d9 2000 	ldr.w	r2, [r9]
 8002cf6:	f04f 0900 	mov.w	r9, #0
 8002cfa:	bf08      	it	eq
 8002cfc:	1aad      	subeq	r5, r5, r2
 8002cfe:	68a3      	ldr	r3, [r4, #8]
 8002d00:	6922      	ldr	r2, [r4, #16]
 8002d02:	bf08      	it	eq
 8002d04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	bfc4      	itt	gt
 8002d0c:	1a9b      	subgt	r3, r3, r2
 8002d0e:	18ed      	addgt	r5, r5, r3
 8002d10:	341a      	adds	r4, #26
 8002d12:	454d      	cmp	r5, r9
 8002d14:	d11a      	bne.n	8002d4c <_printf_common+0xd8>
 8002d16:	2000      	movs	r0, #0
 8002d18:	e008      	b.n	8002d2c <_printf_common+0xb8>
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	4652      	mov	r2, sl
 8002d1e:	4639      	mov	r1, r7
 8002d20:	4630      	mov	r0, r6
 8002d22:	47c0      	blx	r8
 8002d24:	3001      	adds	r0, #1
 8002d26:	d103      	bne.n	8002d30 <_printf_common+0xbc>
 8002d28:	f04f 30ff 	mov.w	r0, #4294967295
 8002d2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d30:	3501      	adds	r5, #1
 8002d32:	e7c2      	b.n	8002cba <_printf_common+0x46>
 8002d34:	2030      	movs	r0, #48	; 0x30
 8002d36:	18e1      	adds	r1, r4, r3
 8002d38:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002d3c:	1c5a      	adds	r2, r3, #1
 8002d3e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002d42:	4422      	add	r2, r4
 8002d44:	3302      	adds	r3, #2
 8002d46:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002d4a:	e7c4      	b.n	8002cd6 <_printf_common+0x62>
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	4622      	mov	r2, r4
 8002d50:	4639      	mov	r1, r7
 8002d52:	4630      	mov	r0, r6
 8002d54:	47c0      	blx	r8
 8002d56:	3001      	adds	r0, #1
 8002d58:	d0e6      	beq.n	8002d28 <_printf_common+0xb4>
 8002d5a:	f109 0901 	add.w	r9, r9, #1
 8002d5e:	e7d8      	b.n	8002d12 <_printf_common+0x9e>

08002d60 <_printf_i>:
 8002d60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002d64:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002d68:	460c      	mov	r4, r1
 8002d6a:	7e09      	ldrb	r1, [r1, #24]
 8002d6c:	b085      	sub	sp, #20
 8002d6e:	296e      	cmp	r1, #110	; 0x6e
 8002d70:	4617      	mov	r7, r2
 8002d72:	4606      	mov	r6, r0
 8002d74:	4698      	mov	r8, r3
 8002d76:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002d78:	f000 80b3 	beq.w	8002ee2 <_printf_i+0x182>
 8002d7c:	d822      	bhi.n	8002dc4 <_printf_i+0x64>
 8002d7e:	2963      	cmp	r1, #99	; 0x63
 8002d80:	d036      	beq.n	8002df0 <_printf_i+0x90>
 8002d82:	d80a      	bhi.n	8002d9a <_printf_i+0x3a>
 8002d84:	2900      	cmp	r1, #0
 8002d86:	f000 80b9 	beq.w	8002efc <_printf_i+0x19c>
 8002d8a:	2958      	cmp	r1, #88	; 0x58
 8002d8c:	f000 8083 	beq.w	8002e96 <_printf_i+0x136>
 8002d90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002d94:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002d98:	e032      	b.n	8002e00 <_printf_i+0xa0>
 8002d9a:	2964      	cmp	r1, #100	; 0x64
 8002d9c:	d001      	beq.n	8002da2 <_printf_i+0x42>
 8002d9e:	2969      	cmp	r1, #105	; 0x69
 8002da0:	d1f6      	bne.n	8002d90 <_printf_i+0x30>
 8002da2:	6820      	ldr	r0, [r4, #0]
 8002da4:	6813      	ldr	r3, [r2, #0]
 8002da6:	0605      	lsls	r5, r0, #24
 8002da8:	f103 0104 	add.w	r1, r3, #4
 8002dac:	d52a      	bpl.n	8002e04 <_printf_i+0xa4>
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	6011      	str	r1, [r2, #0]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	da03      	bge.n	8002dbe <_printf_i+0x5e>
 8002db6:	222d      	movs	r2, #45	; 0x2d
 8002db8:	425b      	negs	r3, r3
 8002dba:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002dbe:	486f      	ldr	r0, [pc, #444]	; (8002f7c <_printf_i+0x21c>)
 8002dc0:	220a      	movs	r2, #10
 8002dc2:	e039      	b.n	8002e38 <_printf_i+0xd8>
 8002dc4:	2973      	cmp	r1, #115	; 0x73
 8002dc6:	f000 809d 	beq.w	8002f04 <_printf_i+0x1a4>
 8002dca:	d808      	bhi.n	8002dde <_printf_i+0x7e>
 8002dcc:	296f      	cmp	r1, #111	; 0x6f
 8002dce:	d020      	beq.n	8002e12 <_printf_i+0xb2>
 8002dd0:	2970      	cmp	r1, #112	; 0x70
 8002dd2:	d1dd      	bne.n	8002d90 <_printf_i+0x30>
 8002dd4:	6823      	ldr	r3, [r4, #0]
 8002dd6:	f043 0320 	orr.w	r3, r3, #32
 8002dda:	6023      	str	r3, [r4, #0]
 8002ddc:	e003      	b.n	8002de6 <_printf_i+0x86>
 8002dde:	2975      	cmp	r1, #117	; 0x75
 8002de0:	d017      	beq.n	8002e12 <_printf_i+0xb2>
 8002de2:	2978      	cmp	r1, #120	; 0x78
 8002de4:	d1d4      	bne.n	8002d90 <_printf_i+0x30>
 8002de6:	2378      	movs	r3, #120	; 0x78
 8002de8:	4865      	ldr	r0, [pc, #404]	; (8002f80 <_printf_i+0x220>)
 8002dea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002dee:	e055      	b.n	8002e9c <_printf_i+0x13c>
 8002df0:	6813      	ldr	r3, [r2, #0]
 8002df2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002df6:	1d19      	adds	r1, r3, #4
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	6011      	str	r1, [r2, #0]
 8002dfc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002e00:	2301      	movs	r3, #1
 8002e02:	e08c      	b.n	8002f1e <_printf_i+0x1be>
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002e0a:	6011      	str	r1, [r2, #0]
 8002e0c:	bf18      	it	ne
 8002e0e:	b21b      	sxthne	r3, r3
 8002e10:	e7cf      	b.n	8002db2 <_printf_i+0x52>
 8002e12:	6813      	ldr	r3, [r2, #0]
 8002e14:	6825      	ldr	r5, [r4, #0]
 8002e16:	1d18      	adds	r0, r3, #4
 8002e18:	6010      	str	r0, [r2, #0]
 8002e1a:	0628      	lsls	r0, r5, #24
 8002e1c:	d501      	bpl.n	8002e22 <_printf_i+0xc2>
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	e002      	b.n	8002e28 <_printf_i+0xc8>
 8002e22:	0668      	lsls	r0, r5, #25
 8002e24:	d5fb      	bpl.n	8002e1e <_printf_i+0xbe>
 8002e26:	881b      	ldrh	r3, [r3, #0]
 8002e28:	296f      	cmp	r1, #111	; 0x6f
 8002e2a:	bf14      	ite	ne
 8002e2c:	220a      	movne	r2, #10
 8002e2e:	2208      	moveq	r2, #8
 8002e30:	4852      	ldr	r0, [pc, #328]	; (8002f7c <_printf_i+0x21c>)
 8002e32:	2100      	movs	r1, #0
 8002e34:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002e38:	6865      	ldr	r5, [r4, #4]
 8002e3a:	2d00      	cmp	r5, #0
 8002e3c:	60a5      	str	r5, [r4, #8]
 8002e3e:	f2c0 8095 	blt.w	8002f6c <_printf_i+0x20c>
 8002e42:	6821      	ldr	r1, [r4, #0]
 8002e44:	f021 0104 	bic.w	r1, r1, #4
 8002e48:	6021      	str	r1, [r4, #0]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d13d      	bne.n	8002eca <_printf_i+0x16a>
 8002e4e:	2d00      	cmp	r5, #0
 8002e50:	f040 808e 	bne.w	8002f70 <_printf_i+0x210>
 8002e54:	4665      	mov	r5, ip
 8002e56:	2a08      	cmp	r2, #8
 8002e58:	d10b      	bne.n	8002e72 <_printf_i+0x112>
 8002e5a:	6823      	ldr	r3, [r4, #0]
 8002e5c:	07db      	lsls	r3, r3, #31
 8002e5e:	d508      	bpl.n	8002e72 <_printf_i+0x112>
 8002e60:	6923      	ldr	r3, [r4, #16]
 8002e62:	6862      	ldr	r2, [r4, #4]
 8002e64:	429a      	cmp	r2, r3
 8002e66:	bfde      	ittt	le
 8002e68:	2330      	movle	r3, #48	; 0x30
 8002e6a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002e6e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002e72:	ebac 0305 	sub.w	r3, ip, r5
 8002e76:	6123      	str	r3, [r4, #16]
 8002e78:	f8cd 8000 	str.w	r8, [sp]
 8002e7c:	463b      	mov	r3, r7
 8002e7e:	aa03      	add	r2, sp, #12
 8002e80:	4621      	mov	r1, r4
 8002e82:	4630      	mov	r0, r6
 8002e84:	f7ff fef6 	bl	8002c74 <_printf_common>
 8002e88:	3001      	adds	r0, #1
 8002e8a:	d14d      	bne.n	8002f28 <_printf_i+0x1c8>
 8002e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e90:	b005      	add	sp, #20
 8002e92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002e96:	4839      	ldr	r0, [pc, #228]	; (8002f7c <_printf_i+0x21c>)
 8002e98:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002e9c:	6813      	ldr	r3, [r2, #0]
 8002e9e:	6821      	ldr	r1, [r4, #0]
 8002ea0:	1d1d      	adds	r5, r3, #4
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	6015      	str	r5, [r2, #0]
 8002ea6:	060a      	lsls	r2, r1, #24
 8002ea8:	d50b      	bpl.n	8002ec2 <_printf_i+0x162>
 8002eaa:	07ca      	lsls	r2, r1, #31
 8002eac:	bf44      	itt	mi
 8002eae:	f041 0120 	orrmi.w	r1, r1, #32
 8002eb2:	6021      	strmi	r1, [r4, #0]
 8002eb4:	b91b      	cbnz	r3, 8002ebe <_printf_i+0x15e>
 8002eb6:	6822      	ldr	r2, [r4, #0]
 8002eb8:	f022 0220 	bic.w	r2, r2, #32
 8002ebc:	6022      	str	r2, [r4, #0]
 8002ebe:	2210      	movs	r2, #16
 8002ec0:	e7b7      	b.n	8002e32 <_printf_i+0xd2>
 8002ec2:	064d      	lsls	r5, r1, #25
 8002ec4:	bf48      	it	mi
 8002ec6:	b29b      	uxthmi	r3, r3
 8002ec8:	e7ef      	b.n	8002eaa <_printf_i+0x14a>
 8002eca:	4665      	mov	r5, ip
 8002ecc:	fbb3 f1f2 	udiv	r1, r3, r2
 8002ed0:	fb02 3311 	mls	r3, r2, r1, r3
 8002ed4:	5cc3      	ldrb	r3, [r0, r3]
 8002ed6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002eda:	460b      	mov	r3, r1
 8002edc:	2900      	cmp	r1, #0
 8002ede:	d1f5      	bne.n	8002ecc <_printf_i+0x16c>
 8002ee0:	e7b9      	b.n	8002e56 <_printf_i+0xf6>
 8002ee2:	6813      	ldr	r3, [r2, #0]
 8002ee4:	6825      	ldr	r5, [r4, #0]
 8002ee6:	1d18      	adds	r0, r3, #4
 8002ee8:	6961      	ldr	r1, [r4, #20]
 8002eea:	6010      	str	r0, [r2, #0]
 8002eec:	0628      	lsls	r0, r5, #24
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	d501      	bpl.n	8002ef6 <_printf_i+0x196>
 8002ef2:	6019      	str	r1, [r3, #0]
 8002ef4:	e002      	b.n	8002efc <_printf_i+0x19c>
 8002ef6:	066a      	lsls	r2, r5, #25
 8002ef8:	d5fb      	bpl.n	8002ef2 <_printf_i+0x192>
 8002efa:	8019      	strh	r1, [r3, #0]
 8002efc:	2300      	movs	r3, #0
 8002efe:	4665      	mov	r5, ip
 8002f00:	6123      	str	r3, [r4, #16]
 8002f02:	e7b9      	b.n	8002e78 <_printf_i+0x118>
 8002f04:	6813      	ldr	r3, [r2, #0]
 8002f06:	1d19      	adds	r1, r3, #4
 8002f08:	6011      	str	r1, [r2, #0]
 8002f0a:	681d      	ldr	r5, [r3, #0]
 8002f0c:	6862      	ldr	r2, [r4, #4]
 8002f0e:	2100      	movs	r1, #0
 8002f10:	4628      	mov	r0, r5
 8002f12:	f000 f837 	bl	8002f84 <memchr>
 8002f16:	b108      	cbz	r0, 8002f1c <_printf_i+0x1bc>
 8002f18:	1b40      	subs	r0, r0, r5
 8002f1a:	6060      	str	r0, [r4, #4]
 8002f1c:	6863      	ldr	r3, [r4, #4]
 8002f1e:	6123      	str	r3, [r4, #16]
 8002f20:	2300      	movs	r3, #0
 8002f22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002f26:	e7a7      	b.n	8002e78 <_printf_i+0x118>
 8002f28:	6923      	ldr	r3, [r4, #16]
 8002f2a:	462a      	mov	r2, r5
 8002f2c:	4639      	mov	r1, r7
 8002f2e:	4630      	mov	r0, r6
 8002f30:	47c0      	blx	r8
 8002f32:	3001      	adds	r0, #1
 8002f34:	d0aa      	beq.n	8002e8c <_printf_i+0x12c>
 8002f36:	6823      	ldr	r3, [r4, #0]
 8002f38:	079b      	lsls	r3, r3, #30
 8002f3a:	d413      	bmi.n	8002f64 <_printf_i+0x204>
 8002f3c:	68e0      	ldr	r0, [r4, #12]
 8002f3e:	9b03      	ldr	r3, [sp, #12]
 8002f40:	4298      	cmp	r0, r3
 8002f42:	bfb8      	it	lt
 8002f44:	4618      	movlt	r0, r3
 8002f46:	e7a3      	b.n	8002e90 <_printf_i+0x130>
 8002f48:	2301      	movs	r3, #1
 8002f4a:	464a      	mov	r2, r9
 8002f4c:	4639      	mov	r1, r7
 8002f4e:	4630      	mov	r0, r6
 8002f50:	47c0      	blx	r8
 8002f52:	3001      	adds	r0, #1
 8002f54:	d09a      	beq.n	8002e8c <_printf_i+0x12c>
 8002f56:	3501      	adds	r5, #1
 8002f58:	68e3      	ldr	r3, [r4, #12]
 8002f5a:	9a03      	ldr	r2, [sp, #12]
 8002f5c:	1a9b      	subs	r3, r3, r2
 8002f5e:	42ab      	cmp	r3, r5
 8002f60:	dcf2      	bgt.n	8002f48 <_printf_i+0x1e8>
 8002f62:	e7eb      	b.n	8002f3c <_printf_i+0x1dc>
 8002f64:	2500      	movs	r5, #0
 8002f66:	f104 0919 	add.w	r9, r4, #25
 8002f6a:	e7f5      	b.n	8002f58 <_printf_i+0x1f8>
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d1ac      	bne.n	8002eca <_printf_i+0x16a>
 8002f70:	7803      	ldrb	r3, [r0, #0]
 8002f72:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002f76:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002f7a:	e76c      	b.n	8002e56 <_printf_i+0xf6>
 8002f7c:	08003805 	.word	0x08003805
 8002f80:	08003816 	.word	0x08003816

08002f84 <memchr>:
 8002f84:	b510      	push	{r4, lr}
 8002f86:	b2c9      	uxtb	r1, r1
 8002f88:	4402      	add	r2, r0
 8002f8a:	4290      	cmp	r0, r2
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	d101      	bne.n	8002f94 <memchr+0x10>
 8002f90:	2300      	movs	r3, #0
 8002f92:	e003      	b.n	8002f9c <memchr+0x18>
 8002f94:	781c      	ldrb	r4, [r3, #0]
 8002f96:	3001      	adds	r0, #1
 8002f98:	428c      	cmp	r4, r1
 8002f9a:	d1f6      	bne.n	8002f8a <memchr+0x6>
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	bd10      	pop	{r4, pc}

08002fa0 <memcpy>:
 8002fa0:	b510      	push	{r4, lr}
 8002fa2:	1e43      	subs	r3, r0, #1
 8002fa4:	440a      	add	r2, r1
 8002fa6:	4291      	cmp	r1, r2
 8002fa8:	d100      	bne.n	8002fac <memcpy+0xc>
 8002faa:	bd10      	pop	{r4, pc}
 8002fac:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002fb0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002fb4:	e7f7      	b.n	8002fa6 <memcpy+0x6>

08002fb6 <memmove>:
 8002fb6:	4288      	cmp	r0, r1
 8002fb8:	b510      	push	{r4, lr}
 8002fba:	eb01 0302 	add.w	r3, r1, r2
 8002fbe:	d807      	bhi.n	8002fd0 <memmove+0x1a>
 8002fc0:	1e42      	subs	r2, r0, #1
 8002fc2:	4299      	cmp	r1, r3
 8002fc4:	d00a      	beq.n	8002fdc <memmove+0x26>
 8002fc6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002fca:	f802 4f01 	strb.w	r4, [r2, #1]!
 8002fce:	e7f8      	b.n	8002fc2 <memmove+0xc>
 8002fd0:	4283      	cmp	r3, r0
 8002fd2:	d9f5      	bls.n	8002fc0 <memmove+0xa>
 8002fd4:	1881      	adds	r1, r0, r2
 8002fd6:	1ad2      	subs	r2, r2, r3
 8002fd8:	42d3      	cmn	r3, r2
 8002fda:	d100      	bne.n	8002fde <memmove+0x28>
 8002fdc:	bd10      	pop	{r4, pc}
 8002fde:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002fe2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8002fe6:	e7f7      	b.n	8002fd8 <memmove+0x22>

08002fe8 <_free_r>:
 8002fe8:	b538      	push	{r3, r4, r5, lr}
 8002fea:	4605      	mov	r5, r0
 8002fec:	2900      	cmp	r1, #0
 8002fee:	d043      	beq.n	8003078 <_free_r+0x90>
 8002ff0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002ff4:	1f0c      	subs	r4, r1, #4
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	bfb8      	it	lt
 8002ffa:	18e4      	addlt	r4, r4, r3
 8002ffc:	f000 f8d0 	bl	80031a0 <__malloc_lock>
 8003000:	4a1e      	ldr	r2, [pc, #120]	; (800307c <_free_r+0x94>)
 8003002:	6813      	ldr	r3, [r2, #0]
 8003004:	4610      	mov	r0, r2
 8003006:	b933      	cbnz	r3, 8003016 <_free_r+0x2e>
 8003008:	6063      	str	r3, [r4, #4]
 800300a:	6014      	str	r4, [r2, #0]
 800300c:	4628      	mov	r0, r5
 800300e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003012:	f000 b8c6 	b.w	80031a2 <__malloc_unlock>
 8003016:	42a3      	cmp	r3, r4
 8003018:	d90b      	bls.n	8003032 <_free_r+0x4a>
 800301a:	6821      	ldr	r1, [r4, #0]
 800301c:	1862      	adds	r2, r4, r1
 800301e:	4293      	cmp	r3, r2
 8003020:	bf01      	itttt	eq
 8003022:	681a      	ldreq	r2, [r3, #0]
 8003024:	685b      	ldreq	r3, [r3, #4]
 8003026:	1852      	addeq	r2, r2, r1
 8003028:	6022      	streq	r2, [r4, #0]
 800302a:	6063      	str	r3, [r4, #4]
 800302c:	6004      	str	r4, [r0, #0]
 800302e:	e7ed      	b.n	800300c <_free_r+0x24>
 8003030:	4613      	mov	r3, r2
 8003032:	685a      	ldr	r2, [r3, #4]
 8003034:	b10a      	cbz	r2, 800303a <_free_r+0x52>
 8003036:	42a2      	cmp	r2, r4
 8003038:	d9fa      	bls.n	8003030 <_free_r+0x48>
 800303a:	6819      	ldr	r1, [r3, #0]
 800303c:	1858      	adds	r0, r3, r1
 800303e:	42a0      	cmp	r0, r4
 8003040:	d10b      	bne.n	800305a <_free_r+0x72>
 8003042:	6820      	ldr	r0, [r4, #0]
 8003044:	4401      	add	r1, r0
 8003046:	1858      	adds	r0, r3, r1
 8003048:	4282      	cmp	r2, r0
 800304a:	6019      	str	r1, [r3, #0]
 800304c:	d1de      	bne.n	800300c <_free_r+0x24>
 800304e:	6810      	ldr	r0, [r2, #0]
 8003050:	6852      	ldr	r2, [r2, #4]
 8003052:	4401      	add	r1, r0
 8003054:	6019      	str	r1, [r3, #0]
 8003056:	605a      	str	r2, [r3, #4]
 8003058:	e7d8      	b.n	800300c <_free_r+0x24>
 800305a:	d902      	bls.n	8003062 <_free_r+0x7a>
 800305c:	230c      	movs	r3, #12
 800305e:	602b      	str	r3, [r5, #0]
 8003060:	e7d4      	b.n	800300c <_free_r+0x24>
 8003062:	6820      	ldr	r0, [r4, #0]
 8003064:	1821      	adds	r1, r4, r0
 8003066:	428a      	cmp	r2, r1
 8003068:	bf01      	itttt	eq
 800306a:	6811      	ldreq	r1, [r2, #0]
 800306c:	6852      	ldreq	r2, [r2, #4]
 800306e:	1809      	addeq	r1, r1, r0
 8003070:	6021      	streq	r1, [r4, #0]
 8003072:	6062      	str	r2, [r4, #4]
 8003074:	605c      	str	r4, [r3, #4]
 8003076:	e7c9      	b.n	800300c <_free_r+0x24>
 8003078:	bd38      	pop	{r3, r4, r5, pc}
 800307a:	bf00      	nop
 800307c:	20000104 	.word	0x20000104

08003080 <_malloc_r>:
 8003080:	b570      	push	{r4, r5, r6, lr}
 8003082:	1ccd      	adds	r5, r1, #3
 8003084:	f025 0503 	bic.w	r5, r5, #3
 8003088:	3508      	adds	r5, #8
 800308a:	2d0c      	cmp	r5, #12
 800308c:	bf38      	it	cc
 800308e:	250c      	movcc	r5, #12
 8003090:	2d00      	cmp	r5, #0
 8003092:	4606      	mov	r6, r0
 8003094:	db01      	blt.n	800309a <_malloc_r+0x1a>
 8003096:	42a9      	cmp	r1, r5
 8003098:	d903      	bls.n	80030a2 <_malloc_r+0x22>
 800309a:	230c      	movs	r3, #12
 800309c:	6033      	str	r3, [r6, #0]
 800309e:	2000      	movs	r0, #0
 80030a0:	bd70      	pop	{r4, r5, r6, pc}
 80030a2:	f000 f87d 	bl	80031a0 <__malloc_lock>
 80030a6:	4a21      	ldr	r2, [pc, #132]	; (800312c <_malloc_r+0xac>)
 80030a8:	6814      	ldr	r4, [r2, #0]
 80030aa:	4621      	mov	r1, r4
 80030ac:	b991      	cbnz	r1, 80030d4 <_malloc_r+0x54>
 80030ae:	4c20      	ldr	r4, [pc, #128]	; (8003130 <_malloc_r+0xb0>)
 80030b0:	6823      	ldr	r3, [r4, #0]
 80030b2:	b91b      	cbnz	r3, 80030bc <_malloc_r+0x3c>
 80030b4:	4630      	mov	r0, r6
 80030b6:	f000 f863 	bl	8003180 <_sbrk_r>
 80030ba:	6020      	str	r0, [r4, #0]
 80030bc:	4629      	mov	r1, r5
 80030be:	4630      	mov	r0, r6
 80030c0:	f000 f85e 	bl	8003180 <_sbrk_r>
 80030c4:	1c43      	adds	r3, r0, #1
 80030c6:	d124      	bne.n	8003112 <_malloc_r+0x92>
 80030c8:	230c      	movs	r3, #12
 80030ca:	4630      	mov	r0, r6
 80030cc:	6033      	str	r3, [r6, #0]
 80030ce:	f000 f868 	bl	80031a2 <__malloc_unlock>
 80030d2:	e7e4      	b.n	800309e <_malloc_r+0x1e>
 80030d4:	680b      	ldr	r3, [r1, #0]
 80030d6:	1b5b      	subs	r3, r3, r5
 80030d8:	d418      	bmi.n	800310c <_malloc_r+0x8c>
 80030da:	2b0b      	cmp	r3, #11
 80030dc:	d90f      	bls.n	80030fe <_malloc_r+0x7e>
 80030de:	600b      	str	r3, [r1, #0]
 80030e0:	18cc      	adds	r4, r1, r3
 80030e2:	50cd      	str	r5, [r1, r3]
 80030e4:	4630      	mov	r0, r6
 80030e6:	f000 f85c 	bl	80031a2 <__malloc_unlock>
 80030ea:	f104 000b 	add.w	r0, r4, #11
 80030ee:	1d23      	adds	r3, r4, #4
 80030f0:	f020 0007 	bic.w	r0, r0, #7
 80030f4:	1ac3      	subs	r3, r0, r3
 80030f6:	d0d3      	beq.n	80030a0 <_malloc_r+0x20>
 80030f8:	425a      	negs	r2, r3
 80030fa:	50e2      	str	r2, [r4, r3]
 80030fc:	e7d0      	b.n	80030a0 <_malloc_r+0x20>
 80030fe:	684b      	ldr	r3, [r1, #4]
 8003100:	428c      	cmp	r4, r1
 8003102:	bf16      	itet	ne
 8003104:	6063      	strne	r3, [r4, #4]
 8003106:	6013      	streq	r3, [r2, #0]
 8003108:	460c      	movne	r4, r1
 800310a:	e7eb      	b.n	80030e4 <_malloc_r+0x64>
 800310c:	460c      	mov	r4, r1
 800310e:	6849      	ldr	r1, [r1, #4]
 8003110:	e7cc      	b.n	80030ac <_malloc_r+0x2c>
 8003112:	1cc4      	adds	r4, r0, #3
 8003114:	f024 0403 	bic.w	r4, r4, #3
 8003118:	42a0      	cmp	r0, r4
 800311a:	d005      	beq.n	8003128 <_malloc_r+0xa8>
 800311c:	1a21      	subs	r1, r4, r0
 800311e:	4630      	mov	r0, r6
 8003120:	f000 f82e 	bl	8003180 <_sbrk_r>
 8003124:	3001      	adds	r0, #1
 8003126:	d0cf      	beq.n	80030c8 <_malloc_r+0x48>
 8003128:	6025      	str	r5, [r4, #0]
 800312a:	e7db      	b.n	80030e4 <_malloc_r+0x64>
 800312c:	20000104 	.word	0x20000104
 8003130:	20000108 	.word	0x20000108

08003134 <_realloc_r>:
 8003134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003136:	4607      	mov	r7, r0
 8003138:	4614      	mov	r4, r2
 800313a:	460e      	mov	r6, r1
 800313c:	b921      	cbnz	r1, 8003148 <_realloc_r+0x14>
 800313e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003142:	4611      	mov	r1, r2
 8003144:	f7ff bf9c 	b.w	8003080 <_malloc_r>
 8003148:	b922      	cbnz	r2, 8003154 <_realloc_r+0x20>
 800314a:	f7ff ff4d 	bl	8002fe8 <_free_r>
 800314e:	4625      	mov	r5, r4
 8003150:	4628      	mov	r0, r5
 8003152:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003154:	f000 f826 	bl	80031a4 <_malloc_usable_size_r>
 8003158:	42a0      	cmp	r0, r4
 800315a:	d20f      	bcs.n	800317c <_realloc_r+0x48>
 800315c:	4621      	mov	r1, r4
 800315e:	4638      	mov	r0, r7
 8003160:	f7ff ff8e 	bl	8003080 <_malloc_r>
 8003164:	4605      	mov	r5, r0
 8003166:	2800      	cmp	r0, #0
 8003168:	d0f2      	beq.n	8003150 <_realloc_r+0x1c>
 800316a:	4631      	mov	r1, r6
 800316c:	4622      	mov	r2, r4
 800316e:	f7ff ff17 	bl	8002fa0 <memcpy>
 8003172:	4631      	mov	r1, r6
 8003174:	4638      	mov	r0, r7
 8003176:	f7ff ff37 	bl	8002fe8 <_free_r>
 800317a:	e7e9      	b.n	8003150 <_realloc_r+0x1c>
 800317c:	4635      	mov	r5, r6
 800317e:	e7e7      	b.n	8003150 <_realloc_r+0x1c>

08003180 <_sbrk_r>:
 8003180:	b538      	push	{r3, r4, r5, lr}
 8003182:	2300      	movs	r3, #0
 8003184:	4c05      	ldr	r4, [pc, #20]	; (800319c <_sbrk_r+0x1c>)
 8003186:	4605      	mov	r5, r0
 8003188:	4608      	mov	r0, r1
 800318a:	6023      	str	r3, [r4, #0]
 800318c:	f7fd fc24 	bl	80009d8 <_sbrk>
 8003190:	1c43      	adds	r3, r0, #1
 8003192:	d102      	bne.n	800319a <_sbrk_r+0x1a>
 8003194:	6823      	ldr	r3, [r4, #0]
 8003196:	b103      	cbz	r3, 800319a <_sbrk_r+0x1a>
 8003198:	602b      	str	r3, [r5, #0]
 800319a:	bd38      	pop	{r3, r4, r5, pc}
 800319c:	20000a28 	.word	0x20000a28

080031a0 <__malloc_lock>:
 80031a0:	4770      	bx	lr

080031a2 <__malloc_unlock>:
 80031a2:	4770      	bx	lr

080031a4 <_malloc_usable_size_r>:
 80031a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80031a8:	1f18      	subs	r0, r3, #4
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	bfbc      	itt	lt
 80031ae:	580b      	ldrlt	r3, [r1, r0]
 80031b0:	18c0      	addlt	r0, r0, r3
 80031b2:	4770      	bx	lr

080031b4 <_init>:
 80031b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031b6:	bf00      	nop
 80031b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031ba:	bc08      	pop	{r3}
 80031bc:	469e      	mov	lr, r3
 80031be:	4770      	bx	lr

080031c0 <_fini>:
 80031c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031c2:	bf00      	nop
 80031c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031c6:	bc08      	pop	{r3}
 80031c8:	469e      	mov	lr, r3
 80031ca:	4770      	bx	lr
