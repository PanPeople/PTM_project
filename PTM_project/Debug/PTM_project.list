
PTM_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001c44  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08001d50  08001d50  00011d50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001d7c  08001d7c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001d7c  08001d7c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001d7c  08001d7c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001d7c  08001d7c  00011d7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001d80  08001d80  00011d80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001d84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000108c  2000000c  08001d90  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001098  08001d90  00021098  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007a8e  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000137f  00000000  00000000  00027ac3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008b0  00000000  00000000  00028e48  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000830  00000000  00000000  000296f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016137  00000000  00000000  00029f28  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006b58  00000000  00000000  0004005f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007f928  00000000  00000000  00046bb7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c64df  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002394  00000000  00000000  000c655c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001d38 	.word	0x08001d38

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001d38 	.word	0x08001d38

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	for(uint16_t i = 0; i < (LCD_X*LCD_Y/8); i ++){
 8000152:	2300      	movs	r3, #0
 8000154:	80fb      	strh	r3, [r7, #6]
 8000156:	e006      	b.n	8000166 <main+0x1a>
		buffer[i]= 0x00;
 8000158:	88fb      	ldrh	r3, [r7, #6]
 800015a:	4a23      	ldr	r2, [pc, #140]	; (80001e8 <main+0x9c>)
 800015c:	2100      	movs	r1, #0
 800015e:	54d1      	strb	r1, [r2, r3]
	for(uint16_t i = 0; i < (LCD_X*LCD_Y/8); i ++){
 8000160:	88fb      	ldrh	r3, [r7, #6]
 8000162:	3301      	adds	r3, #1
 8000164:	80fb      	strh	r3, [r7, #6]
 8000166:	88fb      	ldrh	r3, [r7, #6]
 8000168:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 800016c:	d3f4      	bcc.n	8000158 <main+0xc>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800016e:	f000 fb37 	bl	80007e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000172:	f000 f83b 	bl	80001ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000176:	f000 f8d9 	bl	800032c <MX_GPIO_Init>
  MX_I2C1_Init();
 800017a:	f000 f873 	bl	8000264 <MX_I2C1_Init>
  MX_SPI1_Init();
 800017e:	f000 f89f 	bl	80002c0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  LCD_Initialize();
 8000182:	f000 f955 	bl	8000430 <LCD_Initialize>
  LCD_Clear();
 8000186:	f000 f9c5 	bl	8000514 <LCD_Clear>

  for(uint16_t x = 0; x < LCD_X; x ++){
 800018a:	2300      	movs	r3, #0
 800018c:	80bb      	strh	r3, [r7, #4]
 800018e:	e00e      	b.n	80001ae <main+0x62>
      LCD_draw_pixel(x, 0);
 8000190:	88bb      	ldrh	r3, [r7, #4]
 8000192:	b2db      	uxtb	r3, r3
 8000194:	2100      	movs	r1, #0
 8000196:	4618      	mov	r0, r3
 8000198:	f000 f9da 	bl	8000550 <LCD_draw_pixel>
      LCD_draw_pixel(x, LCD_Y);
 800019c:	88bb      	ldrh	r3, [r7, #4]
 800019e:	b2db      	uxtb	r3, r3
 80001a0:	2130      	movs	r1, #48	; 0x30
 80001a2:	4618      	mov	r0, r3
 80001a4:	f000 f9d4 	bl	8000550 <LCD_draw_pixel>
  for(uint16_t x = 0; x < LCD_X; x ++){
 80001a8:	88bb      	ldrh	r3, [r7, #4]
 80001aa:	3301      	adds	r3, #1
 80001ac:	80bb      	strh	r3, [r7, #4]
 80001ae:	88bb      	ldrh	r3, [r7, #4]
 80001b0:	2b53      	cmp	r3, #83	; 0x53
 80001b2:	d9ed      	bls.n	8000190 <main+0x44>

  }

  for(uint16_t y = 0; y < LCD_Y; y ++){
 80001b4:	2300      	movs	r3, #0
 80001b6:	807b      	strh	r3, [r7, #2]
 80001b8:	e00e      	b.n	80001d8 <main+0x8c>
      LCD_draw_pixel(0, y);
 80001ba:	887b      	ldrh	r3, [r7, #2]
 80001bc:	b2db      	uxtb	r3, r3
 80001be:	4619      	mov	r1, r3
 80001c0:	2000      	movs	r0, #0
 80001c2:	f000 f9c5 	bl	8000550 <LCD_draw_pixel>
      LCD_draw_pixel(LCD_X, y);
 80001c6:	887b      	ldrh	r3, [r7, #2]
 80001c8:	b2db      	uxtb	r3, r3
 80001ca:	4619      	mov	r1, r3
 80001cc:	2054      	movs	r0, #84	; 0x54
 80001ce:	f000 f9bf 	bl	8000550 <LCD_draw_pixel>
  for(uint16_t y = 0; y < LCD_Y; y ++){
 80001d2:	887b      	ldrh	r3, [r7, #2]
 80001d4:	3301      	adds	r3, #1
 80001d6:	807b      	strh	r3, [r7, #2]
 80001d8:	887b      	ldrh	r3, [r7, #2]
 80001da:	2b2f      	cmp	r3, #47	; 0x2f
 80001dc:	d9ed      	bls.n	80001ba <main+0x6e>

  }


  LCD_draw_pixel(40, 20);
 80001de:	2114      	movs	r1, #20
 80001e0:	2028      	movs	r0, #40	; 0x28
 80001e2:	f000 f9b5 	bl	8000550 <LCD_draw_pixel>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001e6:	e7fe      	b.n	80001e6 <main+0x9a>
 80001e8:	2000007c 	.word	0x2000007c

080001ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b090      	sub	sp, #64	; 0x40
 80001f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001f2:	f107 0318 	add.w	r3, r7, #24
 80001f6:	2228      	movs	r2, #40	; 0x28
 80001f8:	2100      	movs	r1, #0
 80001fa:	4618      	mov	r0, r3
 80001fc:	f001 fd94 	bl	8001d28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000200:	1d3b      	adds	r3, r7, #4
 8000202:	2200      	movs	r2, #0
 8000204:	601a      	str	r2, [r3, #0]
 8000206:	605a      	str	r2, [r3, #4]
 8000208:	609a      	str	r2, [r3, #8]
 800020a:	60da      	str	r2, [r3, #12]
 800020c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800020e:	2302      	movs	r3, #2
 8000210:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000212:	2301      	movs	r3, #1
 8000214:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000216:	2310      	movs	r3, #16
 8000218:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800021a:	2300      	movs	r3, #0
 800021c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800021e:	f107 0318 	add.w	r3, r7, #24
 8000222:	4618      	mov	r0, r3
 8000224:	f000 feee 	bl	8001004 <HAL_RCC_OscConfig>
 8000228:	4603      	mov	r3, r0
 800022a:	2b00      	cmp	r3, #0
 800022c:	d001      	beq.n	8000232 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800022e:	f000 f9d1 	bl	80005d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000232:	230f      	movs	r3, #15
 8000234:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000236:	2300      	movs	r3, #0
 8000238:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800023a:	2300      	movs	r3, #0
 800023c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800023e:	2300      	movs	r3, #0
 8000240:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000242:	2300      	movs	r3, #0
 8000244:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000246:	1d3b      	adds	r3, r7, #4
 8000248:	2100      	movs	r1, #0
 800024a:	4618      	mov	r0, r3
 800024c:	f001 f95a 	bl	8001504 <HAL_RCC_ClockConfig>
 8000250:	4603      	mov	r3, r0
 8000252:	2b00      	cmp	r3, #0
 8000254:	d001      	beq.n	800025a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000256:	f000 f9bd 	bl	80005d4 <Error_Handler>
  }
}
 800025a:	bf00      	nop
 800025c:	3740      	adds	r7, #64	; 0x40
 800025e:	46bd      	mov	sp, r7
 8000260:	bd80      	pop	{r7, pc}
	...

08000264 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000268:	4b12      	ldr	r3, [pc, #72]	; (80002b4 <MX_I2C1_Init+0x50>)
 800026a:	4a13      	ldr	r2, [pc, #76]	; (80002b8 <MX_I2C1_Init+0x54>)
 800026c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800026e:	4b11      	ldr	r3, [pc, #68]	; (80002b4 <MX_I2C1_Init+0x50>)
 8000270:	4a12      	ldr	r2, [pc, #72]	; (80002bc <MX_I2C1_Init+0x58>)
 8000272:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000274:	4b0f      	ldr	r3, [pc, #60]	; (80002b4 <MX_I2C1_Init+0x50>)
 8000276:	2200      	movs	r2, #0
 8000278:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800027a:	4b0e      	ldr	r3, [pc, #56]	; (80002b4 <MX_I2C1_Init+0x50>)
 800027c:	2200      	movs	r2, #0
 800027e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000280:	4b0c      	ldr	r3, [pc, #48]	; (80002b4 <MX_I2C1_Init+0x50>)
 8000282:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000286:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000288:	4b0a      	ldr	r3, [pc, #40]	; (80002b4 <MX_I2C1_Init+0x50>)
 800028a:	2200      	movs	r2, #0
 800028c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800028e:	4b09      	ldr	r3, [pc, #36]	; (80002b4 <MX_I2C1_Init+0x50>)
 8000290:	2200      	movs	r2, #0
 8000292:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000294:	4b07      	ldr	r3, [pc, #28]	; (80002b4 <MX_I2C1_Init+0x50>)
 8000296:	2200      	movs	r2, #0
 8000298:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800029a:	4b06      	ldr	r3, [pc, #24]	; (80002b4 <MX_I2C1_Init+0x50>)
 800029c:	2200      	movs	r2, #0
 800029e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80002a0:	4804      	ldr	r0, [pc, #16]	; (80002b4 <MX_I2C1_Init+0x50>)
 80002a2:	f000 fd77 	bl	8000d94 <HAL_I2C_Init>
 80002a6:	4603      	mov	r3, r0
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d001      	beq.n	80002b0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80002ac:	f000 f992 	bl	80005d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80002b0:	bf00      	nop
 80002b2:	bd80      	pop	{r7, pc}
 80002b4:	20000028 	.word	0x20000028
 80002b8:	40005400 	.word	0x40005400
 80002bc:	000186a0 	.word	0x000186a0

080002c0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80002c4:	4b17      	ldr	r3, [pc, #92]	; (8000324 <MX_SPI1_Init+0x64>)
 80002c6:	4a18      	ldr	r2, [pc, #96]	; (8000328 <MX_SPI1_Init+0x68>)
 80002c8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80002ca:	4b16      	ldr	r3, [pc, #88]	; (8000324 <MX_SPI1_Init+0x64>)
 80002cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80002d0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80002d2:	4b14      	ldr	r3, [pc, #80]	; (8000324 <MX_SPI1_Init+0x64>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80002d8:	4b12      	ldr	r3, [pc, #72]	; (8000324 <MX_SPI1_Init+0x64>)
 80002da:	2200      	movs	r2, #0
 80002dc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80002de:	4b11      	ldr	r3, [pc, #68]	; (8000324 <MX_SPI1_Init+0x64>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80002e4:	4b0f      	ldr	r3, [pc, #60]	; (8000324 <MX_SPI1_Init+0x64>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80002ea:	4b0e      	ldr	r3, [pc, #56]	; (8000324 <MX_SPI1_Init+0x64>)
 80002ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80002f0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80002f2:	4b0c      	ldr	r3, [pc, #48]	; (8000324 <MX_SPI1_Init+0x64>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80002f8:	4b0a      	ldr	r3, [pc, #40]	; (8000324 <MX_SPI1_Init+0x64>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80002fe:	4b09      	ldr	r3, [pc, #36]	; (8000324 <MX_SPI1_Init+0x64>)
 8000300:	2200      	movs	r2, #0
 8000302:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000304:	4b07      	ldr	r3, [pc, #28]	; (8000324 <MX_SPI1_Init+0x64>)
 8000306:	2200      	movs	r2, #0
 8000308:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800030a:	4b06      	ldr	r3, [pc, #24]	; (8000324 <MX_SPI1_Init+0x64>)
 800030c:	220a      	movs	r2, #10
 800030e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000310:	4804      	ldr	r0, [pc, #16]	; (8000324 <MX_SPI1_Init+0x64>)
 8000312:	f001 fa7f 	bl	8001814 <HAL_SPI_Init>
 8000316:	4603      	mov	r3, r0
 8000318:	2b00      	cmp	r3, #0
 800031a:	d001      	beq.n	8000320 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800031c:	f000 f95a 	bl	80005d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000320:	bf00      	nop
 8000322:	bd80      	pop	{r7, pc}
 8000324:	2000103c 	.word	0x2000103c
 8000328:	40013000 	.word	0x40013000

0800032c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b088      	sub	sp, #32
 8000330:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000332:	f107 0310 	add.w	r3, r7, #16
 8000336:	2200      	movs	r2, #0
 8000338:	601a      	str	r2, [r3, #0]
 800033a:	605a      	str	r2, [r3, #4]
 800033c:	609a      	str	r2, [r3, #8]
 800033e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000340:	4b37      	ldr	r3, [pc, #220]	; (8000420 <MX_GPIO_Init+0xf4>)
 8000342:	699b      	ldr	r3, [r3, #24]
 8000344:	4a36      	ldr	r2, [pc, #216]	; (8000420 <MX_GPIO_Init+0xf4>)
 8000346:	f043 0310 	orr.w	r3, r3, #16
 800034a:	6193      	str	r3, [r2, #24]
 800034c:	4b34      	ldr	r3, [pc, #208]	; (8000420 <MX_GPIO_Init+0xf4>)
 800034e:	699b      	ldr	r3, [r3, #24]
 8000350:	f003 0310 	and.w	r3, r3, #16
 8000354:	60fb      	str	r3, [r7, #12]
 8000356:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000358:	4b31      	ldr	r3, [pc, #196]	; (8000420 <MX_GPIO_Init+0xf4>)
 800035a:	699b      	ldr	r3, [r3, #24]
 800035c:	4a30      	ldr	r2, [pc, #192]	; (8000420 <MX_GPIO_Init+0xf4>)
 800035e:	f043 0320 	orr.w	r3, r3, #32
 8000362:	6193      	str	r3, [r2, #24]
 8000364:	4b2e      	ldr	r3, [pc, #184]	; (8000420 <MX_GPIO_Init+0xf4>)
 8000366:	699b      	ldr	r3, [r3, #24]
 8000368:	f003 0320 	and.w	r3, r3, #32
 800036c:	60bb      	str	r3, [r7, #8]
 800036e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000370:	4b2b      	ldr	r3, [pc, #172]	; (8000420 <MX_GPIO_Init+0xf4>)
 8000372:	699b      	ldr	r3, [r3, #24]
 8000374:	4a2a      	ldr	r2, [pc, #168]	; (8000420 <MX_GPIO_Init+0xf4>)
 8000376:	f043 0304 	orr.w	r3, r3, #4
 800037a:	6193      	str	r3, [r2, #24]
 800037c:	4b28      	ldr	r3, [pc, #160]	; (8000420 <MX_GPIO_Init+0xf4>)
 800037e:	699b      	ldr	r3, [r3, #24]
 8000380:	f003 0304 	and.w	r3, r3, #4
 8000384:	607b      	str	r3, [r7, #4]
 8000386:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000388:	4b25      	ldr	r3, [pc, #148]	; (8000420 <MX_GPIO_Init+0xf4>)
 800038a:	699b      	ldr	r3, [r3, #24]
 800038c:	4a24      	ldr	r2, [pc, #144]	; (8000420 <MX_GPIO_Init+0xf4>)
 800038e:	f043 0308 	orr.w	r3, r3, #8
 8000392:	6193      	str	r3, [r2, #24]
 8000394:	4b22      	ldr	r3, [pc, #136]	; (8000420 <MX_GPIO_Init+0xf4>)
 8000396:	699b      	ldr	r3, [r3, #24]
 8000398:	f003 0308 	and.w	r3, r3, #8
 800039c:	603b      	str	r3, [r7, #0]
 800039e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80003a0:	2200      	movs	r2, #0
 80003a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003a6:	481f      	ldr	r0, [pc, #124]	; (8000424 <MX_GPIO_Init+0xf8>)
 80003a8:	f000 fcdc 	bl	8000d64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80003ac:	2200      	movs	r2, #0
 80003ae:	2140      	movs	r1, #64	; 0x40
 80003b0:	481d      	ldr	r0, [pc, #116]	; (8000428 <MX_GPIO_Init+0xfc>)
 80003b2:	f000 fcd7 	bl	8000d64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 80003b6:	2200      	movs	r2, #0
 80003b8:	2103      	movs	r1, #3
 80003ba:	481c      	ldr	r0, [pc, #112]	; (800042c <MX_GPIO_Init+0x100>)
 80003bc:	f000 fcd2 	bl	8000d64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80003c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003c6:	2301      	movs	r3, #1
 80003c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ca:	2300      	movs	r3, #0
 80003cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003ce:	2302      	movs	r3, #2
 80003d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003d2:	f107 0310 	add.w	r3, r7, #16
 80003d6:	4619      	mov	r1, r3
 80003d8:	4812      	ldr	r0, [pc, #72]	; (8000424 <MX_GPIO_Init+0xf8>)
 80003da:	f000 fb69 	bl	8000ab0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80003de:	2340      	movs	r3, #64	; 0x40
 80003e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003e2:	2301      	movs	r3, #1
 80003e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003e6:	2300      	movs	r3, #0
 80003e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003ea:	2302      	movs	r3, #2
 80003ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003ee:	f107 0310 	add.w	r3, r7, #16
 80003f2:	4619      	mov	r1, r3
 80003f4:	480c      	ldr	r0, [pc, #48]	; (8000428 <MX_GPIO_Init+0xfc>)
 80003f6:	f000 fb5b 	bl	8000ab0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80003fa:	2303      	movs	r3, #3
 80003fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003fe:	2301      	movs	r3, #1
 8000400:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000402:	2300      	movs	r3, #0
 8000404:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000406:	2302      	movs	r3, #2
 8000408:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800040a:	f107 0310 	add.w	r3, r7, #16
 800040e:	4619      	mov	r1, r3
 8000410:	4806      	ldr	r0, [pc, #24]	; (800042c <MX_GPIO_Init+0x100>)
 8000412:	f000 fb4d 	bl	8000ab0 <HAL_GPIO_Init>

}
 8000416:	bf00      	nop
 8000418:	3720      	adds	r7, #32
 800041a:	46bd      	mov	sp, r7
 800041c:	bd80      	pop	{r7, pc}
 800041e:	bf00      	nop
 8000420:	40021000 	.word	0x40021000
 8000424:	40011000 	.word	0x40011000
 8000428:	40010800 	.word	0x40010800
 800042c:	40010c00 	.word	0x40010c00

08000430 <LCD_Initialize>:
uint16_t map( uint16_t x, uint16_t in_min,uint16_t  in_max,uint16_t  out_min,uint16_t  out_max){
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}


void LCD_Initialize(){
 8000430:	b580      	push	{r7, lr}
 8000432:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000434:	2200      	movs	r2, #0
 8000436:	2101      	movs	r1, #1
 8000438:	480f      	ldr	r0, [pc, #60]	; (8000478 <LCD_Initialize+0x48>)
 800043a:	f000 fc93 	bl	8000d64 <HAL_GPIO_WritePin>
	HAL_Delay(1);//only needed once xD
 800043e:	2001      	movs	r0, #1
 8000440:	f000 fa30 	bl	80008a4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000444:	2201      	movs	r2, #1
 8000446:	2101      	movs	r1, #1
 8000448:	480b      	ldr	r0, [pc, #44]	; (8000478 <LCD_Initialize+0x48>)
 800044a:	f000 fc8b 	bl	8000d64 <HAL_GPIO_WritePin>

    LCD_Command(0x21);
 800044e:	2021      	movs	r0, #33	; 0x21
 8000450:	f000 f814 	bl	800047c <LCD_Command>
    LCD_Command(0xB1);
 8000454:	20b1      	movs	r0, #177	; 0xb1
 8000456:	f000 f811 	bl	800047c <LCD_Command>
    LCD_Command(0x04);
 800045a:	2004      	movs	r0, #4
 800045c:	f000 f80e 	bl	800047c <LCD_Command>
    LCD_Command(0x14);
 8000460:	2014      	movs	r0, #20
 8000462:	f000 f80b 	bl	800047c <LCD_Command>
    //LCD_command(0x80 | 0x2f)
    LCD_Command(0x20);
 8000466:	2020      	movs	r0, #32
 8000468:	f000 f808 	bl	800047c <LCD_Command>
    LCD_Command(0x0C);
 800046c:	200c      	movs	r0, #12
 800046e:	f000 f805 	bl	800047c <LCD_Command>


}
 8000472:	bf00      	nop
 8000474:	bd80      	pop	{r7, pc}
 8000476:	bf00      	nop
 8000478:	40010c00 	.word	0x40010c00

0800047c <LCD_Command>:

void LCD_Command(uint8_t cmd){
 800047c:	b580      	push	{r7, lr}
 800047e:	b082      	sub	sp, #8
 8000480:	af00      	add	r7, sp, #0
 8000482:	4603      	mov	r3, r0
 8000484:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000486:	2200      	movs	r2, #0
 8000488:	2140      	movs	r1, #64	; 0x40
 800048a:	480c      	ldr	r0, [pc, #48]	; (80004bc <LCD_Command+0x40>)
 800048c:	f000 fc6a 	bl	8000d64 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, LCD_C);
 8000490:	2200      	movs	r2, #0
 8000492:	2102      	movs	r1, #2
 8000494:	480a      	ldr	r0, [pc, #40]	; (80004c0 <LCD_Command+0x44>)
 8000496:	f000 fc65 	bl	8000d64 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &cmd, 1, HAL_MAX_DELAY);
 800049a:	1df9      	adds	r1, r7, #7
 800049c:	f04f 33ff 	mov.w	r3, #4294967295
 80004a0:	2201      	movs	r2, #1
 80004a2:	4808      	ldr	r0, [pc, #32]	; (80004c4 <LCD_Command+0x48>)
 80004a4:	f001 fa3a 	bl	800191c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 80004a8:	2201      	movs	r2, #1
 80004aa:	2140      	movs	r1, #64	; 0x40
 80004ac:	4803      	ldr	r0, [pc, #12]	; (80004bc <LCD_Command+0x40>)
 80004ae:	f000 fc59 	bl	8000d64 <HAL_GPIO_WritePin>

}
 80004b2:	bf00      	nop
 80004b4:	3708      	adds	r7, #8
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bd80      	pop	{r7, pc}
 80004ba:	bf00      	nop
 80004bc:	40010800 	.word	0x40010800
 80004c0:	40010c00 	.word	0x40010c00
 80004c4:	2000103c 	.word	0x2000103c

080004c8 <LCD_Data>:



void LCD_Data(uint8_t cmd){
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	4603      	mov	r3, r0
 80004d0:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80004d2:	2200      	movs	r2, #0
 80004d4:	2140      	movs	r1, #64	; 0x40
 80004d6:	480c      	ldr	r0, [pc, #48]	; (8000508 <LCD_Data+0x40>)
 80004d8:	f000 fc44 	bl	8000d64 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, LCD_D);
 80004dc:	2201      	movs	r2, #1
 80004de:	2102      	movs	r1, #2
 80004e0:	480a      	ldr	r0, [pc, #40]	; (800050c <LCD_Data+0x44>)
 80004e2:	f000 fc3f 	bl	8000d64 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &cmd, 1, HAL_MAX_DELAY);
 80004e6:	1df9      	adds	r1, r7, #7
 80004e8:	f04f 33ff 	mov.w	r3, #4294967295
 80004ec:	2201      	movs	r2, #1
 80004ee:	4808      	ldr	r0, [pc, #32]	; (8000510 <LCD_Data+0x48>)
 80004f0:	f001 fa14 	bl	800191c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 80004f4:	2201      	movs	r2, #1
 80004f6:	2140      	movs	r1, #64	; 0x40
 80004f8:	4803      	ldr	r0, [pc, #12]	; (8000508 <LCD_Data+0x40>)
 80004fa:	f000 fc33 	bl	8000d64 <HAL_GPIO_WritePin>

}
 80004fe:	bf00      	nop
 8000500:	3708      	adds	r7, #8
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	40010800 	.word	0x40010800
 800050c:	40010c00 	.word	0x40010c00
 8000510:	2000103c 	.word	0x2000103c

08000514 <LCD_Clear>:


void LCD_Clear(){
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
    LCD_Command(0b10000000);
 800051a:	2080      	movs	r0, #128	; 0x80
 800051c:	f7ff ffae 	bl	800047c <LCD_Command>

    for(uint16_t i = 0; i < (84*64/8); i ++){
 8000520:	2300      	movs	r3, #0
 8000522:	80fb      	strh	r3, [r7, #6]
 8000524:	e005      	b.n	8000532 <LCD_Clear+0x1e>
    	LCD_Data(0x00);
 8000526:	2000      	movs	r0, #0
 8000528:	f7ff ffce 	bl	80004c8 <LCD_Data>
    for(uint16_t i = 0; i < (84*64/8); i ++){
 800052c:	88fb      	ldrh	r3, [r7, #6]
 800052e:	3301      	adds	r3, #1
 8000530:	80fb      	strh	r3, [r7, #6]
 8000532:	88fb      	ldrh	r3, [r7, #6]
 8000534:	f5b3 7f28 	cmp.w	r3, #672	; 0x2a0
 8000538:	d3f5      	bcc.n	8000526 <LCD_Clear+0x12>
    }

    LCD_Command(0x80);
 800053a:	2080      	movs	r0, #128	; 0x80
 800053c:	f7ff ff9e 	bl	800047c <LCD_Command>
    LCD_Command(0x40);
 8000540:	2040      	movs	r0, #64	; 0x40
 8000542:	f7ff ff9b 	bl	800047c <LCD_Command>
}
 8000546:	bf00      	nop
 8000548:	3708      	adds	r7, #8
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
	...

08000550 <LCD_draw_pixel>:

    LCD_Command(0x80);
    LCD_Command(0x40);

}
void LCD_draw_pixel(uint8_t x, uint8_t y){
 8000550:	b480      	push	{r7}
 8000552:	b085      	sub	sp, #20
 8000554:	af00      	add	r7, sp, #0
 8000556:	4603      	mov	r3, r0
 8000558:	460a      	mov	r2, r1
 800055a:	71fb      	strb	r3, [r7, #7]
 800055c:	4613      	mov	r3, r2
 800055e:	71bb      	strb	r3, [r7, #6]


    if (x >= LCD_X){
 8000560:	79fb      	ldrb	r3, [r7, #7]
 8000562:	2b53      	cmp	r3, #83	; 0x53
 8000564:	d901      	bls.n	800056a <LCD_draw_pixel+0x1a>
    	x = LCD_X-1;
 8000566:	2353      	movs	r3, #83	; 0x53
 8000568:	71fb      	strb	r3, [r7, #7]

    if (y < 0){
    	y = 0;
    }

    if (y >= LCD_Y){
 800056a:	79bb      	ldrb	r3, [r7, #6]
 800056c:	2b2f      	cmp	r3, #47	; 0x2f
 800056e:	d901      	bls.n	8000574 <LCD_draw_pixel+0x24>
    	y = LCD_Y-1;
 8000570:	232f      	movs	r3, #47	; 0x2f
 8000572:	71bb      	strb	r3, [r7, #6]
    }



    uint16_t i = (uint16_t)(y/8)*LCD_X + x;
 8000574:	79bb      	ldrb	r3, [r7, #6]
 8000576:	08db      	lsrs	r3, r3, #3
 8000578:	b2db      	uxtb	r3, r3
 800057a:	b29b      	uxth	r3, r3
 800057c:	461a      	mov	r2, r3
 800057e:	0052      	lsls	r2, r2, #1
 8000580:	4413      	add	r3, r2
 8000582:	461a      	mov	r2, r3
 8000584:	00d2      	lsls	r2, r2, #3
 8000586:	1ad3      	subs	r3, r2, r3
 8000588:	009b      	lsls	r3, r3, #2
 800058a:	b29a      	uxth	r2, r3
 800058c:	79fb      	ldrb	r3, [r7, #7]
 800058e:	b29b      	uxth	r3, r3
 8000590:	4413      	add	r3, r2
 8000592:	81fb      	strh	r3, [r7, #14]

    uint16_t bit_counter = y%8;
 8000594:	79bb      	ldrb	r3, [r7, #6]
 8000596:	b29b      	uxth	r3, r3
 8000598:	f003 0307 	and.w	r3, r3, #7
 800059c:	81bb      	strh	r3, [r7, #12]
    uint16_t bit_value = buffer[i];
 800059e:	89fb      	ldrh	r3, [r7, #14]
 80005a0:	4a0b      	ldr	r2, [pc, #44]	; (80005d0 <LCD_draw_pixel+0x80>)
 80005a2:	5cd3      	ldrb	r3, [r2, r3]
 80005a4:	817b      	strh	r3, [r7, #10]
    bit_value |= (1<< bit_counter);
 80005a6:	89bb      	ldrh	r3, [r7, #12]
 80005a8:	2201      	movs	r2, #1
 80005aa:	fa02 f303 	lsl.w	r3, r2, r3
 80005ae:	b21a      	sxth	r2, r3
 80005b0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80005b4:	4313      	orrs	r3, r2
 80005b6:	b21b      	sxth	r3, r3
 80005b8:	817b      	strh	r3, [r7, #10]

    buffer[i]=(bit_value);
 80005ba:	89fb      	ldrh	r3, [r7, #14]
 80005bc:	897a      	ldrh	r2, [r7, #10]
 80005be:	b2d1      	uxtb	r1, r2
 80005c0:	4a03      	ldr	r2, [pc, #12]	; (80005d0 <LCD_draw_pixel+0x80>)
 80005c2:	54d1      	strb	r1, [r2, r3]


}
 80005c4:	bf00      	nop
 80005c6:	3714      	adds	r7, #20
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bc80      	pop	{r7}
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop
 80005d0:	2000007c 	.word	0x2000007c

080005d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005d8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005da:	e7fe      	b.n	80005da <Error_Handler+0x6>

080005dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	b085      	sub	sp, #20
 80005e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005e2:	4b15      	ldr	r3, [pc, #84]	; (8000638 <HAL_MspInit+0x5c>)
 80005e4:	699b      	ldr	r3, [r3, #24]
 80005e6:	4a14      	ldr	r2, [pc, #80]	; (8000638 <HAL_MspInit+0x5c>)
 80005e8:	f043 0301 	orr.w	r3, r3, #1
 80005ec:	6193      	str	r3, [r2, #24]
 80005ee:	4b12      	ldr	r3, [pc, #72]	; (8000638 <HAL_MspInit+0x5c>)
 80005f0:	699b      	ldr	r3, [r3, #24]
 80005f2:	f003 0301 	and.w	r3, r3, #1
 80005f6:	60bb      	str	r3, [r7, #8]
 80005f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005fa:	4b0f      	ldr	r3, [pc, #60]	; (8000638 <HAL_MspInit+0x5c>)
 80005fc:	69db      	ldr	r3, [r3, #28]
 80005fe:	4a0e      	ldr	r2, [pc, #56]	; (8000638 <HAL_MspInit+0x5c>)
 8000600:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000604:	61d3      	str	r3, [r2, #28]
 8000606:	4b0c      	ldr	r3, [pc, #48]	; (8000638 <HAL_MspInit+0x5c>)
 8000608:	69db      	ldr	r3, [r3, #28]
 800060a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800060e:	607b      	str	r3, [r7, #4]
 8000610:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000612:	4b0a      	ldr	r3, [pc, #40]	; (800063c <HAL_MspInit+0x60>)
 8000614:	685b      	ldr	r3, [r3, #4]
 8000616:	60fb      	str	r3, [r7, #12]
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800061e:	60fb      	str	r3, [r7, #12]
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000626:	60fb      	str	r3, [r7, #12]
 8000628:	4a04      	ldr	r2, [pc, #16]	; (800063c <HAL_MspInit+0x60>)
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800062e:	bf00      	nop
 8000630:	3714      	adds	r7, #20
 8000632:	46bd      	mov	sp, r7
 8000634:	bc80      	pop	{r7}
 8000636:	4770      	bx	lr
 8000638:	40021000 	.word	0x40021000
 800063c:	40010000 	.word	0x40010000

08000640 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b088      	sub	sp, #32
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000648:	f107 0310 	add.w	r3, r7, #16
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	4a15      	ldr	r2, [pc, #84]	; (80006b0 <HAL_I2C_MspInit+0x70>)
 800065c:	4293      	cmp	r3, r2
 800065e:	d123      	bne.n	80006a8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000660:	4b14      	ldr	r3, [pc, #80]	; (80006b4 <HAL_I2C_MspInit+0x74>)
 8000662:	699b      	ldr	r3, [r3, #24]
 8000664:	4a13      	ldr	r2, [pc, #76]	; (80006b4 <HAL_I2C_MspInit+0x74>)
 8000666:	f043 0308 	orr.w	r3, r3, #8
 800066a:	6193      	str	r3, [r2, #24]
 800066c:	4b11      	ldr	r3, [pc, #68]	; (80006b4 <HAL_I2C_MspInit+0x74>)
 800066e:	699b      	ldr	r3, [r3, #24]
 8000670:	f003 0308 	and.w	r3, r3, #8
 8000674:	60fb      	str	r3, [r7, #12]
 8000676:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000678:	23c0      	movs	r3, #192	; 0xc0
 800067a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800067c:	2312      	movs	r3, #18
 800067e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000680:	2303      	movs	r3, #3
 8000682:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000684:	f107 0310 	add.w	r3, r7, #16
 8000688:	4619      	mov	r1, r3
 800068a:	480b      	ldr	r0, [pc, #44]	; (80006b8 <HAL_I2C_MspInit+0x78>)
 800068c:	f000 fa10 	bl	8000ab0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000690:	4b08      	ldr	r3, [pc, #32]	; (80006b4 <HAL_I2C_MspInit+0x74>)
 8000692:	69db      	ldr	r3, [r3, #28]
 8000694:	4a07      	ldr	r2, [pc, #28]	; (80006b4 <HAL_I2C_MspInit+0x74>)
 8000696:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800069a:	61d3      	str	r3, [r2, #28]
 800069c:	4b05      	ldr	r3, [pc, #20]	; (80006b4 <HAL_I2C_MspInit+0x74>)
 800069e:	69db      	ldr	r3, [r3, #28]
 80006a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006a4:	60bb      	str	r3, [r7, #8]
 80006a6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80006a8:	bf00      	nop
 80006aa:	3720      	adds	r7, #32
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	40005400 	.word	0x40005400
 80006b4:	40021000 	.word	0x40021000
 80006b8:	40010c00 	.word	0x40010c00

080006bc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b088      	sub	sp, #32
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c4:	f107 0310 	add.w	r3, r7, #16
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
 80006cc:	605a      	str	r2, [r3, #4]
 80006ce:	609a      	str	r2, [r3, #8]
 80006d0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	4a15      	ldr	r2, [pc, #84]	; (800072c <HAL_SPI_MspInit+0x70>)
 80006d8:	4293      	cmp	r3, r2
 80006da:	d123      	bne.n	8000724 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80006dc:	4b14      	ldr	r3, [pc, #80]	; (8000730 <HAL_SPI_MspInit+0x74>)
 80006de:	699b      	ldr	r3, [r3, #24]
 80006e0:	4a13      	ldr	r2, [pc, #76]	; (8000730 <HAL_SPI_MspInit+0x74>)
 80006e2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80006e6:	6193      	str	r3, [r2, #24]
 80006e8:	4b11      	ldr	r3, [pc, #68]	; (8000730 <HAL_SPI_MspInit+0x74>)
 80006ea:	699b      	ldr	r3, [r3, #24]
 80006ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80006f0:	60fb      	str	r3, [r7, #12]
 80006f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f4:	4b0e      	ldr	r3, [pc, #56]	; (8000730 <HAL_SPI_MspInit+0x74>)
 80006f6:	699b      	ldr	r3, [r3, #24]
 80006f8:	4a0d      	ldr	r2, [pc, #52]	; (8000730 <HAL_SPI_MspInit+0x74>)
 80006fa:	f043 0304 	orr.w	r3, r3, #4
 80006fe:	6193      	str	r3, [r2, #24]
 8000700:	4b0b      	ldr	r3, [pc, #44]	; (8000730 <HAL_SPI_MspInit+0x74>)
 8000702:	699b      	ldr	r3, [r3, #24]
 8000704:	f003 0304 	and.w	r3, r3, #4
 8000708:	60bb      	str	r3, [r7, #8]
 800070a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800070c:	23a0      	movs	r3, #160	; 0xa0
 800070e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000710:	2302      	movs	r3, #2
 8000712:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000714:	2303      	movs	r3, #3
 8000716:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000718:	f107 0310 	add.w	r3, r7, #16
 800071c:	4619      	mov	r1, r3
 800071e:	4805      	ldr	r0, [pc, #20]	; (8000734 <HAL_SPI_MspInit+0x78>)
 8000720:	f000 f9c6 	bl	8000ab0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000724:	bf00      	nop
 8000726:	3720      	adds	r7, #32
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	40013000 	.word	0x40013000
 8000730:	40021000 	.word	0x40021000
 8000734:	40010800 	.word	0x40010800

08000738 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800073c:	e7fe      	b.n	800073c <NMI_Handler+0x4>

0800073e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800073e:	b480      	push	{r7}
 8000740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000742:	e7fe      	b.n	8000742 <HardFault_Handler+0x4>

08000744 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000748:	e7fe      	b.n	8000748 <MemManage_Handler+0x4>

0800074a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800074a:	b480      	push	{r7}
 800074c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800074e:	e7fe      	b.n	800074e <BusFault_Handler+0x4>

08000750 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000754:	e7fe      	b.n	8000754 <UsageFault_Handler+0x4>

08000756 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000756:	b480      	push	{r7}
 8000758:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800075a:	bf00      	nop
 800075c:	46bd      	mov	sp, r7
 800075e:	bc80      	pop	{r7}
 8000760:	4770      	bx	lr

08000762 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000762:	b480      	push	{r7}
 8000764:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000766:	bf00      	nop
 8000768:	46bd      	mov	sp, r7
 800076a:	bc80      	pop	{r7}
 800076c:	4770      	bx	lr

0800076e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800076e:	b480      	push	{r7}
 8000770:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000772:	bf00      	nop
 8000774:	46bd      	mov	sp, r7
 8000776:	bc80      	pop	{r7}
 8000778:	4770      	bx	lr

0800077a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800077a:	b580      	push	{r7, lr}
 800077c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800077e:	f000 f875 	bl	800086c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}

08000786 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000786:	b480      	push	{r7}
 8000788:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800078a:	bf00      	nop
 800078c:	46bd      	mov	sp, r7
 800078e:	bc80      	pop	{r7}
 8000790:	4770      	bx	lr
	...

08000794 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000794:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000796:	e003      	b.n	80007a0 <LoopCopyDataInit>

08000798 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000798:	4b0b      	ldr	r3, [pc, #44]	; (80007c8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800079a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800079c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800079e:	3104      	adds	r1, #4

080007a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80007a0:	480a      	ldr	r0, [pc, #40]	; (80007cc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80007a2:	4b0b      	ldr	r3, [pc, #44]	; (80007d0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80007a4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80007a6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80007a8:	d3f6      	bcc.n	8000798 <CopyDataInit>
  ldr r2, =_sbss
 80007aa:	4a0a      	ldr	r2, [pc, #40]	; (80007d4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80007ac:	e002      	b.n	80007b4 <LoopFillZerobss>

080007ae <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80007ae:	2300      	movs	r3, #0
  str r3, [r2], #4
 80007b0:	f842 3b04 	str.w	r3, [r2], #4

080007b4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80007b4:	4b08      	ldr	r3, [pc, #32]	; (80007d8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80007b6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80007b8:	d3f9      	bcc.n	80007ae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80007ba:	f7ff ffe4 	bl	8000786 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007be:	f001 fa8f 	bl	8001ce0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007c2:	f7ff fcc3 	bl	800014c <main>
  bx lr
 80007c6:	4770      	bx	lr
  ldr r3, =_sidata
 80007c8:	08001d84 	.word	0x08001d84
  ldr r0, =_sdata
 80007cc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80007d0:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 80007d4:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 80007d8:	20001098 	.word	0x20001098

080007dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007dc:	e7fe      	b.n	80007dc <ADC1_2_IRQHandler>
	...

080007e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007e4:	4b08      	ldr	r3, [pc, #32]	; (8000808 <HAL_Init+0x28>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4a07      	ldr	r2, [pc, #28]	; (8000808 <HAL_Init+0x28>)
 80007ea:	f043 0310 	orr.w	r3, r3, #16
 80007ee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007f0:	2003      	movs	r0, #3
 80007f2:	f000 f929 	bl	8000a48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007f6:	2000      	movs	r0, #0
 80007f8:	f000 f808 	bl	800080c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007fc:	f7ff feee 	bl	80005dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000800:	2300      	movs	r3, #0
}
 8000802:	4618      	mov	r0, r3
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	40022000 	.word	0x40022000

0800080c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000814:	4b12      	ldr	r3, [pc, #72]	; (8000860 <HAL_InitTick+0x54>)
 8000816:	681a      	ldr	r2, [r3, #0]
 8000818:	4b12      	ldr	r3, [pc, #72]	; (8000864 <HAL_InitTick+0x58>)
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	4619      	mov	r1, r3
 800081e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000822:	fbb3 f3f1 	udiv	r3, r3, r1
 8000826:	fbb2 f3f3 	udiv	r3, r2, r3
 800082a:	4618      	mov	r0, r3
 800082c:	f000 f933 	bl	8000a96 <HAL_SYSTICK_Config>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000836:	2301      	movs	r3, #1
 8000838:	e00e      	b.n	8000858 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	2b0f      	cmp	r3, #15
 800083e:	d80a      	bhi.n	8000856 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000840:	2200      	movs	r2, #0
 8000842:	6879      	ldr	r1, [r7, #4]
 8000844:	f04f 30ff 	mov.w	r0, #4294967295
 8000848:	f000 f909 	bl	8000a5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800084c:	4a06      	ldr	r2, [pc, #24]	; (8000868 <HAL_InitTick+0x5c>)
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000852:	2300      	movs	r3, #0
 8000854:	e000      	b.n	8000858 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000856:	2301      	movs	r3, #1
}
 8000858:	4618      	mov	r0, r3
 800085a:	3708      	adds	r7, #8
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	20000000 	.word	0x20000000
 8000864:	20000008 	.word	0x20000008
 8000868:	20000004 	.word	0x20000004

0800086c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000870:	4b05      	ldr	r3, [pc, #20]	; (8000888 <HAL_IncTick+0x1c>)
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	461a      	mov	r2, r3
 8000876:	4b05      	ldr	r3, [pc, #20]	; (800088c <HAL_IncTick+0x20>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	4413      	add	r3, r2
 800087c:	4a03      	ldr	r2, [pc, #12]	; (800088c <HAL_IncTick+0x20>)
 800087e:	6013      	str	r3, [r2, #0]
}
 8000880:	bf00      	nop
 8000882:	46bd      	mov	sp, r7
 8000884:	bc80      	pop	{r7}
 8000886:	4770      	bx	lr
 8000888:	20000008 	.word	0x20000008
 800088c:	20001094 	.word	0x20001094

08000890 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  return uwTick;
 8000894:	4b02      	ldr	r3, [pc, #8]	; (80008a0 <HAL_GetTick+0x10>)
 8000896:	681b      	ldr	r3, [r3, #0]
}
 8000898:	4618      	mov	r0, r3
 800089a:	46bd      	mov	sp, r7
 800089c:	bc80      	pop	{r7}
 800089e:	4770      	bx	lr
 80008a0:	20001094 	.word	0x20001094

080008a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b084      	sub	sp, #16
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008ac:	f7ff fff0 	bl	8000890 <HAL_GetTick>
 80008b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008bc:	d005      	beq.n	80008ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008be:	4b09      	ldr	r3, [pc, #36]	; (80008e4 <HAL_Delay+0x40>)
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	461a      	mov	r2, r3
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	4413      	add	r3, r2
 80008c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80008ca:	bf00      	nop
 80008cc:	f7ff ffe0 	bl	8000890 <HAL_GetTick>
 80008d0:	4602      	mov	r2, r0
 80008d2:	68bb      	ldr	r3, [r7, #8]
 80008d4:	1ad3      	subs	r3, r2, r3
 80008d6:	68fa      	ldr	r2, [r7, #12]
 80008d8:	429a      	cmp	r2, r3
 80008da:	d8f7      	bhi.n	80008cc <HAL_Delay+0x28>
  {
  }
}
 80008dc:	bf00      	nop
 80008de:	3710      	adds	r7, #16
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	20000008 	.word	0x20000008

080008e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b085      	sub	sp, #20
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	f003 0307 	and.w	r3, r3, #7
 80008f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008f8:	4b0c      	ldr	r3, [pc, #48]	; (800092c <__NVIC_SetPriorityGrouping+0x44>)
 80008fa:	68db      	ldr	r3, [r3, #12]
 80008fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008fe:	68ba      	ldr	r2, [r7, #8]
 8000900:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000904:	4013      	ands	r3, r2
 8000906:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800090c:	68bb      	ldr	r3, [r7, #8]
 800090e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000910:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000914:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000918:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800091a:	4a04      	ldr	r2, [pc, #16]	; (800092c <__NVIC_SetPriorityGrouping+0x44>)
 800091c:	68bb      	ldr	r3, [r7, #8]
 800091e:	60d3      	str	r3, [r2, #12]
}
 8000920:	bf00      	nop
 8000922:	3714      	adds	r7, #20
 8000924:	46bd      	mov	sp, r7
 8000926:	bc80      	pop	{r7}
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	e000ed00 	.word	0xe000ed00

08000930 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000934:	4b04      	ldr	r3, [pc, #16]	; (8000948 <__NVIC_GetPriorityGrouping+0x18>)
 8000936:	68db      	ldr	r3, [r3, #12]
 8000938:	0a1b      	lsrs	r3, r3, #8
 800093a:	f003 0307 	and.w	r3, r3, #7
}
 800093e:	4618      	mov	r0, r3
 8000940:	46bd      	mov	sp, r7
 8000942:	bc80      	pop	{r7}
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	e000ed00 	.word	0xe000ed00

0800094c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
 8000952:	4603      	mov	r3, r0
 8000954:	6039      	str	r1, [r7, #0]
 8000956:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000958:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800095c:	2b00      	cmp	r3, #0
 800095e:	db0a      	blt.n	8000976 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000960:	683b      	ldr	r3, [r7, #0]
 8000962:	b2da      	uxtb	r2, r3
 8000964:	490c      	ldr	r1, [pc, #48]	; (8000998 <__NVIC_SetPriority+0x4c>)
 8000966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800096a:	0112      	lsls	r2, r2, #4
 800096c:	b2d2      	uxtb	r2, r2
 800096e:	440b      	add	r3, r1
 8000970:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000974:	e00a      	b.n	800098c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	b2da      	uxtb	r2, r3
 800097a:	4908      	ldr	r1, [pc, #32]	; (800099c <__NVIC_SetPriority+0x50>)
 800097c:	79fb      	ldrb	r3, [r7, #7]
 800097e:	f003 030f 	and.w	r3, r3, #15
 8000982:	3b04      	subs	r3, #4
 8000984:	0112      	lsls	r2, r2, #4
 8000986:	b2d2      	uxtb	r2, r2
 8000988:	440b      	add	r3, r1
 800098a:	761a      	strb	r2, [r3, #24]
}
 800098c:	bf00      	nop
 800098e:	370c      	adds	r7, #12
 8000990:	46bd      	mov	sp, r7
 8000992:	bc80      	pop	{r7}
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	e000e100 	.word	0xe000e100
 800099c:	e000ed00 	.word	0xe000ed00

080009a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b089      	sub	sp, #36	; 0x24
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	60f8      	str	r0, [r7, #12]
 80009a8:	60b9      	str	r1, [r7, #8]
 80009aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	f003 0307 	and.w	r3, r3, #7
 80009b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009b4:	69fb      	ldr	r3, [r7, #28]
 80009b6:	f1c3 0307 	rsb	r3, r3, #7
 80009ba:	2b04      	cmp	r3, #4
 80009bc:	bf28      	it	cs
 80009be:	2304      	movcs	r3, #4
 80009c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009c2:	69fb      	ldr	r3, [r7, #28]
 80009c4:	3304      	adds	r3, #4
 80009c6:	2b06      	cmp	r3, #6
 80009c8:	d902      	bls.n	80009d0 <NVIC_EncodePriority+0x30>
 80009ca:	69fb      	ldr	r3, [r7, #28]
 80009cc:	3b03      	subs	r3, #3
 80009ce:	e000      	b.n	80009d2 <NVIC_EncodePriority+0x32>
 80009d0:	2300      	movs	r3, #0
 80009d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009d4:	f04f 32ff 	mov.w	r2, #4294967295
 80009d8:	69bb      	ldr	r3, [r7, #24]
 80009da:	fa02 f303 	lsl.w	r3, r2, r3
 80009de:	43da      	mvns	r2, r3
 80009e0:	68bb      	ldr	r3, [r7, #8]
 80009e2:	401a      	ands	r2, r3
 80009e4:	697b      	ldr	r3, [r7, #20]
 80009e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009e8:	f04f 31ff 	mov.w	r1, #4294967295
 80009ec:	697b      	ldr	r3, [r7, #20]
 80009ee:	fa01 f303 	lsl.w	r3, r1, r3
 80009f2:	43d9      	mvns	r1, r3
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009f8:	4313      	orrs	r3, r2
         );
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	3724      	adds	r7, #36	; 0x24
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bc80      	pop	{r7}
 8000a02:	4770      	bx	lr

08000a04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	3b01      	subs	r3, #1
 8000a10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a14:	d301      	bcc.n	8000a1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a16:	2301      	movs	r3, #1
 8000a18:	e00f      	b.n	8000a3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a1a:	4a0a      	ldr	r2, [pc, #40]	; (8000a44 <SysTick_Config+0x40>)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	3b01      	subs	r3, #1
 8000a20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a22:	210f      	movs	r1, #15
 8000a24:	f04f 30ff 	mov.w	r0, #4294967295
 8000a28:	f7ff ff90 	bl	800094c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a2c:	4b05      	ldr	r3, [pc, #20]	; (8000a44 <SysTick_Config+0x40>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a32:	4b04      	ldr	r3, [pc, #16]	; (8000a44 <SysTick_Config+0x40>)
 8000a34:	2207      	movs	r2, #7
 8000a36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a38:	2300      	movs	r3, #0
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	3708      	adds	r7, #8
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	e000e010 	.word	0xe000e010

08000a48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a50:	6878      	ldr	r0, [r7, #4]
 8000a52:	f7ff ff49 	bl	80008e8 <__NVIC_SetPriorityGrouping>
}
 8000a56:	bf00      	nop
 8000a58:	3708      	adds	r7, #8
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}

08000a5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a5e:	b580      	push	{r7, lr}
 8000a60:	b086      	sub	sp, #24
 8000a62:	af00      	add	r7, sp, #0
 8000a64:	4603      	mov	r3, r0
 8000a66:	60b9      	str	r1, [r7, #8]
 8000a68:	607a      	str	r2, [r7, #4]
 8000a6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a70:	f7ff ff5e 	bl	8000930 <__NVIC_GetPriorityGrouping>
 8000a74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a76:	687a      	ldr	r2, [r7, #4]
 8000a78:	68b9      	ldr	r1, [r7, #8]
 8000a7a:	6978      	ldr	r0, [r7, #20]
 8000a7c:	f7ff ff90 	bl	80009a0 <NVIC_EncodePriority>
 8000a80:	4602      	mov	r2, r0
 8000a82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a86:	4611      	mov	r1, r2
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f7ff ff5f 	bl	800094c <__NVIC_SetPriority>
}
 8000a8e:	bf00      	nop
 8000a90:	3718      	adds	r7, #24
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}

08000a96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a96:	b580      	push	{r7, lr}
 8000a98:	b082      	sub	sp, #8
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a9e:	6878      	ldr	r0, [r7, #4]
 8000aa0:	f7ff ffb0 	bl	8000a04 <SysTick_Config>
 8000aa4:	4603      	mov	r3, r0
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	3708      	adds	r7, #8
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
	...

08000ab0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b08b      	sub	sp, #44	; 0x2c
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
 8000ab8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000aba:	2300      	movs	r3, #0
 8000abc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ac2:	e127      	b.n	8000d14 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8000acc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	69fa      	ldr	r2, [r7, #28]
 8000ad4:	4013      	ands	r3, r2
 8000ad6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ad8:	69ba      	ldr	r2, [r7, #24]
 8000ada:	69fb      	ldr	r3, [r7, #28]
 8000adc:	429a      	cmp	r2, r3
 8000ade:	f040 8116 	bne.w	8000d0e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	685b      	ldr	r3, [r3, #4]
 8000ae6:	2b12      	cmp	r3, #18
 8000ae8:	d034      	beq.n	8000b54 <HAL_GPIO_Init+0xa4>
 8000aea:	2b12      	cmp	r3, #18
 8000aec:	d80d      	bhi.n	8000b0a <HAL_GPIO_Init+0x5a>
 8000aee:	2b02      	cmp	r3, #2
 8000af0:	d02b      	beq.n	8000b4a <HAL_GPIO_Init+0x9a>
 8000af2:	2b02      	cmp	r3, #2
 8000af4:	d804      	bhi.n	8000b00 <HAL_GPIO_Init+0x50>
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d031      	beq.n	8000b5e <HAL_GPIO_Init+0xae>
 8000afa:	2b01      	cmp	r3, #1
 8000afc:	d01c      	beq.n	8000b38 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000afe:	e048      	b.n	8000b92 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000b00:	2b03      	cmp	r3, #3
 8000b02:	d043      	beq.n	8000b8c <HAL_GPIO_Init+0xdc>
 8000b04:	2b11      	cmp	r3, #17
 8000b06:	d01b      	beq.n	8000b40 <HAL_GPIO_Init+0x90>
          break;
 8000b08:	e043      	b.n	8000b92 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000b0a:	4a89      	ldr	r2, [pc, #548]	; (8000d30 <HAL_GPIO_Init+0x280>)
 8000b0c:	4293      	cmp	r3, r2
 8000b0e:	d026      	beq.n	8000b5e <HAL_GPIO_Init+0xae>
 8000b10:	4a87      	ldr	r2, [pc, #540]	; (8000d30 <HAL_GPIO_Init+0x280>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d806      	bhi.n	8000b24 <HAL_GPIO_Init+0x74>
 8000b16:	4a87      	ldr	r2, [pc, #540]	; (8000d34 <HAL_GPIO_Init+0x284>)
 8000b18:	4293      	cmp	r3, r2
 8000b1a:	d020      	beq.n	8000b5e <HAL_GPIO_Init+0xae>
 8000b1c:	4a86      	ldr	r2, [pc, #536]	; (8000d38 <HAL_GPIO_Init+0x288>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d01d      	beq.n	8000b5e <HAL_GPIO_Init+0xae>
          break;
 8000b22:	e036      	b.n	8000b92 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000b24:	4a85      	ldr	r2, [pc, #532]	; (8000d3c <HAL_GPIO_Init+0x28c>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d019      	beq.n	8000b5e <HAL_GPIO_Init+0xae>
 8000b2a:	4a85      	ldr	r2, [pc, #532]	; (8000d40 <HAL_GPIO_Init+0x290>)
 8000b2c:	4293      	cmp	r3, r2
 8000b2e:	d016      	beq.n	8000b5e <HAL_GPIO_Init+0xae>
 8000b30:	4a84      	ldr	r2, [pc, #528]	; (8000d44 <HAL_GPIO_Init+0x294>)
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d013      	beq.n	8000b5e <HAL_GPIO_Init+0xae>
          break;
 8000b36:	e02c      	b.n	8000b92 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	68db      	ldr	r3, [r3, #12]
 8000b3c:	623b      	str	r3, [r7, #32]
          break;
 8000b3e:	e028      	b.n	8000b92 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	68db      	ldr	r3, [r3, #12]
 8000b44:	3304      	adds	r3, #4
 8000b46:	623b      	str	r3, [r7, #32]
          break;
 8000b48:	e023      	b.n	8000b92 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	68db      	ldr	r3, [r3, #12]
 8000b4e:	3308      	adds	r3, #8
 8000b50:	623b      	str	r3, [r7, #32]
          break;
 8000b52:	e01e      	b.n	8000b92 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	68db      	ldr	r3, [r3, #12]
 8000b58:	330c      	adds	r3, #12
 8000b5a:	623b      	str	r3, [r7, #32]
          break;
 8000b5c:	e019      	b.n	8000b92 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	689b      	ldr	r3, [r3, #8]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d102      	bne.n	8000b6c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b66:	2304      	movs	r3, #4
 8000b68:	623b      	str	r3, [r7, #32]
          break;
 8000b6a:	e012      	b.n	8000b92 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	689b      	ldr	r3, [r3, #8]
 8000b70:	2b01      	cmp	r3, #1
 8000b72:	d105      	bne.n	8000b80 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b74:	2308      	movs	r3, #8
 8000b76:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	69fa      	ldr	r2, [r7, #28]
 8000b7c:	611a      	str	r2, [r3, #16]
          break;
 8000b7e:	e008      	b.n	8000b92 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b80:	2308      	movs	r3, #8
 8000b82:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	69fa      	ldr	r2, [r7, #28]
 8000b88:	615a      	str	r2, [r3, #20]
          break;
 8000b8a:	e002      	b.n	8000b92 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	623b      	str	r3, [r7, #32]
          break;
 8000b90:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b92:	69bb      	ldr	r3, [r7, #24]
 8000b94:	2bff      	cmp	r3, #255	; 0xff
 8000b96:	d801      	bhi.n	8000b9c <HAL_GPIO_Init+0xec>
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	e001      	b.n	8000ba0 <HAL_GPIO_Init+0xf0>
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	3304      	adds	r3, #4
 8000ba0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000ba2:	69bb      	ldr	r3, [r7, #24]
 8000ba4:	2bff      	cmp	r3, #255	; 0xff
 8000ba6:	d802      	bhi.n	8000bae <HAL_GPIO_Init+0xfe>
 8000ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000baa:	009b      	lsls	r3, r3, #2
 8000bac:	e002      	b.n	8000bb4 <HAL_GPIO_Init+0x104>
 8000bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bb0:	3b08      	subs	r3, #8
 8000bb2:	009b      	lsls	r3, r3, #2
 8000bb4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	681a      	ldr	r2, [r3, #0]
 8000bba:	210f      	movs	r1, #15
 8000bbc:	693b      	ldr	r3, [r7, #16]
 8000bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8000bc2:	43db      	mvns	r3, r3
 8000bc4:	401a      	ands	r2, r3
 8000bc6:	6a39      	ldr	r1, [r7, #32]
 8000bc8:	693b      	ldr	r3, [r7, #16]
 8000bca:	fa01 f303 	lsl.w	r3, r1, r3
 8000bce:	431a      	orrs	r2, r3
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	685b      	ldr	r3, [r3, #4]
 8000bd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	f000 8096 	beq.w	8000d0e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000be2:	4b59      	ldr	r3, [pc, #356]	; (8000d48 <HAL_GPIO_Init+0x298>)
 8000be4:	699b      	ldr	r3, [r3, #24]
 8000be6:	4a58      	ldr	r2, [pc, #352]	; (8000d48 <HAL_GPIO_Init+0x298>)
 8000be8:	f043 0301 	orr.w	r3, r3, #1
 8000bec:	6193      	str	r3, [r2, #24]
 8000bee:	4b56      	ldr	r3, [pc, #344]	; (8000d48 <HAL_GPIO_Init+0x298>)
 8000bf0:	699b      	ldr	r3, [r3, #24]
 8000bf2:	f003 0301 	and.w	r3, r3, #1
 8000bf6:	60bb      	str	r3, [r7, #8]
 8000bf8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000bfa:	4a54      	ldr	r2, [pc, #336]	; (8000d4c <HAL_GPIO_Init+0x29c>)
 8000bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bfe:	089b      	lsrs	r3, r3, #2
 8000c00:	3302      	adds	r3, #2
 8000c02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c06:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c0a:	f003 0303 	and.w	r3, r3, #3
 8000c0e:	009b      	lsls	r3, r3, #2
 8000c10:	220f      	movs	r2, #15
 8000c12:	fa02 f303 	lsl.w	r3, r2, r3
 8000c16:	43db      	mvns	r3, r3
 8000c18:	68fa      	ldr	r2, [r7, #12]
 8000c1a:	4013      	ands	r3, r2
 8000c1c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	4a4b      	ldr	r2, [pc, #300]	; (8000d50 <HAL_GPIO_Init+0x2a0>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d013      	beq.n	8000c4e <HAL_GPIO_Init+0x19e>
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	4a4a      	ldr	r2, [pc, #296]	; (8000d54 <HAL_GPIO_Init+0x2a4>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d00d      	beq.n	8000c4a <HAL_GPIO_Init+0x19a>
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	4a49      	ldr	r2, [pc, #292]	; (8000d58 <HAL_GPIO_Init+0x2a8>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d007      	beq.n	8000c46 <HAL_GPIO_Init+0x196>
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	4a48      	ldr	r2, [pc, #288]	; (8000d5c <HAL_GPIO_Init+0x2ac>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d101      	bne.n	8000c42 <HAL_GPIO_Init+0x192>
 8000c3e:	2303      	movs	r3, #3
 8000c40:	e006      	b.n	8000c50 <HAL_GPIO_Init+0x1a0>
 8000c42:	2304      	movs	r3, #4
 8000c44:	e004      	b.n	8000c50 <HAL_GPIO_Init+0x1a0>
 8000c46:	2302      	movs	r3, #2
 8000c48:	e002      	b.n	8000c50 <HAL_GPIO_Init+0x1a0>
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	e000      	b.n	8000c50 <HAL_GPIO_Init+0x1a0>
 8000c4e:	2300      	movs	r3, #0
 8000c50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c52:	f002 0203 	and.w	r2, r2, #3
 8000c56:	0092      	lsls	r2, r2, #2
 8000c58:	4093      	lsls	r3, r2
 8000c5a:	68fa      	ldr	r2, [r7, #12]
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c60:	493a      	ldr	r1, [pc, #232]	; (8000d4c <HAL_GPIO_Init+0x29c>)
 8000c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c64:	089b      	lsrs	r3, r3, #2
 8000c66:	3302      	adds	r3, #2
 8000c68:	68fa      	ldr	r2, [r7, #12]
 8000c6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d006      	beq.n	8000c88 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c7a:	4b39      	ldr	r3, [pc, #228]	; (8000d60 <HAL_GPIO_Init+0x2b0>)
 8000c7c:	681a      	ldr	r2, [r3, #0]
 8000c7e:	4938      	ldr	r1, [pc, #224]	; (8000d60 <HAL_GPIO_Init+0x2b0>)
 8000c80:	69bb      	ldr	r3, [r7, #24]
 8000c82:	4313      	orrs	r3, r2
 8000c84:	600b      	str	r3, [r1, #0]
 8000c86:	e006      	b.n	8000c96 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c88:	4b35      	ldr	r3, [pc, #212]	; (8000d60 <HAL_GPIO_Init+0x2b0>)
 8000c8a:	681a      	ldr	r2, [r3, #0]
 8000c8c:	69bb      	ldr	r3, [r7, #24]
 8000c8e:	43db      	mvns	r3, r3
 8000c90:	4933      	ldr	r1, [pc, #204]	; (8000d60 <HAL_GPIO_Init+0x2b0>)
 8000c92:	4013      	ands	r3, r2
 8000c94:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d006      	beq.n	8000cb0 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ca2:	4b2f      	ldr	r3, [pc, #188]	; (8000d60 <HAL_GPIO_Init+0x2b0>)
 8000ca4:	685a      	ldr	r2, [r3, #4]
 8000ca6:	492e      	ldr	r1, [pc, #184]	; (8000d60 <HAL_GPIO_Init+0x2b0>)
 8000ca8:	69bb      	ldr	r3, [r7, #24]
 8000caa:	4313      	orrs	r3, r2
 8000cac:	604b      	str	r3, [r1, #4]
 8000cae:	e006      	b.n	8000cbe <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000cb0:	4b2b      	ldr	r3, [pc, #172]	; (8000d60 <HAL_GPIO_Init+0x2b0>)
 8000cb2:	685a      	ldr	r2, [r3, #4]
 8000cb4:	69bb      	ldr	r3, [r7, #24]
 8000cb6:	43db      	mvns	r3, r3
 8000cb8:	4929      	ldr	r1, [pc, #164]	; (8000d60 <HAL_GPIO_Init+0x2b0>)
 8000cba:	4013      	ands	r3, r2
 8000cbc:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d006      	beq.n	8000cd8 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000cca:	4b25      	ldr	r3, [pc, #148]	; (8000d60 <HAL_GPIO_Init+0x2b0>)
 8000ccc:	689a      	ldr	r2, [r3, #8]
 8000cce:	4924      	ldr	r1, [pc, #144]	; (8000d60 <HAL_GPIO_Init+0x2b0>)
 8000cd0:	69bb      	ldr	r3, [r7, #24]
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	608b      	str	r3, [r1, #8]
 8000cd6:	e006      	b.n	8000ce6 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000cd8:	4b21      	ldr	r3, [pc, #132]	; (8000d60 <HAL_GPIO_Init+0x2b0>)
 8000cda:	689a      	ldr	r2, [r3, #8]
 8000cdc:	69bb      	ldr	r3, [r7, #24]
 8000cde:	43db      	mvns	r3, r3
 8000ce0:	491f      	ldr	r1, [pc, #124]	; (8000d60 <HAL_GPIO_Init+0x2b0>)
 8000ce2:	4013      	ands	r3, r2
 8000ce4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d006      	beq.n	8000d00 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000cf2:	4b1b      	ldr	r3, [pc, #108]	; (8000d60 <HAL_GPIO_Init+0x2b0>)
 8000cf4:	68da      	ldr	r2, [r3, #12]
 8000cf6:	491a      	ldr	r1, [pc, #104]	; (8000d60 <HAL_GPIO_Init+0x2b0>)
 8000cf8:	69bb      	ldr	r3, [r7, #24]
 8000cfa:	4313      	orrs	r3, r2
 8000cfc:	60cb      	str	r3, [r1, #12]
 8000cfe:	e006      	b.n	8000d0e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d00:	4b17      	ldr	r3, [pc, #92]	; (8000d60 <HAL_GPIO_Init+0x2b0>)
 8000d02:	68da      	ldr	r2, [r3, #12]
 8000d04:	69bb      	ldr	r3, [r7, #24]
 8000d06:	43db      	mvns	r3, r3
 8000d08:	4915      	ldr	r1, [pc, #84]	; (8000d60 <HAL_GPIO_Init+0x2b0>)
 8000d0a:	4013      	ands	r3, r2
 8000d0c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d10:	3301      	adds	r3, #1
 8000d12:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	681a      	ldr	r2, [r3, #0]
 8000d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d1a:	fa22 f303 	lsr.w	r3, r2, r3
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	f47f aed0 	bne.w	8000ac4 <HAL_GPIO_Init+0x14>
  }
}
 8000d24:	bf00      	nop
 8000d26:	372c      	adds	r7, #44	; 0x2c
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bc80      	pop	{r7}
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	10210000 	.word	0x10210000
 8000d34:	10110000 	.word	0x10110000
 8000d38:	10120000 	.word	0x10120000
 8000d3c:	10310000 	.word	0x10310000
 8000d40:	10320000 	.word	0x10320000
 8000d44:	10220000 	.word	0x10220000
 8000d48:	40021000 	.word	0x40021000
 8000d4c:	40010000 	.word	0x40010000
 8000d50:	40010800 	.word	0x40010800
 8000d54:	40010c00 	.word	0x40010c00
 8000d58:	40011000 	.word	0x40011000
 8000d5c:	40011400 	.word	0x40011400
 8000d60:	40010400 	.word	0x40010400

08000d64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
 8000d6c:	460b      	mov	r3, r1
 8000d6e:	807b      	strh	r3, [r7, #2]
 8000d70:	4613      	mov	r3, r2
 8000d72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d74:	787b      	ldrb	r3, [r7, #1]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d003      	beq.n	8000d82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d7a:	887a      	ldrh	r2, [r7, #2]
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000d80:	e003      	b.n	8000d8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d82:	887b      	ldrh	r3, [r7, #2]
 8000d84:	041a      	lsls	r2, r3, #16
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	611a      	str	r2, [r3, #16]
}
 8000d8a:	bf00      	nop
 8000d8c:	370c      	adds	r7, #12
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bc80      	pop	{r7}
 8000d92:	4770      	bx	lr

08000d94 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b084      	sub	sp, #16
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d101      	bne.n	8000da6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000da2:	2301      	movs	r3, #1
 8000da4:	e11f      	b.n	8000fe6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d106      	bne.n	8000dc0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	2200      	movs	r2, #0
 8000db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000dba:	6878      	ldr	r0, [r7, #4]
 8000dbc:	f7ff fc40 	bl	8000640 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	2224      	movs	r2, #36	; 0x24
 8000dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f022 0201 	bic.w	r2, r2, #1
 8000dd6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	681a      	ldr	r2, [r3, #0]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000de6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	681a      	ldr	r2, [r3, #0]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000df6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000df8:	f000 fcda 	bl	80017b0 <HAL_RCC_GetPCLK1Freq>
 8000dfc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	4a7b      	ldr	r2, [pc, #492]	; (8000ff0 <HAL_I2C_Init+0x25c>)
 8000e04:	4293      	cmp	r3, r2
 8000e06:	d807      	bhi.n	8000e18 <HAL_I2C_Init+0x84>
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	4a7a      	ldr	r2, [pc, #488]	; (8000ff4 <HAL_I2C_Init+0x260>)
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	bf94      	ite	ls
 8000e10:	2301      	movls	r3, #1
 8000e12:	2300      	movhi	r3, #0
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	e006      	b.n	8000e26 <HAL_I2C_Init+0x92>
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	4a77      	ldr	r2, [pc, #476]	; (8000ff8 <HAL_I2C_Init+0x264>)
 8000e1c:	4293      	cmp	r3, r2
 8000e1e:	bf94      	ite	ls
 8000e20:	2301      	movls	r3, #1
 8000e22:	2300      	movhi	r3, #0
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	e0db      	b.n	8000fe6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	4a72      	ldr	r2, [pc, #456]	; (8000ffc <HAL_I2C_Init+0x268>)
 8000e32:	fba2 2303 	umull	r2, r3, r2, r3
 8000e36:	0c9b      	lsrs	r3, r3, #18
 8000e38:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	68ba      	ldr	r2, [r7, #8]
 8000e4a:	430a      	orrs	r2, r1
 8000e4c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	6a1b      	ldr	r3, [r3, #32]
 8000e54:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	4a64      	ldr	r2, [pc, #400]	; (8000ff0 <HAL_I2C_Init+0x25c>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d802      	bhi.n	8000e68 <HAL_I2C_Init+0xd4>
 8000e62:	68bb      	ldr	r3, [r7, #8]
 8000e64:	3301      	adds	r3, #1
 8000e66:	e009      	b.n	8000e7c <HAL_I2C_Init+0xe8>
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000e6e:	fb02 f303 	mul.w	r3, r2, r3
 8000e72:	4a63      	ldr	r2, [pc, #396]	; (8001000 <HAL_I2C_Init+0x26c>)
 8000e74:	fba2 2303 	umull	r2, r3, r2, r3
 8000e78:	099b      	lsrs	r3, r3, #6
 8000e7a:	3301      	adds	r3, #1
 8000e7c:	687a      	ldr	r2, [r7, #4]
 8000e7e:	6812      	ldr	r2, [r2, #0]
 8000e80:	430b      	orrs	r3, r1
 8000e82:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	69db      	ldr	r3, [r3, #28]
 8000e8a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000e8e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	4956      	ldr	r1, [pc, #344]	; (8000ff0 <HAL_I2C_Init+0x25c>)
 8000e98:	428b      	cmp	r3, r1
 8000e9a:	d80d      	bhi.n	8000eb8 <HAL_I2C_Init+0x124>
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	1e59      	subs	r1, r3, #1
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	005b      	lsls	r3, r3, #1
 8000ea6:	fbb1 f3f3 	udiv	r3, r1, r3
 8000eaa:	3301      	adds	r3, #1
 8000eac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000eb0:	2b04      	cmp	r3, #4
 8000eb2:	bf38      	it	cc
 8000eb4:	2304      	movcc	r3, #4
 8000eb6:	e04f      	b.n	8000f58 <HAL_I2C_Init+0x1c4>
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	689b      	ldr	r3, [r3, #8]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d111      	bne.n	8000ee4 <HAL_I2C_Init+0x150>
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	1e58      	subs	r0, r3, #1
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	6859      	ldr	r1, [r3, #4]
 8000ec8:	460b      	mov	r3, r1
 8000eca:	005b      	lsls	r3, r3, #1
 8000ecc:	440b      	add	r3, r1
 8000ece:	fbb0 f3f3 	udiv	r3, r0, r3
 8000ed2:	3301      	adds	r3, #1
 8000ed4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	bf0c      	ite	eq
 8000edc:	2301      	moveq	r3, #1
 8000ede:	2300      	movne	r3, #0
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	e012      	b.n	8000f0a <HAL_I2C_Init+0x176>
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	1e58      	subs	r0, r3, #1
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6859      	ldr	r1, [r3, #4]
 8000eec:	460b      	mov	r3, r1
 8000eee:	009b      	lsls	r3, r3, #2
 8000ef0:	440b      	add	r3, r1
 8000ef2:	0099      	lsls	r1, r3, #2
 8000ef4:	440b      	add	r3, r1
 8000ef6:	fbb0 f3f3 	udiv	r3, r0, r3
 8000efa:	3301      	adds	r3, #1
 8000efc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	bf0c      	ite	eq
 8000f04:	2301      	moveq	r3, #1
 8000f06:	2300      	movne	r3, #0
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <HAL_I2C_Init+0x17e>
 8000f0e:	2301      	movs	r3, #1
 8000f10:	e022      	b.n	8000f58 <HAL_I2C_Init+0x1c4>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	689b      	ldr	r3, [r3, #8]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d10e      	bne.n	8000f38 <HAL_I2C_Init+0x1a4>
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	1e58      	subs	r0, r3, #1
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6859      	ldr	r1, [r3, #4]
 8000f22:	460b      	mov	r3, r1
 8000f24:	005b      	lsls	r3, r3, #1
 8000f26:	440b      	add	r3, r1
 8000f28:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f36:	e00f      	b.n	8000f58 <HAL_I2C_Init+0x1c4>
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	1e58      	subs	r0, r3, #1
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	6859      	ldr	r1, [r3, #4]
 8000f40:	460b      	mov	r3, r1
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	440b      	add	r3, r1
 8000f46:	0099      	lsls	r1, r3, #2
 8000f48:	440b      	add	r3, r1
 8000f4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f4e:	3301      	adds	r3, #1
 8000f50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f54:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f58:	6879      	ldr	r1, [r7, #4]
 8000f5a:	6809      	ldr	r1, [r1, #0]
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	69da      	ldr	r2, [r3, #28]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6a1b      	ldr	r3, [r3, #32]
 8000f72:	431a      	orrs	r2, r3
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	430a      	orrs	r2, r1
 8000f7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	689b      	ldr	r3, [r3, #8]
 8000f82:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8000f86:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000f8a:	687a      	ldr	r2, [r7, #4]
 8000f8c:	6911      	ldr	r1, [r2, #16]
 8000f8e:	687a      	ldr	r2, [r7, #4]
 8000f90:	68d2      	ldr	r2, [r2, #12]
 8000f92:	4311      	orrs	r1, r2
 8000f94:	687a      	ldr	r2, [r7, #4]
 8000f96:	6812      	ldr	r2, [r2, #0]
 8000f98:	430b      	orrs	r3, r1
 8000f9a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	68db      	ldr	r3, [r3, #12]
 8000fa2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	695a      	ldr	r2, [r3, #20]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	699b      	ldr	r3, [r3, #24]
 8000fae:	431a      	orrs	r2, r3
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	430a      	orrs	r2, r1
 8000fb6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f042 0201 	orr.w	r2, r2, #1
 8000fc6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2200      	movs	r2, #0
 8000fcc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2220      	movs	r2, #32
 8000fd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2200      	movs	r2, #0
 8000fda:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2200      	movs	r2, #0
 8000fe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8000fe4:	2300      	movs	r3, #0
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3710      	adds	r7, #16
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	000186a0 	.word	0x000186a0
 8000ff4:	001e847f 	.word	0x001e847f
 8000ff8:	003d08ff 	.word	0x003d08ff
 8000ffc:	431bde83 	.word	0x431bde83
 8001000:	10624dd3 	.word	0x10624dd3

08001004 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b086      	sub	sp, #24
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d101      	bne.n	8001016 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001012:	2301      	movs	r3, #1
 8001014:	e26c      	b.n	80014f0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f003 0301 	and.w	r3, r3, #1
 800101e:	2b00      	cmp	r3, #0
 8001020:	f000 8087 	beq.w	8001132 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001024:	4b92      	ldr	r3, [pc, #584]	; (8001270 <HAL_RCC_OscConfig+0x26c>)
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	f003 030c 	and.w	r3, r3, #12
 800102c:	2b04      	cmp	r3, #4
 800102e:	d00c      	beq.n	800104a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001030:	4b8f      	ldr	r3, [pc, #572]	; (8001270 <HAL_RCC_OscConfig+0x26c>)
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f003 030c 	and.w	r3, r3, #12
 8001038:	2b08      	cmp	r3, #8
 800103a:	d112      	bne.n	8001062 <HAL_RCC_OscConfig+0x5e>
 800103c:	4b8c      	ldr	r3, [pc, #560]	; (8001270 <HAL_RCC_OscConfig+0x26c>)
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001044:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001048:	d10b      	bne.n	8001062 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800104a:	4b89      	ldr	r3, [pc, #548]	; (8001270 <HAL_RCC_OscConfig+0x26c>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001052:	2b00      	cmp	r3, #0
 8001054:	d06c      	beq.n	8001130 <HAL_RCC_OscConfig+0x12c>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d168      	bne.n	8001130 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800105e:	2301      	movs	r3, #1
 8001060:	e246      	b.n	80014f0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800106a:	d106      	bne.n	800107a <HAL_RCC_OscConfig+0x76>
 800106c:	4b80      	ldr	r3, [pc, #512]	; (8001270 <HAL_RCC_OscConfig+0x26c>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a7f      	ldr	r2, [pc, #508]	; (8001270 <HAL_RCC_OscConfig+0x26c>)
 8001072:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001076:	6013      	str	r3, [r2, #0]
 8001078:	e02e      	b.n	80010d8 <HAL_RCC_OscConfig+0xd4>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d10c      	bne.n	800109c <HAL_RCC_OscConfig+0x98>
 8001082:	4b7b      	ldr	r3, [pc, #492]	; (8001270 <HAL_RCC_OscConfig+0x26c>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4a7a      	ldr	r2, [pc, #488]	; (8001270 <HAL_RCC_OscConfig+0x26c>)
 8001088:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800108c:	6013      	str	r3, [r2, #0]
 800108e:	4b78      	ldr	r3, [pc, #480]	; (8001270 <HAL_RCC_OscConfig+0x26c>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4a77      	ldr	r2, [pc, #476]	; (8001270 <HAL_RCC_OscConfig+0x26c>)
 8001094:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001098:	6013      	str	r3, [r2, #0]
 800109a:	e01d      	b.n	80010d8 <HAL_RCC_OscConfig+0xd4>
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010a4:	d10c      	bne.n	80010c0 <HAL_RCC_OscConfig+0xbc>
 80010a6:	4b72      	ldr	r3, [pc, #456]	; (8001270 <HAL_RCC_OscConfig+0x26c>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4a71      	ldr	r2, [pc, #452]	; (8001270 <HAL_RCC_OscConfig+0x26c>)
 80010ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010b0:	6013      	str	r3, [r2, #0]
 80010b2:	4b6f      	ldr	r3, [pc, #444]	; (8001270 <HAL_RCC_OscConfig+0x26c>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4a6e      	ldr	r2, [pc, #440]	; (8001270 <HAL_RCC_OscConfig+0x26c>)
 80010b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010bc:	6013      	str	r3, [r2, #0]
 80010be:	e00b      	b.n	80010d8 <HAL_RCC_OscConfig+0xd4>
 80010c0:	4b6b      	ldr	r3, [pc, #428]	; (8001270 <HAL_RCC_OscConfig+0x26c>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a6a      	ldr	r2, [pc, #424]	; (8001270 <HAL_RCC_OscConfig+0x26c>)
 80010c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010ca:	6013      	str	r3, [r2, #0]
 80010cc:	4b68      	ldr	r3, [pc, #416]	; (8001270 <HAL_RCC_OscConfig+0x26c>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a67      	ldr	r2, [pc, #412]	; (8001270 <HAL_RCC_OscConfig+0x26c>)
 80010d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010d6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d013      	beq.n	8001108 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010e0:	f7ff fbd6 	bl	8000890 <HAL_GetTick>
 80010e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010e6:	e008      	b.n	80010fa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010e8:	f7ff fbd2 	bl	8000890 <HAL_GetTick>
 80010ec:	4602      	mov	r2, r0
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	1ad3      	subs	r3, r2, r3
 80010f2:	2b64      	cmp	r3, #100	; 0x64
 80010f4:	d901      	bls.n	80010fa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80010f6:	2303      	movs	r3, #3
 80010f8:	e1fa      	b.n	80014f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010fa:	4b5d      	ldr	r3, [pc, #372]	; (8001270 <HAL_RCC_OscConfig+0x26c>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001102:	2b00      	cmp	r3, #0
 8001104:	d0f0      	beq.n	80010e8 <HAL_RCC_OscConfig+0xe4>
 8001106:	e014      	b.n	8001132 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001108:	f7ff fbc2 	bl	8000890 <HAL_GetTick>
 800110c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800110e:	e008      	b.n	8001122 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001110:	f7ff fbbe 	bl	8000890 <HAL_GetTick>
 8001114:	4602      	mov	r2, r0
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	1ad3      	subs	r3, r2, r3
 800111a:	2b64      	cmp	r3, #100	; 0x64
 800111c:	d901      	bls.n	8001122 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800111e:	2303      	movs	r3, #3
 8001120:	e1e6      	b.n	80014f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001122:	4b53      	ldr	r3, [pc, #332]	; (8001270 <HAL_RCC_OscConfig+0x26c>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800112a:	2b00      	cmp	r3, #0
 800112c:	d1f0      	bne.n	8001110 <HAL_RCC_OscConfig+0x10c>
 800112e:	e000      	b.n	8001132 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001130:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f003 0302 	and.w	r3, r3, #2
 800113a:	2b00      	cmp	r3, #0
 800113c:	d063      	beq.n	8001206 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800113e:	4b4c      	ldr	r3, [pc, #304]	; (8001270 <HAL_RCC_OscConfig+0x26c>)
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	f003 030c 	and.w	r3, r3, #12
 8001146:	2b00      	cmp	r3, #0
 8001148:	d00b      	beq.n	8001162 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800114a:	4b49      	ldr	r3, [pc, #292]	; (8001270 <HAL_RCC_OscConfig+0x26c>)
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	f003 030c 	and.w	r3, r3, #12
 8001152:	2b08      	cmp	r3, #8
 8001154:	d11c      	bne.n	8001190 <HAL_RCC_OscConfig+0x18c>
 8001156:	4b46      	ldr	r3, [pc, #280]	; (8001270 <HAL_RCC_OscConfig+0x26c>)
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800115e:	2b00      	cmp	r3, #0
 8001160:	d116      	bne.n	8001190 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001162:	4b43      	ldr	r3, [pc, #268]	; (8001270 <HAL_RCC_OscConfig+0x26c>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f003 0302 	and.w	r3, r3, #2
 800116a:	2b00      	cmp	r3, #0
 800116c:	d005      	beq.n	800117a <HAL_RCC_OscConfig+0x176>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	691b      	ldr	r3, [r3, #16]
 8001172:	2b01      	cmp	r3, #1
 8001174:	d001      	beq.n	800117a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
 8001178:	e1ba      	b.n	80014f0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800117a:	4b3d      	ldr	r3, [pc, #244]	; (8001270 <HAL_RCC_OscConfig+0x26c>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	695b      	ldr	r3, [r3, #20]
 8001186:	00db      	lsls	r3, r3, #3
 8001188:	4939      	ldr	r1, [pc, #228]	; (8001270 <HAL_RCC_OscConfig+0x26c>)
 800118a:	4313      	orrs	r3, r2
 800118c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800118e:	e03a      	b.n	8001206 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	691b      	ldr	r3, [r3, #16]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d020      	beq.n	80011da <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001198:	4b36      	ldr	r3, [pc, #216]	; (8001274 <HAL_RCC_OscConfig+0x270>)
 800119a:	2201      	movs	r2, #1
 800119c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800119e:	f7ff fb77 	bl	8000890 <HAL_GetTick>
 80011a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011a4:	e008      	b.n	80011b8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011a6:	f7ff fb73 	bl	8000890 <HAL_GetTick>
 80011aa:	4602      	mov	r2, r0
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	1ad3      	subs	r3, r2, r3
 80011b0:	2b02      	cmp	r3, #2
 80011b2:	d901      	bls.n	80011b8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80011b4:	2303      	movs	r3, #3
 80011b6:	e19b      	b.n	80014f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011b8:	4b2d      	ldr	r3, [pc, #180]	; (8001270 <HAL_RCC_OscConfig+0x26c>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f003 0302 	and.w	r3, r3, #2
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d0f0      	beq.n	80011a6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011c4:	4b2a      	ldr	r3, [pc, #168]	; (8001270 <HAL_RCC_OscConfig+0x26c>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	695b      	ldr	r3, [r3, #20]
 80011d0:	00db      	lsls	r3, r3, #3
 80011d2:	4927      	ldr	r1, [pc, #156]	; (8001270 <HAL_RCC_OscConfig+0x26c>)
 80011d4:	4313      	orrs	r3, r2
 80011d6:	600b      	str	r3, [r1, #0]
 80011d8:	e015      	b.n	8001206 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011da:	4b26      	ldr	r3, [pc, #152]	; (8001274 <HAL_RCC_OscConfig+0x270>)
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011e0:	f7ff fb56 	bl	8000890 <HAL_GetTick>
 80011e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011e6:	e008      	b.n	80011fa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011e8:	f7ff fb52 	bl	8000890 <HAL_GetTick>
 80011ec:	4602      	mov	r2, r0
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	1ad3      	subs	r3, r2, r3
 80011f2:	2b02      	cmp	r3, #2
 80011f4:	d901      	bls.n	80011fa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80011f6:	2303      	movs	r3, #3
 80011f8:	e17a      	b.n	80014f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011fa:	4b1d      	ldr	r3, [pc, #116]	; (8001270 <HAL_RCC_OscConfig+0x26c>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f003 0302 	and.w	r3, r3, #2
 8001202:	2b00      	cmp	r3, #0
 8001204:	d1f0      	bne.n	80011e8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f003 0308 	and.w	r3, r3, #8
 800120e:	2b00      	cmp	r3, #0
 8001210:	d03a      	beq.n	8001288 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	699b      	ldr	r3, [r3, #24]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d019      	beq.n	800124e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800121a:	4b17      	ldr	r3, [pc, #92]	; (8001278 <HAL_RCC_OscConfig+0x274>)
 800121c:	2201      	movs	r2, #1
 800121e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001220:	f7ff fb36 	bl	8000890 <HAL_GetTick>
 8001224:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001226:	e008      	b.n	800123a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001228:	f7ff fb32 	bl	8000890 <HAL_GetTick>
 800122c:	4602      	mov	r2, r0
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	2b02      	cmp	r3, #2
 8001234:	d901      	bls.n	800123a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001236:	2303      	movs	r3, #3
 8001238:	e15a      	b.n	80014f0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800123a:	4b0d      	ldr	r3, [pc, #52]	; (8001270 <HAL_RCC_OscConfig+0x26c>)
 800123c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800123e:	f003 0302 	and.w	r3, r3, #2
 8001242:	2b00      	cmp	r3, #0
 8001244:	d0f0      	beq.n	8001228 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001246:	2001      	movs	r0, #1
 8001248:	f000 fac6 	bl	80017d8 <RCC_Delay>
 800124c:	e01c      	b.n	8001288 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800124e:	4b0a      	ldr	r3, [pc, #40]	; (8001278 <HAL_RCC_OscConfig+0x274>)
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001254:	f7ff fb1c 	bl	8000890 <HAL_GetTick>
 8001258:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800125a:	e00f      	b.n	800127c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800125c:	f7ff fb18 	bl	8000890 <HAL_GetTick>
 8001260:	4602      	mov	r2, r0
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	1ad3      	subs	r3, r2, r3
 8001266:	2b02      	cmp	r3, #2
 8001268:	d908      	bls.n	800127c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800126a:	2303      	movs	r3, #3
 800126c:	e140      	b.n	80014f0 <HAL_RCC_OscConfig+0x4ec>
 800126e:	bf00      	nop
 8001270:	40021000 	.word	0x40021000
 8001274:	42420000 	.word	0x42420000
 8001278:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800127c:	4b9e      	ldr	r3, [pc, #632]	; (80014f8 <HAL_RCC_OscConfig+0x4f4>)
 800127e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001280:	f003 0302 	and.w	r3, r3, #2
 8001284:	2b00      	cmp	r3, #0
 8001286:	d1e9      	bne.n	800125c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f003 0304 	and.w	r3, r3, #4
 8001290:	2b00      	cmp	r3, #0
 8001292:	f000 80a6 	beq.w	80013e2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001296:	2300      	movs	r3, #0
 8001298:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800129a:	4b97      	ldr	r3, [pc, #604]	; (80014f8 <HAL_RCC_OscConfig+0x4f4>)
 800129c:	69db      	ldr	r3, [r3, #28]
 800129e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d10d      	bne.n	80012c2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012a6:	4b94      	ldr	r3, [pc, #592]	; (80014f8 <HAL_RCC_OscConfig+0x4f4>)
 80012a8:	69db      	ldr	r3, [r3, #28]
 80012aa:	4a93      	ldr	r2, [pc, #588]	; (80014f8 <HAL_RCC_OscConfig+0x4f4>)
 80012ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012b0:	61d3      	str	r3, [r2, #28]
 80012b2:	4b91      	ldr	r3, [pc, #580]	; (80014f8 <HAL_RCC_OscConfig+0x4f4>)
 80012b4:	69db      	ldr	r3, [r3, #28]
 80012b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ba:	60bb      	str	r3, [r7, #8]
 80012bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012be:	2301      	movs	r3, #1
 80012c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012c2:	4b8e      	ldr	r3, [pc, #568]	; (80014fc <HAL_RCC_OscConfig+0x4f8>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d118      	bne.n	8001300 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012ce:	4b8b      	ldr	r3, [pc, #556]	; (80014fc <HAL_RCC_OscConfig+0x4f8>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a8a      	ldr	r2, [pc, #552]	; (80014fc <HAL_RCC_OscConfig+0x4f8>)
 80012d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012da:	f7ff fad9 	bl	8000890 <HAL_GetTick>
 80012de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012e0:	e008      	b.n	80012f4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012e2:	f7ff fad5 	bl	8000890 <HAL_GetTick>
 80012e6:	4602      	mov	r2, r0
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	1ad3      	subs	r3, r2, r3
 80012ec:	2b64      	cmp	r3, #100	; 0x64
 80012ee:	d901      	bls.n	80012f4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80012f0:	2303      	movs	r3, #3
 80012f2:	e0fd      	b.n	80014f0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012f4:	4b81      	ldr	r3, [pc, #516]	; (80014fc <HAL_RCC_OscConfig+0x4f8>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d0f0      	beq.n	80012e2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	68db      	ldr	r3, [r3, #12]
 8001304:	2b01      	cmp	r3, #1
 8001306:	d106      	bne.n	8001316 <HAL_RCC_OscConfig+0x312>
 8001308:	4b7b      	ldr	r3, [pc, #492]	; (80014f8 <HAL_RCC_OscConfig+0x4f4>)
 800130a:	6a1b      	ldr	r3, [r3, #32]
 800130c:	4a7a      	ldr	r2, [pc, #488]	; (80014f8 <HAL_RCC_OscConfig+0x4f4>)
 800130e:	f043 0301 	orr.w	r3, r3, #1
 8001312:	6213      	str	r3, [r2, #32]
 8001314:	e02d      	b.n	8001372 <HAL_RCC_OscConfig+0x36e>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	68db      	ldr	r3, [r3, #12]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d10c      	bne.n	8001338 <HAL_RCC_OscConfig+0x334>
 800131e:	4b76      	ldr	r3, [pc, #472]	; (80014f8 <HAL_RCC_OscConfig+0x4f4>)
 8001320:	6a1b      	ldr	r3, [r3, #32]
 8001322:	4a75      	ldr	r2, [pc, #468]	; (80014f8 <HAL_RCC_OscConfig+0x4f4>)
 8001324:	f023 0301 	bic.w	r3, r3, #1
 8001328:	6213      	str	r3, [r2, #32]
 800132a:	4b73      	ldr	r3, [pc, #460]	; (80014f8 <HAL_RCC_OscConfig+0x4f4>)
 800132c:	6a1b      	ldr	r3, [r3, #32]
 800132e:	4a72      	ldr	r2, [pc, #456]	; (80014f8 <HAL_RCC_OscConfig+0x4f4>)
 8001330:	f023 0304 	bic.w	r3, r3, #4
 8001334:	6213      	str	r3, [r2, #32]
 8001336:	e01c      	b.n	8001372 <HAL_RCC_OscConfig+0x36e>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	2b05      	cmp	r3, #5
 800133e:	d10c      	bne.n	800135a <HAL_RCC_OscConfig+0x356>
 8001340:	4b6d      	ldr	r3, [pc, #436]	; (80014f8 <HAL_RCC_OscConfig+0x4f4>)
 8001342:	6a1b      	ldr	r3, [r3, #32]
 8001344:	4a6c      	ldr	r2, [pc, #432]	; (80014f8 <HAL_RCC_OscConfig+0x4f4>)
 8001346:	f043 0304 	orr.w	r3, r3, #4
 800134a:	6213      	str	r3, [r2, #32]
 800134c:	4b6a      	ldr	r3, [pc, #424]	; (80014f8 <HAL_RCC_OscConfig+0x4f4>)
 800134e:	6a1b      	ldr	r3, [r3, #32]
 8001350:	4a69      	ldr	r2, [pc, #420]	; (80014f8 <HAL_RCC_OscConfig+0x4f4>)
 8001352:	f043 0301 	orr.w	r3, r3, #1
 8001356:	6213      	str	r3, [r2, #32]
 8001358:	e00b      	b.n	8001372 <HAL_RCC_OscConfig+0x36e>
 800135a:	4b67      	ldr	r3, [pc, #412]	; (80014f8 <HAL_RCC_OscConfig+0x4f4>)
 800135c:	6a1b      	ldr	r3, [r3, #32]
 800135e:	4a66      	ldr	r2, [pc, #408]	; (80014f8 <HAL_RCC_OscConfig+0x4f4>)
 8001360:	f023 0301 	bic.w	r3, r3, #1
 8001364:	6213      	str	r3, [r2, #32]
 8001366:	4b64      	ldr	r3, [pc, #400]	; (80014f8 <HAL_RCC_OscConfig+0x4f4>)
 8001368:	6a1b      	ldr	r3, [r3, #32]
 800136a:	4a63      	ldr	r2, [pc, #396]	; (80014f8 <HAL_RCC_OscConfig+0x4f4>)
 800136c:	f023 0304 	bic.w	r3, r3, #4
 8001370:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	68db      	ldr	r3, [r3, #12]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d015      	beq.n	80013a6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800137a:	f7ff fa89 	bl	8000890 <HAL_GetTick>
 800137e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001380:	e00a      	b.n	8001398 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001382:	f7ff fa85 	bl	8000890 <HAL_GetTick>
 8001386:	4602      	mov	r2, r0
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	1ad3      	subs	r3, r2, r3
 800138c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001390:	4293      	cmp	r3, r2
 8001392:	d901      	bls.n	8001398 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001394:	2303      	movs	r3, #3
 8001396:	e0ab      	b.n	80014f0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001398:	4b57      	ldr	r3, [pc, #348]	; (80014f8 <HAL_RCC_OscConfig+0x4f4>)
 800139a:	6a1b      	ldr	r3, [r3, #32]
 800139c:	f003 0302 	and.w	r3, r3, #2
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d0ee      	beq.n	8001382 <HAL_RCC_OscConfig+0x37e>
 80013a4:	e014      	b.n	80013d0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013a6:	f7ff fa73 	bl	8000890 <HAL_GetTick>
 80013aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013ac:	e00a      	b.n	80013c4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013ae:	f7ff fa6f 	bl	8000890 <HAL_GetTick>
 80013b2:	4602      	mov	r2, r0
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	1ad3      	subs	r3, r2, r3
 80013b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80013bc:	4293      	cmp	r3, r2
 80013be:	d901      	bls.n	80013c4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80013c0:	2303      	movs	r3, #3
 80013c2:	e095      	b.n	80014f0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013c4:	4b4c      	ldr	r3, [pc, #304]	; (80014f8 <HAL_RCC_OscConfig+0x4f4>)
 80013c6:	6a1b      	ldr	r3, [r3, #32]
 80013c8:	f003 0302 	and.w	r3, r3, #2
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d1ee      	bne.n	80013ae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80013d0:	7dfb      	ldrb	r3, [r7, #23]
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d105      	bne.n	80013e2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013d6:	4b48      	ldr	r3, [pc, #288]	; (80014f8 <HAL_RCC_OscConfig+0x4f4>)
 80013d8:	69db      	ldr	r3, [r3, #28]
 80013da:	4a47      	ldr	r2, [pc, #284]	; (80014f8 <HAL_RCC_OscConfig+0x4f4>)
 80013dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013e0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	69db      	ldr	r3, [r3, #28]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	f000 8081 	beq.w	80014ee <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013ec:	4b42      	ldr	r3, [pc, #264]	; (80014f8 <HAL_RCC_OscConfig+0x4f4>)
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f003 030c 	and.w	r3, r3, #12
 80013f4:	2b08      	cmp	r3, #8
 80013f6:	d061      	beq.n	80014bc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	69db      	ldr	r3, [r3, #28]
 80013fc:	2b02      	cmp	r3, #2
 80013fe:	d146      	bne.n	800148e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001400:	4b3f      	ldr	r3, [pc, #252]	; (8001500 <HAL_RCC_OscConfig+0x4fc>)
 8001402:	2200      	movs	r2, #0
 8001404:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001406:	f7ff fa43 	bl	8000890 <HAL_GetTick>
 800140a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800140c:	e008      	b.n	8001420 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800140e:	f7ff fa3f 	bl	8000890 <HAL_GetTick>
 8001412:	4602      	mov	r2, r0
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	1ad3      	subs	r3, r2, r3
 8001418:	2b02      	cmp	r3, #2
 800141a:	d901      	bls.n	8001420 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800141c:	2303      	movs	r3, #3
 800141e:	e067      	b.n	80014f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001420:	4b35      	ldr	r3, [pc, #212]	; (80014f8 <HAL_RCC_OscConfig+0x4f4>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001428:	2b00      	cmp	r3, #0
 800142a:	d1f0      	bne.n	800140e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6a1b      	ldr	r3, [r3, #32]
 8001430:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001434:	d108      	bne.n	8001448 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001436:	4b30      	ldr	r3, [pc, #192]	; (80014f8 <HAL_RCC_OscConfig+0x4f4>)
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	492d      	ldr	r1, [pc, #180]	; (80014f8 <HAL_RCC_OscConfig+0x4f4>)
 8001444:	4313      	orrs	r3, r2
 8001446:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001448:	4b2b      	ldr	r3, [pc, #172]	; (80014f8 <HAL_RCC_OscConfig+0x4f4>)
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6a19      	ldr	r1, [r3, #32]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001458:	430b      	orrs	r3, r1
 800145a:	4927      	ldr	r1, [pc, #156]	; (80014f8 <HAL_RCC_OscConfig+0x4f4>)
 800145c:	4313      	orrs	r3, r2
 800145e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001460:	4b27      	ldr	r3, [pc, #156]	; (8001500 <HAL_RCC_OscConfig+0x4fc>)
 8001462:	2201      	movs	r2, #1
 8001464:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001466:	f7ff fa13 	bl	8000890 <HAL_GetTick>
 800146a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800146c:	e008      	b.n	8001480 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800146e:	f7ff fa0f 	bl	8000890 <HAL_GetTick>
 8001472:	4602      	mov	r2, r0
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	1ad3      	subs	r3, r2, r3
 8001478:	2b02      	cmp	r3, #2
 800147a:	d901      	bls.n	8001480 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800147c:	2303      	movs	r3, #3
 800147e:	e037      	b.n	80014f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001480:	4b1d      	ldr	r3, [pc, #116]	; (80014f8 <HAL_RCC_OscConfig+0x4f4>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001488:	2b00      	cmp	r3, #0
 800148a:	d0f0      	beq.n	800146e <HAL_RCC_OscConfig+0x46a>
 800148c:	e02f      	b.n	80014ee <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800148e:	4b1c      	ldr	r3, [pc, #112]	; (8001500 <HAL_RCC_OscConfig+0x4fc>)
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001494:	f7ff f9fc 	bl	8000890 <HAL_GetTick>
 8001498:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800149a:	e008      	b.n	80014ae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800149c:	f7ff f9f8 	bl	8000890 <HAL_GetTick>
 80014a0:	4602      	mov	r2, r0
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	2b02      	cmp	r3, #2
 80014a8:	d901      	bls.n	80014ae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80014aa:	2303      	movs	r3, #3
 80014ac:	e020      	b.n	80014f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014ae:	4b12      	ldr	r3, [pc, #72]	; (80014f8 <HAL_RCC_OscConfig+0x4f4>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d1f0      	bne.n	800149c <HAL_RCC_OscConfig+0x498>
 80014ba:	e018      	b.n	80014ee <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	69db      	ldr	r3, [r3, #28]
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d101      	bne.n	80014c8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80014c4:	2301      	movs	r3, #1
 80014c6:	e013      	b.n	80014f0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80014c8:	4b0b      	ldr	r3, [pc, #44]	; (80014f8 <HAL_RCC_OscConfig+0x4f4>)
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6a1b      	ldr	r3, [r3, #32]
 80014d8:	429a      	cmp	r2, r3
 80014da:	d106      	bne.n	80014ea <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014e6:	429a      	cmp	r2, r3
 80014e8:	d001      	beq.n	80014ee <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e000      	b.n	80014f0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80014ee:	2300      	movs	r3, #0
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3718      	adds	r7, #24
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	40021000 	.word	0x40021000
 80014fc:	40007000 	.word	0x40007000
 8001500:	42420060 	.word	0x42420060

08001504 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d101      	bne.n	8001518 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	e0d0      	b.n	80016ba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001518:	4b6a      	ldr	r3, [pc, #424]	; (80016c4 <HAL_RCC_ClockConfig+0x1c0>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 0307 	and.w	r3, r3, #7
 8001520:	683a      	ldr	r2, [r7, #0]
 8001522:	429a      	cmp	r2, r3
 8001524:	d910      	bls.n	8001548 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001526:	4b67      	ldr	r3, [pc, #412]	; (80016c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f023 0207 	bic.w	r2, r3, #7
 800152e:	4965      	ldr	r1, [pc, #404]	; (80016c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	4313      	orrs	r3, r2
 8001534:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001536:	4b63      	ldr	r3, [pc, #396]	; (80016c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 0307 	and.w	r3, r3, #7
 800153e:	683a      	ldr	r2, [r7, #0]
 8001540:	429a      	cmp	r2, r3
 8001542:	d001      	beq.n	8001548 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001544:	2301      	movs	r3, #1
 8001546:	e0b8      	b.n	80016ba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 0302 	and.w	r3, r3, #2
 8001550:	2b00      	cmp	r3, #0
 8001552:	d020      	beq.n	8001596 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f003 0304 	and.w	r3, r3, #4
 800155c:	2b00      	cmp	r3, #0
 800155e:	d005      	beq.n	800156c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001560:	4b59      	ldr	r3, [pc, #356]	; (80016c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	4a58      	ldr	r2, [pc, #352]	; (80016c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001566:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800156a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f003 0308 	and.w	r3, r3, #8
 8001574:	2b00      	cmp	r3, #0
 8001576:	d005      	beq.n	8001584 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001578:	4b53      	ldr	r3, [pc, #332]	; (80016c8 <HAL_RCC_ClockConfig+0x1c4>)
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	4a52      	ldr	r2, [pc, #328]	; (80016c8 <HAL_RCC_ClockConfig+0x1c4>)
 800157e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001582:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001584:	4b50      	ldr	r3, [pc, #320]	; (80016c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	494d      	ldr	r1, [pc, #308]	; (80016c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001592:	4313      	orrs	r3, r2
 8001594:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 0301 	and.w	r3, r3, #1
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d040      	beq.n	8001624 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d107      	bne.n	80015ba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015aa:	4b47      	ldr	r3, [pc, #284]	; (80016c8 <HAL_RCC_ClockConfig+0x1c4>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d115      	bne.n	80015e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e07f      	b.n	80016ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	2b02      	cmp	r3, #2
 80015c0:	d107      	bne.n	80015d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015c2:	4b41      	ldr	r3, [pc, #260]	; (80016c8 <HAL_RCC_ClockConfig+0x1c4>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d109      	bne.n	80015e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e073      	b.n	80016ba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015d2:	4b3d      	ldr	r3, [pc, #244]	; (80016c8 <HAL_RCC_ClockConfig+0x1c4>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 0302 	and.w	r3, r3, #2
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d101      	bne.n	80015e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e06b      	b.n	80016ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015e2:	4b39      	ldr	r3, [pc, #228]	; (80016c8 <HAL_RCC_ClockConfig+0x1c4>)
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f023 0203 	bic.w	r2, r3, #3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	4936      	ldr	r1, [pc, #216]	; (80016c8 <HAL_RCC_ClockConfig+0x1c4>)
 80015f0:	4313      	orrs	r3, r2
 80015f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015f4:	f7ff f94c 	bl	8000890 <HAL_GetTick>
 80015f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015fa:	e00a      	b.n	8001612 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015fc:	f7ff f948 	bl	8000890 <HAL_GetTick>
 8001600:	4602      	mov	r2, r0
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	f241 3288 	movw	r2, #5000	; 0x1388
 800160a:	4293      	cmp	r3, r2
 800160c:	d901      	bls.n	8001612 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800160e:	2303      	movs	r3, #3
 8001610:	e053      	b.n	80016ba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001612:	4b2d      	ldr	r3, [pc, #180]	; (80016c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	f003 020c 	and.w	r2, r3, #12
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	429a      	cmp	r2, r3
 8001622:	d1eb      	bne.n	80015fc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001624:	4b27      	ldr	r3, [pc, #156]	; (80016c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f003 0307 	and.w	r3, r3, #7
 800162c:	683a      	ldr	r2, [r7, #0]
 800162e:	429a      	cmp	r2, r3
 8001630:	d210      	bcs.n	8001654 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001632:	4b24      	ldr	r3, [pc, #144]	; (80016c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f023 0207 	bic.w	r2, r3, #7
 800163a:	4922      	ldr	r1, [pc, #136]	; (80016c4 <HAL_RCC_ClockConfig+0x1c0>)
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	4313      	orrs	r3, r2
 8001640:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001642:	4b20      	ldr	r3, [pc, #128]	; (80016c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 0307 	and.w	r3, r3, #7
 800164a:	683a      	ldr	r2, [r7, #0]
 800164c:	429a      	cmp	r2, r3
 800164e:	d001      	beq.n	8001654 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	e032      	b.n	80016ba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f003 0304 	and.w	r3, r3, #4
 800165c:	2b00      	cmp	r3, #0
 800165e:	d008      	beq.n	8001672 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001660:	4b19      	ldr	r3, [pc, #100]	; (80016c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	4916      	ldr	r1, [pc, #88]	; (80016c8 <HAL_RCC_ClockConfig+0x1c4>)
 800166e:	4313      	orrs	r3, r2
 8001670:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 0308 	and.w	r3, r3, #8
 800167a:	2b00      	cmp	r3, #0
 800167c:	d009      	beq.n	8001692 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800167e:	4b12      	ldr	r3, [pc, #72]	; (80016c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	691b      	ldr	r3, [r3, #16]
 800168a:	00db      	lsls	r3, r3, #3
 800168c:	490e      	ldr	r1, [pc, #56]	; (80016c8 <HAL_RCC_ClockConfig+0x1c4>)
 800168e:	4313      	orrs	r3, r2
 8001690:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001692:	f000 f821 	bl	80016d8 <HAL_RCC_GetSysClockFreq>
 8001696:	4601      	mov	r1, r0
 8001698:	4b0b      	ldr	r3, [pc, #44]	; (80016c8 <HAL_RCC_ClockConfig+0x1c4>)
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	091b      	lsrs	r3, r3, #4
 800169e:	f003 030f 	and.w	r3, r3, #15
 80016a2:	4a0a      	ldr	r2, [pc, #40]	; (80016cc <HAL_RCC_ClockConfig+0x1c8>)
 80016a4:	5cd3      	ldrb	r3, [r2, r3]
 80016a6:	fa21 f303 	lsr.w	r3, r1, r3
 80016aa:	4a09      	ldr	r2, [pc, #36]	; (80016d0 <HAL_RCC_ClockConfig+0x1cc>)
 80016ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80016ae:	4b09      	ldr	r3, [pc, #36]	; (80016d4 <HAL_RCC_ClockConfig+0x1d0>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7ff f8aa 	bl	800080c <HAL_InitTick>

  return HAL_OK;
 80016b8:	2300      	movs	r3, #0
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3710      	adds	r7, #16
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	40022000 	.word	0x40022000
 80016c8:	40021000 	.word	0x40021000
 80016cc:	08001d64 	.word	0x08001d64
 80016d0:	20000000 	.word	0x20000000
 80016d4:	20000004 	.word	0x20000004

080016d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016d8:	b490      	push	{r4, r7}
 80016da:	b08a      	sub	sp, #40	; 0x28
 80016dc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80016de:	4b2a      	ldr	r3, [pc, #168]	; (8001788 <HAL_RCC_GetSysClockFreq+0xb0>)
 80016e0:	1d3c      	adds	r4, r7, #4
 80016e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80016e8:	4b28      	ldr	r3, [pc, #160]	; (800178c <HAL_RCC_GetSysClockFreq+0xb4>)
 80016ea:	881b      	ldrh	r3, [r3, #0]
 80016ec:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80016ee:	2300      	movs	r3, #0
 80016f0:	61fb      	str	r3, [r7, #28]
 80016f2:	2300      	movs	r3, #0
 80016f4:	61bb      	str	r3, [r7, #24]
 80016f6:	2300      	movs	r3, #0
 80016f8:	627b      	str	r3, [r7, #36]	; 0x24
 80016fa:	2300      	movs	r3, #0
 80016fc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80016fe:	2300      	movs	r3, #0
 8001700:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001702:	4b23      	ldr	r3, [pc, #140]	; (8001790 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	f003 030c 	and.w	r3, r3, #12
 800170e:	2b04      	cmp	r3, #4
 8001710:	d002      	beq.n	8001718 <HAL_RCC_GetSysClockFreq+0x40>
 8001712:	2b08      	cmp	r3, #8
 8001714:	d003      	beq.n	800171e <HAL_RCC_GetSysClockFreq+0x46>
 8001716:	e02d      	b.n	8001774 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001718:	4b1e      	ldr	r3, [pc, #120]	; (8001794 <HAL_RCC_GetSysClockFreq+0xbc>)
 800171a:	623b      	str	r3, [r7, #32]
      break;
 800171c:	e02d      	b.n	800177a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	0c9b      	lsrs	r3, r3, #18
 8001722:	f003 030f 	and.w	r3, r3, #15
 8001726:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800172a:	4413      	add	r3, r2
 800172c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001730:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001738:	2b00      	cmp	r3, #0
 800173a:	d013      	beq.n	8001764 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800173c:	4b14      	ldr	r3, [pc, #80]	; (8001790 <HAL_RCC_GetSysClockFreq+0xb8>)
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	0c5b      	lsrs	r3, r3, #17
 8001742:	f003 0301 	and.w	r3, r3, #1
 8001746:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800174a:	4413      	add	r3, r2
 800174c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001750:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	4a0f      	ldr	r2, [pc, #60]	; (8001794 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001756:	fb02 f203 	mul.w	r2, r2, r3
 800175a:	69bb      	ldr	r3, [r7, #24]
 800175c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001760:	627b      	str	r3, [r7, #36]	; 0x24
 8001762:	e004      	b.n	800176e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	4a0c      	ldr	r2, [pc, #48]	; (8001798 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001768:	fb02 f303 	mul.w	r3, r2, r3
 800176c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800176e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001770:	623b      	str	r3, [r7, #32]
      break;
 8001772:	e002      	b.n	800177a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001774:	4b07      	ldr	r3, [pc, #28]	; (8001794 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001776:	623b      	str	r3, [r7, #32]
      break;
 8001778:	bf00      	nop
    }
  }
  return sysclockfreq;
 800177a:	6a3b      	ldr	r3, [r7, #32]
}
 800177c:	4618      	mov	r0, r3
 800177e:	3728      	adds	r7, #40	; 0x28
 8001780:	46bd      	mov	sp, r7
 8001782:	bc90      	pop	{r4, r7}
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	08001d50 	.word	0x08001d50
 800178c:	08001d60 	.word	0x08001d60
 8001790:	40021000 	.word	0x40021000
 8001794:	007a1200 	.word	0x007a1200
 8001798:	003d0900 	.word	0x003d0900

0800179c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80017a0:	4b02      	ldr	r3, [pc, #8]	; (80017ac <HAL_RCC_GetHCLKFreq+0x10>)
 80017a2:	681b      	ldr	r3, [r3, #0]
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bc80      	pop	{r7}
 80017aa:	4770      	bx	lr
 80017ac:	20000000 	.word	0x20000000

080017b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80017b4:	f7ff fff2 	bl	800179c <HAL_RCC_GetHCLKFreq>
 80017b8:	4601      	mov	r1, r0
 80017ba:	4b05      	ldr	r3, [pc, #20]	; (80017d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	0a1b      	lsrs	r3, r3, #8
 80017c0:	f003 0307 	and.w	r3, r3, #7
 80017c4:	4a03      	ldr	r2, [pc, #12]	; (80017d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80017c6:	5cd3      	ldrb	r3, [r2, r3]
 80017c8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	40021000 	.word	0x40021000
 80017d4:	08001d74 	.word	0x08001d74

080017d8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80017d8:	b480      	push	{r7}
 80017da:	b085      	sub	sp, #20
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80017e0:	4b0a      	ldr	r3, [pc, #40]	; (800180c <RCC_Delay+0x34>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a0a      	ldr	r2, [pc, #40]	; (8001810 <RCC_Delay+0x38>)
 80017e6:	fba2 2303 	umull	r2, r3, r2, r3
 80017ea:	0a5b      	lsrs	r3, r3, #9
 80017ec:	687a      	ldr	r2, [r7, #4]
 80017ee:	fb02 f303 	mul.w	r3, r2, r3
 80017f2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80017f4:	bf00      	nop
  }
  while (Delay --);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	1e5a      	subs	r2, r3, #1
 80017fa:	60fa      	str	r2, [r7, #12]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d1f9      	bne.n	80017f4 <RCC_Delay+0x1c>
}
 8001800:	bf00      	nop
 8001802:	3714      	adds	r7, #20
 8001804:	46bd      	mov	sp, r7
 8001806:	bc80      	pop	{r7}
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	20000000 	.word	0x20000000
 8001810:	10624dd3 	.word	0x10624dd3

08001814 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d101      	bne.n	8001826 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e076      	b.n	8001914 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800182a:	2b00      	cmp	r3, #0
 800182c:	d108      	bne.n	8001840 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001836:	d009      	beq.n	800184c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2200      	movs	r2, #0
 800183c:	61da      	str	r2, [r3, #28]
 800183e:	e005      	b.n	800184c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2200      	movs	r2, #0
 8001844:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2200      	movs	r2, #0
 800184a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2200      	movs	r2, #0
 8001850:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001858:	b2db      	uxtb	r3, r3
 800185a:	2b00      	cmp	r3, #0
 800185c:	d106      	bne.n	800186c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2200      	movs	r2, #0
 8001862:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	f7fe ff28 	bl	80006bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2202      	movs	r2, #2
 8001870:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001882:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001894:	431a      	orrs	r2, r3
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	68db      	ldr	r3, [r3, #12]
 800189a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800189e:	431a      	orrs	r2, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	691b      	ldr	r3, [r3, #16]
 80018a4:	f003 0302 	and.w	r3, r3, #2
 80018a8:	431a      	orrs	r2, r3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	695b      	ldr	r3, [r3, #20]
 80018ae:	f003 0301 	and.w	r3, r3, #1
 80018b2:	431a      	orrs	r2, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	699b      	ldr	r3, [r3, #24]
 80018b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018bc:	431a      	orrs	r2, r3
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	69db      	ldr	r3, [r3, #28]
 80018c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80018c6:	431a      	orrs	r2, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6a1b      	ldr	r3, [r3, #32]
 80018cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018d0:	ea42 0103 	orr.w	r1, r2, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	430a      	orrs	r2, r1
 80018e2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	699b      	ldr	r3, [r3, #24]
 80018e8:	0c1a      	lsrs	r2, r3, #16
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f002 0204 	and.w	r2, r2, #4
 80018f2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	69da      	ldr	r2, [r3, #28]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001902:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2200      	movs	r2, #0
 8001908:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2201      	movs	r2, #1
 800190e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001912:	2300      	movs	r3, #0
}
 8001914:	4618      	mov	r0, r3
 8001916:	3708      	adds	r7, #8
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}

0800191c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b088      	sub	sp, #32
 8001920:	af00      	add	r7, sp, #0
 8001922:	60f8      	str	r0, [r7, #12]
 8001924:	60b9      	str	r1, [r7, #8]
 8001926:	603b      	str	r3, [r7, #0]
 8001928:	4613      	mov	r3, r2
 800192a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800192c:	2300      	movs	r3, #0
 800192e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001936:	2b01      	cmp	r3, #1
 8001938:	d101      	bne.n	800193e <HAL_SPI_Transmit+0x22>
 800193a:	2302      	movs	r3, #2
 800193c:	e126      	b.n	8001b8c <HAL_SPI_Transmit+0x270>
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	2201      	movs	r2, #1
 8001942:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001946:	f7fe ffa3 	bl	8000890 <HAL_GetTick>
 800194a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800194c:	88fb      	ldrh	r3, [r7, #6]
 800194e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001956:	b2db      	uxtb	r3, r3
 8001958:	2b01      	cmp	r3, #1
 800195a:	d002      	beq.n	8001962 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800195c:	2302      	movs	r3, #2
 800195e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001960:	e10b      	b.n	8001b7a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d002      	beq.n	800196e <HAL_SPI_Transmit+0x52>
 8001968:	88fb      	ldrh	r3, [r7, #6]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d102      	bne.n	8001974 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001972:	e102      	b.n	8001b7a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	2203      	movs	r2, #3
 8001978:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	2200      	movs	r2, #0
 8001980:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	68ba      	ldr	r2, [r7, #8]
 8001986:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	88fa      	ldrh	r2, [r7, #6]
 800198c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	88fa      	ldrh	r2, [r7, #6]
 8001992:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	2200      	movs	r2, #0
 8001998:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	2200      	movs	r2, #0
 800199e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	2200      	movs	r2, #0
 80019a4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	2200      	movs	r2, #0
 80019aa:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	2200      	movs	r2, #0
 80019b0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80019ba:	d10f      	bne.n	80019dc <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80019ca:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80019da:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019e6:	2b40      	cmp	r3, #64	; 0x40
 80019e8:	d007      	beq.n	80019fa <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80019f8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	68db      	ldr	r3, [r3, #12]
 80019fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001a02:	d14b      	bne.n	8001a9c <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d002      	beq.n	8001a12 <HAL_SPI_Transmit+0xf6>
 8001a0c:	8afb      	ldrh	r3, [r7, #22]
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d13e      	bne.n	8001a90 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a16:	881a      	ldrh	r2, [r3, #0]
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a22:	1c9a      	adds	r2, r3, #2
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001a2c:	b29b      	uxth	r3, r3
 8001a2e:	3b01      	subs	r3, #1
 8001a30:	b29a      	uxth	r2, r3
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001a36:	e02b      	b.n	8001a90 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	f003 0302 	and.w	r3, r3, #2
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d112      	bne.n	8001a6c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4a:	881a      	ldrh	r2, [r3, #0]
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a56:	1c9a      	adds	r2, r3, #2
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001a60:	b29b      	uxth	r3, r3
 8001a62:	3b01      	subs	r3, #1
 8001a64:	b29a      	uxth	r2, r3
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	86da      	strh	r2, [r3, #54]	; 0x36
 8001a6a:	e011      	b.n	8001a90 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001a6c:	f7fe ff10 	bl	8000890 <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	69bb      	ldr	r3, [r7, #24]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	683a      	ldr	r2, [r7, #0]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d803      	bhi.n	8001a84 <HAL_SPI_Transmit+0x168>
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a82:	d102      	bne.n	8001a8a <HAL_SPI_Transmit+0x16e>
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d102      	bne.n	8001a90 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001a8e:	e074      	b.n	8001b7a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001a94:	b29b      	uxth	r3, r3
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d1ce      	bne.n	8001a38 <HAL_SPI_Transmit+0x11c>
 8001a9a:	e04c      	b.n	8001b36 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d002      	beq.n	8001aaa <HAL_SPI_Transmit+0x18e>
 8001aa4:	8afb      	ldrh	r3, [r7, #22]
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d140      	bne.n	8001b2c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	330c      	adds	r3, #12
 8001ab4:	7812      	ldrb	r2, [r2, #0]
 8001ab6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abc:	1c5a      	adds	r2, r3, #1
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ac6:	b29b      	uxth	r3, r3
 8001ac8:	3b01      	subs	r3, #1
 8001aca:	b29a      	uxth	r2, r3
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001ad0:	e02c      	b.n	8001b2c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	f003 0302 	and.w	r3, r3, #2
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d113      	bne.n	8001b08 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	330c      	adds	r3, #12
 8001aea:	7812      	ldrb	r2, [r2, #0]
 8001aec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af2:	1c5a      	adds	r2, r3, #1
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001afc:	b29b      	uxth	r3, r3
 8001afe:	3b01      	subs	r3, #1
 8001b00:	b29a      	uxth	r2, r3
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	86da      	strh	r2, [r3, #54]	; 0x36
 8001b06:	e011      	b.n	8001b2c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001b08:	f7fe fec2 	bl	8000890 <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	69bb      	ldr	r3, [r7, #24]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	683a      	ldr	r2, [r7, #0]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d803      	bhi.n	8001b20 <HAL_SPI_Transmit+0x204>
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b1e:	d102      	bne.n	8001b26 <HAL_SPI_Transmit+0x20a>
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d102      	bne.n	8001b2c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001b2a:	e026      	b.n	8001b7a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b30:	b29b      	uxth	r3, r3
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d1cd      	bne.n	8001ad2 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001b36:	69ba      	ldr	r2, [r7, #24]
 8001b38:	6839      	ldr	r1, [r7, #0]
 8001b3a:	68f8      	ldr	r0, [r7, #12]
 8001b3c:	f000 f8b2 	bl	8001ca4 <SPI_EndRxTxTransaction>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d002      	beq.n	8001b4c <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	2220      	movs	r2, #32
 8001b4a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d10a      	bne.n	8001b6a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001b54:	2300      	movs	r3, #0
 8001b56:	613b      	str	r3, [r7, #16]
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	68db      	ldr	r3, [r3, #12]
 8001b5e:	613b      	str	r3, [r7, #16]
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	613b      	str	r3, [r7, #16]
 8001b68:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d002      	beq.n	8001b78 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	77fb      	strb	r3, [r7, #31]
 8001b76:	e000      	b.n	8001b7a <HAL_SPI_Transmit+0x25e>
  }

error:
 8001b78:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	2200      	movs	r2, #0
 8001b86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001b8a:	7ffb      	ldrb	r3, [r7, #31]
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3720      	adds	r7, #32
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b088      	sub	sp, #32
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	60f8      	str	r0, [r7, #12]
 8001b9c:	60b9      	str	r1, [r7, #8]
 8001b9e:	603b      	str	r3, [r7, #0]
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001ba4:	f7fe fe74 	bl	8000890 <HAL_GetTick>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bac:	1a9b      	subs	r3, r3, r2
 8001bae:	683a      	ldr	r2, [r7, #0]
 8001bb0:	4413      	add	r3, r2
 8001bb2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001bb4:	f7fe fe6c 	bl	8000890 <HAL_GetTick>
 8001bb8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001bba:	4b39      	ldr	r3, [pc, #228]	; (8001ca0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	015b      	lsls	r3, r3, #5
 8001bc0:	0d1b      	lsrs	r3, r3, #20
 8001bc2:	69fa      	ldr	r2, [r7, #28]
 8001bc4:	fb02 f303 	mul.w	r3, r2, r3
 8001bc8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001bca:	e054      	b.n	8001c76 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bd2:	d050      	beq.n	8001c76 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001bd4:	f7fe fe5c 	bl	8000890 <HAL_GetTick>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	69bb      	ldr	r3, [r7, #24]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	69fa      	ldr	r2, [r7, #28]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d902      	bls.n	8001bea <SPI_WaitFlagStateUntilTimeout+0x56>
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d13d      	bne.n	8001c66 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	685a      	ldr	r2, [r3, #4]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001bf8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001c02:	d111      	bne.n	8001c28 <SPI_WaitFlagStateUntilTimeout+0x94>
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c0c:	d004      	beq.n	8001c18 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c16:	d107      	bne.n	8001c28 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c26:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c30:	d10f      	bne.n	8001c52 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c40:	601a      	str	r2, [r3, #0]
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001c50:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	2201      	movs	r2, #1
 8001c56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001c62:	2303      	movs	r3, #3
 8001c64:	e017      	b.n	8001c96 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d101      	bne.n	8001c70 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	3b01      	subs	r3, #1
 8001c74:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	689a      	ldr	r2, [r3, #8]
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	4013      	ands	r3, r2
 8001c80:	68ba      	ldr	r2, [r7, #8]
 8001c82:	429a      	cmp	r2, r3
 8001c84:	bf0c      	ite	eq
 8001c86:	2301      	moveq	r3, #1
 8001c88:	2300      	movne	r3, #0
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	79fb      	ldrb	r3, [r7, #7]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d19b      	bne.n	8001bcc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001c94:	2300      	movs	r3, #0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3720      	adds	r7, #32
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	20000000 	.word	0x20000000

08001ca4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b086      	sub	sp, #24
 8001ca8:	af02      	add	r7, sp, #8
 8001caa:	60f8      	str	r0, [r7, #12]
 8001cac:	60b9      	str	r1, [r7, #8]
 8001cae:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	9300      	str	r3, [sp, #0]
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	2180      	movs	r1, #128	; 0x80
 8001cba:	68f8      	ldr	r0, [r7, #12]
 8001cbc:	f7ff ff6a 	bl	8001b94 <SPI_WaitFlagStateUntilTimeout>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d007      	beq.n	8001cd6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cca:	f043 0220 	orr.w	r2, r3, #32
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e000      	b.n	8001cd8 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8001cd6:	2300      	movs	r3, #0
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3710      	adds	r7, #16
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <__libc_init_array>:
 8001ce0:	b570      	push	{r4, r5, r6, lr}
 8001ce2:	2500      	movs	r5, #0
 8001ce4:	4e0c      	ldr	r6, [pc, #48]	; (8001d18 <__libc_init_array+0x38>)
 8001ce6:	4c0d      	ldr	r4, [pc, #52]	; (8001d1c <__libc_init_array+0x3c>)
 8001ce8:	1ba4      	subs	r4, r4, r6
 8001cea:	10a4      	asrs	r4, r4, #2
 8001cec:	42a5      	cmp	r5, r4
 8001cee:	d109      	bne.n	8001d04 <__libc_init_array+0x24>
 8001cf0:	f000 f822 	bl	8001d38 <_init>
 8001cf4:	2500      	movs	r5, #0
 8001cf6:	4e0a      	ldr	r6, [pc, #40]	; (8001d20 <__libc_init_array+0x40>)
 8001cf8:	4c0a      	ldr	r4, [pc, #40]	; (8001d24 <__libc_init_array+0x44>)
 8001cfa:	1ba4      	subs	r4, r4, r6
 8001cfc:	10a4      	asrs	r4, r4, #2
 8001cfe:	42a5      	cmp	r5, r4
 8001d00:	d105      	bne.n	8001d0e <__libc_init_array+0x2e>
 8001d02:	bd70      	pop	{r4, r5, r6, pc}
 8001d04:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001d08:	4798      	blx	r3
 8001d0a:	3501      	adds	r5, #1
 8001d0c:	e7ee      	b.n	8001cec <__libc_init_array+0xc>
 8001d0e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001d12:	4798      	blx	r3
 8001d14:	3501      	adds	r5, #1
 8001d16:	e7f2      	b.n	8001cfe <__libc_init_array+0x1e>
 8001d18:	08001d7c 	.word	0x08001d7c
 8001d1c:	08001d7c 	.word	0x08001d7c
 8001d20:	08001d7c 	.word	0x08001d7c
 8001d24:	08001d80 	.word	0x08001d80

08001d28 <memset>:
 8001d28:	4603      	mov	r3, r0
 8001d2a:	4402      	add	r2, r0
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d100      	bne.n	8001d32 <memset+0xa>
 8001d30:	4770      	bx	lr
 8001d32:	f803 1b01 	strb.w	r1, [r3], #1
 8001d36:	e7f9      	b.n	8001d2c <memset+0x4>

08001d38 <_init>:
 8001d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d3a:	bf00      	nop
 8001d3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d3e:	bc08      	pop	{r3}
 8001d40:	469e      	mov	lr, r3
 8001d42:	4770      	bx	lr

08001d44 <_fini>:
 8001d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d46:	bf00      	nop
 8001d48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d4a:	bc08      	pop	{r3}
 8001d4c:	469e      	mov	lr, r3
 8001d4e:	4770      	bx	lr
